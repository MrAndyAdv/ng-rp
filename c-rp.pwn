#include <a_samp>
#include <crashdetect>
//#include <profiler>
#include <a_mysql>
#include <dc_cmd>
#include <sscanf2>
#include <foreach>
#include <dc_foreach_veh>
#include <streamer>
#include <3dmenu>
#include <easyDialog>
#include <eSelection>
#include <messagebox>
#include <h_colors>
#include <PlayerToPlayer>
#include <strlib>
#include <actor_streamer>
#include <acuf>
#include <mxdate>
#include <TOTP>
#include "../include/furniture_list.inc"
#include "../include/vehicle_sells.inc"

#undef MAX_PLAYERS
#define MAX_PLAYERS 250


#define GameModeText "TRW-RP "GameModeVersion""
#define GameModeVersion "Rev 5.3.717"
#define GameModeUpdate "05.06.2019"
#define ServerName "[0.3DL] TRW Roleplay | trw-rp.ro | 05.05.2020"
#define MAP_NAME "Los Santos"

#define Range_VShort      4.0
#define Range_Short       4.0
#define Range_Normal      20.0
#define Range_Long        40.0
#define Range_VLong       100.0

#define SetInterior(%0,%1) \
	SetPlayerInterior(%0,%1)

#define GetInterior(%0) \
	GetPlayerInterior(%0)

#define SetWorld(%0,%1) \
	SetPlayerVirtualWorld(%0,%1)

#define GetWorld(%0) \
	GetPlayerVirtualWorld(%0)

#define PlayerToPoint(%0,%1,%2,%3,%4) \
	IsPlayerInRangeOfPoint(%1,%0,%2,%3,%4)

#define GetName(%0) \
	PlayerInfo[%0][pUsername]

#define GetNameEx(%0) \
	PlayerInfo[%0][pUsername_]

#define GetNameWithMask(%0) \
	PlayerInfo[%0][pMaskname]

#define GetAccName(%0) \
	PlayerInfo[%0][pAccname]

#define SCM \
	SendClientMessage

#define SCMALL \
	SendClientMessageToAll

#define SendServerMessage(%0,%1) \
	SendClientMessageEx(%0, 0xAFAFAFFF, "SERVER:{FFFFFF} "%1)

#define SendSyntaxMessage(%0,%1) \
	SendClientMessageEx(%0, 0xAFAFAFFF, "Sintaxa:{FFFFFF} "%1)

#define SendErrorMessage(%0,%1) \
	SendClientMessageEx(%0, COLOR_LIGHTRED, %1)

#define SendNotConnected(%0) \
    SendClientMessageEx(%0, COLOR_LIGHTRED, "Jucatorul nu este conectat.")

#define SendNotNearPlayer(%0) \
    SendClientMessageEx(%0, COLOR_LIGHTRED, "Jucatorul nu este in apropierea ta.")

#define SendNotInVehicle(%0) \
    SendClientMessageEx(%0, COLOR_LIGHTRED, "Nu te afli intr-un vehicul.")

#define SendNotCash(%0) \
    SendClientMessageEx(%0, COLOR_LIGHTRED, "Nu ai suficienti bani.")

#define SendNoteMessage(%0,%1) \
	SendClientMessageEx(%0, -1, "Nota: "%1)

#define SendErrorRadioMessage(%0,%1) \
	SendClientMessageEx(%0, 0xAFAFAFFF, "[Radio]:{DADADA} "%1)

#define SendCellMessage(%0,%1) \
	SendClientMessageEx(%0, 0xAFAFAFFF, %1)

#define SendFishMessage(%0,%1) \
	SendClientMessageEx(%0, -1, "FISH: "%1)

//centura
new Seatbelt[MAX_PLAYERS];

//Menu BUY INTERIOR
new Menu: buy_interior;
//??????? GZ
new gz_fish[4];
new Float: fish_pos[4][4] =
{
	{349.0, -2089.5, 410.0, -2078.5},
	{-46.0, -2400.5, 937.0, -2089.5},
	{-147.0, -2090.5, 52.0, -1666.5},
	{79.0, -2982.5, 1126.0, -2454.5}
};

stock Fish_Init()
{
	for(new i; i != 4; i++)
	{
    	gz_fish[i] = GangZoneCreate(fish_pos[i][0], fish_pos[i][1], fish_pos[i][2], fish_pos[i][3]);
    	GangZoneHideForAll(gz_fish[i]);
	}
	return 1;
}

//??????? ?????????????
new obj_ship[11],
	obj_gate[4],
	obj_lamp[8],
	ship_arrived,
	ship_depart,
	ship_next,
	ship_docked,
	time_truck;

stock Ship_Init()
{
    ship_docked = 1;
    ship_arrived = gettime();
	ship_depart = gettime() + 2400;
	ship_next = gettime() + 2400 + 340;

    obj_lamp[0] = CreateDynamicObject(19123, 2810.646240, -2390.074218, 13.175701, 0.000000, 0.000000, 0.000000, 0, 0);
	obj_lamp[1] = CreateDynamicObject(19123, 2810.652832, -2381.859375, 13.175693, 0.000000, 0.000000, 0.000000, 0, 0);
	obj_lamp[2] = CreateDynamicObject(19123, 2810.635986, -2394.476562, 13.195693, 0.000000, 0.000000, 0.000000, 0, 0);
	obj_lamp[3] = CreateDynamicObject(19123, 2810.634765, -2386.070800, 13.185685, 0.000000, 0.000000, 0.000000, 0, 0);
	obj_lamp[4] = CreateDynamicObject(19123, 2810.649414, -2431.452880, 13.195693, 0.000000, 0.000007, 0.000000, 0, 0);
	obj_lamp[5] = CreateDynamicObject(19123, 2810.649414, -2444.330322, 13.195693, 0.000000, 0.000007, 0.000000, 0, 0);
	obj_lamp[6] = CreateDynamicObject(19123, 2810.649414, -2439.667724, 13.195693, 0.000000, 0.000007, 0.000000, 0, 0);
	obj_lamp[7] = CreateDynamicObject(19123, 2810.649414, -2435.664306, 13.195693, 0.000000, 0.000007, 0.000000, 0, 0);

	obj_gate[0] = CreateDynamicObject(3069, 2811.04248, -2391.13989, 12.62090,   -15.00000, 0.00000, -90.00000, 0, 0);
	obj_gate[1] = CreateDynamicObject(3069, 2811.04248, -2385.13550, 12.62090,   -15.00000, 0.00000, -90.00000, 0, 0);
	obj_gate[2] = CreateDynamicObject(3069, 2811.04248, -2441.09058, 12.62090,   -15.00000, 0.00000, -90.00000, 0, 0);
	obj_gate[3] = CreateDynamicObject(3069, 2811.04248, -2435.13501, 12.62090,   -15.00000, 0.00000, -90.00000, 0, 0);

    obj_ship[0] = CreateDynamicObject(5157, 2838.03906, -2532.77344, 17.02344,   0.00000, 0.00000, 270.00000, 0, 0);
	obj_ship[1] = CreateDynamicObject(5166, 2829.95313, -2479.57031, 5.26563,   0.00000, 0.00000, 270.00000, 0, 0);
	obj_ship[2] = CreateDynamicObject(5160, 2829.95313, -2479.57031, 5.26563,   0.00000, 0.00000, 270.00000, 0, 0);
	obj_ship[3] = CreateDynamicObject(5167, 2838.03125, -2371.95313, 7.29688,   0.00000, 0.00000, 270.00000, 0, 0);
	obj_ship[4] = CreateDynamicObject(5155, 2838.02344, -2358.47656, 21.31250,   0.00000, 0.00000, 270.00000, 0, 0);
	obj_ship[5] = CreateDynamicObject(5158, 2837.77344, -2334.47656, 11.99220,   0.00000, 0.00000, 0.00000, 0, 0);
	obj_ship[6] = CreateDynamicObject(3724, 2838.19531, -2407.14063, 29.31250,   0.00000, 0.00000, 270.00000, 0, 0);
	obj_ship[7] = CreateDynamicObject(3724, 2838.19531, -2488.66406, 29.31250,   0.00000, 0.00000, 270.00000, 0, 0);
	obj_ship[8] = CreateDynamicObject(5336, 2829.95313, -2479.57031, 5.26560,   0.00000, 0.00000, 0.00000, 0, 0);
	obj_ship[9] = CreateDynamicObject(5156, 2838.03906, -2423.88281, 10.96094,   0.00000, 0.00000, 270.00000, 0, 0);
	obj_ship[10] = CreateDynamicObject(5154, 2838.14063, -2447.84375, 15.75000,   0.00000, 0.00000, 270.00000, 0, 0);

	time_truck = 3600;
	return 1;
}

new Float: first_spawn[4][4] =
{
    {1641.8870,-2334.1343,-2.6797,1.0000}, // Aeroport Los Santos
    {1754.6514,-1894.3185,13.5569,270.1329}, //  Unity
	{2221.8096,-1154.9639,25.7536,355.9980}, // Jefferson
	{817.6295,-1348.4182,13.5266,40.4997} //  Market Station
};

//iPhone
new PlayerText: TD_iphone[MAX_PLAYERS][24],
	PlayerText: TD_iphone_block[MAX_PLAYERS][6],
	PlayerText: TD_iphone_button[MAX_PLAYERS][6],
	PlayerText: TD_iphone_name[MAX_PLAYERS],
	PlayerText: TD_iphone_menu[MAX_PLAYERS][7],
	PlayerText: TD_iphone_setting[MAX_PLAYERS][11],
	PlayerText: TD_iphone_list[MAX_PLAYERS][16],
	PlayerText: TD_iphone_contact[MAX_PLAYERS][5],
	PlayerText: TD_iphone_keypad[MAX_PLAYERS][34];

new phone_window[3] = {
    -1061109505,
    0xFFCC66FF,
    0x66B3FFFF
};

new phone_panel[3] = {
    -2139062017,
    0xE69900FF,
    0x1A8CFFFF
};

new phone_ringtons[4] = {
    23000,
    20804,
    20600,
    19600
};

new phone_model[5] = {
	18868,
	18866,
	18870,
	18871,
	18874
};

new phone_model_color[5] = {
	0x000000FF,
 	0x0F00A2FF,
 	0xBF0101FF,
 	0x006400FF,
 	0xFFFFFFFF
};

enum GPS_ENUM
{
	Float: gpsX,
	Float: gpsY,
	Float: gpsZ,
	gpsName[24]
};

new gps_location[25][GPS_ENUM] =
{
	{1479.1593,-1741.9025,13.5469, "Primarie"},
	{1544.5807,-1675.2900,13.5587, "Politie"},
	{1314.8073,-921.7766,38.0479, "Statie de pompieri"},
	{1187.9469,-1324.1838,13.5592, "Spital"},
	{1645.8088,-2325.5740,-2.6797, "Aeroport"},
	{1129.7343,-1412.8407,13.6160, "Mall (Verona)"},
	{369.7311,-2043.1614,7.6719, "Carnaval"},
	{548.9447,-1276.1792,17.2482, "Dealership"},
	{592.4351,-1247.7162,18.1278, "Banca (Rodeo)"},
	{1572.8501,-1330.9803,16.4844, "Banca centrala"},
	{2866.9553,-1406.7509,11.0105, "Banca (East Beach)"},
	{644.7441,-1356.0962,13.5637, "San Andreas News"},
    {2219.0261,-1142.7472,25.7969, "Motel (Jefferson)"},
	{1811.3171,-1888.6415,13.4079, "Gara"},
	{1290.9767,-1549.5199,13.5469,"Scoala de soferi"},
	{1765.1187,-2280.2227,-2.5845, "Scoala de aviatie"},
	{634.5853,-571.7202,16.3359, "SASD"},
	{135.2714,1964.8595,19.4958, "Scoala de corectie"},
	{680.8654,-528.7534,16.1886, "Dillimore"},
	{233.0554,-139.7697,1.4297, "Blueberry"},
	{1289.7198,249.6513,19.4073, "Montgomery"},
	{2343.8179,16.4910,26.3359, "Palomino Creek"},
	{-79.6181,-1130.5649,1.0781, "Camionagiu (job)"},
	{1936.3013,-1859.6411,13.5619, "Mecanic (job)"},
	{1167.7897,-953.5602,42.7315, "Taximetrist (job)"}
};

enum LAST_ADVERT_ENUM
{
	advertText[156],
	advertTime
}

#define MAX_LAST_ADVERT 10
new AdvertInfo[MAX_LAST_ADVERT][LAST_ADVERT_ENUM];

enum PHONE_ENUM
{
	phoneCreated,
	phoneBlock,
	phoneContact,
	phoneSMS,
	phoneHistory,
	phoneKeypad,
	phoneGPS,
    phoneSetting,
	phoneListed[9],
	phoneBlockSMS[3]
};

new PhoneInfo[MAX_PLAYERS][PHONE_ENUM];

#define IsPlayerPhoneCreated(%0) PhoneInfo[%0][phoneCreated]

#define JEFF_JAIL   (1)
#define LSPD_JAIL   (2)
#define PRISON_JAIL (3)
#define SASD_JAIL   (4)

new Float: prison_lspd[2][3] =
{
	{2755.1067,-1111.8510,1028.4935},
	{2754.4041,-1107.6534,1028.4935}
};

new Float: prison_sadoc[20][3] =
{
	{529.2821,-462.5329,919.3973},
	{533.9864,-462.7558,919.3973},
	{538.7690,-462.5498,919.3973},
	{543.5073,-462.6223,919.3973},
	{548.3173,-462.2971,919.3973},
	{553.0486,-462.5840,919.3973},
	{529.3326,-481.8497,919.4027},
	{534.1647,-482.1199,919.4027},
	{538.8668,-482.2083,919.4027},
	{543.5774,-482.1175,919.4027},
	{548.4084,-482.4462,919.4027},
	{553.0802,-482.2829,919.4027},
	{538.6510,-461.6799,915.6733},
	{543.4929,-462.0461,915.6733},
	{548.2507,-461.4220,915.6733},
	{552.9613,-461.2717,915.6733},
	{538.8630,-483.5457,915.6733},
	{543.5722,-483.2266,915.6733},
	{548.3820,-483.2058,915.6733},
	{553.1059,-482.8833,915.6733}
};

new Float: prison_isolate[10][3] =
{
	{-1765.3180,-497.4885,621.1163},
	{-1769.2893,-497.9387,621.1163},
	{-1773.2601,-497.4489,621.1163},
	{-1777.2761,-497.9054,621.1163},
	{-1781.2529,-497.7102,621.1163},
	{-1765.5096,-497.7450,624.7874},
	{-1769.3136,-497.8934,624.7874},
	{-1773.2543,-497.4081,624.7874},
	{-1777.1084,-497.5620,624.7874},
	{-1781.1655,-498.0222,624.7874}
};

new male_skins[177] =
{
    1, 2, 3, 4, 5, 6, 7, 8, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
	26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 42, 43, 44, 46, 47, 48, 49, 50,
	57, 58, 59, 60, 61, 62, 66, 67, 68, 72, 73, 78, 79, 82, 83, 84, 86, 94, 95, 96,
	98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115,
	116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 132, 133, 134, 135,
	136, 137, 142, 143, 144, 146, 147, 153, 154, 155, 156, 158, 159, 160, 161, 162,
 	168, 170, 161, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186,
	187, 188, 189, 200, 202, 206, 208, 210, 212, 213, 217, 220, 221, 222, 223, 227, 228,
	229, 230, 234, 235, 236, 239, 240, 241, 242, 247, 248, 249, 250, 254, 255, 258, 259,
	260, 261, 262, 268, 269, 270, 271, 272, 273, 289, 290, 291, 292, 293, 294, 295,
	296, 297, 299

};

new female_skins[64] =
{
    55, 56, 63, 64, 65, 69, 75, 76, 77, 85,
	87, 88, 89, 90, 91, 93, 129, 130, 131, 141, 148, 150, 151, 152, 157, 169, 172, 178,
	190, 191, 192, 193, 194, 195, 198, 201, 207, 211, 214, 215, 216, 219, 224, 225, 226,
 	233, 237, 238, 243, 244, 245, 256, 263, 9, 10, 11, 12, 13, 31, 39, 40, 41, 53, 54
};

new restart_time;
new license_exam_cp[19],
	fly_exam_cp[10];

new Float: license_exam_coord[19][3] =
{
    {1295.0454,-1569.1311,13.2596},
    {1295.3289,-1803.8004,13.2579},
	{1269.9792,-1840.3126,13.2648},
    {1215.4397,-1839.9091,13.2572},
 	{1257.3105,-1854.9916,13.2578},
    {1314.7382,-1808.8160,13.2578},
    {1314.3463,-1752.5708,13.2578},
    {1480.8903,-1734.7009,13.2578},
    {1624.4576,-1734.4857,13.2578},
    {1809.8383,-1734.3098,13.2656},
  	{1819.8312,-1808.3973,13.2733},
	{1716.9615,-1809.9030,13.2317},
    {1664.3257,-1867.9613,13.2576},
  	{1516.5793,-1869.6187,13.2578},
    {1366.0972,-1867.8605,13.2578},
    {1314.4510,-1812.6163,13.2578},
    {1350.3124,-1396.4467,12.9809},
    {1338.5071,-1440.1036,13.0069},
    {1297.3666,-1532.0337,13.0878}
};

new Float: fly_exam_coord[10][3] =
{
	{1799.6403, -2253.3269, 41.0483},
	{1735.2058,-2151.1125,64.9770},
	{1722.7869,-1964.8521,69.8375},
	{1772.3292,-1808.5341,76.2515},
	{1871.6609,-1725.9799,64.2006},
	{1935.5216,-1594.7958,63.1090},
	{1847.6520,-1477.8009,64.2859},
	{1697.8094,-1411.9990,111.9126},
	{1582.0636,-1322.9044,104.7356},
	{1765.6816,-2286.6672,26.9876}
};
//=========Calls=========//
new Text3D:veicolo_callsign_testo[MAX_VEHICLES];
//=========Damage========//
#define MAX_DAMAGES 55
#define MAX_WEAP 4 //????? ??????
enum DAMAGE_ENUM
{
	damageOn,
	damageWeapon,
	damageBodypart,
	Float:damageAmount,
	damageArmour
}

new DamageInfo[MAX_PLAYERS][MAX_DAMAGES][DAMAGE_ENUM];
#define BODY_PART_TORSO 3
#define BODY_PART_GROIN 4
#define BODY_PART_RIGHT_ARM 5
#define BODY_PART_LEFT_ARM 6
#define BODY_PART_RIGHT_LEG 7
#define BODY_PART_LEFT_LEG 8
#define BODY_PART_HEAD 9
//=========COLORS=========//
#define COL_WHITE "FFFFFF"
#define COL_RED "F81414"
#define COL_LIGHTBLUE "00CED1"
#define COL_TITLE "25affe" // 0
#define COL_GREY "C3C3C3" // 1
#define COL_WHITE "FFFFFF" // 2
#define COL_RED "F81414" // 3
#define COL_GREEN "00FF22" // 4
#define COL_LIGHTBLUE "00CED1" // 5
#define COL_ORANGE "FF9900" // 6
#define COL_BLACK "000000"

#define COLOR_DOC "0x9966FF"
#define COLOR_LIGHTRED 0xFF6347AA
//=========Factions=========//
#define LSPD 1
#define LSFD 2
#define SASD 3
#define DOCS 4
#define SAN 5
#define CITY 6

#define FACTION_LEGAL 1
#define FACTION_GANG 2
#define FACTION_MAFIA 3
#define FACTION_CIVIL 4
//=========Factions=========//
//=========Jobs=========//
#define JOBLESS 0
#define JOB_TRUCKER 1
#define JOB_MECHANIC 2
#define JOB_TAXI 3
#define JOB_DRUGDEALER 4
#define JOB_GUNDEALER 5
#define JOB_PIZZA   6
//=========Jobs=========//
#define LEAR_HEARTS 1
#define LEAR_DIAMONDS 2
#define LEAR_CLUBS 3
#define LEAR_SPADES 4

#define MAX_TYPE_CARDS 14
#define MAX_CARDS_FOR_LEAR 4
#define MAX_PLAYER_CURRENT_CARDS 6
//24/7 prices
#define SIGNADSPRICE 3000
#define MOBILEMODELPRICE 1000
//24/7 prices

//MySQL Information
new
	dbHandle,
	bool: mysqllog,
	logs_exit;

/*new SQL_HOST[32],
	SQL_USER[32],
	SQL_DB[32],
	SQL_PASS[32];*/

#define SQL_HOST "localhost"
#define SQL_USER "root"
#define SQL_PASS "VAOfNIrAgTHOPDxiTSpU4MD0sWdPHLx8iRMwOS8vfgU="
#define SQL_DB "server"

/*//#define localhost //????????? ???? ?? ????????


#if defined localhost

#define SQL_HOST "eva.arizona-rp.com"
#define SQL_USER "clrptest"
#define SQL_PASS "65WbLRYzCESa4cVh"
#define SQL_DB "clrptest"

#else

#define SQL_HOST "eva.arizona-rp.com"
#define SQL_USER "clrp"
#define SQL_PASS "djvWQ6vQYJpGnADh"
#define SQL_DB "clrp"

#endif
*/
//MySQL Information
#define INVALID_WEAPON_SLOT_ID -1
#define MAX_ZONE_NAME 28
#define MAXLEN 80
//-------------------------
#define CARLIC_PRICE 150
#define FLYLIC_PRICE 7000
#define TAXILIC_PRICE 250
//==============Dynamic Vehicle Types==============//
#define DMV_VEHICLE 1
#define DMV_HELICOPTER 2
#define WITHSIGNAL_CAR 3
#define DMV_TAXI 4
#define RENT_CAR 5
#define PIZZA_CAR 6
//==============Dynamic Vehicle Types==============//
//==Admin-Levels==//
#define ADMIN_LEVEL_1 1
#define ADMIN_LEVEL_2 2
#define ADMIN_LEVEL_3 3
#define ADMIN_LEVEL_4 4
#define ADMIN_LEVEL_5 5
#define HIGH_ADMIN_LEVEL 6
//==Admin-Levels==//
//Updating PVars - Very useful
#define UpdateIntVar(%0,%1,%2) SetPVarInt(%0, %1, (GetPVarInt(%0, %1) + %2))
#define UpdateFloatVar(%0,%1,%2) SetPVarFloat(%0, %1, (GetPVarFloat(%0, %1) + %2))
//Updating PVars - Very useful

#if !defined KEY_AIM
	#define KEY_AIM 128
#endif
// PRESSING(keyVariable, keys)
#define PRESSING(%0,%1) \
	(%0 & (%1))

#define HOLDING(%0) \
	((newkeys & (%0)) == (%0))

#define PRESSED(%0) \
	(((newkeys & (%0)) == (%0)) && ((oldkeys & (%0)) != (%0)))

#define RELEASED(%0) \
	(((newkeys & (%0)) != (%0)) && ((oldkeys & (%0)) == (%0)))

new fight_id[5] = {FIGHT_STYLE_NORMAL,FIGHT_STYLE_BOXING,FIGHT_STYLE_KUNGFU,FIGHT_STYLE_KNEEHEAD,FIGHT_STYLE_GRABKICK},
	fight_name[5][9] = {"NORMAL","BOXING", "KUNGFU", "KNEEHEAD", "GRABKICK"};

//====Defines====
#define MAX_LABELS 					(50)
#define MAX_JOBS 					(15)
#define MAX_ENTRANCE 				(100)
#define MAX_INTERIORS 				(200)
#define MAX_ATMS 					(50)
#define MAX_HOUSES 					(1800)
#define MAX_GARAGES 				(500)
#define MAX_APART 					(150)
#define MAX_BIZ 					(200)
#define MAX_FURNITURE 				(400)
#define MAX_HOUSE_INVENTORY 		(10)
#define MAX_VEHICLE_INVENTORY 		(10)
#define MAX_FOOD_STAND 				(50)
#define MAX_ITEM_DROPS 				(300)
#define MAX_FOOD_DROPS 				(200)
#define MAX_TRUCK_CARGO 			(70)
#define MAX_TRUCK_PACK 				(25)
#define MAX_CARGO_OBJ 				(100)
#define MAX_TRUCK_PRODUCT 			(25)
#define MAX_APBS 					(100)
#define MAX_FACTIONS 				(15)
#define MAX_CAR_TICKETS 			(10)
#define MAX_PLAYER_TICKETS 			(10)
#define MAX_CCTV    				(50)
#define MAX_TOWERS  				(50)
#define MAX_GATES 					(100)
#define MAX_PLANTS 					(200)
#define MAX_INVENTORY 				(12)
#define MAX_RADIOS 					(1000)
#define MAX_BORTES   				(25)
#define MAX_PAYPHONES   			(100)
//====Defines====
#define MODEL_SELECTION_FURNITURE    (1)
#define MODEL_SELECTION_BUYCLOTHES   (2)
#define MODEL_SELECTION_UNIFORM      (3)
#define MODEL_SELECTION_BORT         (4)
#define MODEL_SELECTION_FA           (5)
#define MODEL_SELECTION_BUYCAR       (6)
#define MODEL_SELECTION_COLOR        (7)
//===========TextDraws===========//
new PlayerText:SpeedText0[MAX_PLAYERS],//HUD
	PlayerText:FuelText0[MAX_PLAYERS],
	PlayerText:SpeedText1[MAX_PLAYERS],
	PlayerText:SpeedText2[MAX_PLAYERS],
	PlayerText:SpeedText3[MAX_PLAYERS],
	PlayerText:RadioDraw0[MAX_PLAYERS],
	PlayerText:ChannelDraw0[MAX_PLAYERS],
	PlayerText:SlotDraw0[MAX_PLAYERS],
	PlayerText:ChannelDraw1[MAX_PLAYERS],
	PlayerText:SlotDraw1[MAX_PLAYERS],
	PlayerText:RadioDraw3[MAX_PLAYERS];


new Text:errormsg[MAX_PLAYERS],
	PlayerText:spectate_TD[MAX_PLAYERS][2],
	PlayerText:TD_job_message[MAX_PLAYERS],
	Text:infotxt[MAX_PLAYERS],
	PlayerText: drug_effect[MAX_PLAYERS];

new drug_effect_color[] =
{
    0xE07F8E20,
    0xFFFFAA20,
	0xF3AEFF20,
	0xFFCE7B20,
	0xCCFFCC20,
	0xA8E05120,
	0xFF1D9820
};

//?????????
new Text: logo;
new Text: TD_restaurant[4],
	PlayerText: TD_restaurant_prod[MAX_PLAYERS][8]; //0-3 - ???????? ????, 4 - 7 - ????????

new Text: TD_vehicle_info[2],
	PlayerText: TD_vehicle_name[MAX_PLAYERS];
//===========TextDraws===========//

//?????????
new max_product[] =
	{4, 4, 4, 3};

new name_order[4][4][32] =
{
    {"Buster", "Double D-Luxe", "Full Rack", "Salad Meal"},
    {"Clukin' Little Meal", "Clukin' Big Meal", "Clukin' Huge Meal", "Salad Meal"},
    {"Moo Kids Meal", "Beef Tower", "Meat Stack", "Salad Meal"},
    {"Small portion", "Medium portion", "Large portion", "?????"}
};

new model_order[4][4] =
{
    {2218, 2219, 2220, 2355},
    {2215, 2216, 2217, 2353},
    {2213, 2214, 2212, 2354},
    {2221, 2223, 2222, 0}
};

//?????????
#define INV_SIGN    		19
#define INV_RADIO   		20
#define INV_MASK    		21
#define INV_BURGER      	35
#define INV_PIZZA       	36
#define INV_CHICKEN     	37
#define INV_HOTDOG      	38
#define INV_GASCAN      	39
#define INV_BOOMBOX     	40
#define INV_SILENCER    	44
#define INV_OPTICS      	45
#define INV_LIGHTER     	47
#define INV_CIGAR       	48
#define INV_DICE        	49
#define INV_CARDS       	50
#define INV_PEN         	51
#define INV_TOOLS       	52
#define INV_AMMO        	53
#define INV_NONE   			54
#define INV_NONE2   		55
#define INV_BEER        	56
#define INV_VODKA       	57
#define INV_COLA        	58
#define INV_WATER       	59
#define INV_WHISKEY     	60
#define INV_BRANDY      	61
#define INV_SODA        	62
#define INV_WINE        	63
#define INV_SEED_GANJA	   	64
#define INV_MED_GANJA       65
#define INV_GANJA           66
#define INV_LSD             67
#define INV_MET             68
#define INV_HEROIN          69
#define INV_COCAINE         70
#define INV_EPHEDRINE       71
#define INV_DIETHYL         72
#define INV_ALKALI          73
#define INV_ACID            74
#define INV_HEAL            75

enum ITEM_ENUM
{
	itemModel,
	itemName[32],
	itemSplit
};

new inventory_items[78][ITEM_ENUM] =
{
	{0,"Nimic", 0},//0
	{331,"Pumnal", 0},//1
	{333,"Crosa de golf", 0},//2
	{334,"Tonfa", 0},//3
	{335,"Cutit", 0},//4
	{336,"Bata de baseball", 0},//5
	{337,"Lopata", 0},//6
	{338,"Bat de piscina", 0},//7
	{339,"Katana", 0},//8
	{341,"Drujba", 0},//9
	{321,"Dildo", 0},//10
	{322,"Dildo", 0},//11
	{323,"Vibrator", 0},//12
	{324,"Vibrator metalic", 0},//13
	{325,"Flori", 0},//14
	{326,"Baston", 0},//15
	{342,"Grenada", 1},//16
	{343,"Fumigena", 1},//17
	{344,"Molotov", 1},//18
	{19792,"Bilet de calatorie", 1},//19
	{19942,"Walkie-talkie", 1},//20
	{19801,"Masca", 1},//21
	{346,"Colt 45", 0},//22
	{347,"Pistol silentios (9mm)", 0},//23
	{348,"Desert Eagle", 0},//24
	{349,"Shotgun", 0},//25
	{350,"Sawn-off Shotgun", 0},//26
	{351,"Combat Shotgun", 0},//27
	{352,"Uzi", 0},//28
	{353,"MP5", 0},//29
	{355,"AK-47", 0},//30
	{356,"M4", 0},//31
	{372,"Tec-9", 0},//32
	{357,"Country Rifle", 0},//33
	{358,"Sniper Rifle", 0},//34
	{19094,"Burger", 1},//35
	{2702,"Pizza", 1},//36
	{2663,"Pui", 1},//37
    {19346,"Hotdog", 1},//38
	{1650,"Canistra", 1},//39
	{2226,"Casetofon", 1},//40
	{365,"Tub cu spray", 0},//41
	{366,"Extinctor", 0},//42
	{367,"Camera", 0},//43
	{2040,"Toba de esapament", 1},//44
	{2040,"Luneta", 1},//45
	{371, "Parasuta", 0},//46
	{19998,"Bricheta", 1},//47
	{19897,"Pachet de tigari", 1},//48
	{1906,"Zar", 1},//49
	{11748,"Pachet de carti", 1},//50
	{3027,"Stilou", 1},//51
	{19921,"Cheie", 1},//52
	{2041,"Gloante", 1},//53
	{19792,"Cartela de acces", 1},//54
	{19792,"Cartela de acces", 1},//55
    {2958,"Bere", 1},//56
    {1668,"Vodka", 1},//57
    {1546,"Cola", 1},//58
    {1455,"Apa", 1},//59
    {1520,"Whiskey", 1},//60
    {19820,"Coniac", 1},//61
    {19346,"Suc", 1},//62
    {1664,"Vin", 1},//63
    {1664,"Seminte de cannabis", 1},//64
    {1578,"Marijuana (medicala)", 1},//65
    {1578,"Marijuana", 1},//66
    {1579,"LSD", 1},//67
    {1576,"Metamfetamina", 1},//68
    {1577,"Heroina", 1},//69
    {1575,"Cocaina", 1},//70
    {1664,"Efedrina", 1},//71
    {1664,"Dietil (anestezic general)", 1},//72
    {1650,"Alcaliu", 1},//73
    {1664,"Acid clorhidric", 1},//74
    {11736,"Trusa de prim ajutor", 1},//75
    {19920,"Voice Register", 1},//76
    {19878,"Skateboard", 1}//77
};


stock ValidWeaponForInventory(item)
{
	switch(item)
	{
		case 1..18, 22..34, 41, 42, 43, 46: return 1;
	}
	return 0;
}

//Advert System
new advert_time = 0;
new request_time = 0;

//Prisoner
new Text3D:PrisonLabel[MAX_PLAYERS];
//Advert System

//PayDay System
new server_hour,
	server_weather = 10,
	server_admins;
//PayDay System

new bool:noooc = true;


//Player stuff
#define LEVEL_EXP	4 //Adding 4 exp every level.

new exicards[0][13] = {"2","3","4","5","6","7","8","9","10","J","Q","K","A"};

new PackCards[MAX_PLAYERS][MAX_TYPE_CARDS];
new PackCardsLears[MAX_PLAYERS][14][MAX_CARDS_FOR_LEAR];

new PlayerSumm[MAX_PLAYERS];
new PlayerSummLear[MAX_PLAYERS][14];
new PlayerCurrentCards[MAX_PLAYERS][MAX_PLAYER_CURRENT_CARDS][2];

enum RADIOS_ENUM
{
	radioID,
	radioChannel,
	radioOwner,
	radioPass[33],
	radioOn
}
new RadiosInfo[MAX_RADIOS][RADIOS_ENUM];

enum CARFIX_ENUM
{
	Float: fixX,
	Float: fixY,
	Float: fixZ,
	fixVW,
	fixInt,
	fixFaction
};
new carfix_faction[8][CARFIX_ENUM] =
{
	{2281.6079,2430.9460,3.2734, 2, 0, LSPD},
	{2511.8965,2353.1189,4.2109, 3, 0, LSPD},
	{2511.8965,2353.1189,4.2109, 5, 0, SASD},
	{2511.8965,2353.1189,4.2109, 6, 0, CITY},
	{1324.8792,-870.6232,39.5781, 0, 0, LSFD},
	{1644.0620,-1342.2043,17.4455, 0, 0, SAN},
	{169.6744,1965.4070,19.2262, 0, 0, DOCS},
	{-76.1787,-1585.4489,2.6172, 0, 0, 7}
};
//============================Tolls============================//
new Float: toll_gate_pos[10][3] =
{
    {607.9684, -1194.2866, 19.0043},//Richman
	{623.9500, -1183.9774, 19.2260},//Richman
 	{39.7039, -1522.9891, 5.1995},//Flint
 	{62.7378, -1539.9891, 5.0639},//Flint
 	{1778.9886, 702.6728, 15.2574},//LV
    {1795.9447, 704.2550, 15.0006},//LV
    {612.53070, 346.59592, 17.92614},//BLR
    {604.37152, 346.88141, 17.92614},//BLR
    {-195.2768,252.2416,12.0781},//BLL
    {-199.5153,260.3405,12.0781}//BLL
};

new Float: toll_gate_rot[10][2] =
{
 	{0.000000, 23.81982421875},
	{0.000000, 214.37744140625},
	{0.000000, 270.67565917969},
	{0.000000, 87.337799072266},
	{0.000000, 348.10229492188},
	{0.000000, 169.43664550781},
	{0.00000, 35.00000},
	{0.00000, 215.92000},
	{0.00000, -14.94000},
	{0.00000, -195.00000}
};

#define TOLL_COST (15)
#define TOLL_DELAY_COP (4)
#define TOLL_OPEN_DISTANCE (3.0)
#define MAX_TOLLS (10)
//============================Tolls============================//

//Tolls
new L_a_RequestAllowedCop,
	L_a_TollObject[MAX_TOLLS];

stock Toll_Init()
{
    /* Richman */
	CreateDynamicObject(966,613.9722900,-1197.7174100,17.4750300,0.0000000,0.0000000,23.8200000); //
	CreateDynamicObject(966,619.4291400,-1181.6597900,18.7250300,0.0000000,0.0000000,214.3770000); //
	CreateDynamicObject(978,602.5300300,-1203.4530000,18.3230000,0.0000000,0.0000000,210.9350000); //
	CreateDynamicObject(978,617.2069700,-1185.0639600,19.8470000,0.0000000,0.0000000,247.3620000); //
	CreateDynamicObject(979,629.5009800,-1175.1540500,19.6140000,0.0000000,0.0000000,210.0000000); //
	CreateDynamicObject(979,615.7869900,-1193.4639900,18.4990000,0.0000000,0.0000000,253.7500000); //
	CreateDynamicObject(4642,613.6110200,-1193.1440400,19.7060000,0.0000000,0.0000000,31.1610000); //
	CreateDynamicObject(4642,619.1859700,-1185.9379900,20.1340000,0.0000000,0.0000000,211.1670000); //
	L_a_TollObject[0] = CreateDynamicObject( 968, 613.8935546875, -1197.7329101563, 18.109180450439, 0.000000, -90.000000, 23.81982421875, -1 );
	L_a_TollObject[1] = CreateDynamicObject( 968, 619.44201660156, -1181.6903076172, 19.525806427002, 0.000000, -90.000000, 214.37744140625, -1 );
 	/* End of Richman */


	/* Flint County */
	CreateDynamicObject(8168,61.2210000,-1532.8769500,5.9830000,0.0000000,0.0000000,6.5240000); //
	CreateDynamicObject(8168,41.4620000,-1529.3620600,6.1950000,0.0000000,0.0000000,186.5530000); //
	CreateDynamicObject(966,35.8897500,-1526.0096400,4.2410600,0.0000000,0.0000000,270.6760000); //
	CreateDynamicObject(966,67.0937300,-1536.8275100,3.9910600,0.0000000,0.0000000,87.3380000); //
	CreateDynamicObject(997,66.2930000,-1547.0909400,4.1310000,0.0000000,0.0000000,82.5240000); //
	CreateDynamicObject(997,34.0650000,-1516.4489700,4.3490000,0.0000000,0.0000000,299.9990000); //
	CreateDynamicObject(997,35.8150000,-1526.3490000,4.2150000,0.0000000,0.0000000,307.6700000); //
	CreateDynamicObject(997,64.8720000,-1533.9429900,4.2220000,0.0000000,0.0000000,312.1550000); //
	CreateDynamicObject(994,51.3200000,-1531.4289600,4.2310000,0.0000000,0.0000000,352.8330000); //
	CreateDynamicObject(994,45.0380000,-1530.6519800,4.2320000,0.0000000,0.0000000,352.8310000); //
   	L_a_TollObject[2] = CreateDynamicObject( 968, 35.838928222656, -1525.9034423828, 5.0012145042419, 0.000000, -90.000000, 270.67565917969, -1 );
 	L_a_TollObject[3] = CreateDynamicObject( 968, 67.116600036621, -1536.8218994141, 4.7504549026489, 0.000000, -90.000000, 87.337799072266, -1 );
  	/* End of Flint County */


	/* Las Venturas*/
	CreateDynamicObject(8168,1789.7659900,703.2520100,15.9380000,1.0070000,3.0090000,98.8260000); //
	CreateDynamicObject(8168,1784.8330100,703.9470200,15.9450000,358.0590000,356.9890000,278.5100000); //
	CreateDynamicObject(966,1781.4122300,697.3253200,14.6369100,0.0000000,0.0000000,348.0900000); //
	CreateDynamicObject(997,1781.7650100,697.2990100,14.6460000,0.0000000,2.9990000,79.9900000); //
	CreateDynamicObject(997,1792.7960200,706.3800000,13.9300000,0.0000000,2.9990000,81.3760000); //
	CreateDynamicObject(966,1793.4289600,709.8798200,13.6369100,0.0000000,0.0000000,169.4370000); //
	CreateDynamicObject(979,1771.3859900,702.2100200,15.0440000,0.0000000,0.0000000,307.2160000); //
	CreateDynamicObject(979,1803.6180400,704.8200100,14.6030000,0.0000000,0.0000000,125.6040000); //
   	L_a_TollObject[4] = CreateDynamicObject( 968, 1781.4133300781, 697.31750488281, 15.420023918152, 0.000000, -90.000000, 348.10229492188, -1 );
 	L_a_TollObject[5] = CreateDynamicObject( 968, 1793.6700439453, 709.84631347656, 14.405718803406, 0.000000, -90.000000, 169.43664550781, -1 );
   	/* End of Las Venturas */

   	// Blueberry right */
	CreateDynamicObject(966, 614.42188, 350.81711, 17.92480, 0.00000, 0.00000, 35.00000);
	CreateDynamicObject(966, 602.91162, 342.59781, 17.92480, 0.00000, 0.00000, 215.92000);
	L_a_TollObject[6] = CreateDynamicObject(968, 614.42188, 350.81711, 18.66520, 0.00000, -90.00000, 35.00000);
	L_a_TollObject[7] = CreateDynamicObject(968, 602.91162, 342.59781, 18.66520, 0.00000, -90.00000, 215.92000);
	// Blueberry right

	// Blueberry left
	CreateDynamicObject(966, -190.35580, 254.64290, 11.07090, 0.00000, 0.00000, 345.00000);
	CreateDynamicObject(966, -204.00880, 258.30411, 11.07090, 0.00000, 0.00000, -195.00000);
	L_a_TollObject[8] = CreateDynamicObject(968, -190.24850, 254.62019, 11.89360, 0.00000, -90.00000, -14.94000);
	L_a_TollObject[9] = CreateDynamicObject(968, -204.10410, 258.34149, 11.89360, 0.00000, -90.00000, -195.00000);
	// Blueberry right
	return 1;
}
//Tolls

//Tog
enum (<<= 1)
{
	togName = 1,
	togOOC,
	togJoin,
	togAdv,
	togGov,
	togPM,
	togAdmCmds,
	togNews,
	togAFK,
	togHUD,
	togFaction,
	togTester,
	togEnter,
	togService
}

//Mechanic variables
new RepairOffer[MAX_PLAYERS],
	RepairToVehicle[MAX_PLAYERS],
	RepairService[MAX_PLAYERS],
	RepairTime[MAX_PLAYERS],
	RepairTowTruck[MAX_PLAYERS],
	RefillPrice[MAX_PLAYERS],
	RefillOffer[MAX_PLAYERS];
//Mechanic variables

//Taxi variables
new bool:TaxiDuty[MAX_PLAYERS],
	TaxiFare[MAX_PLAYERS],
	TaxiMoney[MAX_PLAYERS],
	TaxiMade[MAX_PLAYERS],
	TaxiPassenger[MAX_PLAYERS];
//Taxi variables



new
	bool:maskOn[MAX_PLAYERS char],
	infotxt_expire[MAX_PLAYERS char],

	JackingEngine[MAX_PLAYERS],
	JackingLock[MAX_PLAYERS],
	JackingVehicle[MAX_PLAYERS],
	bool:OnAnim[MAX_PLAYERS char],
	people_blocking[MAX_PLAYERS][MAX_PLAYERS];

//Vehicle's stuff
new Text3D:status_update[MAX_VEHICLES];

new VehicleColoursTableRGBA[256] = {
// The existing colours from San Andreas
0x000000FF, 0xF5F5F5FF, 0x2A77A1FF, 0x840410FF, 0x263739FF, 0x86446EFF, 0xD78E10FF, 0x4C75B7FF, 0xBDBEC6FF, 0x5E7072FF,
0x46597AFF, 0x656A79FF, 0x5D7E8DFF, 0x58595AFF, 0xD6DAD6FF, 0x9CA1A3FF, 0x335F3FFF, 0x730E1AFF, 0x7B0A2AFF, 0x9F9D94FF,
0x3B4E78FF, 0x732E3EFF, 0x691E3BFF, 0x96918CFF, 0x515459FF, 0x3F3E45FF, 0xA5A9A7FF, 0x635C5AFF, 0x3D4A68FF, 0x979592FF,
0x421F21FF, 0x5F272BFF, 0x8494ABFF, 0x767B7CFF, 0x646464FF, 0x5A5752FF, 0x252527FF, 0x2D3A35FF, 0x93A396FF, 0x6D7A88FF,
0x221918FF, 0x6F675FFF, 0x7C1C2AFF, 0x5F0A15FF, 0x193826FF, 0x5D1B20FF, 0x9D9872FF, 0x7A7560FF, 0x989586FF, 0xADB0B0FF,
0x848988FF, 0x304F45FF, 0x4D6268FF, 0x162248FF, 0x272F4BFF, 0x7D6256FF, 0x9EA4ABFF, 0x9C8D71FF, 0x6D1822FF, 0x4E6881FF,
0x9C9C98FF, 0x917347FF, 0x661C26FF, 0x949D9FFF, 0xA4A7A5FF, 0x8E8C46FF, 0x341A1EFF, 0x6A7A8CFF, 0xAAAD8EFF, 0xAB988FFF,
0x851F2EFF, 0x6F8297FF, 0x585853FF, 0x9AA790FF, 0x601A23FF, 0x20202CFF, 0xA4A096FF, 0xAA9D84FF, 0x78222BFF, 0x0E316DFF,
0x722A3FFF, 0x7B715EFF, 0x741D28FF, 0x1E2E32FF, 0x4D322FFF, 0x7C1B44FF, 0x2E5B20FF, 0x395A83FF, 0x6D2837FF, 0xA7A28FFF,
0xAFB1B1FF, 0x364155FF, 0x6D6C6EFF, 0x0F6A89FF, 0x204B6BFF, 0x2B3E57FF, 0x9B9F9DFF, 0x6C8495FF, 0x4D8495FF, 0xAE9B7FFF,
0x406C8FFF, 0x1F253BFF, 0xAB9276FF, 0x134573FF, 0x96816CFF, 0x64686AFF, 0x105082FF, 0xA19983FF, 0x385694FF, 0x525661FF,
0x7F6956FF, 0x8C929AFF, 0x596E87FF, 0x473532FF, 0x44624FFF, 0x730A27FF, 0x223457FF, 0x640D1BFF, 0xA3ADC6FF, 0x695853FF,
0x9B8B80FF, 0x620B1CFF, 0x5B5D5EFF, 0x624428FF, 0x731827FF, 0x1B376DFF, 0xEC6AAEFF, 0x000000FF,
// SA-MP extended colours (0.3x)
0x177517FF, 0x210606FF, 0x125478FF, 0x452A0DFF, 0x571E1EFF, 0x010701FF, 0x25225AFF, 0x2C89AAFF, 0x8A4DBDFF, 0x35963AFF,
0xB7B7B7FF, 0x464C8DFF, 0x84888CFF, 0x817867FF, 0x817A26FF, 0x6A506FFF, 0x583E6FFF, 0x8CB972FF, 0x824F78FF, 0x6D276AFF,
0x1E1D13FF, 0x1E1306FF, 0x1F2518FF, 0x2C4531FF, 0x1E4C99FF, 0x2E5F43FF, 0x1E9948FF, 0x1E9999FF, 0x999976FF, 0x7C8499FF,
0x992E1EFF, 0x2C1E08FF, 0x142407FF, 0x993E4DFF, 0x1E4C99FF, 0x198181FF, 0x1A292AFF, 0x16616FFF, 0x1B6687FF, 0x6C3F99FF,
0x481A0EFF, 0x7A7399FF, 0x746D99FF, 0x53387EFF, 0x222407FF, 0x3E190CFF, 0x46210EFF, 0x991E1EFF, 0x8D4C8DFF, 0x805B80FF,
0x7B3E7EFF, 0x3C1737FF, 0x733517FF, 0x781818FF, 0x83341AFF, 0x8E2F1CFF, 0x7E3E53FF, 0x7C6D7CFF, 0x020C02FF, 0x072407FF,
0x163012FF, 0x16301BFF, 0x642B4FFF, 0x368452FF, 0x999590FF, 0x818D96FF, 0x99991EFF, 0x7F994CFF, 0x839292FF, 0x788222FF,
0x2B3C99FF, 0x3A3A0BFF, 0x8A794EFF, 0x0E1F49FF, 0x15371CFF, 0x15273AFF, 0x375775FF, 0x060820FF, 0x071326FF, 0x20394BFF,
0x2C5089FF, 0x15426CFF, 0x103250FF, 0x241663FF, 0x692015FF, 0x8C8D94FF, 0x516013FF, 0x090F02FF, 0x8C573AFF, 0x52888EFF,
0x995C52FF, 0x99581EFF, 0x993A63FF, 0x998F4EFF, 0x99311EFF, 0x0D1842FF, 0x521E1EFF, 0x42420DFF, 0x4C991EFF, 0x082A1DFF,
0x96821DFF, 0x197F19FF, 0x3B141FFF, 0x745217FF, 0x893F8DFF, 0x7E1A6CFF, 0x0B370BFF, 0x27450DFF, 0x071F24FF, 0x784573FF,
0x8A653AFF, 0x732617FF, 0x319490FF, 0x56941DFF, 0x59163DFF, 0x1B8A2FFF, 0x38160BFF, 0x041804FF, 0x355D8EFF, 0x2E3F5BFF,
0x561A28FF, 0x4E0E27FF, 0x706C67FF, 0x3B3E42FF, 0x2E2D33FF, 0x7B7E7DFF, 0x4A4442FF, 0x28344EFF
};
//Vehicle's stuff

#define MAX_CHARACTERS 3
new login_char_id[MAX_PLAYERS][MAX_CHARACTERS],
	login_char_name[MAX_PLAYERS][MAX_CHARACTERS][MAX_PLAYER_NAME+1];

//Forwards
forward LoadDynamicTowers();
forward LoadDynamicGarage();
forward LoadDynamicLabels();
forward LoadDynamicEntrance();
forward LoadDynamicATMS();
forward LoadDynamicTeles();
forward LoadDynamicObjects();
forward LoadDynamicGasStations();
forward LoadDynamicBanks();
forward LoadDynamicCars();
forward LoadDynamicHouses();
forward LoadDynamicApartment();
forward LoadDynamicBiz();
forward LoadDynamicTruckCargo();
forward LoadDynamicStands();
forward LoadDynamicAPB();
forward LoadDynamicFactions();
forward LoadDynamicJobs();
forward LoadDynamicRadios();
forward LoadDynamicGates();
forward LoadDynamicCCTV();
forward LoadDynamicPlants();
forward LoadDynamicPayphones();

new Text: zond_cam[11];

//Enums and data
enum ERROR_ENUM
{
	eMsg[80],
	eExpire

}
new ErrorInfo[MAX_PLAYERS][3][ERROR_ENUM];

enum TOLL_ENUM
{
	E_tLocked,  // 0 & 1 = Richhman, 2 & 3 = Flint, 4 & 5 = LV, 6 & 7 = BlueBerry right
	E_tOpenTime // 0 & 1 = Richhman, 2 & 3 = Flint, 4 & 5 = LV, 6 & 7 = BlueBerry right
}
new aTolls[MAX_TOLLS][TOLL_ENUM];

//========================BoomBox URL's========================//
enum BOOMBOX_ENUM
{
	boomboxName[64],
	boomboxUrl[156]
}

new RADIO_STATIONS[3][15][BOOMBOX_ENUM] =
{
	{
		{"Easy Hits Florida", "https://www.internet-radio.com/servers/tools/playlistgenerator/?u=http://us1.internet-radio.com:8180/listen.pls&t=.m3u"},
		{"RADIO 24", "https://www.internet-radio.com/servers/tools/playlistgenerator/?u=http://uk2.internet-radio.com:8080/listen.pls&t=.m3u"},
		{"Dance UK Radio", "https://www.internet-radio.com/servers/tools/playlistgenerator/?u=http://uk2.internet-radio.com:30252/listen.pls&t=.m3u"},
		{"EDM CLUB MUSIC FLORIDA", "https://www.internet-radio.com/servers/tools/playlistgenerator/?u=http://us1.internet-radio.com:8273/listen.pls&t=.m3u"},
		{"Psy FM", "https://www.internet-radio.com/servers/tools/playlistgenerator/?u=http://81.88.36.42:8030/listen.pls&t=.m3u"},
		{"181.FM Good Time Oldies", "https://www.internet-radio.com/servers/tools/playlistgenerator/?u=http://uplink.duplexfx.com:8046/listen.pls&t=.m3u"},
		{"PONdENDS", "https://www.internet-radio.com/servers/tools/playlistgenerator/?u=http://s7.voscast.com:7000/listen.pls&t=.m3u"},
		{"DnBHeaven", "https://www.internet-radio.com/servers/tools/playlistgenerator/?u=http://dnbheaven.com:8000/listen.pls&t=.m3u"},
		{"Bassjunkees","https://www.internet-radio.com/servers/tools/playlistgenerator/?u=http://space.ducks.invasion.started.at.bassjunkees.com:8442/listen.pls&t=.m3u"},
		{"1.FM ABSOLUTE TOP 40", "https://www.internet-radio.com/servers/tools/playlistgenerator/?u=http://69.46.90.245:8078/listen.pls&t=.m3u"},
		{"ChartHits", "https://www.internet-radio.com/servers/tools/playlistgenerator/?u=http://95.141.24.3:80/listen.pls&t=.m3u"},
		{"181.FM Energy 98", "https://www.internet-radio.com/servers/tools/playlistgenerator/?u=http://uplink.duplexfx.com:8800/listen.pls&t=.m3u"},
		{"DRUMSTEP", "http://www.internet-radio.com/servers/tools/playlistgenerator/?u=http://95.141.24.54:80/listen.pls&t=.m3u"},
		{"Sub FM", "http://www.internet-radio.com/servers/tools/playlistgenerator/?u=http://radio.sub.fm:8529/listen.pls?sid=1&t=.m3u"},
		{"Ambient FM", "http://www.internet-radio.com/servers/tools/playlistgenerator/?u=http://uk2.internet-radio.com:31491/listen.pls&t=.m3u"}
	},
	{
		{"Smooth Jazz Florida", "https://www.internet-radio.com/servers/tools/playlistgenerator/?u=http://us1.internet-radio.com:8105/listen.pls&t=.m3u"},
		{"Smooth Jazz CD101.9", "https://www.internet-radio.com/servers/tools/playlistgenerator/?u=http://us1.internet-radio.com:8144/listen.pls&t=.m3u"},
		{"Highway 181", "https://www.internet-radio.com/servers/tools/playlistgenerator/?u=http://108.61.73.120:8018/listen.pls&t=.m3u"},
		{"100hitz New Country", "https://www.internet-radio.com/servers/tools/playlistgenerator/?u=http://173.244.215.162:9210/listen.pls&t=.m3u"},
		{"Classic Rock Florida", "https://www.internet-radio.com/servers/tools/playlistgenerator/?u=http://us1.internet-radio.com:8105/listen.pls&t=.m3u"},
		{"Fleetwood Mac", "https://www.internet-radio.com/servers/tools/playlistgenerator/?u=http://stn2.streamthenet.com:6050/listen.pls&t=.m3u"},
		{"Arrow Classic Rock", "https://www.internet-radio.com/servers/tools/playlistgenerator/?u=http://91.221.151.237:8109/listen.pls?sid=1&t=.m3u"},
		{"181.fm Rock", "https://www.internet-radio.com/servers/tools/playlistgenerator/?u=http://uplink.duplexfx.com:8008/listen.pls&t=.m3u"},
		{"181.FM 80s Hairband", "https://www.internet-radio.com/servers/tools/playlistgenerator/?u=http://uplink.duplexfx.com:8014/listen.pls&t=.m3u"},
		{"Soft Rock FM", "https://www.internet-radio.com/servers/tools/playlistgenerator/?u=http://173.236.21.250:8032/listen.pls&t=.m3u"},
		{"181.FM 90s Country", "https://www.internet-radio.com/servers/tools/playlistgenerator/?u=http://uplink.duplexfx.com:8050/listen.pls&t=.m3u"},
		{"idobi Howl", "https://www.internet-radio.com/servers/tools/playlistgenerator/?u=http://69.46.88.29:80/listen.pls&t=.m3u"},
		{"KNAC", "https://www.internet-radio.com/servers/tools/playlistgenerator/?u=http://s5.voscast.com:7346/listen.pls&t=.m3u"},
		{"2000FM Hard Rock", "https://www.internet-radio.com/servers/tools/playlistgenerator/?u=http://107.155.111.170:18110/listen.pls&t=.m3u"},
		{"SmoothJazz Global", "https://www.internet-radio.com/servers/tools/playlistgenerator/?u=http://sj128.hnux.com/listen.pls&t=.m3u"}
	},
	{
		{"Pigpen Radio", "https://www.internet-radio.com/servers/tools/playlistgenerator/?u=http://uk4.internet-radio.com:30884/listen.pls&t=.m3u"},
		{"Smash FM", "https://www.internet-radio.com/servers/tools/playlistgenerator/?u=http://uk1.internet-radio.com:8106/listen.pls&t=.m3u"},
		{"BlazeRadio", "https://www.internet-radio.com/servers/tools/playlistgenerator/?u=http://uk2.internet-radio.com:8106/listen.pls&t=.m3u"},
		{"PARTY VIBE RADIO", "https://www.internet-radio.com/servers/tools/playlistgenerator/?u=http://www.partyviberadio.com:8004/listen.pls?sid=1&t=.m3u"},
		{"GOOD COMPANY RADIO ", "https://www.internet-radio.com/servers/tools/playlistgenerator/?u=http://uk4.internet-radio.com:10104/listen.pls&t=.m3u"},
		{"181.FM Old School", "https://www.internet-radio.com/servers/tools/playlistgenerator/?u=http://uplink.duplexfx.com:8068/listen.pls&t=.m3u"},
		{"LadyLinQRadio", "https://www.internet-radio.com/servers/tools/playlistgenerator/?u=http://us1.internet-radio.com:8336/listen.pls&t=.m3u"},
		{"DEFJAY", "https://www.internet-radio.com/servers/tools/playlistgenerator/?u=http://212.45.104.39:8008/listen.pls&t=.m3u"},
		{"HOT 108 JAMZ", "https://www.internet-radio.com/servers/tools/playlistgenerator/?u=http://108.61.30.179:4020/listen.pls&t=.m3u"},
		{"181.FM The BEAT - The BEAT", "https://www.internet-radio.com/servers/tools/playlistgenerator/?u=http://uplink.duplexfx.com:8054/listen.pls&t=.m3u"},
		{"POWERHITZ", "https://www.internet-radio.com/servers/tools/playlistgenerator/?u=http://108.61.30.179:5040/listen.pls&t=.m3u"},
		{"100hitz", "https://www.internet-radio.com/servers/tools/playlistgenerator/?u=http://206.217.213.236:8170/listen.pls&t=.m3u"},
		{"181.FM The BOX", "https://www.internet-radio.com/servers/tools/playlistgenerator/?u=http://uplink.duplexfx.com:8024/listen.pls&t=.m3u"},
		{"ReggaeWorld", "https://www.internet-radio.com/servers/tools/playlistgenerator/?u=http://67.212.189.122:8042/listen.pls&t=.m3u"},
        {"SmoothJazz Global", "https://www.internet-radio.com/servers/tools/playlistgenerator/?u=http://sj128.hnux.com/listen.pls&t=.m3u"}
	}
};
//========================BoomBox URL's========================//
#define MAX_PLAYER_NOTES 10
enum NOTE_ENUM
{
	noteID,
	noteText[128],
	noteOn
}
new PlayerNotes[MAX_PLAYERS][MAX_PLAYER_NOTES][NOTE_ENUM];

#define MAX_PLAYER_CONTACTS 40
enum CONTACTS_ENUM
{
	contactID,
	contactName[24],
	contactNumber,
	contactOn
}
new PlayerContacts[MAX_PLAYERS][MAX_PLAYER_CONTACTS][CONTACTS_ENUM];
//========================Toy System========================//
//0, 1, 2, 3, 4 - ??????
//5, 6, 7 - ??????
//8 - ???????, ???
#define ATTACH_HANDS 	8

#define MAX_PLAYER_ATTACH 5
enum ATTACH_ENUM
{
	aID,
	aName[32],
	aModel,
	aBone,
	Float:aOffsetX,
	Float:aOffsetY,
	Float:aOffsetZ,
	Float:aRotX,
	Float:aRotY,
	Float:aRotZ,
	Float:aScaleX,
	Float:aScaleY,
	Float:aScaleZ,
	aUsed
}
new AttachInfo[MAX_PLAYERS][MAX_PLAYER_ATTACH][ATTACH_ENUM];


#define MAX_PLAYER_MUSIC 10
enum MUCIC_ENUM
{
	mID,
	mName[64],
	mUrl[128]
}
new PlayerMusic[MAX_PLAYERS][MAX_PLAYER_MUSIC][MUCIC_ENUM];



enum TICKETS_ENUM
{
	tID,
	tOfficer[MAX_PLAYER_NAME],
	tFaction,
	tDate[24],
	tAmount,
	tReason[64]
}
new pTickets[MAX_PLAYERS][MAX_PLAYER_TICKETS][TICKETS_ENUM];
new vTickets[MAX_VEHICLES][MAX_CAR_TICKETS][TICKETS_ENUM];


static const ac_vType[] =
{
	2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 2, 0, 0, 0, 0, 3, 3, 3, 0, 0,
	0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 3, 3, 0, 0, 2,
	0, 0, 0, 0, 4, 0, 0, 3, 0, 0, 2, 2, 0, 0, 0, 0, 3, 0, 0, 0,
	2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 2, 2, 2, 0, 0, 0,
	0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 3
};

stock GetMaxPassengers(model)
{
    model -= 400;
    if(0 <= model <= 211)
    {
        static seekBlock_vSeats[27] =
        {
	        0x10331113, 0x11311131,
	        0x11331313, 0x80133301,
	        0x1381F110, 0x10311103,
	        0x10001F10, 0x11113311,
	        0x13113311, 0x31101100,
	        0x30001301, 0x11031311,
	        0x11111331, 0x10013111,
	        0x01131100, 0x11111110,
	        0x11100031, 0x11130221,
	        0x33113311, 0x11111101,
	        0x33101133, 0x101001F0,
	        0x03133111, 0xFF11113F,
	        0x13330111, 0xFF131111,
	        0x0000FF3F
        };
        return ((seekBlock_vSeats[model >>> 3] >>> ((model & 7) << 2)) & 15);
    }
    return 15;
}

static const VehicleNames[212][] = {
   "Landstalker",  "Bravura",  "Buffalo", "Linerunner", "Perennial", "Sentinel",
   "Dumper",  "Firetruck" ,  "Trashmaster" ,  "Stretch",  "Manana",  "Infernus",
   "Voodoo", "Pony",  "Mule", "Cheetah", "Ambulance",  "Leviathan",  "Moonbeam",
   "Esperanto", "Taxi",  "Washington",  "Bobcat",  "Mr Whoopee", "BF Injection",
   "Hunter", "Premier",  "Enforcer",  "Securicar", "Banshee", "Predator", "Bus",
   "Rhino",  "Barracks",  "Hotknife",  "Trailer",  "Previon", "Coach", "Cabbie",
   "Stallion", "Rumpo", "RC Bandit",  "Romero", "Packer", "Monster",  "Admiral",
   "Squalo", "Seasparrow", "Pizzaboy", "Tram", "Trailer",  "Turismo", "Speeder",
   "Reefer", "Tropic", "Flatbed","Yankee", "Caddy", "Solair","Berkley's RC Van",
   "Skimmer", "PCJ-600", "Faggio", "Freeway", "RC Baron","RC Raider","Glendale",
   "Oceanic", "Sanchez", "Sparrow",  "Patriot", "Quad",  "Coastguard", "Dinghy",
   "Hermes", "Sabre", "Rustler", "ZR-350", "Walton",  "Regina",  "Comet", "BMX",
   "Burrito", "Camper", "Marquis", "Baggage", "Dozer","Maverick","News Chopper",
   "Rancher", "FBI Rancher", "Virgo", "Greenwood","Jetmax","Hotring","Sandking",
   "Blista Compact", "Police Maverick", "Boxville", "Benson","Mesa","RC Goblin",
   "Hotring Racer", "Hotring Racer", "Bloodring Banger", "Rancher",  "Super GT",
   "Elegant", "Journey", "Bike", "Mountain Bike", "Beagle", "Cropdust", "Stunt",
   "Tanker", "RoadTrain", "Nebula", "Majestic", "Buccaneer", "Shamal",  "Hydra",
   "FCR-900","NRG-500","HPV1000","Cement Truck","Tow Truck","Fortune","Cadrona",
   "FBI Truck", "Willard", "Forklift","Tractor","Combine","Feltzer","Remington",
   "Slamvan", "Blade", "Freight", "Streak","Vortex","Vincent","Bullet","Clover",
   "Sadler",  "Firetruck", "Hustler", "Intruder", "Primo", "Cargobob",  "Tampa",
   "Sunrise", "Merit",  "Utility Truck",  "Nevada", "Yosemite", "Windsor",  "Monster",
   "Monster","Uranus","Jester","Sultan","Stratum","Elegy","Raindance","RCTiger",
   "Flash","Tahoma","Savanna", "Bandito", "Freight", "Trailer", "Kart", "Mower",
   "Dune", "Sweeper", "Broadway", "Tornado", "AT-400",  "DFT-30", "Huntley",
   "Stafford", "BF-400", "Newsvan","Tug","Trailer","Emperor","Wayfarer","Euros",
   "Hotdog", "Club", "Trailer", "Trailer","Andromada","Dodo","RC Cam", "Launch",
   "LSPD Cruiser", "LSPD Cruiser","Police Car (LVPD)","Police Ranger",
   "Picador",   "S.W.A.T. Van",  "Alpha",   "Phoenix",   "Glendale",   "Sadler",
   "Luggage Trailer","Luggage Trailer","Stair Trailer", "Boxville", "Farm Plow",
   "Utility Trailer"
};

new OrTeleports[][] =
{
	{"24/7 1"},
	{"24/7 2"},
	{"24/7 3"},
	{"24/7 4"},
	{"24/7 5"},
	{"24/7 6"},
	{"Airport Ticket Desk"},
	{"Airport Baggage Reclaim"},
	{"Shamal"},
	{"Andromada"},
	{"Ammunation 1"},
	{"Ammunation 2"},
	{"Ammunation 3"},
	{"Ammunation 4"},
	{"Ammunation 5"},
	{"Ammunation Booths"},
	{"Ammunation Range"},
	{"Blastin Fools Hallway"},
	{"Budget Inn Motel Room"},
	{"Jefferson Motel"},
	{"Off Track Betting Shop"},
	{"Sex Shop"},
	{"Meat Factory"},
	{"Zero's RC Shop"},
	{"Dillmore Gas Station"},
	{"Caligula's Basement"},
	{"FDC Janitors Room"},
	{"Woozie's Office"},
	{"Binco"},
	{"Didier Sachs"},
	{"Prolaps"},
	{"Suburban"},
	{"Victim"},
	{"ZIP"},
	{"Alhambra"},
	{"Ten Bottles"},
 	{"Lil' Probe Inn"},
 	{"Jay's Dinner"},
 	{"Gant Bridge Dinner"},
	{"Secret Valley Dinner"},
	{"World of Coq"},
	{"Welcome Pump"},
	{"Burger Shot"},
	{"Clucking' Bell"},
	{"Well Stacked Pizza"},
	{"Jimmy's Sticky Ring"},
	{"Denise Room"},
	{"Katie Room"},
	{"Helena Room"},
	{"Michelle Room"},
	{"Barbara Room"},
	{"Mille Room"},
	{"Sherman Dam"},
	{"Planning Dept."},
	{"Area 51"},
	{"LS Gym"},
	{"SF Gym"},
	{"LV Gym"},
	{"B Dup's House"},
	{"B Dup's Crack Pad"},
	{"CJ's House"},
	{"Madd Dogg's Mansion"},
	{"OG Loc's House"},
	{"Ryder's House"},
	{"Sweet's House"},
	{"Crack Factory"},
	{"Big Spread Ranch"},
	{"Fanny Batters"},
	{"Strip Club"},
	{"Strip Club Private Room"},
	{"Unnamed Brothel"},
	{"Tiger Skin Brothel"},
	{"Pleasure Domes"},
	{"Liberty City Outside"},
	{"Liverty City Inside"},
	{"Gang House"},
	{"Colonel Furhberger's House"},
	{"Crack Den"},
	{"Warehouse 1"},
	{"Warehouse 2"},
	{"Sweet's Garage"},
	{"Lil' Probe Inn Toilet"},
	{"Unused Safe House"},
	{"RC Battlefield"},
	{"Barber 1"},
	{"Barber 2"},
	{"Barber 3"},
	{"Tatoo parlour 1"},
	{"Tatoo parlour 2"},
	{"Tatoo parlour 3"},
	{"LS Police HQ"},
	{"SF Police HQ"},
	{"LV Police HQ"},
	{"Car School"},
	{"8-Track"},
	{"Bloodbowl"},
	{"Dirt Track"},
	{"Kickstart"},
	{"Vice Stadium"},
	{"SF Garage"},
	{"LS Garage"},
	{"SF Bomb Shop"},
	{"Blueberry Warehouse"},
	{"LV Warehouse 1"},
	{"LV Warehouse 2"},
	{"Catigula's Hidden Room"},
	{"Bank"},
	{"Bank - Behind Desk"},
	{"LS Atruim"},
	{"Bike School"}
};

new fish_names[9][25] =
{
	{"Rechin"},
	{"Pisica de mare"},
	{"Crap"},
	{"Ton"},
	{"Pastrav"},
	{"Laban"},
	{"Biban"},
	{"Testoasa"},
	{"Somn"}
};

new attach_police_model[] =
	{19904, 18637, 19142, 19515, 18636, 19161, 19162, 19521, 19098, 19200, 19141, 19514, 19138,
	19783, 19784, 19778, 19785, 19781, 19782, 19779, 19780, 19775, 19774, 11745, 11738, 19096};

new attach_police_name[][] =
{
	"Vesta portocalie",
	"Scut",
	"Vesta anti-glont (neagra)",
	"Vesta anti-glont (gri)",
	"Cascheta (1)",
	"Cascheta (2)",
	"Cascheta (3)",
	"Cascheta (4)",
	"Palarie",
	"Casca (motocicleta)",
	"Casca SWAT (neagra)",
	"Casca SWAT (gri)",
	"Balaclava",
	"Insigna",
	"Insigna P-III",
	"Insigna Detective I",
	"Insigna P-III+1",
	"Insigna Sergeant I",
	"Insigna Sergeant II",
	"Insigna Detective II",
	"Insigna Detective III",
	"Cartela de acces pentru detectivi",
	"Insigna de politie",
	"Geanta",
	"Trusa (BLS)",
	"Palarie neagra"
};

new attach_fd_model[] =
	{19330,19331,19942,11736,11738,18634,18641,19472,19559,19904,1008,11745,18875};

new attach_fd_name[][] =
{
	"Cascheta de pompier (galbena)",
	"Cascheta de pompier (neagra)",
	"Walkie-talkie",
	"Trusa de prim ajutor",
	"Trusa (BLS)",
	"Ranga",
	"Lanterna",
	"Masca de gaze",
	"Rucsac",
	"Vesta portocalie",
	"Cilindriu",
	"Cilindru",
	"Pager"
};

new attach_city_model[] =
	{19904,19142,19515,18636,19161,19162,19521,19098,19200,19776,19777,18875,19942};

new attach_city_name[][] =
{
	"Vesta portocalie",
	"Vesta neagra",
	"Vesta anti-glont (gri)",
	"Palarie 1",
	"Palarie 2",
	"Palarie 3",
	"Palarie 4",
	"Palarie 5",
	"Casca (motocicleta)",
	"Card (FBI)",
	"FBI (logo)",
	"Pager",
	"Radio"
};

new bort_list_city[4] =
	{19834, 1238, 1228, 1459};

new bort_names_city[4][32] =
{
	"Banda",
	"Con",
	"Bariera 1",
	"Bariera 2"
};

new bort_list_fd[17] =
	{1997, 2146, 19944, 3799, 2772, 12950, 18728, 18725, 18690, 19836, 2411, 1366, 1448, 19834, 1238, 1228, 1459};

new bort_names_fd[17][32] =
{
	"Targa 1",
	"Targa 2",
	"Sac (pentru decedati)",
	"Cutie",
	"Scari 1",
	"Scari 2",
	"Torta",
	"Particule (fum)",
	"Particule (foc)",
 	"Sange",
	"Manechin",
	"Hidrant",
	"Retainer",
	"Banda",
	"Con",
	"Bariera 1",
	"Bariera 2"
};

new bort_list[23] =
	{978, 979, 3091, 19972, 19970, 19971, 18728, 18725, 18690, 1425, 19944, 19995, 19834, 19836, 1238, 1228, 1459, 1423, 1237, 19425, 346, 355, 352};

new bort_names[23][32] =
{
	"Gard 1",
	"Gard 2",
	"Semn pt. blocare benzii",
	"Semn pt. blocarea drumului",
	"Doar pe stanga",
	"Doar pe dreapta",
	"Torta",
	"Particule (fum)",
	"Particule (foc)",
	"Bariera (detour)",
	"Sac (pentru decedati)",
	"Incarcator arma",
	"Banda",
	"Sange",
	"Con",
	"Bariera 1",
	"Bariera 2",
	"Bariera 3",
	"Bariera 4",
	"Damb de viteza",
	"Colt 45",
	"AK-47",
	"UZI"
};

enum BORT_ENUM
{
    bortOn,
	bortName[32],
	bortObject
}
new BortInfo[MAX_PLAYERS][MAX_BORTES][BORT_ENUM];

enum PLAYER_DATA_ENUM
{
	pUsername[MAX_PLAYER_NAME+1],
	pUsername_[MAX_PLAYER_NAME+1],
    pMaskname[32],
    pGoogle[17],
	pID,
	pAccID,
	pAccname[MAX_PLAYER_NAME+1],
	pCash,
	pBank,
	pSkin,
	pSex,
	pBirthdate[24],
	pLevel,
	pExp,
	pHours,
	pAdmin,
	pAdminHide,
	pTester,
	pInt,
	pWorld,
	pAJailed,
	pAJailTime,
	pJailed,
	pIsolateTime,
	pJailTime,
	pWarns,

	pPremium,
	pPremiumTime,
	pDonate,
	pNameChanges,
	pNumberChanges,

	pCarLic,
	pWepLic,
	pFlyLic,
	pTaxiLic,
	pPrescribe,
	pGanjaTime,
	pFightStyle,
	pHud,
	pPayCheckMoney,
	pPayDayTime,
	pSavings,
	pRentKey,
	pRentPrice,
	pChannel,
	pOwnedChannel,
	pAuthed,
	pCarKey,
	pSpareKey,
	pWorkOn,
	pWalk,
	Float:pArmour,
	pFaction,
	pRank,
	pBadgeNumber,
	pDriveWarns,
	pWepWarns,
	pWepCount,
	pArrested,
	pTalk,
	pAuthwep,
	pSwat,
	pSwatDuty,
	pSlot,
	pJob,
	pCareer,
	pSideJob,
	pSpawnType,
	pSpawnPoint,
	pPrisoned,
	pInjured,
	pOnDuty,
	pChar,
	pWeap[MAX_WEAP],
	pAmmo[MAX_WEAP],
    pHideWeap[MAX_WEAP-1],
	pCopWeap[MAX_WEAP],
	pCopAmmo[MAX_WEAP],
	pFishCount,
	pWeaponBone[3],
	Float:pWeaponX[3],
    Float:pWeaponY[3],
    Float:pWeaponZ[3],
    Float:pWeaponRX[3],
    Float:pWeaponRY[3],
    Float:pWeaponRZ[3],
	pMutedTime,
	Float:pPosX,
	Float:pPosY,
	Float:pPosZ,
	Float:pPosA,
	Float:pLocationPos[3],
	pTog[3],
	pNumber,
	pPhoneAirplane,
	pPhoneSound,
	pPhoneStyle,
	pPhoneOff,
	pPhoneModel,
	pPhoneRingtone,

	pInv[MAX_INVENTORY],
	pInvAmount[MAX_INVENTORY],
	pSettings,
	pDependence,
	pDemolition,
	pFishTime
}
new PlayerInfo[MAX_PLAYERS][PLAYER_DATA_ENUM];

enum PLAYER_TEMP_ENUM
{
	pLogged,
	pLoggedTime,
	pLoggedTry,
	pPMPlayer,
	pHealPlayer,
	pFactionPlayer,
	pInterview,
	pInterviewPlayer,
	pRentPlayer,
	pRentPrice,
	pWepPlayer,
	pWepPrice,
	pHouseHouse,
	pHousePrice,
	pHousePlayer,
	pFriskPlayer,
	pSpecPlayer,
	pHirePlayer,
	pRubber,
	pTaser,
	pTaserTime,
	pFreezeTime,
	pInvulnerable,
	pEditBort,
	pCCTV,
	pZond,
	pZondActor,
	pZondObj,
	Text3D:pZondLabel,
	pDarkAFK,
	pFlashTime,
	pCarPrice,
	pCarPlayer,
	pHouseFurniture,
	p3DMenu,
	pHealTime,
	pBuildHouse,
	pRamType,
    pRamTime,
    pRamHouse,
    pRamBiz,
    pRamObj,
    pInjuredInvulnerable,
    pInjuredLegTime,
    pInjuredTime,
    pDamagesCount,
    pCallLine,
    pCallStatus,
    pCallIncoming,
	pCallTime,
	pCallName[24],
	pCallKeypad[24],
	pEmergency,
    pTracePlayer,
    pTraceGZ,
    pTraceStage,
    Float:pTraceDist[3],
    pTicketListed[MAX_PLAYER_TICKETS],
    pDriver,
    pCargoID,
	pCargoListed[MAX_TRUCK_PRODUCT],
	pWeaponListed[30],
	pTenantListed[5],
	pCmdCount,
	pCmdFlood,
	pChatCount,
	pWaypoint,
	pPDAListed[MAX_TRUCK_CARGO],
	pMDCPlayer,
	pPatrol,

	pCallOn,
	Float:pCallPosX,
	Float:pCallPosY,
	Float:pCallPosZ,
    pFishTime,
    pPlantTime,
    pCuffed,
	pNews,
	pHouseEntered,
	pBizEntered,
	pApartEntered,
	pDMLog,

	pGreetPlayer,
	pGreetType,
	pFoodStand,
	pReportTime,
	pServePlayer,
	pServeType,
	pAdminDuty,
	pTesterDuty,
	pBoombox,
	pBoombox_house,
	pBoombox_biz,
	pRentveh,
	pJetpack,
	pLicenseExam,
	pMDCWepPlayer,
	pMDCWepName[MAX_PLAYER_NAME+1],

	pDrugUse,
	pDrugTime,
	pDrugChgWeather,
    pDemolitionTime,
    pChangeNick[MAX_PLAYER_NAME+1],
	pGoogle[17],
	pPizzaBoy,
	pInteriorObj,
	pInteriorID,
	pInteriorHouse,
	pInteriorBiz,

	pPayphone
}

new pTemp[MAX_PLAYERS][PLAYER_TEMP_ENUM];

enum PLAYER_BOOMBOX_ENUM
{
	bUsed,
	bArea,
	bUrl[156],
	Float:bPosX,
	Float:bPosY,
	Float:bPosZ,
	bInt,
	bVW,
	bObject
}
new BoomboxInfo[MAX_PLAYERS][PLAYER_BOOMBOX_ENUM];

stock CancelCall(playerid)
{
	if(pTemp[playerid][pCallLine] == INVALID_PLAYER_ID)
	    return 1;

	new targetid = pTemp[playerid][pCallLine];

	new month,
 		day,
 		year,
 		hour,
 		minute,
 		name_1[24],
 		name_2[24];

	format(name_1, 24, "%s", pTemp[targetid][pCallName]);
	format(name_2, 24, "%s", pTemp[playerid][pCallName]);

	new month_name[12][5] = {"Ian","Feb","Mar","Apr","Mai","Iun","Iul","Aug","Sept","Oct","Noi","Dec"};
	gettime(hour, minute);
	getdate(year, month, day);

	new query[256];
    mysql_format(dbHandle, query, sizeof(query), "INSERT INTO `history_calls` (`to_number`,`from_number`,`to_name`,`from_name`,`time`,`date_hour`,`date_month`) VALUES ('%i','%i','%s','%s','%i','%02i:%02i','%s %02i %i')",
	(pTemp[playerid][pCallIncoming] == 1)?(PlayerInfo[playerid][pNumber]):(PlayerInfo[targetid][pNumber]),
    (pTemp[playerid][pCallIncoming] == 0)?(PlayerInfo[playerid][pNumber]):(PlayerInfo[targetid][pNumber]),
    (pTemp[playerid][pCallIncoming] == 1)?(name_2):(name_1),
    (pTemp[playerid][pCallIncoming] == 0)?(name_2):(name_1),
    pTemp[playerid][pCallTime],
	hour,
	minute,
	month_name[month-1],
	day,
	year);
	mysql_tquery(dbHandle, query);

	pTemp[playerid][pCallLine] = INVALID_PLAYER_ID;
	pTemp[playerid][pCallStatus] = 0;
	pTemp[playerid][pCallIncoming] = 0;
	pTemp[playerid][pCallTime] = 0;
	format(pTemp[playerid][pCallName], 24, "");

	pTemp[targetid][pCallLine] = INVALID_PLAYER_ID;
	pTemp[targetid][pCallStatus] = 0;
	pTemp[targetid][pCallIncoming] = 0;
	pTemp[targetid][pCallTime] = 0;
	format(pTemp[targetid][pCallName], 24, "");


	if(0 != IsPlayerPhoneCreated(playerid))
		Phone_Destroy(playerid);

	if(0 != IsPlayerPhoneCreated(targetid))
	    Phone_Destroy(targetid);

	SetPVarInt(playerid, #loud_speak, 0);
	SetPVarInt(targetid, #loud_speak, 0);

	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
	SetPlayerSpecialAction(targetid, SPECIAL_ACTION_STOPUSECELLPHONE);

	RemovePlayerAttachedObject(playerid, ATTACH_HANDS);
	RemovePlayerAttachedObject(targetid, ATTACH_HANDS);
	return 1;
}

enum PLANTS_ENUM
{
	pID,
	pPlanter[52],
	pGrowTime,
	Float:pX,
	Float:pY,
	Float:pZ,
	pInt,
	pVW,
	pObject,
	Text3D:pLabel,
	pPlanted
}
new CropsInfo[MAX_PLANTS][PLANTS_ENUM];

enum EMERGANCY_ENUM
{
	callExists,
	callType,
	callName[MAX_PLAYER_NAME],
	callPhone,
	callText[128],
	callLocation[MAX_ZONE_NAME],
	callDate[32],
	Float: callPosX,
	Float: callPosY,
	Float: callPosZ,
	callAccept,
	callDelete
}

#define MAX_CALLS_AND_ARREST 40
new CallInfo[MAX_CALLS_AND_ARREST][EMERGANCY_ENUM];

enum PATROL_ENUM
{
	patrulExists,
	patrulName[32],
	patrulOfficer[2]
}

#define MAX_PATROL  20
new PatrolInfo[2][MAX_PATROL][PATROL_ENUM];

stock Patrul_Init()
{
	for(new i; i != MAX_PATROL; i++)
	{
	    PatrolInfo[0][i][patrulOfficer][0] = INVALID_PLAYER_ID;
	    PatrolInfo[0][i][patrulOfficer][1] = INVALID_PLAYER_ID;

	    PatrolInfo[1][i][patrulOfficer][0] = INVALID_PLAYER_ID;
	    PatrolInfo[1][i][patrulOfficer][1] = INVALID_PLAYER_ID;
	}
	return 1;
}

enum ARREST_ENUM
{
	arrestSuspect[MAX_PLAYER_NAME],
	arrestOfficer[MAX_PLAYER_NAME],
	arrestDate[32],
	arrestTime,
	arrestExists,
	arrestDelete
}
new ArrestInfo[MAX_CALLS_AND_ARREST][ARREST_ENUM];

enum JOBS_ENUM
{
	jobID,
	jobType,
	Float:jobX,
	Float:jobY,
	Float:jobZ,
	jobInt,
	jobVW,
	jobPickUp,
	Text3D:jobLabel,
	jobOn
}
new JobsInfo[MAX_JOBS][JOBS_ENUM];

new jobs_names[7][32] =
	{"Fara", "Camionagiu", "Mecanic", "Taximetrist", "Traficant de droguri", "Traficant de arme", "Livrator de pizza"};

#define GetJobName(%0) jobs_names[%0]

enum LABEL_ENUM
{
	tID,
	tText[128],
	Float:tPosX,
	Float:tPosY,
	Float:tPosZ,
	//tColor,
	tVW,
	tInt,
	tGameText,
	tPickupModel,

	tLabelOn,
	Text3D:tLabel,
	tPickUp
}
new LabelsInfo[MAX_LABELS][LABEL_ENUM];

enum TELES_ENUM
{
	aID,
	Float:telesPosX,
	Float:telesPosY,
	Float:telesPosZ,
	telesInt,
	telesMapName[32],
	telesOn,
	telesType
};
new AdminTeles[MAX_INTERIORS][TELES_ENUM];

enum OBJECTS_ENUM
{
	oID,
	oModel,
	oObject,
	oName[32],
	oInt,
	oVW,
	Float:oPosX,
	Float:oPosY,
	Float:oPosZ,
	Float:oPosRX,
	Float:oPosRY,
	Float:oPosRZ,
	oObjectOn
}
new ObjectsInfo[MAX_OBJECTS][OBJECTS_ENUM];

enum TOWER_ENUM
{
	towerID,
	towerModel,
	towerObject,
	towerOn,
	Float: towerPosX,
	Float: towerPosY,
	Float: towerPosZ,
	Float: towerPosRX,
	Float: towerPosRY,
	Float: towerPosRZ
}

new TowerInfo[MAX_TOWERS][TOWER_ENUM];

enum ATM_ENUM
{
	atmID,
	Float:atmPosX,
	Float:atmPosY,
	Float:atmPosZ,
	Float:atmPosRZ,
	atmInt,
	atmVW,
	atmObject
}
new ATMInfo[MAX_ATMS][ATM_ENUM];

enum CARGO_OBJECT_ENUM
{
	oOn,
	oObj,
	Text3D:oLabel,
	Float:oX,
	Float:oY,
	Float:oZ,
	oInt,
	oVW,
	oProduct
}

new CargoObject[MAX_CARGO_OBJ][CARGO_OBJECT_ENUM];

enum TRUCK_CARGO_ENUM
{
	tID,
	tType,
	tName[64],
	tStorage,
	tStorageSize,
	tPrice,
	tProductID,
	tProductAmount,
	tPack,
	tGps,
	tLocked,
	Float: tPosX,
	Float: tPosY,
	Float: tPosZ,
	Text3D:tLabel,
	tPickup,
	tOn,
	tResult
}

new TruckCargo[MAX_TRUCK_CARGO][TRUCK_CARGO_ENUM];


#define TRUCKER_FUEL 		0 //Vehicle
#define TRUCKER_FOOD		1
#define TRUCKER_DRINK 		2
#define TRUCKER_CLOTHES 	3
#define TRUCKER_CARS 		4 //Vehicle
#define TRUCKER_FURNITURE   5
#define TRUCKER_MEAT        6
#define TRUCKER_EGGS        7
#define TRUCKER_MILK 		8 //Vehicle
#define TRUCKER_CEREAL      9 //Vehicle
#define TRUCKER_COTTON      10 //Vehicle
#define TRUCKER_DYES        11 //Vehicle
#define TRUCKER_COMPONENTS  12
#define TRUCKER_MALT        13 //Vehicle
#define TRUCKER_MONEY       14
#define TRUCKER_PAPER       15
#define TRUCKER_AGGREGATE   16 //Vehicle
#define TRUCKER_WOODS	 	17 //Vehicle
#define TRUCKER_GUNPOWDER   18
#define TRUCKER_SCRAP       19 //Vehicle
#define TRUCKER_STEEL       20
#define TRUCKER_GUNS        21
#define TRUCKER_BRICKS 		22 //Vehicle
#define TRUCKER_APPLIANCES  23
#define TRUCKER_FRUITS      24

stock IsTakeProduct(prod)
{
	switch(prod)
	{
	    case TRUCKER_FUEL, TRUCKER_CARS, TRUCKER_MILK, TRUCKER_CEREAL, TRUCKER_COTTON, TRUCKER_DYES, TRUCKER_MALT, TRUCKER_AGGREGATE, TRUCKER_WOODS, TRUCKER_SCRAP, TRUCKER_BRICKS: return 0;
	}
	return 1;
}

new truckcargo_product[MAX_TRUCK_PRODUCT][32] =
	{"Combustibil", "Mancare", "Bauturi", "Imbracaminte", "Transport", "Mobila", "Carne", "Oua", "Lapte", "Porumb", "Bumbac", "Coloranti", "Piese auto", "Malt", "Bani", "Hartie", "Moloz", "Lemne", "Praf", "Metal", "Otel", "Arme", "Caramizi", "Electronice", "Fructe"};

new truckcargo_type[3][32] =
	{"Materie prima", "Producator", "Cumpara"};

new Float: dft_attach[4] = {-0.04656, -4.26884, 0.81490, 3.54000};

new Float: dft_attach_brick[3][3] =
{
    {0.04380, 1.17068, 0.46367},
	{0.04380, -1.35450, 0.46370},
	{0.04380, -3.79490, 0.4637}
};

new Float: paker_attach[2][4] =
{
	{0.00000, 0.40200, 1.85540, 15.18000},
	{-0.00730, -6.36940, 0.00000, 15.18000}
};

new Float: picador_attach[2][3] =
{
	{0.13280, -1.10310, -0.17710},
	{0.01329, -1.86198, -0.17710}
};

new Float: sadler_attach[2][3] =
{
	{0.13280, -1.10310, -0.21710},
	{0.01330, -1.86200, -0.21710}
};

new Float: bobcat_attach[3][3] =
{
	{-0.31250, -0.80650, -0.31710},
	{0.42700, -0.80650, -0.31710},
	{0.04260, -1.84000, -0.31710}
};

new Float: walton_attach[4][3] =
{
	{-0.44386, -1.00283, -0.07710},
	{0.51337, -1.10535, -0.07710},
	{0.46038, -1.85669, -0.07710},
	{-0.36452, -1.87622, -0.07710}
};

new Float: yosemite_attach[6][3] =
{
	{-0.31250, -1.00700, -0.23710},
	{0.42700, -1.00650, -0.23710},
	{0.06740, -1.70740, -0.23710},
	{0.06560, -2.40020, -0.23710},
	{0.06553, -0.99522, 0.46057},
	{0.07971, -1.69164, 0.46057}
};

new Float: yosemite_attach_brick[3] = {0.00995, -1.59382, 0.26984};//1685


enum BIZ_ENUM
{
	bizID,
	Text3D:bizLabelDDoor,
	Float:bizPosX,
	Float:bizPosY,
	Float:bizPosZ,
	Float:bizExitX,
	Float:bizExitY,
	Float:bizExitZ,
	bizPickUp,
	bizName[32],
	bizInfo[32],
	bizMes[128],
	bizOwner[MAX_PLAYER_NAME],
	bizOwnerID,
	bizLocked,
	bizPrice,
	bizFreeze,
	bizLevelbuy,
	bizExitInt,
	bizExitVW,
	bizPosInt,
	bizPosVW,
	bizCash,
	bizType,
	bizEntrance,
	bizRadio,
	bizRadioOn,
	bizRadioURL[156],
	bizDDoor,
	bizProductPrice[4],
	bizProduct,
	bizBuyPrice
};
new BizInfo[MAX_BIZ][BIZ_ENUM];

new biz_prod_types[22] =
	{-1, 2, 23, 21, 3, -1, 0, 11, -1, 4, 4, 4, 12, 15, -1, 1, 1, 1, 1, 1, 22, -1};

new biz_prod_point[22] =
	{0, 5, 5, 10, 5, 0, 10, 3, 0, 3, 3, 3, 10, 20, 0, 5, 5, 5, 5, 5, 10, 0};

new biz_types[23][32] =
	{"Necunoscut","Bar / Club", "24/7", "Magazin de arme", "Magazin de haine", "Frizerie", "Benzinarie", "Pay'n'Spray", "Banca", "Salon auto", "Salon de transport naval", "Salon de transport aerian", "Tuning", "Companie de publicitate", "Companie de licentiere", "Well Stacked Pizza", "Cluckin Bell", "Burger Shot", "Donut Ring", "Restaurant", "Companie de constructii", "Farmacie", "Pawn Shop"};

#define BIZ_NONE       	0
#define BIZ_BAR 		1
#define BIZ_STORE       2
#define BIZ_AMMO        3
#define BIZ_CLOTHES     4
#define BIZ_BARBER      5
#define BIZ_GAS_STATION 6
#define BIZ_PAYNSPRAY   7
#define BIZ_BANK        8
#define BIZ_AUTOSALON  9
#define BIZ_BOATSALON  10
#define BIZ_FLYSALON   11
#define BIZ_TUNING      12
#define BIZ_ADVERT      13
#define BIZ_LICENSE     14
#define BIZ_PIZZA       15
#define BIZ_CLUCKIN     16
#define BIZ_BURGER      17
#define BIZ_DONUT 		18
#define BIZ_RESTAURANT  19
#define BIZ_BUILD       20
#define BIZ_PHARMACY    21
#define BIZ_PAWN    	22

enum HOUSE_ENUM
{
	hID,
	Text3D:hLabel,
	Text3D:hLabelDDoor,
	hCheckPoint,
	Float:hPosX,
	Float:hPosY,
	Float:hPosZ,
	hPosInt,
	hPosVW,
	Float:hExitX,
	Float:hExitY,
	Float:hExitZ,
	hExitInt,
	hExitVW,
	hOwner[MAX_PLAYER_NAME],
	hOwnerID,
	hLocked,
	hPrice,
	hLevelbuy,
	hCash,
	hInv[MAX_HOUSE_INVENTORY],
	hInvAmount[MAX_HOUSE_INVENTORY],
	Float:hCheckPosX,
	Float:hCheckPosY,
	Float:hCheckPosZ,
	hRadio,
	hLock,
	hAlarm,
	hDoor,
	hDDoor,
	hRadioOn,
	hRadioURL[156],
	hClass,
	hHeal,
	hHealAmount,
	hCupboard,
	hFurniture,
	hOutsideFurniture,
	Float: hFurnitureRadius /*ALTER TABLE `houses` ADD `furniture_radius` FLOAT NOT NULL DEFAULT '7.0' ;*/
};
new HouseInfo[MAX_HOUSES][HOUSE_ENUM];


enum GARAGE_ENUM
{
	garageID,
	garageOwner,
	garageOwnerName[MAX_PLAYER_NAME],
	garageHouse,
	garageBiz,
	garagePrice,
	garageLocked,
	Float: garageVeh_Enter[4],
	Float: garageVeh_Exit[4],
	garageEnterInt,
	garageEnterVW,
	Float: garagePlayer_Enter[3],
	garageExitInt,
	garageExitVW,
	Float: garagePlayer_Exit[3],
	garageCP
}

new GarageInfo[MAX_GARAGES][GARAGE_ENUM];

new Float: garage_veh_pos[9][4] =
{
    {612.5345,-1.3466,1000.6270,90.1865},
	{614.5330,-124.6238,997.6979,88.4038},
	{615.4903,-75.3255,997.6971,86.8641},
	{1253.8479,-862.2391,1083.7823,0.1047},
	{1227.8630,5.3595,1001.0543,0.1440},
	{2538.269, -1537.054, 2023.286, 88.755},
	{1145.403, 36.718, 1001.846, 270.634},
	{1226.998, 36.683, 1001.091, 359.786},
	{2349.39795, -1787.45105, 3000.75708, 90.0}
};

new Float: garage_player_pos[9][4] =
{
    {627.3027,-11.8948,1000.9219,267.5414},
	{620.2144,-119.7664,998.8496,0.7716},
	{620.1339,-70.8999,997.9922,356.8630},
	{1258.1970,-867.9012,1084.0519,86.0345},
	{1224.9291,8.1757,1001.3489,89.1820},
	{2535.509, -1534.658, 2023.582, 270.318},
	{1148.243, 34.473, 1002.147, 88.052},
	{1230.097, 38.633, 1001.386, 176.057},
	{2353.2781,-1782.1946,3001.0859,359.1046}
};

new garage_int[9] =
	{1,3,2,6,7,25,26,27,28};

enum APART_ENUM
{
	aID,
	Float:aPosX,
	Float:aPosY,
	Float:aPosZ,
	Float:aExitX,
	Float:aExitY,
	Float:aExitZ,
	aExitInt,
	aExitVW,
	aPosInt,
	aPosVW,
	//
	aApartOn,
	aCheckPoint,
	aPickUp
};
new ApartInfo[MAX_APART][APART_ENUM];

enum FURNITURE_ENUM
{
	fID,
	fModel,
	fObject,
	fName[64],
	fHouseID,
	fInterior,
	fVirtualWorld,
	fMarketPrice,
	Float:fPosX,
	Float:fPosY,
	Float:fPosZ,
	Float:fPosRX,
	Float:fPosRY,
	Float:fPosRZ,
	fLocked,
	fOpened,
	fOn,
	fTexture[5],
	fCategory
}
new HouseFurniture[MAX_HOUSES][MAX_FURNITURE][FURNITURE_ENUM];

enum FOODSTAND_ENUM
{
	fID,
	fType,
	Text3D:fLabel,
	fPickUp,
	fObject,
	Float:fPosX,
	Float:fPosY,
	Float:fPosZ,
	Float:fPosRX,
	Float:fPosRY,
	Float:fPosRZ,
	fVW,
	fInt,
	fStandOn
}
new FoodStand[MAX_FOOD_STAND][FOODSTAND_ENUM];
#define PRICE_BURGER 10
#define PRICE_PIZZA 15
#define PRICE_CHICKEN 7
#define PRICE_HOTDOG 5


enum DROP_ENUM
{
	dropID,
	dropAmount,
	dropObject,
	Float:dropPosX,
	Float:dropPosY,
	Float:dropPosZ,
	Float:dropPosRX,
	Float:dropPosRY,
	Float:dropPosRZ,
	dropInt,
	dropVW
}
new ItemDrop[MAX_ITEM_DROPS][DROP_ENUM];

enum FOOD_DROPS_ENUM
{
    foodDropped,
	foodObject,
	foodModel,
	Float:foodPosX,
	Float:foodPosY,
	Float:foodPosZ,
	foodVW,
	foodInt,
	foodTime
}
new FoodDrop[MAX_FOOD_DROPS][FOOD_DROPS_ENUM];

new police_skins[] =
	{265, 266, 267, 280, 281, 282, 284, 286, 300, 301, 302, 303, 304, 305, 306, 307, 283, 288, 309};

new fd_skins[] =
	{274, 275, 276, 277, 278, 279, 308, 305, 309, 311, 304, 303};

new docs_skins[] =
	{71, 281, 286, 288, 304, 305, 265, 267, 310, 311, 309, 306, 308, 211, 285};

new city_skins[] =
	{147, 186, 187, 295, 17, 91, 93, 141, 150};

enum FACTION_ENUM
{
	fID,
	fPickUp,
	fName[32],
	Float:fPosX,
	Float:fPosY,
	Float:fPosZ,
	fSpawnInt,
	fSpawnVW,
	fJoinRank,
	fType,
	fRanks,
	fChatON,
	fColor,
	Float:fUniformX,
	Float:fUniformY,
	Float:fUniformZ,
	fUniformInt,
	fUniformVW,
	fPoint,
	fPointTime,
	fON
};

new Pickup_LSPD;//duty 54th LSPD

new Factions[MAX_FACTIONS][FACTION_ENUM];
new FactionRanks[MAX_FACTIONS][20][32];
#define GetRankName(%0) FactionRanks[PlayerInfo[%0][pFaction]][PlayerInfo[%0][pRank]-1]

enum PAYPHONE_ENUM
{
	phID,
	phType,
	Float: phX,
	Float: phY,
	Float: phZ,
	Float: phRX,
	Float: phRY,
	Float: phRZ,
	phInt,
	phVW,
	phNumber,
	//Local
	phObj,
	Text3D:phLabel,
	phUsed
}
new PayphoneInfo[MAX_PAYPHONES][PAYPHONE_ENUM];

enum ENTRANCE_ENUM
{
	eID,
	Float: eEnterX,
	Float: eEnterY,
	Float: eEnterZ,
	Float: eEnterA,
	Float: eExitX,
	Float: eExitY,
	Float: eExitZ,
	Float: eExitA,
	eText[128],
	eEnterInt,
	eEnterVW,
	eExitInt,
	eExitVW,
	eEnterPickup,
	eExitPickup,
	eLocked,
	eFaction,
	eVehicle,
	entranceOn
}

new EntranceInfo[MAX_ENTRANCE][ENTRANCE_ENUM];

enum MOVEABLE_GATES_ENUM
{
	gateID,
	gateModel,
	gateObject,
	gateInt,
	gateVW,
	gateFaction,
	gateOpened,
	Float:gatePosX,
	Float:gatePosY,
	Float:gatePosZ,
	Float:gatePosRX,
	Float:gatePosRY,
	Float:gatePosRZ,
	Float:gateSpeed,
	Float:gateRadius,
	Float:gateMoveX,
	Float:gateMoveY,
	Float:gateMoveZ,
	Float:gateMoveRX,
	Float:gateMoveRY,
	Float:gateMoveRZ,
	gateSound,
	gateObjectOn
}
new Gates[MAX_GATES][MOVEABLE_GATES_ENUM];

enum CCTV_ENUM
{
	tvID,
	tvObject,
	tvName[32],
	tvInt,
	tvVW,
	Float:tvPosX,
	Float:tvPosY,
	Float:tvPosZ,
	Float:tvPosRX,
	Float:tvPosRY,
	Float:tvPosRZ,
	tvObjectOn
}
new CCTVInfo[MAX_CCTV][CCTV_ENUM];

new
	bronze_str[] =
		{"DE SCOS"},
	bronze_str_2[] =
	    {"DE SCOS"};


new silver_str[] =
		{"DE SCOS"},
    silver_str_2[] =
		{"DE SCOS"},
    silver_str_3[] =
		{"DE SCOS"};


new gold_str[] =
		{"DE SCOS"},
    gold_str_2[] =
		{"DE SCOS"},
    gold_str_3[] =
		{"DE SCOS"};


enum CARSIGN_ENUM
{
	Model,
	Float:positionX,
	Float:positionY,
	Float:positionZ
}
new CarSignPosition[][CARSIGN_ENUM] =
{
	{461, 0.3, -1.0, -0.3},
	{462, 0.3, -1.0, -0.3},
	{525, 1.167443, -3.043605, 0.180004},
	{543, 1.030224, -2.722537, -0.200004},
	{473, 1.193565, -1.414345, 0.420029},
	{463, 0.3, -1.0, -0.3},
	{440, 1.002595, -2.681906, -0.459998},
	{600, 1.091160, -2.746158, -0.120002},
	{491, 0.953455, -2.979441, -0.239999},
	{410, 0.955007, -2.228608, -0.080001},
	{516, 1.027337, -2.962487, -0.170002},
	{418, 1.103214, -2.570087, -0.464830},
	{586, 0.3, -1.0, -0.3},
	{467, 1.028320, -2.999034, -0.214818},
	{547, 1.020201, -2.584710, -0.120000},
	{401, 1.054817, -2.480719, -0.140003},
	{549, 1.082301, -2.583779, -0.080000},
	{436, 0.916299, -2.549531, -0.050001},
	{420, 1.0, -2.9, -0.3},
	{517, 1.034572, -2.839301, -0.210004},
	{589, 0.992253, -2.355031, 0.000000},
	{518, 0.900428, -2.861342, -0.260004},
	{527, 0.982744, -2.393449, -0.110004},
	{551, 1.061103, -3.165968, -0.150003},
	{439, 1.006824, -2.595001, -0.270002},
	{445, 1.021359, -2.832397, -0.279996},
	{478, 1.052814, -2.609067, -0.380001},
	{492, 0.978229, -2.940849, -0.180002},
	{422, 0.983972, -2.524313, -0.420005},
	{529, 1.115404, -2.667127, -0.040000},
	{405, 0.980890, -2.784532, -0.210003},
	{466, 1.045667, -2.966061, -0.260004},
	{546, 1.069141, -2.793050, -0.070000},
	{540, 1.091474, -2.847417, -0.269996},
	{474, 1.069592, -2.866971, -0.390014},
	{526, 0.983719, -2.478292, -0.192113},
	{500, 0.890960, -2.004438, -0.320005},
	{483, 0.853677, -2.782062, -0.690004},
	{545, 0.928996, -2.174747, -0.480005},
	{419, 0.894909, -2.980162, -0.230004},
	{561, 0.979001, -2.623326, -0.240000},
	{459, 1.053846, -2.747935, -0.310001},
	{421, 0.904305, -3.054692, -0.350002},
	{458, 1.028704, -2.880819, -0.281234},
	{550, 1.069714, -2.771331, -0.190003},
	{576, 1.106926, -3.187511, -0.189998},
	{412, 1.076371, -3.572624, -0.280000},
	{438, 1.156400, -2.742904, -0.490127},
	{533, 0.974355, -2.592291, -0.180003},
	{534, 0.902085, -2.936193, -0.235802},
	{585, 1.040636, -3.108255, 0.000011},
	{507, 1.120712, -3.145817, -0.244607},
	{554, 1.174269, -2.955613, -0.229997},
	{567, 1.151497, -2.914819, -0.323813},
	{536, 0.993514, -3.115452, -0.260004},
	{599, 1.156144, -2.711604, -0.280002},
	{575, 0.988381, -2.790904, -0.090000},
	{490, 1.160361, -3.164604, -0.280003},
	{479, 0.989108, -2.917149, -0.140010},
	{489, 1.156144, -2.711604, -0.280002},
	{505, 1.156144, -2.711604, -0.280002},
	{431, 1.333595, -5.849972, -0.349942},
	{528, 1.144452, -2.726179, -0.440945},
	{523, 0.3, -1.0, -0.3},
	{581, 0.3, -1.0, -0.3},
	{596, 1.0, -2.9, -0.3},
	{597, 1.0, -2.9, -0.3},
	{598, 1.0, -2.9, -0.3},
	{542, 0.906872, -2.986380, 0.060001},
	{475, 0.950730, -2.742572, -0.130002},
	{413, 1.046246, -2.721698, -0.320005},
	{496, 0.977342, -2.171343, -0.080001},
	{535, 1.130306, -2.585677, -0.260024},
	{508, 1.315136, -3.968503, -0.799797},
	{426, 1.0, -2.9, -0.3},
	{404, 0.904094, -2.716050, -0.130002},
	{562, 0.932509, -2.307183, 0.000000},
	{580, 1.111744, -2.988797, -0.220002},
	{427, 1.165557, -3.895762, -0.450003},
	{498, 1.212809, -3.118173, -0.430007},
	{482, 1.020809, -2.521172, -0.500000},
	{566, 1.010413, -3.070576, -0.210004},
	{587, 1.092979, -2.675873, -0.070001},
	{423, 1.077004, -2.316038, -0.530009},
	{588, 1.292603, -4.102272, -0.280002},
	{559, 1.018711, -2.410182, -0.030000},
	{579, 1.126602, -2.781873, -0.121123},
	{400, 0.969509, -2.338449, -0.340002},
	{453, 1.779353, -4.521831, 0.782691},
	{402, 0.962478, -2.753054, -0.110001},
	{558, 0.952415, -2.535459, 0.080000},
	{480, 0.920290, -2.553400, -0.200003},
	{408, 1.345347, -3.027748, -0.510008},
	{602, 1.057301, -2.615010, -0.160005},
	{565, 0.836606, -2.065968, -0.050016},
	{555, 0.776128, -2.399894, -0.186654},
	{484, 1.914409, -6.640307, 0.918600},
	{430, 1.741363, -3.972848, 0.732989},
	{409, 0.922155, -3.940322, -0.160002},
	{560, 0.976966, -2.092453, -0.149999},
	{454, 2.659766, -4.882382, 0.413978},
	{603, 0.995825, -2.742580, -0.250000},
	{415, 1.000831, -2.276099, -0.170001},
	{446, 1.756320, -4.015568, 0.610863},
	{563, 1.339340, -1.450655, -0.110008},
	{497, 0.870477, -1.143729, 0.000000},
	{417, 0.810983, -4.166908, 0.830009},
	{487, 0.870477, -1.143729, 0.000000},
	{593, 0.493165, -2.364330, -0.396965},
	{509, 0.3, -1.0, -0.3},
	{510, 0.3, -1.0, -0.3},
	{481, 0.3, -1.0, -0.3},
	{477, 1.076897, -2.785017, -0.060000},
	{468, 0.3, -1.0, -0.3},
	{521, 0.3, -1.0, -0.3},
	{522, 0.3, -1.0, -0.3},
	{471, 0.3, -1.0, -0.3},
	{424, 0.931385, -1.469463, 0.310007},
	{541, 1.0, -2.3, -0.3},
	{429, 0.963224, -2.496615, -0.140003},
	{506, 0.955852, -2.359090, -0.229991},
	{448, 0.3, -1.0, -0.3},
	{601, 1.299075, -3.126926, 0.790003},
	{176, 1.333595, -5.849972, -0.349942},
	{416, 1.260592, -3.708050, -0.590007},
	{544, 1.096374, -2.750413, -0.619934},
	{552, 1.274269, -2.964355, 0.000000},
	{407, 1.311471, -3.237637, -0.580261}
};

#define MAX_SPIKE 20
enum SPIKE_ENUM
{
	sCreated,
    Float:sX,
    Float:sY,
    Float:sZ,
    sObject,
};
new SpikeInfo[MAX_SPIKE][SPIKE_ENUM];

enum APB_ENUM
{
	apbID,
	apbCharge[128],
	apbSuspect[MAX_PLAYER_NAME],
	apbOfficer[MAX_PLAYER_NAME],
	apbOn,
	apbFaction
}
new ApbInfo[MAX_APBS][APB_ENUM];

enum INSURANCE_ENUM
{
	insuranceModel,
	insurancePrice
}

new InsurancesPrice[][INSURANCE_ENUM] =
{
	{469, 4000},
   	{487, 6000},
   	{460, 7500},
   	{512, 4500},
   	{519, 9000},
   	{593, 7000},
   	{446, 1900},
   	{452, 1500},
   	{453, 900},
   	{454, 3000},
   	{473, 600},
   	{484, 2100},
   	{493, 2500},
   	{461, 900},
   	{462, 300},
   	{463, 650},
   	{468, 900},
   	{471, 900},
   	{521, 1100},
   	{522, 1500},
   	{581, 800},
   	{586, 700},
   	{409, 2000},
   	{421, 1200},
   	{426, 1200},
   	{434, 1500},
   	{480, 1500},
   	{507, 1350},
   	{533, 1350},
   	{545, 1350},
   	{551, 1100},
   	{555, 1500},
   	{560, 1900},
   	{580, 1700},
   	{401, 700},
   	{405, 900},
   	{410, 600},
   	{419, 650},
   	{436, 600},
   	{439, 700},
   	{445, 900},
   	{458, 700},
   	{466, 650},
   	{467, 650},
   	{482, 900},
   	{491, 800},
   	{492, 900},
   	{496, 900},
   	{516, 900},
	{517, 900},
   	{518, 700},
   	{526, 700},
   	{527, 600},
   	{529, 900},
   	{534, 750},
	{535, 900},
   	{536, 900},
   	{540, 900},
   	{546, 750},
   	{547, 600},
   	{550, 900},
   	{561, 900},
   	{566, 900},
   	{567, 900},
	{575, 900},
   	{585, 900},
   	{589, 900},
   	{404, 400},
   	{412, 450},
   	{418, 450},
   	{474, 450},
   	{475, 450},
   	{479, 450},
   	{542, 400},
   	{543, 400},
   	{549, 400},
   	{576, 450},
   	{600, 450},
   	{402, 2800},
   	{411, 4300},
   	{415, 4300},
   	{429, 3800},
   	{451, 4300},
   	{477, 3500},
   	{506, 3800},
   	{541, 3800},
   	{558, 2500},
   	{559, 3200},
   	{562, 3500},
   	{565, 2500},
   	{587, 2500},
   	{602, 2500},
   	{603, 2800},
   	{400, 950},
   	{470, 1800},
   	{489, 900},
   	{490, 2200},
   	{495, 1500},
   	{500, 900},
   	{554, 800},
   	{579, 1100},
   	{406, 1500},
   	{408, 1000},
   	{413, 800},
   	{414, 850},
   	{420, 700},
   	{422, 600},
   	{423, 700},
   	{431, 1000},
   	{437, 1000},
   	{438, 500},
   	{440, 800},
   	{455, 1500},
   	{456, 900},
   	{478, 600},
   	{498, 850},
   	{499, 900},
   	{524, 1500},
   	{525, 500},
   	{531, 400},
	{552, 800},
 	{578, 1000},
   	{588, 700},
   	{424, 1500},
   	{442, 700},
   	{457, 350},
   	{483, 750},
   	{508, 900},
   	{568, 2000},
   	{572, 300}
};

enum OWNED_CARS_ENUM
{
	carID,
	carDate[24],
	carModel,
	carColor1,
	carColor2,
	Float:carParkX,
	Float:carParkY,
	Float:carParkZ,
	Float:carParkA,
	carPlate[24],
	carOwner[MAX_PLAYER_NAME],
	carOwnerID,
	carOwnerPlayer,
	carAlarm,
	carLock,
	carImmob,
	carInsurance,
	carDestroyed,
	carDeath,
	carGps,
	carFuel,
	carRegistered,
	carBatteryStatus,
	Float:carBattery,
	carInv[MAX_VEHICLE_INVENTORY],
	carInvAmount[MAX_VEHICLE_INVENTORY],
	carComponent[14],
	carPaintJob,
	carRadio,
	carRadioOn,
	carRadioURL[156],
	carTrunkLock,
	carHoodLock,
	carComps,
	carOn,
	carAttach[MAX_VEHICLE_INVENTORY],
	carAttachObj[MAX_VEHICLE_INVENTORY],
	Float:carAttachPosX[MAX_VEHICLE_INVENTORY],
	Float:carAttachPosY[MAX_VEHICLE_INVENTORY],
	Float:carAttachPosZ[MAX_VEHICLE_INVENTORY],
	Float:carAttachRotX[MAX_VEHICLE_INVENTORY],
	Float:carAttachRotY[MAX_VEHICLE_INVENTORY],
	Float:carAttachRotZ[MAX_VEHICLE_INVENTORY],
	carAttach3DtextUse,
	carEngineStatus,
	Float:carEngine,
	Float:carMilliage,
	Float:carArmour,
	carType,
	carFaction,
	carInt,
	carVW,
	carObjectiveTime,
	carLocked,
	carEngineOn,
	carAlarmTime,
	carSiren[5],
	carAdmin,
	carDriver,
	carRent,
	carTerminate,

	carCargoObj[6],
	carCargoAmount[MAX_TRUCK_PRODUCT],
}

#define MAX_HEALTH_VEHICLE 750.0
new VehicleInfo[MAX_VEHICLES][OWNED_CARS_ENUM];
new default_VehicleInfo[OWNED_CARS_ENUM] = {0, ...};

new price_reg[2] = {0, 300},
	price_lock[6] = {0, 700, 1400, 2800, 5400, 8500},
	price_alarm[5] = {0, 600, 1600, 3500, 6200},
	price_immob[5] = {0, 800, 2200, 4600, 9100},
	price_radio[2] = {0, 400},
	price_gps[2] = {0, 1000};

new price_mod_lock[] = {900, 1500, 2400, 3600, 5100},
	price_mod_alarm[] = {700, 1800, 3200, 5000},
    price_mod_immob[] = {800, 2000, 4300, 8500};

enum COMP_ENUM
{
	compID,
	compPrice,
}

new max_vehicle_components[8] =
	{17, 20, 4, 17, 21, 29, 23, 22};

new vehicle_component[8][29][COMP_ENUM] =
{
 	{//Roti
	    {1025, 1100},
		{1073, 1300},
		{1074, 1500},
		{1075, 1500},
		{1076, 1800},
		{1077, 1600},
		{1078, 2100},
		{1079, 1400},
		{1080, 2400},
		{1081, 1600},
		{1082, 1900},
		{1083, 1900},
		{1084, 1800},
		{1085, 1600},
		{1096, 1700},
		{1097, 1700},
		{1098, 900},
		{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},
		{0,0},{0,0}
	},
	{//Spoilere
	    {1000, 800},
		{1001, 980},
		{1002, 890},
		{1003, 940},
		{1014, 950},
		{1015, 930},
		{1016, 850},
		{1023, 900},
		{1049, 980},
		{1050, 800},
		{1058, 950},
		{1060, 780},
		{1138, 1450},
		{1139, 1200},
		{1146, 1000},
		{1147, 1450},
		{1158, 1300},
		{1162, 1200},
		{1163, 1100},
		{1164, 1300},
		{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}
	},
	{//Altele
        {1004, 900},
		{1005, 750},
		{1011, 800},
		{1012, 850},
		{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},
		{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},
		{0,0},{0,0},{0,0},{0,0},{0,0}
	},
	{//Acoperisuri
	    {1006, 650},
		{1032, 890},
		{1033, 950},
		{1035, 950},
		{1038, 890},
		{1053, 850},
		{1054, 780},
		{1055, 780},
		{1061, 850},
		{1067, 890},
		{1068, 950},
		{1088, 780},
		{1091, 850},
		{1103, 1300},
		{1128, 1550},
		{1130, 1550},
		{1131, 1300},
		{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},
		{0,0},{0,0}
	},
	{//Side skirts
		{1017, 300},
		{1027, 700},
		{1030, 800},
		{1039, 980},
		{1040, 850},
		{1051, 800},
		{1052, 700},
		{1062, 770},
		{1063, 750},
		{1071, 900},
		{1072, 850},
		{1094, 800},
		{1099, 500},
		{1093, 700},
		{1101, 850},
		{1102, 400},
		{1107, 400},
		{1120, 550},
		{1121, 800},
		{1124, 690},
		{1137, 400},
		{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}
	},
	{//Esapament
	    {1018, 800},
		{1019, 700},
		{1020, 580},
		{1021, 550},
		{1022, 550},
		{1028, 1000},
		{1029, 850},
		{1034, 1000},
		{1037, 850},
		{1043, 750},
		{1044, 650},
		{1045, 800},
		{1046, 900},
		{1059, 850},
		{1064, 900},
		{1065, 850},
		{1066, 1000},
		{1089, 800},
		{1092, 900},
		{1104, 800},
		{1105, 700},
		{1113, 1000},
		{1114, 900},
		{1126, 700},
		{1127, 800},
		{1129, 650},
		{1132, 750},
		{1135, 800},
		{1136, 700}
	},
	{//Front bumper
		{1117, 2250},
		{1152, 2650},
		{1153, 2800},
		{1155, 2800},
		{1157, 2650},
		{1160, 3100},
		{1165, 2600},
		{1166, 2800},
		{1169, 3200},
		{1170, 2800},
		{1171, 3200},
		{1172, 2800},
		{1173, 2800},
		{1174, 2250},
		{1175, 2100},
		{1179, 2400},
		{1181, 2300},
		{1182, 2350},
		{1185, 2200},
		{1188, 2500},
		{1189, 2350},
		{1190, 2150},
		{1191, 2250},
		{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}
	},
	{//Rear bumper
		{1141, 3000},
		{1140, 2900},
		{1148, 3000},
		{1149, 3100},
		{1150, 2650},
		{1151, 2800},
		{1154, 2650},
		{1156, 2800},
		{1159, 2900},
		{1161, 2850},
		{1167, 2750},
		{1168, 2700},
		{1176, 2200},
		{1177, 2250},
		{1178, 2300},
		{1180, 2350},
		{1183, 2150},
		{1184, 2200},
		{1186, 2300},
		{1187, 2200},
		{1192, 2100},
		{1193, 2200},
		{0,0},{0,0},{0,0},{0,0},{0,0},{0,0},{0,0}
	}
};

//??????? ???????
#define MAX_FIRES 100
enum FIRE_ENUM
{
	fireOn,
	fireObj,
	Float:firePos[3],
	fireVW,
	fireInt,
	fireHealth,
	fireTimer,
	Text3D:fireLabel
};

new FiresInfo[MAX_FIRES][FIRE_ENUM];
//

//Logs
#define MONEY_LOG   	1
#define PROPERTY_LOG    2
#define ADMIN_LOG       3
#define RAM_LOG         4
#define VEHICLE_LOG     5
#define WEAPON_LOG      6
#define ITEM_LOG        7
#define DONATE_LOG      8

stock insert_log(const string[], type, subtype, playerid = INVALID_PLAYER_ID, ID = 0)
{
    new query[1024];
	mysql_format(dbHandle, query, sizeof(query), "INSERT INTO `logs` (userid,text,data,type,subtype) VALUES (%i,'%s','%s',%i,%i)",
	(playerid == INVALID_PLAYER_ID)?((ID != 0)?(ID):(0)):(PlayerInfo[playerid][pID]),
	string,
 	GetFullDate(),
 	type,
 	subtype);

	mysql_tquery(dbHandle, query);
	return 1;
}

enum SAZONE_MAIN
{
	SAZONE_NAME[28],
	Float:SAZONE_AREA[6]
};

static const gSAZones[][SAZONE_MAIN] = {
	//	NAME                            AREA (Xmin,Ymin,Zmin,Xmax,Ymax,Zmax)
	{"The Big Ear",	                {-410.00,1403.30,-3.00,-137.90,1681.20,200.00}},
	{"Aldea Malvada",               {-1372.10,2498.50,0.00,-1277.50,2615.30,200.00}},
	{"Angel Pine",                  {-2324.90,-2584.20,-6.10,-1964.20,-2212.10,200.00}},
	{"Arco del Oeste",              {-901.10,2221.80,0.00,-592.00,2571.90,200.00}},
	{"Avispa Country Club",         {-2646.40,-355.40,0.00,-2270.00,-222.50,200.00}},
	{"Avispa Country Club",         {-2831.80,-430.20,-6.10,-2646.40,-222.50,200.00}},
	{"Avispa Country Club",         {-2361.50,-417.10,0.00,-2270.00,-355.40,200.00}},
	{"Avispa Country Club",         {-2667.80,-302.10,-28.80,-2646.40,-262.30,71.10}},
	{"Avispa Country Club",         {-2470.00,-355.40,0.00,-2270.00,-318.40,46.10}},
	{"Avispa Country Club",         {-2550.00,-355.40,0.00,-2470.00,-318.40,39.70}},
	{"Back o Beyond",               {-1166.90,-2641.10,0.00,-321.70,-1856.00,200.00}},
	{"Battery Point",               {-2741.00,1268.40,-4.50,-2533.00,1490.40,200.00}},
	{"Bayside",                     {-2741.00,2175.10,0.00,-2353.10,2722.70,200.00}},
	{"Bayside Marina",              {-2353.10,2275.70,0.00,-2153.10,2475.70,200.00}},
	{"Beacon Hill",                 {-399.60,-1075.50,-1.40,-319.00,-977.50,198.50}},
	{"Blackfield",                  {964.30,1203.20,-89.00,1197.30,1403.20,110.90}},
	{"Blackfield",                  {964.30,1403.20,-89.00,1197.30,1726.20,110.90}},
	{"Blackfield Chapel",           {1375.60,596.30,-89.00,1558.00,823.20,110.90}},
	{"Blackfield Chapel",           {1325.60,596.30,-89.00,1375.60,795.00,110.90}},
	{"Blackfield Intersection",     {1197.30,1044.60,-89.00,1277.00,1163.30,110.90}},
	{"Blackfield Intersection",     {1166.50,795.00,-89.00,1375.60,1044.60,110.90}},
	{"Blackfield Intersection",     {1277.00,1044.60,-89.00,1315.30,1087.60,110.90}},
	{"Blackfield Intersection",     {1375.60,823.20,-89.00,1457.30,919.40,110.90}},
	{"Blueberry",                   {104.50,-220.10,2.30,349.60,152.20,200.00}},
	{"Blueberry",                   {19.60,-404.10,3.80,349.60,-220.10,200.00}},
	{"Blueberry Acres",             {-319.60,-220.10,0.00,104.50,293.30,200.00}},
	{"Pershing Apartments",         {2087.30,1543.20,-89.00,2437.30,1703.20,110.90}},
	{"Pershing Apartments",         {2137.40,1703.20,-89.00,2437.30,1783.20,110.90}},
	{"Calton Heights",              {-2274.10,744.10,-6.10,-1982.30,1358.90,200.00}},
	{"Chinatown",                   {-2274.10,578.30,-7.60,-2078.60,744.10,200.00}},
	{"City Hall",                   {-2867.80,277.40,-9.10,-2593.40,458.40,200.00}},
	{"Come-A-Lot",                  {2087.30,943.20,-89.00,2623.10,1203.20,110.90}},
	{"Commerce",                    {1323.90,-1842.20,-89.00,1701.90,-1722.20,110.90}},
	{"Commerce",                    {1323.90,-1722.20,-89.00,1440.90,-1577.50,110.90}},
	{"Commerce",                    {1370.80,-1577.50,-89.00,1463.90,-1384.90,110.90}},
	{"Commerce",                    {1463.90,-1577.50,-89.00,1667.90,-1430.80,110.90}},
	{"Commerce",                    {1583.50,-1722.20,-89.00,1758.90,-1577.50,110.90}},
	{"Commerce",                    {1667.90,-1577.50,-89.00,1812.60,-1430.80,110.90}},
	{"Conference Center",           {1046.10,-1804.20,-89.00,1323.90,-1722.20,110.90}},
	{"Conference Center",           {1073.20,-1842.20,-89.00,1323.90,-1804.20,110.90}},
	{"Cranberry Station",           {-2007.80,56.30,0.00,-1922.00,224.70,100.00}},
	{"Creek",                       {2749.90,1937.20,-89.00,2921.60,2669.70,110.90}},
	{"Dillimore",                   {580.70,-674.80,-9.50,861.00,-404.70,200.00}},
	{"Doherty",                     {-2270.00,-324.10,-0.00,-1794.90,-222.50,200.00}},
	{"Doherty",                     {-2173.00,-222.50,-0.00,-1794.90,265.20,200.00}},
	{"Downtown",                    {-1982.30,744.10,-6.10,-1871.70,1274.20,200.00}},
	{"Downtown",                    {-1871.70,1176.40,-4.50,-1620.30,1274.20,200.00}},
	{"Downtown",                    {-1700.00,744.20,-6.10,-1580.00,1176.50,200.00}},
	{"Downtown",                    {-1580.00,744.20,-6.10,-1499.80,1025.90,200.00}},
	{"Downtown",                    {-2078.60,578.30,-7.60,-1499.80,744.20,200.00}},
	{"Downtown",                    {-1993.20,265.20,-9.10,-1794.90,578.30,200.00}},
	{"Downtown Los Santos",         {1463.90,-1430.80,-89.00,1724.70,-1290.80,110.90}},
	{"Downtown Los Santos",         {1724.70,-1430.80,-89.00,1812.60,-1250.90,110.90}},
	{"Downtown Los Santos",         {1463.90,-1290.80,-89.00,1724.70,-1150.80,110.90}},
	{"Downtown Los Santos",         {1370.80,-1384.90,-89.00,1463.90,-1170.80,110.90}},
	{"Downtown Los Santos",         {1724.70,-1250.90,-89.00,1812.60,-1150.80,110.90}},
	{"Downtown Los Santos",         {1370.80,-1170.80,-89.00,1463.90,-1130.80,110.90}},
	{"Downtown Los Santos",         {1378.30,-1130.80,-89.00,1463.90,-1026.30,110.90}},
	{"Downtown Los Santos",         {1391.00,-1026.30,-89.00,1463.90,-926.90,110.90}},
	{"Downtown Los Santos",         {1507.50,-1385.20,110.90,1582.50,-1325.30,335.90}},
	{"East Beach",                  {2632.80,-1852.80,-89.00,2959.30,-1668.10,110.90}},
	{"East Beach",                  {2632.80,-1668.10,-89.00,2747.70,-1393.40,110.90}},
	{"East Beach",                  {2747.70,-1668.10,-89.00,2959.30,-1498.60,110.90}},
	{"East Beach",                  {2747.70,-1498.60,-89.00,2959.30,-1120.00,110.90}},
	{"East Los Santos",             {2421.00,-1628.50,-89.00,2632.80,-1454.30,110.90}},
	{"East Los Santos",             {2222.50,-1628.50,-89.00,2421.00,-1494.00,110.90}},
	{"East Los Santos",             {2266.20,-1494.00,-89.00,2381.60,-1372.00,110.90}},
	{"East Los Santos",             {2381.60,-1494.00,-89.00,2421.00,-1454.30,110.90}},
	{"East Los Santos",             {2281.40,-1372.00,-89.00,2381.60,-1135.00,110.90}},
	{"East Los Santos",             {2381.60,-1454.30,-89.00,2462.10,-1135.00,110.90}},
	{"East Los Santos",             {2462.10,-1454.30,-89.00,2581.70,-1135.00,110.90}},
	{"Easter Basin",                {-1794.90,249.90,-9.10,-1242.90,578.30,200.00}},
	{"Easter Basin",                {-1794.90,-50.00,-0.00,-1499.80,249.90,200.00}},
	{"Easter Bay Airport",          {-1499.80,-50.00,-0.00,-1242.90,249.90,200.00}},
	{"Easter Bay Airport",          {-1794.90,-730.10,-3.00,-1213.90,-50.00,200.00}},
	{"Easter Bay Airport",          {-1213.90,-730.10,0.00,-1132.80,-50.00,200.00}},
	{"Easter Bay Airport",          {-1242.90,-50.00,0.00,-1213.90,578.30,200.00}},
	{"Easter Bay Airport",          {-1213.90,-50.00,-4.50,-947.90,578.30,200.00}},
	{"Easter Bay Airport",          {-1315.40,-405.30,15.40,-1264.40,-209.50,25.40}},
	{"Easter Bay Airport",          {-1354.30,-287.30,15.40,-1315.40,-209.50,25.40}},
	{"Easter Bay Airport",          {-1490.30,-209.50,15.40,-1264.40,-148.30,25.40}},
	{"Easter Bay Chemicals",        {-1132.80,-768.00,0.00,-956.40,-578.10,200.00}},
	{"Easter Bay Chemicals",        {-1132.80,-787.30,0.00,-956.40,-768.00,200.00}},
	{"El Castillo del Diablo",      {-464.50,2217.60,0.00,-208.50,2580.30,200.00}},
	{"El Castillo del Diablo",      {-208.50,2123.00,-7.60,114.00,2337.10,200.00}},
	{"El Castillo del Diablo",      {-208.50,2337.10,0.00,8.40,2487.10,200.00}},
	{"El Corona",                   {1812.60,-2179.20,-89.00,1970.60,-1852.80,110.90}},
	{"El Corona",                   {1692.60,-2179.20,-89.00,1812.60,-1842.20,110.90}},
	{"El Quebrados",                {-1645.20,2498.50,0.00,-1372.10,2777.80,200.00}},
	{"Esplanade East",              {-1620.30,1176.50,-4.50,-1580.00,1274.20,200.00}},
	{"Esplanade East",              {-1580.00,1025.90,-6.10,-1499.80,1274.20,200.00}},
	{"Esplanade East",              {-1499.80,578.30,-79.60,-1339.80,1274.20,20.30}},
	{"Esplanade North",             {-2533.00,1358.90,-4.50,-1996.60,1501.20,200.00}},
	{"Esplanade North",             {-1996.60,1358.90,-4.50,-1524.20,1592.50,200.00}},
	{"Esplanade North",             {-1982.30,1274.20,-4.50,-1524.20,1358.90,200.00}},
	{"Fallen Tree",                 {-792.20,-698.50,-5.30,-452.40,-380.00,200.00}},
	{"Fallow Bridge",               {434.30,366.50,0.00,603.00,555.60,200.00}},
	{"Fern Ridge",                  {508.10,-139.20,0.00,1306.60,119.50,200.00}},
	{"Financial",                   {-1871.70,744.10,-6.10,-1701.30,1176.40,300.00}},
	{"Fisher's Lagoon",             {1916.90,-233.30,-100.00,2131.70,13.80,200.00}},
	{"Flint Intersection",          {-187.70,-1596.70,-89.00,17.00,-1276.60,110.90}},
	{"Flint Range",                 {-594.10,-1648.50,0.00,-187.70,-1276.60,200.00}},
	{"Fort Carson",                 {-376.20,826.30,-3.00,123.70,1220.40,200.00}},
	{"Foster Valley",               {-2270.00,-430.20,-0.00,-2178.60,-324.10,200.00}},
	{"Foster Valley",               {-2178.60,-599.80,-0.00,-1794.90,-324.10,200.00}},
	{"Foster Valley",               {-2178.60,-1115.50,0.00,-1794.90,-599.80,200.00}},
	{"Foster Valley",               {-2178.60,-1250.90,0.00,-1794.90,-1115.50,200.00}},
	{"Frederick Bridge",            {2759.20,296.50,0.00,2774.20,594.70,200.00}},
	{"Gant Bridge",                 {-2741.40,1659.60,-6.10,-2616.40,2175.10,200.00}},
	{"Gant Bridge",                 {-2741.00,1490.40,-6.10,-2616.40,1659.60,200.00}},
	{"Ganton",                      {2222.50,-1852.80,-89.00,2632.80,-1722.30,110.90}},
	{"Ganton",                      {2222.50,-1722.30,-89.00,2632.80,-1628.50,110.90}},
	{"Garcia",                      {-2411.20,-222.50,-0.00,-2173.00,265.20,200.00}},
	{"Garcia",                      {-2395.10,-222.50,-5.30,-2354.00,-204.70,200.00}},
	{"Garver Bridge",               {-1339.80,828.10,-89.00,-1213.90,1057.00,110.90}},
	{"Garver Bridge",               {-1213.90,950.00,-89.00,-1087.90,1178.90,110.90}},
	{"Garver Bridge",               {-1499.80,696.40,-179.60,-1339.80,925.30,20.30}},
	{"Glen Park",                   {1812.60,-1449.60,-89.00,1996.90,-1350.70,110.90}},
	{"Glen Park",                   {1812.60,-1100.80,-89.00,1994.30,-973.30,110.90}},
	{"Glen Park",                   {1812.60,-1350.70,-89.00,2056.80,-1100.80,110.90}},
	{"Green Palms",                 {176.50,1305.40,-3.00,338.60,1520.70,200.00}},
	{"Greenglass College",          {964.30,1044.60,-89.00,1197.30,1203.20,110.90}},
	{"Greenglass College",          {964.30,930.80,-89.00,1166.50,1044.60,110.90}},
	{"Hampton Barns",               {603.00,264.30,0.00,761.90,366.50,200.00}},
	{"Hankypanky Point",            {2576.90,62.10,0.00,2759.20,385.50,200.00}},
	{"Harry Gold Parkway",          {1777.30,863.20,-89.00,1817.30,2342.80,110.90}},
	{"Hashbury",                    {-2593.40,-222.50,-0.00,-2411.20,54.70,200.00}},
	{"Hilltop Farm",                {967.30,-450.30,-3.00,1176.70,-217.90,200.00}},
	{"Hunter Quarry",               {337.20,710.80,-115.20,860.50,1031.70,203.70}},
	{"Idlewood",                    {1812.60,-1852.80,-89.00,1971.60,-1742.30,110.90}},
	{"Idlewood",                    {1812.60,-1742.30,-89.00,1951.60,-1602.30,110.90}},
	{"Idlewood",                    {1951.60,-1742.30,-89.00,2124.60,-1602.30,110.90}},
	{"Idlewood",                    {1812.60,-1602.30,-89.00,2124.60,-1449.60,110.90}},
	{"Idlewood",                    {2124.60,-1742.30,-89.00,2222.50,-1494.00,110.90}},
	{"Idlewood",                    {1971.60,-1852.80,-89.00,2222.50,-1742.30,110.90}},
	{"Jefferson",                   {1996.90,-1449.60,-89.00,2056.80,-1350.70,110.90}},
	{"Jefferson",                   {2124.60,-1494.00,-89.00,2266.20,-1449.60,110.90}},
	{"Jefferson",                   {2056.80,-1372.00,-89.00,2281.40,-1210.70,110.90}},
	{"Jefferson",                   {2056.80,-1210.70,-89.00,2185.30,-1126.30,110.90}},
	{"Jefferson",                   {2185.30,-1210.70,-89.00,2281.40,-1154.50,110.90}},
	{"Jefferson",                   {2056.80,-1449.60,-89.00,2266.20,-1372.00,110.90}},
	{"Julius Thruway East",         {2623.10,943.20,-89.00,2749.90,1055.90,110.90}},
	{"Julius Thruway East",         {2685.10,1055.90,-89.00,2749.90,2626.50,110.90}},
	{"Julius Thruway East",         {2536.40,2442.50,-89.00,2685.10,2542.50,110.90}},
	{"Julius Thruway East",         {2625.10,2202.70,-89.00,2685.10,2442.50,110.90}},
	{"Julius Thruway North",        {2498.20,2542.50,-89.00,2685.10,2626.50,110.90}},
	{"Julius Thruway North",        {2237.40,2542.50,-89.00,2498.20,2663.10,110.90}},
	{"Julius Thruway North",        {2121.40,2508.20,-89.00,2237.40,2663.10,110.90}},
	{"Julius Thruway North",        {1938.80,2508.20,-89.00,2121.40,2624.20,110.90}},
	{"Julius Thruway North",        {1534.50,2433.20,-89.00,1848.40,2583.20,110.90}},
	{"Julius Thruway North",        {1848.40,2478.40,-89.00,1938.80,2553.40,110.90}},
	{"Julius Thruway North",        {1704.50,2342.80,-89.00,1848.40,2433.20,110.90}},
	{"Julius Thruway North",        {1377.30,2433.20,-89.00,1534.50,2507.20,110.90}},
	{"Julius Thruway South",        {1457.30,823.20,-89.00,2377.30,863.20,110.90}},
	{"Julius Thruway South",        {2377.30,788.80,-89.00,2537.30,897.90,110.90}},
	{"Julius Thruway West",         {1197.30,1163.30,-89.00,1236.60,2243.20,110.90}},
	{"Julius Thruway West",         {1236.60,2142.80,-89.00,1297.40,2243.20,110.90}},
	{"Juniper Hill",                {-2533.00,578.30,-7.60,-2274.10,968.30,200.00}},
	{"Juniper Hollow",              {-2533.00,968.30,-6.10,-2274.10,1358.90,200.00}},
	{"K.A.C.C. Military Fuels",     {2498.20,2626.50,-89.00,2749.90,2861.50,110.90}},
	{"Kincaid Bridge",              {-1339.80,599.20,-89.00,-1213.90,828.10,110.90}},
	{"Kincaid Bridge",              {-1213.90,721.10,-89.00,-1087.90,950.00,110.90}},
	{"Kincaid Bridge",              {-1087.90,855.30,-89.00,-961.90,986.20,110.90}},
	{"King's",                      {-2329.30,458.40,-7.60,-1993.20,578.30,200.00}},
	{"King's",                      {-2411.20,265.20,-9.10,-1993.20,373.50,200.00}},
	{"King's",                      {-2253.50,373.50,-9.10,-1993.20,458.40,200.00}},
	{"LVA Freight Depot",           {1457.30,863.20,-89.00,1777.40,1143.20,110.90}},
	{"LVA Freight Depot",           {1375.60,919.40,-89.00,1457.30,1203.20,110.90}},
	{"LVA Freight Depot",           {1277.00,1087.60,-89.00,1375.60,1203.20,110.90}},
	{"LVA Freight Depot",           {1315.30,1044.60,-89.00,1375.60,1087.60,110.90}},
	{"LVA Freight Depot",           {1236.60,1163.40,-89.00,1277.00,1203.20,110.90}},
	{"Las Barrancas",               {-926.10,1398.70,-3.00,-719.20,1634.60,200.00}},
	{"Las Brujas",                  {-365.10,2123.00,-3.00,-208.50,2217.60,200.00}},
	{"Las Colinas",                 {1994.30,-1100.80,-89.00,2056.80,-920.80,110.90}},
	{"Las Colinas",                 {2056.80,-1126.30,-89.00,2126.80,-920.80,110.90}},
	{"Las Colinas",                 {2185.30,-1154.50,-89.00,2281.40,-934.40,110.90}},
	{"Las Colinas",                 {2126.80,-1126.30,-89.00,2185.30,-934.40,110.90}},
	{"Las Colinas",                 {2747.70,-1120.00,-89.00,2959.30,-945.00,110.90}},
	{"Las Colinas",                 {2632.70,-1135.00,-89.00,2747.70,-945.00,110.90}},
	{"Las Colinas",                 {2281.40,-1135.00,-89.00,2632.70,-945.00,110.90}},
	{"Las Payasadas",               {-354.30,2580.30,2.00,-133.60,2816.80,200.00}},
	{"Las Venturas Airport",        {1236.60,1203.20,-89.00,1457.30,1883.10,110.90}},
	{"Las Venturas Airport",        {1457.30,1203.20,-89.00,1777.30,1883.10,110.90}},
	{"Las Venturas Airport",        {1457.30,1143.20,-89.00,1777.40,1203.20,110.90}},
	{"Las Venturas Airport",        {1515.80,1586.40,-12.50,1729.90,1714.50,87.50}},
	{"Last Dime Motel",             {1823.00,596.30,-89.00,1997.20,823.20,110.90}},
	{"Leafy Hollow",                {-1166.90,-1856.00,0.00,-815.60,-1602.00,200.00}},
	{"Liberty City",                {-1000.00,400.00,1300.00,-700.00,600.00,1400.00}},
	{"Lil' Probe Inn",              {-90.20,1286.80,-3.00,153.80,1554.10,200.00}},
	{"Linden Side",                 {2749.90,943.20,-89.00,2923.30,1198.90,110.90}},
	{"Linden Station",              {2749.90,1198.90,-89.00,2923.30,1548.90,110.90}},
	{"Linden Station",              {2811.20,1229.50,-39.50,2861.20,1407.50,60.40}},
	{"Little Mexico",               {1701.90,-1842.20,-89.00,1812.60,-1722.20,110.90}},
	{"Little Mexico",               {1758.90,-1722.20,-89.00,1812.60,-1577.50,110.90}},
	{"Los Flores",                  {2581.70,-1454.30,-89.00,2632.80,-1393.40,110.90}},
	{"Los Flores",                  {2581.70,-1393.40,-89.00,2747.70,-1135.00,110.90}},
	{"Los Santos International",    {1249.60,-2394.30,-89.00,1852.00,-2179.20,110.90}},
	{"Los Santos International",    {1852.00,-2394.30,-89.00,2089.00,-2179.20,110.90}},
	{"Los Santos International",    {1382.70,-2730.80,-89.00,2201.80,-2394.30,110.90}},
	{"Los Santos International",    {1974.60,-2394.30,-39.00,2089.00,-2256.50,60.90}},
	{"Los Santos International",    {1400.90,-2669.20,-39.00,2189.80,-2597.20,60.90}},
	{"Los Santos International",    {2051.60,-2597.20,-39.00,2152.40,-2394.30,60.90}},
	{"Marina",                      {647.70,-1804.20,-89.00,851.40,-1577.50,110.90}},
	{"Marina",                      {647.70,-1577.50,-89.00,807.90,-1416.20,110.90}},
	{"Marina",                      {807.90,-1577.50,-89.00,926.90,-1416.20,110.90}},
	{"Market",                      {787.40,-1416.20,-89.00,1072.60,-1310.20,110.90}},
	{"Market",                      {952.60,-1310.20,-89.00,1072.60,-1130.80,110.90}},
	{"Market",                      {1072.60,-1416.20,-89.00,1370.80,-1130.80,110.90}},
	{"Market",                      {926.90,-1577.50,-89.00,1370.80,-1416.20,110.90}},
	{"Market Station",              {787.40,-1410.90,-34.10,866.00,-1310.20,65.80}},
	{"Martin Bridge",               {-222.10,293.30,0.00,-122.10,476.40,200.00}},
	{"Missionary Hill",             {-2994.40,-811.20,0.00,-2178.60,-430.20,200.00}},
	{"Montgomery",                  {1119.50,119.50,-3.00,1451.40,493.30,200.00}},
	{"Montgomery",                  {1451.40,347.40,-6.10,1582.40,420.80,200.00}},
	{"Montgomery Intersection",     {1546.60,208.10,0.00,1745.80,347.40,200.00}},
	{"Montgomery Intersection",     {1582.40,347.40,0.00,1664.60,401.70,200.00}},
	{"Mulholland",                  {1414.00,-768.00,-89.00,1667.60,-452.40,110.90}},
	{"Mulholland",                  {1281.10,-452.40,-89.00,1641.10,-290.90,110.90}},
	{"Mulholland",                  {1269.10,-768.00,-89.00,1414.00,-452.40,110.90}},
	{"Mulholland",                  {1357.00,-926.90,-89.00,1463.90,-768.00,110.90}},
	{"Mulholland",                  {1318.10,-910.10,-89.00,1357.00,-768.00,110.90}},
	{"Mulholland",                  {1169.10,-910.10,-89.00,1318.10,-768.00,110.90}},
	{"Mulholland",                  {768.60,-954.60,-89.00,952.60,-860.60,110.90}},
	{"Mulholland",                  {687.80,-860.60,-89.00,911.80,-768.00,110.90}},
	{"Mulholland",                  {737.50,-768.00,-89.00,1142.20,-674.80,110.90}},
	{"Mulholland",                  {1096.40,-910.10,-89.00,1169.10,-768.00,110.90}},
	{"Mulholland",                  {952.60,-937.10,-89.00,1096.40,-860.60,110.90}},
	{"Mulholland",                  {911.80,-860.60,-89.00,1096.40,-768.00,110.90}},
	{"Mulholland",                  {861.00,-674.80,-89.00,1156.50,-600.80,110.90}},
	{"Mulholland Intersection",     {1463.90,-1150.80,-89.00,1812.60,-768.00,110.90}},
	{"North Rock",                  {2285.30,-768.00,0.00,2770.50,-269.70,200.00}},
	{"Ocean Docks",                 {2373.70,-2697.00,-89.00,2809.20,-2330.40,110.90}},
	{"Ocean Docks",                 {2201.80,-2418.30,-89.00,2324.00,-2095.00,110.90}},
	{"Ocean Docks",                 {2324.00,-2302.30,-89.00,2703.50,-2145.10,110.90}},
	{"Ocean Docks",                 {2089.00,-2394.30,-89.00,2201.80,-2235.80,110.90}},
	{"Ocean Docks",                 {2201.80,-2730.80,-89.00,2324.00,-2418.30,110.90}},
	{"Ocean Docks",                 {2703.50,-2302.30,-89.00,2959.30,-2126.90,110.90}},
	{"Ocean Docks",                 {2324.00,-2145.10,-89.00,2703.50,-2059.20,110.90}},
	{"Ocean Flats",                 {-2994.40,277.40,-9.10,-2867.80,458.40,200.00}},
	{"Ocean Flats",                 {-2994.40,-222.50,-0.00,-2593.40,277.40,200.00}},
	{"Ocean Flats",                 {-2994.40,-430.20,-0.00,-2831.80,-222.50,200.00}},
	{"Octane Springs",              {338.60,1228.50,0.00,664.30,1655.00,200.00}},
	{"Old Venturas Strip",          {2162.30,2012.10,-89.00,2685.10,2202.70,110.90}},
	{"Palisades",                   {-2994.40,458.40,-6.10,-2741.00,1339.60,200.00}},
	{"Palomino Creek",              {2160.20,-149.00,0.00,2576.90,228.30,200.00}},
	{"Paradiso",                    {-2741.00,793.40,-6.10,-2533.00,1268.40,200.00}},
	{"Pershing Square",             {1440.90,-1722.20,-89.00,1583.50,-1577.50,110.90}},
	{"Pilgrim",                     {2437.30,1383.20,-89.00,2624.40,1783.20,110.90}},
	{"Pilgrim",                     {2624.40,1383.20,-89.00,2685.10,1783.20,110.90}},
	{"Pilson Intersection",         {1098.30,2243.20,-89.00,1377.30,2507.20,110.90}},
	{"Pirates in Men's Pants",      {1817.30,1469.20,-89.00,2027.40,1703.20,110.90}},
	{"Playa Del Seville",           {2703.50,-2126.90,-89.00,2959.30,-1852.80,110.90}},
	{"Prickle Pine",                {1534.50,2583.20,-89.00,1848.40,2863.20,110.90}},
	{"Prickle Pine",                {1117.40,2507.20,-89.00,1534.50,2723.20,110.90}},
	{"Prickle Pine",                {1848.40,2553.40,-89.00,1938.80,2863.20,110.90}},
	{"Prickle Pine",                {1938.80,2624.20,-89.00,2121.40,2861.50,110.90}},
	{"Queens",                      {-2533.00,458.40,0.00,-2329.30,578.30,200.00}},
	{"Queens",                      {-2593.40,54.70,0.00,-2411.20,458.40,200.00}},
	{"Queens",                      {-2411.20,373.50,0.00,-2253.50,458.40,200.00}},
	{"Randolph Industrial Estate",  {1558.00,596.30,-89.00,1823.00,823.20,110.90}},
	{"Redsands East",               {1817.30,2011.80,-89.00,2106.70,2202.70,110.90}},
	{"Redsands East",               {1817.30,2202.70,-89.00,2011.90,2342.80,110.90}},
	{"Redsands East",               {1848.40,2342.80,-89.00,2011.90,2478.40,110.90}},
	{"Redsands West",               {1236.60,1883.10,-89.00,1777.30,2142.80,110.90}},
	{"Redsands West",               {1297.40,2142.80,-89.00,1777.30,2243.20,110.90}},
	{"Redsands West",               {1377.30,2243.20,-89.00,1704.50,2433.20,110.90}},
	{"Redsands West",               {1704.50,2243.20,-89.00,1777.30,2342.80,110.90}},
	{"Regular Tom",                 {-405.70,1712.80,-3.00,-276.70,1892.70,200.00}},
	{"Richman",                     {647.50,-1118.20,-89.00,787.40,-954.60,110.90}},
	{"Richman",                     {647.50,-954.60,-89.00,768.60,-860.60,110.90}},
	{"Richman",                     {225.10,-1369.60,-89.00,334.50,-1292.00,110.90}},
	{"Richman",                     {225.10,-1292.00,-89.00,466.20,-1235.00,110.90}},
	{"Richman",                     {72.60,-1404.90,-89.00,225.10,-1235.00,110.90}},
	{"Richman",                     {72.60,-1235.00,-89.00,321.30,-1008.10,110.90}},
	{"Richman",                     {321.30,-1235.00,-89.00,647.50,-1044.00,110.90}},
	{"Richman",                     {321.30,-1044.00,-89.00,647.50,-860.60,110.90}},
	{"Richman",                     {321.30,-860.60,-89.00,687.80,-768.00,110.90}},
	{"Richman",                     {321.30,-768.00,-89.00,700.70,-674.80,110.90}},
	{"Robada Intersection",         {-1119.00,1178.90,-89.00,-862.00,1351.40,110.90}},
	{"Roca Escalante",              {2237.40,2202.70,-89.00,2536.40,2542.50,110.90}},
	{"Roca Escalante",              {2536.40,2202.70,-89.00,2625.10,2442.50,110.90}},
	{"Rockshore East",              {2537.30,676.50,-89.00,2902.30,943.20,110.90}},
	{"Rockshore West",              {1997.20,596.30,-89.00,2377.30,823.20,110.90}},
	{"Rockshore West",              {2377.30,596.30,-89.00,2537.30,788.80,110.90}},
	{"Rodeo",                       {72.60,-1684.60,-89.00,225.10,-1544.10,110.90}},
	{"Rodeo",                       {72.60,-1544.10,-89.00,225.10,-1404.90,110.90}},
	{"Rodeo",                       {225.10,-1684.60,-89.00,312.80,-1501.90,110.90}},
	{"Rodeo",                       {225.10,-1501.90,-89.00,334.50,-1369.60,110.90}},
	{"Rodeo",                       {334.50,-1501.90,-89.00,422.60,-1406.00,110.90}},
	{"Rodeo",                       {312.80,-1684.60,-89.00,422.60,-1501.90,110.90}},
	{"Rodeo",                       {422.60,-1684.60,-89.00,558.00,-1570.20,110.90}},
	{"Rodeo",                       {558.00,-1684.60,-89.00,647.50,-1384.90,110.90}},
	{"Rodeo",                       {466.20,-1570.20,-89.00,558.00,-1385.00,110.90}},
	{"Rodeo",                       {422.60,-1570.20,-89.00,466.20,-1406.00,110.90}},
	{"Rodeo",                       {466.20,-1385.00,-89.00,647.50,-1235.00,110.90}},
	{"Rodeo",                       {334.50,-1406.00,-89.00,466.20,-1292.00,110.90}},
	{"Royal Casino",                {2087.30,1383.20,-89.00,2437.30,1543.20,110.90}},
	{"San Andreas Sound",           {2450.30,385.50,-100.00,2759.20,562.30,200.00}},
	{"Santa Flora",                 {-2741.00,458.40,-7.60,-2533.00,793.40,200.00}},
	{"Santa Maria Beach",           {342.60,-2173.20,-89.00,647.70,-1684.60,110.90}},
	{"Santa Maria Beach",           {72.60,-2173.20,-89.00,342.60,-1684.60,110.90}},
	{"Shady Cabin",                 {-1632.80,-2263.40,-3.00,-1601.30,-2231.70,200.00}},
	{"Shady Creeks",                {-1820.60,-2643.60,-8.00,-1226.70,-1771.60,200.00}},
	{"Shady Creeks",                {-2030.10,-2174.80,-6.10,-1820.60,-1771.60,200.00}},
	{"Sobell Rail Yards",           {2749.90,1548.90,-89.00,2923.30,1937.20,110.90}},
	{"Spinybed",                    {2121.40,2663.10,-89.00,2498.20,2861.50,110.90}},
	{"Starfish Casino",             {2437.30,1783.20,-89.00,2685.10,2012.10,110.90}},
	{"Starfish Casino",             {2437.30,1858.10,-39.00,2495.00,1970.80,60.90}},
	{"Starfish Casino",             {2162.30,1883.20,-89.00,2437.30,2012.10,110.90}},
	{"Temple",                      {1252.30,-1130.80,-89.00,1378.30,-1026.30,110.90}},
	{"Temple",                      {1252.30,-1026.30,-89.00,1391.00,-926.90,110.90}},
	{"Temple",                      {1252.30,-926.90,-89.00,1357.00,-910.10,110.90}},
	{"Temple",                      {952.60,-1130.80,-89.00,1096.40,-937.10,110.90}},
	{"Temple",                      {1096.40,-1130.80,-89.00,1252.30,-1026.30,110.90}},
	{"Temple",                      {1096.40,-1026.30,-89.00,1252.30,-910.10,110.90}},
	{"The Camel's Toe",             {2087.30,1203.20,-89.00,2640.40,1383.20,110.90}},
	{"The Clown's Pocket",          {2162.30,1783.20,-89.00,2437.30,1883.20,110.90}},
	{"The Emerald Isle",            {2011.90,2202.70,-89.00,2237.40,2508.20,110.90}},
	{"The Farm",                    {-1209.60,-1317.10,114.90,-908.10,-787.30,251.90}},
	{"The Four Dragons Casino",     {1817.30,863.20,-89.00,2027.30,1083.20,110.90}},
	{"The High Roller",             {1817.30,1283.20,-89.00,2027.30,1469.20,110.90}},
	{"The Mako Span",               {1664.60,401.70,0.00,1785.10,567.20,200.00}},
	{"The Panopticon",              {-947.90,-304.30,-1.10,-319.60,327.00,200.00}},
	{"The Pink Swan",               {1817.30,1083.20,-89.00,2027.30,1283.20,110.90}},
	{"The Sherman Dam",             {-968.70,1929.40,-3.00,-481.10,2155.20,200.00}},
	{"The Strip",                   {2027.40,863.20,-89.00,2087.30,1703.20,110.90}},
	{"The Strip",                   {2106.70,1863.20,-89.00,2162.30,2202.70,110.90}},
	{"The Strip",                   {2027.40,1783.20,-89.00,2162.30,1863.20,110.90}},
	{"The Strip",                   {2027.40,1703.20,-89.00,2137.40,1783.20,110.90}},
	{"The Visage",                  {1817.30,1863.20,-89.00,2106.70,2011.80,110.90}},
	{"The Visage",                  {1817.30,1703.20,-89.00,2027.40,1863.20,110.90}},
	{"Unity Station",               {1692.60,-1971.80,-20.40,1812.60,-1932.80,79.50}},
	{"Valle Ocultado",              {-936.60,2611.40,2.00,-715.90,2847.90,200.00}},
	{"Verdant Bluffs",              {930.20,-2488.40,-89.00,1249.60,-2006.70,110.90}},
	{"Verdant Bluffs",              {1073.20,-2006.70,-89.00,1249.60,-1842.20,110.90}},
	{"Verdant Bluffs",              {1249.60,-2179.20,-89.00,1692.60,-1842.20,110.90}},
	{"Verdant Meadows",             {37.00,2337.10,-3.00,435.90,2677.90,200.00}},
	{"Verona Beach",                {647.70,-2173.20,-89.00,930.20,-1804.20,110.90}},
	{"Verona Beach",                {930.20,-2006.70,-89.00,1073.20,-1804.20,110.90}},
	{"Verona Beach",                {851.40,-1804.20,-89.00,1046.10,-1577.50,110.90}},
	{"Verona Beach",                {1161.50,-1722.20,-89.00,1323.90,-1577.50,110.90}},
	{"Verona Beach",                {1046.10,-1722.20,-89.00,1161.50,-1577.50,110.90}},
	{"Vinewood",                    {787.40,-1310.20,-89.00,952.60,-1130.80,110.90}},
	{"Vinewood",                    {787.40,-1130.80,-89.00,952.60,-954.60,110.90}},
	{"Vinewood",                    {647.50,-1227.20,-89.00,787.40,-1118.20,110.90}},
	{"Vinewood",                    {647.70,-1416.20,-89.00,787.40,-1227.20,110.90}},
	{"Whitewood Estates",           {883.30,1726.20,-89.00,1098.30,2507.20,110.90}},
	{"Whitewood Estates",           {1098.30,1726.20,-89.00,1197.30,2243.20,110.90}},
	{"Willowfield",                 {1970.60,-2179.20,-89.00,2089.00,-1852.80,110.90}},
	{"Willowfield",                 {2089.00,-2235.80,-89.00,2201.80,-1989.90,110.90}},
	{"Willowfield",                 {2089.00,-1989.90,-89.00,2324.00,-1852.80,110.90}},
	{"Willowfield",                 {2201.80,-2095.00,-89.00,2324.00,-1989.90,110.90}},
	{"Willowfield",                 {2541.70,-1941.40,-89.00,2703.50,-1852.80,110.90}},
	{"Willowfield",                 {2324.00,-2059.20,-89.00,2541.70,-1852.80,110.90}},
	{"Willowfield",                 {2541.70,-2059.20,-89.00,2703.50,-1941.40,110.90}},
	{"Yellow Bell Station",         {1377.40,2600.40,-21.90,1492.40,2687.30,78.00}},
	// Main Zones
	{"Los Santos",                  {44.60,-2892.90,-242.90,2997.00,-768.00,900.00}},
	{"Las Venturas",                {869.40,596.30,-242.90,2997.00,2993.80,900.00}},
	{"Bone County",                 {-480.50,596.30,-242.90,869.40,2993.80,900.00}},
	{"Tierra Robada",               {-2997.40,1659.60,-242.90,-480.50,2993.80,900.00}},
	{"Tierra Robada",               {-1213.90,596.30,-242.90,-480.50,1659.60,900.00}},
	{"San Fierro",                  {-2997.40,-1115.50,-242.90,-1213.90,1659.60,900.00}},
	{"Red County",                  {-1213.90,-768.00,-242.90,2997.00,596.30,900.00}},
	{"Flint County",                {-1213.90,-2892.90,-242.90,44.60,-768.00,900.00}},
	{"Whetstone",                   {-2997.40,-2892.90,-242.90,-1213.90,-1115.50,900.00}}
};

stock GetHouseZone(houseid)
{
	new zone[32],
		bool:getzone;

	if(HouseInfo[houseid][hPosInt] == 0)
	{
		for(new i=0; i<sizeof(gSAZones); i++)
		{
			if(HouseInfo[houseid][hPosX] >= gSAZones[i][SAZONE_AREA][0] && HouseInfo[houseid][hPosX] <= gSAZones[i][SAZONE_AREA][3]
				&& HouseInfo[houseid][hPosY] >= gSAZones[i][SAZONE_AREA][1] && HouseInfo[houseid][hPosY] <= gSAZones[i][SAZONE_AREA][4])
			{
				strmid(zone, gSAZones[i][SAZONE_NAME], 0, strlen(gSAZones[i][SAZONE_NAME]));
				getzone = true;
				break;
			}
		}
	}

	if(!getzone) zone = "??????????";
	return zone;
}
stock GetApartmentZone(apartment)
{
	new zone[32],
		bool:getzone;

    if(ApartInfo[apartment][aPosInt] == 0)
	{
		for(new i=0; i<sizeof(gSAZones); i++)
		{
			if(ApartInfo[apartment][aPosX] >= gSAZones[i][SAZONE_AREA][0] && ApartInfo[apartment][aPosX] <= gSAZones[i][SAZONE_AREA][3]
					&& ApartInfo[apartment][aPosY] >= gSAZones[i][SAZONE_AREA][1] && ApartInfo[apartment][aPosY] <= gSAZones[i][SAZONE_AREA][4])
			{
				strmid(zone, gSAZones[i][SAZONE_NAME], 0, strlen(gSAZones[i][SAZONE_NAME]));
				getzone = true;
				break;
			}
		}
	}
	if(!getzone) zone = "??????????";
	return zone;
}

stock ConnectMySQL()
{
    /*new DB:mysql_config = db_open("config.db");
    new DBResult:dbresult;
    dbresult = db_query(mysql_config, "SELECT * FROM `mysql_config`");
    db_get_field_assoc(dbresult, "SQL_HOST", SQL_HOST, sizeof(SQL_HOST));
    db_get_field_assoc(dbresult, "SQL_USER", SQL_USER, sizeof(SQL_USER));
    db_get_field_assoc(dbresult, "SQL_DB", SQL_DB, sizeof(SQL_DB));
    db_get_field_assoc(dbresult, "SQL_PASS", SQL_PASS, sizeof(SQL_PASS));
	db_free_result(dbresult);
	db_close(mysql_config);*/
	//
	dbHandle = mysql_connect(SQL_HOST, SQL_USER, SQL_DB, SQL_PASS);
	mysql_log();
	if(mysql_errno() != 0) printf("Conectarea la %s nu s-a putut realiza.", SQL_HOST);
	else
	{
		printf("Conectat la %s cu utilizatorul %s", SQL_HOST, SQL_USER);

        mysql_set_charset("cp1251");
	    mysql_query(dbHandle, "SET NAMES cp1251;", false);
		mysql_query(dbHandle, "SET SESSION character_set_server='utf8';", false);

	    new name[32];
		mysql_get_charset(name, dbHandle, 32);
		printf("?????????: %s", name);
	}
	return 1;
}
//==============================================================================

enum PLAYER_ATTACH_ENUM
{
	toyModel,
	toyName[64],
	toyPrice,
	toyBone,
	Float:toyOffestX,
	Float:toyOffestY,
	Float:toyOffestZ,
	Float:toyRotX,
	Float:toyRotY,
	Float:toyRotZ,
	Float:toyScaleX,
	Float:toyScaleY,
	Float:toyScaleZ,
}


new HatsInfo[][PLAYER_ATTACH_ENUM] = {
	{18926, "Sapca 1", 40, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
	{18927, "Sapca 2", 40, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
	{18928, "Sapca 3", 40, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
	{18960, "Sapca 4", 40, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
	{18929, "Sapca 4", 40, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
	{18930, "Sapca 5", 40, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
	{18931, "Sapca 5", 40, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
	{18932, "Sapca 6", 40, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
	{18933, "Sapca 7", 40, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
	{18955, "Sapca 8", 40, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
	{18956, "Sapca 9", 40, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
	{18957, "Sapca 10", 40, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
	{18958, "Sapca 11", 40, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
	{18959, "Sapca 11", 40, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
	{18934, "Sapca 12", 30, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
	{18935, "Sapca 13", 30, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
	{18944, "Sapca 14", 30, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
	{18945, "Sapca 15", 30, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
	{18946, "Sapca 16", 30, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
	{18947, "Sapca 17", 30, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
	{18948, "Sapca 18", 30, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
	{18949, "Sapca 19", 30, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
	{18950, "Sapca 20", 30, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
	{18951, "Sapca 21", 30, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
	{19488, "Sapca 22", 30, 2, 0.13, 0.0, -0.0, -89.4, 103.69, -4.19, 1.0, 1.0, 1.0},
	{18967, "Sapca 23", 30, 2, 0.15, 0.01, -0.01, 0.0, 97.09, 87.59, 1.0, 1.0, 1.0},
	{18968, "Sapca 24", 30, 2, 0.15, 0.01, -0.01, 0.0, 97.09, 87.59, 1.0, 1.0, 1.0},
	{18969, "Sapca 25", 30, 2, 0.15, 0.01, -0.01, 0.0, 97.09, 87.59, 1.0, 1.0, 1.0},
	{18970, "Sapca 26", 30, 2, 0.109999, 0.045999, -0.007, 0.0, 96.29, 89.5, 1.0, 1.0, 1.0},
	{18971, "Sapca 27", 30, 2, 0.109999, 0.045999, -0.007, 0.0, 96.29, 89.5, 1.0, 1.0, 1.0},
	{18972, "Sapca 28", 30, 2, 0.109999, 0.045999, -0.007, 0.0, 96.29, 89.5, 1.0, 1.0, 1.0},
	{18973, "Sapca 29", 30, 2, 0.109999, 0.045999, -0.007, 0.0, 96.29, 89.5, 1.0, 1.0, 1.0},
	{19064, "Sapca 30", 30, 2, 0.126000, 0.008000, 0.0, 0.0, 87.0, 94.190002, 1.0, 1.0, 1.0},
	{19066, "Sapca 31", 30, 2, 0.126000, 0.008000, 0.0, 0.0, 87.0, 94.190002, 1.0, 1.0, 1.0},
	{19065, "Sapca 32", 30, 2, 0.126000, 0.008000, 0.0, 0.0, 87.0, 94.190002, 1.0, 1.0, 1.0},
	{19067, "Sapca 33", 30, 2, 0.133999, -0.006000, 0.0, -22.199998, 92.500030, 114.199836, 1.0, 1.0, 1.0},
	{19068, "Sapca 34", 30, 2, 0.133999, -0.006000, 0.0, -22.199998, 92.500030, 114.199836, 1.0, 1.0, 1.0},
	{19069, "Sapca 35", 30, 2, 0.133999, -0.006000, 0.0, -22.199998, 92.500030, 114.199836, 1.0, 1.0, 1.0},
	{19554, "Sapca 36", 30, 2, 0.171999, 0.008999, -0.009000, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
	{18953, "Sapca 37", 30, 2, 0.171999, 0.008999, -0.009000, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
	{18954, "Sapca 38", 30, 2, 0.171999, 0.008999, -0.009000, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
	{19093, "Sapca 39", 30, 2, 0.107999, 0.0, -0.008999, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
	{18961, "Sapca 40", 30, 2, 0.107999, 0.0, -0.008999, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
	{19095, "Sapca 41", 50, 2, 0.18, 0.006999, -0.009999, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
	{19096, "Sapca 42", 50, 2, 0.18, 0.006999, -0.009999, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
	{19097, "Sapca 43", 50, 2, 0.18, 0.006999, -0.009999, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
	{19098, "Sapca 44", 50, 2, 0.18, 0.006999, -0.009999, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
	{19099, "Sapca 45", 50, 2, 0.18, 0.006999, -0.009999, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
	{19101, "Sapca 46",50,2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
	{19102, "Sapca 47", 50, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
	{19103, "Sapca 48", 50, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
	{19104, "Sapca 49", 50, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
	{19105, "Sapca 50", 50, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
	{19106, "Sapca 51", 50, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
	{19107, "Sapca 52", 50, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
	{19108, "Sapca 53", 50, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
	{19109, "Sapca 54", 50, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
	{19110, "Sapca 55", 50, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
	{19111, "Sapca 56", 50, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
	{19112, "Sapca 57", 50, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
	{19352, "Sapca 58", 50, 2, 0.143999, 0.015000, 0.0, 0.0, 90.800003, 0.0, 1.0, 1.0, 1.0},
	{19487, "Sapca 59", 50, 2, 0.143999, 0.015000, 0.0, 0.0, 90.800003, 0.0, 1.0, 1.0, 1.0},
	{18964, "Sapca 60", 50, 2, 0.136999, -0.003000, -0.004000, 35.900001, 88.200019, 44.699966, 1.0, 1.0, 1.0},
	{18965, "Sapca 61", 50, 2, 0.136999, -0.003000, -0.004000, 35.900001, 88.200019, 44.699966, 1.0, 1.0, 1.0},
	{18966, "Sapca 62", 50, 2, 0.136999, -0.003000, -0.004000, 35.900001, 88.200019, 44.699966, 1.0, 1.0, 1.0},
	{18921, "Sapca 63", 40, 2, 0.179000, -0.000999, -0.012000, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
	{18922, "Sapca 64", 40, 2, 0.179000, -0.000999, -0.012000, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
	{18923, "Sapca 65", 40, 2, 0.179000, -0.000999, -0.012000, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
	{18924, "Sapca 66", 40, 2, 0.179000, -0.000999, -0.012000, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
	{18925, "Sapca 67", 40, 2, 0.179000, -0.000999, -0.012000, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
	{18939, "Sapca 68", 40, 2, 0.171999, 0.008999, -0.009000, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
	{18940, "Sapca 69", 40, 2, 0.171999, 0.008999, -0.009000, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
	{18941, "Sapca 70", 40, 2, 0.171999, 0.008999, -0.009000, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
	{18942, "Sapca 71", 40, 2, 0.171999, 0.008999, -0.009000, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
	{18943, "Sapca 72", 40, 2, 0.171999, 0.008999, -0.009000, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
	{19553, "Sapca 73", 50, 2, 0.171999, 0.008999, -0.009000, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
	{19528, "Sapca 74", 40, 2, 0.171999, 0.008999, -0.009000, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
	{19558, "Sapca 75", 40, 2, 0.171999, 0.008999, -0.009000, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
	{19137, "Sapca 78", 40, 2, 0.171999, 0.008999, -0.009000, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
	{18638, "Sapca 79", 50, 2, 0.171999, 0.008999, -0.009000, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
	{19113, "Sapca 80", 50, 2, 0.171999, 0.008999, -0.009000, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
	{19114, "Sapca 81", 50, 2, 0.171999, 0.008999, -0.009000, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
	{19117, "Sapca 82", 50, 2, 0.171999, 0.008999, -0.009000, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
	{19118, "Sapca 83", 50, 2, 0.171999, 0.008999, -0.009000, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
	{19119, "Sapca 84", 50, 2, 0.171999, 0.008999, -0.009000, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
	{19120, "Sapca 85", 50, 2, 0.050999, 0.023000, -0.012999, 82.800025, 91.199928, 4.500027, 1.0, 1.0, 1.0},
	{19330, "Sapca 86", 80, 2, 0.171999, 0.008999, -0.009000, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
	{19331, "Sapca 87", 80, 2, 0.171999, 0.008999, -0.009000, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0}
};

new GlassesInfo[][PLAYER_ATTACH_ENUM] = {
	{19006, "Ochelari 1", 30, 2, 0.080999, 0.043999, -0.005, 82.1, 75.1, 7.5, 1.0, 1.0, 1.0},
	{19007, "Ochelari 2", 30, 2, 0.080999, 0.043999, -0.005, 82.1, 75.1, 7.5, 1.0, 1.0, 1.0},
	{19008, "Ochelari 3", 30, 2, 0.080999, 0.043999, -0.005, 82.1, 75.1, 7.5, 1.0, 1.0, 1.0},
	{19009, "Ochelari 4", 30, 2, 0.080999, 0.043999, -0.005, 82.1, 75.1, 7.5, 1.0, 1.0, 1.0},
	{19010, "Ochelari 5", 30, 2, 0.080999, 0.043999, -0.005, 82.1, 75.1, 7.5, 1.0, 1.0, 1.0},
	{19011, "Ochelari 6", 30, 2, 0.080999, 0.043999, -0.005, 82.1, 75.1, 7.5, 1.0, 1.0, 1.0},
	{19012, "Ochelari 7", 30, 2, 0.080999, 0.043999, -0.005, 82.1, 75.1, 7.5, 1.0, 1.0, 1.0},
	{19013, "Ochelari 8", 20, 2, 0.080999, 0.043999, -0.005, 82.1, 75.1, 7.5, 1.0, 1.0, 1.0},
	{19014, "Ochelari 9", 30, 2, 0.080999, 0.043999, -0.005, 82.1, 75.1, 7.5, 1.0, 1.0, 1.0},
	{19015, "Ochelari 10", 30, 2, 0.080999, 0.043999, -0.005, 82.1, 75.1, 7.5, 1.0, 1.0, 1.0},
	{19016, "Ochelari 11", 30, 2, 0.080999, 0.043999, -0.005, 82.1, 75.1, 7.5, 1.0, 1.0, 1.0},
	{19017, "Ochelari 12", 60, 2, 0.080999, 0.043999, -0.005, 82.1, 75.1, 7.5, 1.0, 1.0, 1.0},
	{19018, "Ochelari 13", 60, 2, 0.080999, 0.043999, -0.005, 82.1, 75.1, 7.5, 1.0, 1.0, 1.0},
	{19019, "Ochelari 14", 60, 2, 0.080999, 0.043999, -0.005, 82.1, 75.1, 7.5, 1.0, 1.0, 1.0},
	{19020, "Ochelari 15", 60, 2, 0.080999, 0.043999, -0.005, 82.1, 75.1, 7.5, 1.0, 1.0, 1.0},
	{19021, "Ochelari 16", 60, 2, 0.080999, 0.043999, -0.005, 82.1, 75.1, 7.5, 1.0, 1.0, 1.0},
	{19022, "Ochelari 17", 50, 2, 0.080999, 0.043999, -0.005, 82.1, 75.1, 7.5, 1.0, 1.0, 1.0},
	{19023, "Ochelari 18", 50, 2, 0.080999, 0.043999, -0.005, 82.1, 75.1, 7.5, 1.0, 1.0, 1.0},
	{19024, "Ochelari 19", 50, 2, 0.080999, 0.043999, -0.005, 82.1, 75.1, 7.5, 1.0, 1.0, 1.0},
	{19025, "Ochelari 20", 50, 2, 0.080999, 0.043999, -0.005, 82.1, 75.1, 7.5, 1.0, 1.0, 1.0},
	{19026, "Ochelari 21", 50, 2, 0.080999, 0.043999, -0.005, 82.1, 75.1, 7.5, 1.0, 1.0, 1.0},
	{19027, "Ochelari 22", 50, 2, 0.080999, 0.043999, -0.005, 82.1, 75.1, 7.5, 1.0, 1.0, 1.0},
	{19028, "Ochelari 23", 50, 2, 0.080999, 0.043999, -0.005, 82.1, 75.1, 7.5, 1.0, 1.0, 1.0},
	{19029, "Ochelari 24", 50, 2, 0.080999, 0.043999, -0.005, 82.1, 75.1, 7.5, 1.0, 1.0, 1.0},
	{19030, "Ochelari 25", 50, 2, 0.080999, 0.043999, -0.005, 82.1, 75.1, 7.5, 1.0, 1.0, 1.0},
	{19031, "Ochelari 26", 50, 2, 0.080999, 0.043999, -0.005, 82.1, 75.1, 7.5, 1.0, 1.0, 1.0},
	{19032, "Ochelari 27", 50, 2, 0.080999, 0.043999, -0.005, 82.1, 75.1, 7.5, 1.0, 1.0, 1.0},
	{19033, "Ochelari 28", 50, 2, 0.080999, 0.043999, -0.005, 82.1, 75.1, 7.5, 1.0, 1.0, 1.0},
	{19034, "Ochelari 29", 50, 2, 0.080999, 0.043999, -0.005, 82.1, 75.1, 7.5, 1.0, 1.0, 1.0},
	{19035, "Ochelari 30", 50, 2, 0.080999, 0.043999, -0.005, 82.1, 75.1, 7.5, 1.0, 1.0, 1.0},
	{19085, "Ochelari 31", 20, 2, 0.080999, 0.043999, -0.005, 82.1, 75.1, 7.5, 1.0, 1.0, 1.0},
	{19349, "Ochelari 32", 30, 2, 0.080999, 0.170998, -0.004, 82.4, -2.10001, -84.3, 1.0, 1.0, 1.0}
};

new BandanasInfo[][PLAYER_ATTACH_ENUM] = {
	{18891, "Bandana 1", 20, 2, 0.156998, 0.004, -0.004, -83.3, -6.7, -89.4999, 1.0, 1.0, 1.0},
	{18892, "Bandana 2", 20, 2, 0.156998, 0.004, -0.004, -83.3, -6.7, -89.4999, 1.0, 1.0, 1.0},
	{18893, "Bandana 3", 20, 2, 0.156998, 0.004, -0.004, -83.3, -6.7, -89.4999, 1.0, 1.0, 1.0},
	{18894, "Bandana 4", 20, 2, 0.156998, 0.004, -0.004, -83.3, -6.7, -89.4999, 1.0, 1.0, 1.0},
	{18895, "Bandana 5", 25, 2, 0.156998, 0.004, -0.004, -83.3, -6.7, -89.4999, 1.0, 1.0, 1.0},
	{18896, "Bandana 6", 40, 2, 0.156998, 0.004, -0.004, -83.3, -6.7, -89.4999, 1.0, 1.0, 1.0},
	{18897, "Bandana 7", 20, 2, 0.156998, 0.004, -0.004, -83.3, -6.7, -89.4999, 1.0, 1.0, 1.0},
	{18898, "Bandana 8", 20, 2, 0.156998, 0.004, -0.004, -83.3, -6.7, -89.4999, 1.0, 1.0, 1.0},
	{18899, "Bandana 9", 40, 2, 0.156998, 0.004, -0.004, -83.3, -6.7, -89.4999, 1.0, 1.0, 1.0},
	{18900, "Bandana 10", 45, 2, 0.156998, 0.004, -0.004, -83.3, -6.7, -89.4999, 1.0, 1.0, 1.0},
	{18901, "Bandana 11", 30, 2, 0.156998, 0.004, -0.004, -83.3, -6.7, -89.4999, 1.0, 1.0, 1.0},
	{18902, "Bandana 12", 20, 2, 0.156998, 0.004, -0.004, -83.3, -6.7, -89.4999, 1.0, 1.0, 1.0},
	{18903, "Bandana 13", 20, 2, 0.156998, 0.004, -0.004, -83.3, -6.7, -89.4999, 1.0, 1.0, 1.0},
	{18904, "Bandana 14", 20, 2, 0.156998, 0.004, -0.004, -83.3, -6.7, -89.4999, 1.0, 1.0, 1.0},
	{18905, "Bandana 15", 20, 2, 0.156998, 0.004, -0.004, -83.3, -6.7, -89.4999, 1.0, 1.0, 1.0},
	{18906, "Bandana 16", 20, 2, 0.156998, 0.004, -0.004, -83.3, -6.7, -89.4999, 1.0, 1.0, 1.0},
	{18907, "Bandana 17", 35, 2, 0.156998, 0.004, -0.004, -83.3, -6.7, -89.4999, 1.0, 1.0, 1.0},
	{18908, "Bandana 18", 20, 2, 0.156998, 0.004, -0.004, -83.3, -6.7, -89.4999, 1.0, 1.0, 1.0},
	{18909, "Bandana 19", 20, 2, 0.156998, 0.004, -0.004, -83.3, -6.7, -89.4999, 1.0, 1.0, 1.0},
	{18910, "Bandana 20", 50, 2, 0.156998, 0.004, -0.004, -83.3, -6.7, -89.4999, 1.0, 1.0, 1.0},
	{18911, "Bandana 21", 90, 18, 0.03, 0.079999, 0.0, -20.7001, 87.2, 22.4, 1.0, 1.0, 1.0},
	{18912, "Bandana 22", 50, 18, 0.03, 0.079999, 0.0, -20.7001, 87.2, 22.4, 1.0, 1.0, 1.0},
	{18913, "Bandana 23", 20, 18, 0.03, 0.079999, 0.0, -20.7001, 87.2, 22.4, 1.0, 1.0, 1.0},
	{18914, "Bandana 24", 60, 18, 0.03, 0.079999, 0.0, -20.7001, 87.2, 22.4, 1.0, 1.0, 1.0},
	{18915, "Bandana 25", 20, 18, 0.03, 0.079999, 0.0, -20.7001, 87.2, 22.4, 1.0, 1.0, 1.0},
	{18916, "Bandana 26", 20, 18, 0.03, 0.079999, 0.0, -20.7001, 87.2, 22.4, 1.0, 1.0, 1.0},
	{18917, "Bandana 27", 20, 18, 0.03, 0.079999, 0.0, -20.7001, 87.2, 22.4, 1.0, 1.0, 1.0},
	{18918, "Bandana 29", 20, 18, 0.03, 0.079999, 0.0, -20.7001, 87.2, 22.4, 1.0, 1.0, 1.0},
	{18919, "Bandana 30", 20, 18, 0.03, 0.079999, 0.0, -20.7001, 87.2, 22.4, 1.0, 1.0, 1.0},
	{18920, "Bandana 31", 20, 18, 0.03, 0.079999, 0.0, -20.7001, 87.2, 22.4, 1.0, 1.0, 1.0},
	{18974, "Bandana 32", 20, 2, 0.080999, 0.043999, -0.005, 82.1, 75.1, 7.5, 1.0, 1.0, 1.0},
	{19163, "Bandana 33", 10, 18, 0.03, 0.079999, 0.0, -20.7001, 87.2, 22.4, 1.0, 1.0, 1.0},
	{19801, "Bandana 34", 20, 2, 0.067999, 0.023999, -0.000000, -9.999995, 85.700004, -172.399948, 1.141000, 1.148000, 1.101999}
};

new HeadphonesInfo[][PLAYER_ATTACH_ENUM] = {
	{19421, "Casti 1", 20, 2, 0.036999, -0.028, -0.006999, 86.6, 176.2, 88.4, 1.157, 1.0, 1.0},
	{19422, "Casti 2", 20, 2, 0.036999, -0.028, -0.006999, 86.6, 176.2, 88.4, 1.157, 1.0, 1.0},
	{19423, "Casti 3", 20, 2, 0.036999, -0.028, -0.006999, 86.6, 176.2, 88.4, 1.157, 1.0, 1.0},
	{19424, "Casti 4", 20, 2, 0.036999, -0.028, -0.006999, 86.6, 176.2, 88.4, 1.157, 1.0, 1.0}
};

new SportsInfo[][PLAYER_ATTACH_ENUM] = {
	{19036, "Masca de hockey (alba)", 50, 2, 0.096999, 0.043999, -0.006000, 87.499961, 94.899955, 0.0, 1.0, 1.0, 1.0},
	{19037, "Masca de hockey (rosie)", 50, 2, 0.096999, 0.043999, -0.006000, 87.499961, 94.899955, 0.0, 1.0, 1.0, 1.0},
	{19038, "Masca de hockey (verde)", 50, 2, 0.096999, 0.043999, -0.006000, 87.499961, 94.899955, 0.0, 1.0, 1.0, 1.0},
	{18952, "Protectie (casca) box", 50, 2, 0.050999, 0.023000, -0.012999, 82.800025, 91.199928, 4.500027, 1.0, 1.0, 1.0},
	{19472, "Masca de gaze", 20, 2, -0.005000, 0.142999, -0.008000, 87.499961, 94.899955, 0.0, 1.0, 1.116000, 1.0},
	{2919, "Geanta sport", 20, 5, 0.273000, 0.034999, 0.046999, -11.199997, -103.500007, 4.300001, 0.439000, 0.161000, 0.351000},
	{19624,"Valiza", 50, 5, 0.093, 0.008999, -0.016001, -11.2, -103.5, 4.3, 1.104, 0.708, 0.698999},
	{3026, "Rucsac 1", 20, 1, -0.143000, -0.049999, 0.009999, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
	{19559, "Rucsac 2", 40, 1, -0.143000, -0.049999, 0.009999, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
	{18645, "Casca 1", 50, 2, 0.050999, 0.023000, -0.012999, 82.800025, 91.199928, 4.500027, 1.0, 1.0, 1.0},
	{18976, "Casca 2", 50, 2, 0.087998, 0.039000, -0.006998, 82.800025, 91.199928, 4.500027, 0.970000, 1.179000, 1.0},
	{18977, "Casca 3", 50, 2, 0.050999, 0.023000, -0.012999, 82.800025, 91.199928, 4.500027, 1.0, 1.0, 1.0},
	{18978, "Casca 4", 50, 2, 0.050999, 0.023000, -0.012999, 82.800025, 91.199928, 4.500027, 1.0, 1.0, 1.0},
	{18979, "Casca 5", 50, 2, 0.050999, 0.023000, -0.012999, 82.800025, 91.199928, 4.500027, 1.0, 1.0, 1.0},
	{18936, "Casca 6", 50, 2, 0.050999, 0.023000, -0.012999, 82.800025, 91.199928, 4.500027, 1.0, 1.0, 1.0},
	{18937, "Casca 7", 50, 2, 0.050999, 0.023000, -0.012999, 82.800025, 91.199928, 4.500027, 1.0, 1.0, 1.0},
	{18938, "Casca 8", 50, 2, 0.050999, 0.023000, -0.012999, 82.800025, 91.199928, 4.500027, 1.0, 1.0, 1.0},
	{371, "Rucsac 3", 50, 1, -0.143000, -0.049999, 0.009999, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
	{1210, "Cutie", 100, 5, 0.093, 0.008999, -0.016001, -11.2, -103.5, 4.3, 1.104, 0.708, 0.698999},
	{19878, "Skateboard", 200, 1, -0.143000, -0.049999, 0.009999, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0}
};

new GuitarsInfo[][PLAYER_ATTACH_ENUM] = {
	{19317, "Chitara 1", 150},
	{19318, "Chitara 2", 200},
	{19319, "Chitara 3", 150},
	{19319, "Casetofon", 400}
};

new ClockInfo[][PLAYER_ATTACH_ENUM] = {
	{19039, "Ceas 1", 250, 5, -0.015999, -0.01, -0.006, 71.4001, 73.6, 119.2, 1.0, 1.0, 1.0},
	{19040, "Ceas 2", 200, 5, -0.015999, -0.01, -0.006, 71.4001, 73.6, 119.2, 1.0, 1.0, 1.0},
	{19041, "Ceas 3", 195, 5, -0.015999, -0.01, -0.006, 71.4001, 73.6, 119.2, 1.0, 1.0, 1.0},
	{19042, "Ceas 4", 2100, 5, -0.015999, -0.01, -0.006, 71.4001, 73.6, 119.2, 1.0, 1.0, 1.0},
	{19043, "Ceas 5", 170, 5, -0.015999, -0.01, -0.006, 71.4001, 73.6, 119.2, 1.0, 1.0, 1.0},
	{19044, "Ceas 6", 90, 5, -0.015999, -0.01, -0.006, 71.4001, 73.6, 119.2, 1.0, 1.0, 1.0},
	{19045, "Ceas 7", 90, 5, -0.015999, -0.01, -0.006, 71.4001, 73.6, 119.2, 1.0, 1.0, 1.0},
	{19046, "Ceas 8", 90, 5, -0.015999, -0.01, -0.006, 71.4001, 73.6, 119.2, 1.0, 1.0, 1.0},
	{19047, "Ceas 9", 90, 5, -0.015999, -0.01, -0.006, 71.4001, 73.6, 119.2, 1.0, 1.0, 1.0},
	{19048, "Ceas 10", 90, 5, -0.015999, -0.01, -0.006, 71.4001, 73.6, 119.2, 1.0, 1.0, 1.0},
	{19049, "Ceas 11", 90, 5, -0.015999, -0.01, -0.006, 71.4001, 73.6, 119.2, 1.0, 1.0, 1.0},
	{19050, "Ceas 12", 90, 5, -0.015999, -0.01, -0.006, 71.4001, 73.6, 119.2, 1.0, 1.0, 1.0},
	{19051, "Ceas 13", 90, 5, -0.015999, -0.01, -0.006, 71.4001, 73.6, 119.2, 1.0, 1.0, 1.0},
	{19052, "Ceas 14", 90, 5, -0.015999, -0.01, -0.006, 71.4001, 73.6, 119.2, 1.0, 1.0, 1.0},
	{19053, "Ceas 15", 90, 5, -0.015999, -0.01, -0.006, 71.4001, 73.6, 119.2, 1.0, 1.0, 1.0}
};

new BarberShop[][PLAYER_ATTACH_ENUM] = {
	{19516, "Peruca 1", 120, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
	{19517, "Peruca 2", 120, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
	{19518, "Peruca 3", 120, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
	{19519, "Peruca 4", 120, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
	{18640, "Peruca 5", 120, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
	{18975, "Peruca 6", 120, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
	{19077, "Peruca 7", 120, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
	{19350, "Mustata 1", 50, 18, 0.096, -0.059, 0.004999, 174.2, 2.19998, 22.1, 1.0, 1.0, 1.0},
	{19351, "Mustata 2", 50, 18, 0.096, -0.059, 0.004999, 174.2, 2.19998, 22.1, 1.0, 1.0, 1.0},
	{19136, "Peruca 7", 200, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
	{19274, "Peruca de clovn", 150, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0}
};

new HardwareStore[][PLAYER_ATTACH_ENUM] = {
	{18632, "Undita", 75, 6, 0.067, 0.010999, -0.053999, 177.3, -5.79997, -3.5, 1.0, 1.0, 1.0},
	{18633, "Cheie speciala", 50, 6, 0.065, 0.019999, -0.05, 90.2, -91.7, 0.0, 1.0, 1.0, 1.0},
	{18634, "Ranga", 45, 6, 0.078, 0.019999, -0.059999, 93.4, -92.3999, 3.0, 1.0, 1.0, 1.0},
	{18635, "Ciocan", 50, 6, 0.002, -0.018, -0.05, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
	{18644, "Surubelnita", 40, 6, 0.070999, 0.008999, -0.000999, 0.0, 172.9, 0.0, 1.0, 1.0, 1.0},
	{19627, "Cheie speciala 2", 45, 6, 0.079, 0.024, 0.003999, 88.7, 0.0, 96.5, 1.0, 1.0, 1.0},
	{19626, "Lopata", 30, 6, 0.064999, 0.030998, -0.05, 7.09999, 178.7, 98.1999, 1.0, 1.0, 1.0},
	{19631, "Baros", 50, 6, 0.069, 0.004999, -0.05, -103.7, -102.2, -0.7, 1.0, 1.0, 1.0},
	{19816, "Sticla cu gaz", 75, 6, 0.044999, 0.068, 0.003999, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
	{18641, "Torta", 70, 6, 0.07, 0.009999, 0.039999, -175.5, 0.0, 0.0, 1.0, 1.0, 1.0},
	{19144, "Lanterna", 80, 6, 0.07, 0.019999, 0.042, -179.8, -81.1, 1.49998, 1.0, 1.0, 1.0},
	{18642, "Tazer", 80, 6, 0.085, 0.033999, 0.026999, 8.1, 178.8, -1.8, 1.0, 1.0, 1.0},
	{1369, "Scaun cu rotile", 75, 6, 0.067, 0.010999, -0.053999, 177.3, -5.79997, -3.5, 1.0, 1.0, 1.0},
	{19054, "Cadou", 50, 6, 0.106, -0.012, 0.029, 0.0, -98.3, 0.0, 0.148999, 0.139, 0.087999},
	{0, "Dublura cheie vehicul", 150, 6, 0.106, -0.012, 0.029, 0.0, -98.3, 0.0, 0.148999, 0.139, 0.087999}
};

stock GetXYInFrontOfPlayer(playerid, &Float:X, &Float:Y, &Float:Z, Float:distance)
{
	new Float:A;
	GetPlayerPos(playerid, X, Y, Z);

	if(GetPlayerVehicleID(playerid))
		GetVehicleZAngle(GetPlayerVehicleID(playerid), A);
	else
	    GetPlayerFacingAngle(playerid, A);

	X += (distance * floatsin(-A, degrees));
	Y += (distance * floatcos(-A, degrees));
}

stock GetWeapSlot(weaponid)
{
	switch(weaponid)
	{
		case 2..15: return 0;
		case 22,23,24,28,32: return 1;
		case 25, 26, 27, 29, 30, 31, 33, 34, 35, 36, 38: return 2;
		case 1, 16, 17, 18, 41, 42, 43, 46: return 3;
		default: return -1;
	}
	return -1;
}

stock IsWeaponDontHide(weaponid)
{
    switch(weaponid)
	{
	    case 3, 4, 5, 10, 11, 12, 13, 22, 23, 24, 28, 32: return 0;
	    default: return 1;
	}
	return 1;
}

stock GetWeaponSlot(weaponid)
{
	switch(weaponid)
	{
		case 0,1: return 0;
		case 2..9: return 1;
		case 22..24: return 2;
		case 25..27: return 3;
		case 28,29,32: return 4;
		case 30,31: return 5;
		case 33,34: return 6;
		case 35..38: return 7;
		case 16..18,39: return 8;
		case 41..43: return 9;
		case 10..15: return 10;
		case 44..46: return 11;
		case 40: return 12;
		default: return INVALID_WEAPON_SLOT_ID;
	}
	return INVALID_WEAPON_SLOT_ID;
}

//????????? && AntiCheat
//Onvehicledeath
new ac_vehicle_death[MAX_PLAYERS];
//Shift + 7 Spawn
new ac_spawn[MAX_PLAYERS char];

stock ac_SpawnPlayer(playerid)
{
	ac_spawn{playerid} = 1;
    return SpawnPlayer(playerid);
}

#if defined _ALS_SpawnPlayer
    #undef SpawnPlayer
#else
    #define _ALS_SpawnPlayer
#endif
#define SpawnPlayer ac_SpawnPlayer
//FakeKill
new ac_fake_kill[MAX_PLAYERS char];
//Carshot
new Float: ac_last_vel_x[MAX_PLAYERS],
    Float: ac_last_vel_y[MAX_PLAYERS],
    Float: ac_last_vel_z[MAX_PLAYERS],
    Float: ac_last_veh_x[MAX_PLAYERS],
    Float: ac_last_veh_y[MAX_PLAYERS],
    Float: ac_last_veh_z[MAX_PLAYERS],
    ac_last_speed[MAX_PLAYERS],
    Float:ac_veh_pos_dif[MAX_VEHICLES];

new ac_carshot_flood[MAX_PLAYERS char],
	ac_veh_airbreak_flood[MAX_PLAYERS char],
	ac_veh_health[MAX_PLAYERS char];

#define GetVectorSpeed(%0,%1,%2) floatround(VectorSize(%0, %1, %2) * 179.28625)

//Carshot
//TP IN CAR
new ac_enter_vehicle[MAX_PLAYERS],
	ac_enter_vehicle_time[MAX_PLAYERS],
	ac_veh[MAX_PLAYERS];

stock ac_PutPlayerInVehicle(playerid, vehicleid, seatid)
{
    GetVehiclePos(vehicleid, ac_last_veh_x[playerid], ac_last_veh_y[playerid], ac_last_veh_z[playerid]);
    ac_enter_vehicle[playerid] = vehicleid;

    return PutPlayerInVehicle(playerid, vehicleid, seatid);
}

#if defined _ALS_PutPlayerInVehicle
    #undef PutPlayerInVehicle
#else
    #define _ALS_PutPlayerInVehicle
#endif
#define PutPlayerInVehicle ac_PutPlayerInVehicle
//TP/FLY/AIRBREAK
new Float: ac_pos_x[MAX_PLAYERS],
	Float: ac_pos_y[MAX_PLAYERS],
	Float: ac_pos_z[MAX_PLAYERS],
	ac_off_protect[MAX_PLAYERS char],
	ac_off_flood[MAX_PLAYERS char],
	ac_fly_detect[MAX_PLAYERS char];


stock SetPlayerPosEx(playerid, Float:x, Float:y, Float:z, freeze = 1)
{
	ac_pos_x[playerid] = x,
	ac_pos_y[playerid] = y,
	ac_pos_z[playerid] = z;

	SetPlayerPos(playerid, x, y, z + 0.2);
 	SetCameraBehindPlayer(playerid);
	if(freeze != 0)
	{
 		FreezePlayer(playerid);
 		pTemp[playerid][pFreezeTime] = 2;
       	pTemp[playerid][pInvulnerable] = 4;
	}

	ac_off_protect{playerid} = 3;
	return 1;
}

stock SetPlayerCoords(playerid, Float:x, Float:y, Float:z)
{
	ac_pos_x[playerid] = x,
	ac_pos_y[playerid] = y,
	ac_pos_z[playerid] = z;
	ac_off_protect{playerid} = 3;
	return 1;
}
//
//Toogle
stock ac_TogglePlayerSpectating(playerid, toggle)
{
	SetPVarInt(playerid, #ac_spec, 1);
    return TogglePlayerSpectating(playerid, toggle);
}

#if defined _ALS_TogglePlayerSpectating
    #undef TogglePlayerSpectating
#else
    #define _ALS_TogglePlayerSpectating
#endif
#define TogglePlayerSpectating ac_TogglePlayerSpectating

//Toogleplayercontroltable
new ac_controllable[MAX_PLAYERS char];

stock ac_TogglePlayerControllable(playerid, toggle)
{
	if(toggle == 0)
	    ac_controllable{playerid} = 1;
	else
	    ac_controllable{playerid} = 0;

    return TogglePlayerControllable(playerid, toggle);
}

#if defined _ALS_TogglePlayerControllable
    #undef TogglePlayerControllable
#else
    #define _ALS_TogglePlayerControllable
#endif
#define TogglePlayerControllable ac_TogglePlayerControllable

#define IsPlayerFreeze(%0) ac_controllable{%0}
//NOP RemovePlayerFromVehicle
#if !defined IGNORE_TIME_REMOVE_VEHICLE
	#define IGNORE_TIME_REMOVE_VEHICLE 2
#endif

new ignore_remove_vehicle[MAX_PLAYERS],
	player_remove_vehicle[MAX_PLAYERS];

stock ac_RemovePlayerFromVehicle(playerid)
{
    new Float: remove_x,
		Float: remove_y,
		Float: remove_z,
		vehicle;

	GetPlayerPos(playerid, remove_x, remove_y, remove_z);

	if((vehicle = GetPlayerVehicleID(playerid)) != 0)
 	{
     	player_remove_vehicle[playerid] = vehicle;
    	ignore_remove_vehicle[playerid] = GetTickCount() + IGNORE_TIME_REMOVE_VEHICLE;
    	SetPlayerPosEx(playerid, remove_x, remove_y + 2.0, remove_z);
    }
	else
		SetPlayerPosEx(playerid, remove_x, remove_y, remove_z);

    return RemovePlayerFromVehicle(playerid);
}

#if defined _ALS_RemovePlayerFromVehicle
    #undef RemovePlayerFromVehicle
#else
    #define _ALS_RemovePlayerFromVehicle
#endif
#define RemovePlayerFromVehicle ac_RemovePlayerFromVehicle
//HP & Armour
#if !defined IGNORE_TIME_HP
	#define IGNORE_TIME_HP 2
#endif
new Float: player_hp[MAX_PLAYERS],
	ignore_hp[MAX_PLAYERS];
//
new Float: player_armour[MAX_PLAYERS],
	ignore_armour[MAX_PLAYERS];

stock ac_SetPlayerHealth(playerid, Float:health)
{
    ignore_hp[playerid] = gettime() + IGNORE_TIME_HP;
    player_hp[playerid] = health;
	return SetPlayerHealth(playerid, health);
}

#if defined _ALS_SetPlayerHealth
	#undef SetPlayerHealth
#else
    #define _ALS_SetPlayerHealth
#endif
#define SetPlayerHealth ac_SetPlayerHealth

stock Float: GetPlayerHealthEx(playerid)
{
	new Float: hp;
	GetPlayerHealth(playerid, hp);

	return hp;
}

stock ac_SetPlayerArmour(playerid, Float:armour)
{
    ignore_armour[playerid] = gettime() + IGNORE_TIME_HP;
    player_armour[playerid] = armour;
    PlayerInfo[playerid][pArmour] = armour;
	return SetPlayerArmour(playerid, armour);
}

#if defined _ALS_SetPlayerArmour
	#undef SetPlayerArmour
#else
    #define _ALS_SetPlayerArmour
#endif
#define SetPlayerArmour ac_SetPlayerArmour

//
#if !defined IGNORE_VEHICLE_TIME_HP
	#define IGNORE_VEHICLE_TIME_HP 2000
#endif

new Float: vehicle_hp[MAX_VEHICLES],
	ignore_vehicle[MAX_VEHICLES];

native IsValidVehicle(vehicleid);
stock ac_SetVehicleHealth(vehicleid, Float: health)
{
    ignore_vehicle[vehicleid] = GetTickCount() + IGNORE_VEHICLE_TIME_HP;
    vehicle_hp[vehicleid] = health;
	return SetVehicleHealth(vehicleid, health);
}

#if defined _ALS_SetVehicleHealth
	#undef SetVehicleHealth
#else
    #define _ALS_SetVehicleHealth
#endif
#define SetVehicleHealth ac_SetVehicleHealth

stock ac_RepairVehicle(vehicleid)
{
    ignore_vehicle[vehicleid] = GetTickCount() + IGNORE_VEHICLE_TIME_HP;
    vehicle_hp[vehicleid] = 1000.0;
	return RepairVehicle(vehicleid);
}

#if defined _ALS_RepairVehicle
	#undef RepairVehicle
#else
    #define _ALS_RepairVehicle
#endif
#define RepairVehicle ac_RepairVehicle

new veh_int[MAX_VEHICLES],
	veh_vw[MAX_VEHICLES];

stock ac_LinkVehicleToInterior(vehicleid, interior)
{
    veh_int[vehicleid] = interior;
	return LinkVehicleToInterior(vehicleid, interior);
}

#if defined _ALS_LinkVehicleToInterior
	#undef LinkVehicleToInterior
#else
    #define _ALS_LinkVehicleToInterior
#endif
#define LinkVehicleToInterior ac_LinkVehicleToInterior

stock ac_SetVehicleVirtualWorld(vehicleid, world)
{
    veh_vw[vehicleid] = world;
	return SetVehicleVirtualWorld(vehicleid, world);
}

#if defined _ALS_SetVehicleVirtualWorld
	#undef SetVehicleVirtualWorld
#else
    #define _ALS_SetVehicleVirtualWorld
#endif
#define SetVehicleVirtualWorld ac_SetVehicleVirtualWorld

#define GetVehicleInterior(%0)  veh_int[%0]

#define GetVehicleDriver(%0)    VehicleInfo[%0][carDriver]

stock GetVehicleOwner(vehicleid)
{
	new playerid = VehicleInfo[vehicleid][carOwnerPlayer];
	return (IsPlayerLogged(playerid) && PlayerInfo[playerid][pID] == VehicleInfo[vehicleid][carOwnerID]) ? (playerid):(INVALID_PLAYER_ID);
}

stock IsVehicleInRangeOfPoint(vehicleid, Float: radius, Float: x, Float: y, Float: z)
{
	return (GetVehicleDistanceFromPoint(vehicleid, x, y, z) <= radius)?(1):(0);

}

stock ac_CreateVehicle(vehicletype, Float:x, Float:y, Float:z, Float:rotation, color1, color2, respawn_delay, addsiren=0)
{
	new vehicleid = CreateVehicle(vehicletype, Float:x, Float:y, Float:z, Float:rotation, color1, color2, respawn_delay, addsiren);
	if(vehicleid != INVALID_VEHICLE_ID)
	{
	    for(new i; i != 5; i++)
            VehicleInfo[vehicleid][carSiren][i] = INVALID_OBJECT_ID;

	    for(new i; i != 6; i++)
            VehicleInfo[vehicleid][carCargoObj][i] = INVALID_OBJECT_ID;

	    SetVehicleParamsEx(vehicleid, 0, 0, 0, 0, 0, 0, 0);
        VehicleInfo[vehicleid][carLocked] =
        VehicleInfo[vehicleid][carTrunkLock] =
        VehicleInfo[vehicleid][carEngineOn] = 0;
		ac_veh_pos_dif[vehicleid] = 0.0;
        VehicleInfo[vehicleid][carDeath] = 0;
	}
	return vehicleid;
}

#if defined _ALS_CreateVehicle
	#undef CreateVehicle
#else
    #define _ALS_CreateVehicle
#endif
#define CreateVehicle ac_CreateVehicle

stock ac_DestroyVehicle(vehicleid)
{
    StopCarBoomBox(vehicleid);
    for(new i; i != MAX_TRUCK_PRODUCT; i++)
	{
	    if(i < 6 && IsValidDynamicObject(VehicleInfo[vehicleid][carCargoObj][i]))
		{
			DestroyDynamicObject(VehicleInfo[vehicleid][carCargoObj][i]);
            VehicleInfo[vehicleid][carCargoObj][i] = INVALID_OBJECT_ID;
		}

		if(i < 5 && IsValidDynamicObject(VehicleInfo[vehicleid][carSiren][i]))
		{
		    DestroyDynamicObject(VehicleInfo[vehicleid][carSiren][i]);
		    VehicleInfo[vehicleid][carSiren][i] = INVALID_OBJECT_ID;
		}

	    VehicleInfo[vehicleid][carCargoAmount][i] = 0;
	}

	for(new i = 0; i < MAX_VEHICLE_INVENTORY; i++)
	{
	    if(IsValidDynamicObject(VehicleInfo[vehicleid][carAttach][i]))
			DestroyDynamicObject(VehicleInfo[vehicleid][carAttach][i]);
	}

	for(new i = 0; i < MAX_CAR_TICKETS; i++)
		vTickets[vehicleid][i][tID] = 0;

	if(IsValidDynamicObject(VehicleInfo[vehicleid][carSiren][4]))
		DestroyDynamicObject(VehicleInfo[vehicleid][carSiren][4]);

	if(IsValidDynamicObject(VehicleInfo[vehicleid][carSiren][3]))
		DestroyDynamicObject(VehicleInfo[vehicleid][carSiren][3]);

	if(IsValidDynamicObject(VehicleInfo[vehicleid][carSiren][2]))
		DestroyDynamicObject(VehicleInfo[vehicleid][carSiren][2]);

	if(IsValidDynamicObject(VehicleInfo[vehicleid][carSiren][1]))
		DestroyDynamicObject(VehicleInfo[vehicleid][carSiren][1]);

    if(IsValidDynamicObject(VehicleInfo[vehicleid][carSiren][0]))
		DestroyDynamicObject(VehicleInfo[vehicleid][carSiren][0]);

	if(IsValidDynamic3DTextLabel(veicolo_callsign_testo[vehicleid]))
	{
		DestroyDynamic3DTextLabel(veicolo_callsign_testo[vehicleid]);
        veicolo_callsign_testo[vehicleid] = Text3D:INVALID_3DTEXT_ID;
	}

	if(IsValidDynamic3DTextLabel(status_update[vehicleid]))
	{
		DestroyDynamic3DTextLabel(status_update[vehicleid]);
        status_update[vehicleid] = Text3D:INVALID_3DTEXT_ID;
	}

    veh_vw[vehicleid] = 0;
	veh_int[vehicleid] = 0;

    VehicleInfo[vehicleid] = default_VehicleInfo;

    VehicleInfo[vehicleid][carOwnerPlayer] = INVALID_PLAYER_ID;
    VehicleInfo[vehicleid][carDriver] = INVALID_PLAYER_ID;

	return DestroyVehicle(vehicleid);
}

#if defined _ALS_DestroyVehicle
	#undef DestroyVehicle
#else
    #define _ALS_DestroyVehicle
#endif
#define DestroyVehicle ac_DestroyVehicle
//????????? end

stock ac_GivePlayerWeapon(playerid, weaponid, ammo)
{
    if(!IsPlayerLogged(playerid))
	    return 0;

	if(ValidWeaponForInventory(weaponid) == 0)
	    return 0;

	new i = GetWeapSlot(weaponid),
		weapons,
		ammos;
	if(-1 == i) return 0;

	SetPVarInt(playerid, #gun_check, GetTickCount()+5000);

	GetPlayerWeaponData(playerid, GetWeaponSlot(weaponid), weapons, ammos);

	if(PlayerInfo[playerid][pWeap][i] != 0 && GetWeaponSlot(weaponid) != GetWeaponSlot(PlayerInfo[playerid][pWeap][i]))
	    ResetPlayerWeaponID(playerid, PlayerInfo[playerid][pWeap][i]);

	if(weapons == weaponid && PlayerInfo[playerid][pWeap][i] != weaponid)
	    PlayerInfo[playerid][pAmmo][i] = ammo;
	else
	    PlayerInfo[playerid][pAmmo][i] += ammo;

	PlayerInfo[playerid][pWeap][i] = weaponid;
    if(IsWeaponDontHide(weaponid) && i < 3)
		PlayerInfo[playerid][pHideWeap][i] = 0;

	return GivePlayerWeapon(playerid, weaponid, ammo);
}

stock ac_ResetPlayerWeapons(playerid)
{
    SetPVarInt(playerid, #gun_check, GetTickCount()+5000);
    ResetPlayerWeapons(playerid);

	for(new i; i < MAX_WEAP; i++)
	{
	    PlayerInfo[playerid][pAmmo][i] = 0;
	    PlayerInfo[playerid][pWeap][i] = 0;
	}

	if(IsPlayerAttachedObjectSlotUsed(playerid, 5))
 		RemovePlayerAttachedObject(playerid, 5);

	if(IsPlayerAttachedObjectSlotUsed(playerid, 6))
 		RemovePlayerAttachedObject(playerid, 6);

    if(IsPlayerAttachedObjectSlotUsed(playerid, 7))
 		RemovePlayerAttachedObject(playerid, 7);

	return 1;
}

stock ResetPlayerWeaponID(playerid, weaponid)
{
    SetPVarInt(playerid, #gun_check, GetTickCount()+5000);
    ResetPlayerWeapons(playerid);
	for(new i; i< MAX_WEAP; i++)
	{
	    if(PlayerInfo[playerid][pWeap][i] == 0)
			continue;

		else if(PlayerInfo[playerid][pWeap][i] == weaponid)
		{
		    PlayerInfo[playerid][pWeap][i] = 0;
		    PlayerInfo[playerid][pAmmo][i] = 0;
		    if(i < 3) RemovePlayerAttachedObject(playerid, i+5);
		    continue;
		}
		GivePlayerWeapon(playerid, PlayerInfo[playerid][pWeap][i], PlayerInfo[playerid][pAmmo][i]);
	}
	return 1;
}

stock SetPlayerWeapons(playerid)
{
	if(IsPlayerNPC(playerid) || !IsPlayerLogged(playerid) || PlayerInfo[playerid][pAJailed] != 0)
	    return 1;

    SetPVarInt(playerid, #gun_check, GetTickCount()+5000);

	ResetPlayerWeapons(playerid);
	for(new i; i< MAX_WEAP; i++)
	{
        if(PlayerInfo[playerid][pWeap][i] == 0) continue;
	    GivePlayerWeapon(playerid, PlayerInfo[playerid][pWeap][i], PlayerInfo[playerid][pAmmo][i]);
	}
	return 1;
}

stock PlayerHoldingWeapon(playerid, weaponid)
{
	return (GetPlayerWeapon(playerid) == weaponid && GetWeapSlot(weaponid) != -1 && PlayerInfo[playerid][pWeap][GetWeapSlot(weaponid)] == weaponid) ? (1) : (0);
}

stock IsPlayerHoldingWeapon(playerid)
{
	return (GetPlayerWeapon(playerid) != 0 && GetWeapSlot(GetPlayerWeapon(playerid)) != -1) ? (1) : (0);
}

stock HasWeapon(playerid, weaponid)
{
	return (GetWeapSlot(weaponid) != -1 && PlayerInfo[playerid][pWeap][GetWeapSlot(weaponid)] == weaponid) ? (1) : (0);
}

native WP_Hash(buffer[], len, const str[]);

main()
{
	print("\n*****************************************");
	print(" Trw Roleplay "GameModeVersion"");
	print("*******************************************\n");
	return 1;
}

public OnGameModeInit()
{
    SendRconCommand("mapname "MAP_NAME"");
	SendRconCommand("hostname "ServerName"");
	SendRconCommand("loadfs objects");
    SendRconCommand("loadfs ls_beachside");

    DisableInteriorEnterExits();
	ManualVehicleEngineAndLights();
	AllowInteriorWeapons(1);
	EnableStuntBonusForAll(0);
 	DisableNameTagLOS();
	ShowPlayerMarkers(0);
	SetNameTagDrawDistance(15.0);
	SetGameModeText(GameModeText);
	AddPlayerClass(0, 1958.3783, 1343.1572, 15.3746, 269.1425, 0, 0, 0, 0, 0, 0);

	//MYSQL
	ConnectMySQL();
	new query[128];
	format(query, sizeof(query), "DELETE FROM `donate` WHERE `status`='0' AND `dateDelete` > %i", gettime());
	mysql_tquery(dbHandle, query);
    mysql_tquery(dbHandle, "SELECT * FROM `towers`", "LoadDynamicTowers");
	mysql_tquery(dbHandle, "SELECT *, (SELECT name FROM users WHERE id = garage.owner) as ownername FROM `garage`", "LoadDynamicGarage"); // ???????? ???????
	mysql_tquery(dbHandle, "SELECT * FROM `labels`", "LoadDynamicLabels");
	mysql_tquery(dbHandle, "SELECT * FROM `entrance`", "LoadDynamicEntrance");
	mysql_tquery(dbHandle, "SELECT * FROM `gates`", "LoadDynamicGates");
	mysql_tquery(dbHandle, "SELECT * FROM `atms`", "LoadDynamicATMS");
	mysql_tquery(dbHandle, "SELECT * FROM `ateles`", "LoadDynamicTeles");
	mysql_tquery(dbHandle, "SELECT * FROM `objects`", "LoadDynamicObjects");
	mysql_tquery(dbHandle, "SELECT * FROM `cctvs`", "LoadDynamicCCTV");
	mysql_tquery(dbHandle, "SELECT * FROM `cars` WHERE `owner` = '0'", "LoadDynamicCars", "");
	mysql_tquery(dbHandle, "SELECT *, (SELECT name FROM users WHERE id = houses.owner) as ownername, (SELECT last_login FROM users WHERE id = houses.owner) as lastlogin FROM `houses`", "LoadDynamicHouses");
	mysql_tquery(dbHandle, "SELECT * FROM `apartment`", "LoadDynamicApartment");
	mysql_tquery(dbHandle, "SELECT *, (SELECT name FROM users WHERE id = business.owner) as ownername, (SELECT last_login FROM users WHERE id = business.owner) as lastlogin FROM `business`", "LoadDynamicBiz");
	mysql_tquery(dbHandle, "SELECT * FROM `foodstand`", "LoadDynamicStands");
	mysql_tquery(dbHandle, "SELECT * FROM `apbs`", "LoadDynamicAPB");
	mysql_tquery(dbHandle, "SELECT * FROM `factions` ORDER BY `factionid`", "LoadDynamicFactions");
	mysql_tquery(dbHandle, "SELECT * FROM `jobs` ORDER BY `jobid`", "LoadDynamicJobs");
	mysql_tquery(dbHandle, "SELECT * FROM `radios`", "LoadDynamicRadios");
	mysql_tquery(dbHandle, "SELECT * FROM `plants`", "LoadDynamicPlants");
    mysql_tquery(dbHandle, "SELECT * FROM `truck_cargo`", "LoadDynamicTruckCargo");
    mysql_tquery(dbHandle, "SELECT * FROM `payphones`", "LoadDynamicPayphone");

	format(query, sizeof(query), "INSERT INTO `logs_exit` (`date`) VALUES ('%s')", GetFullDate());
    mysql_tquery(dbHandle, query, "OnLogsExitInsert");
	//
	TextDraws_Init();
	Ship_Init();
	Patrul_Init();
    Fish_Init();
    Toll_Init();
	SetCurrentTime();

    buy_interior = CreateMenu("_", 1, 20.0, 160.0, 80.0);
	AddMenuItem(buy_interior, 0, "> NEXT");
	AddMenuItem(buy_interior, 0, "> BACK");
	AddMenuItem(buy_interior, 0, "> SELECT");
	AddMenuItem(buy_interior, 0, "> EXIT");
	SetTimer("OneSecondTimer", 1000, true);
	SetTimer("TaxiTimer", 5000, false);
	SetTimer("OneMinuteTimer", 60000, false);
	SetTimer("CheckGas", 100000, false);
	for(new v = 1; v < MAX_VEHICLES; v++)
	{
	    veh_vw[v] = 0;
		veh_int[v] = 0;
    	VehicleInfo[v] = default_VehicleInfo;
	    VehicleInfo[v][carOwnerPlayer] = INVALID_PLAYER_ID;
	    VehicleInfo[v][carDriver] = INVALID_PLAYER_ID;
		VehicleInfo[v][carFuel] = 100;
	}

	for(new i; i != sizeof(license_exam_cp)-1; i++)
	    license_exam_cp[i] = CreateDynamicRaceCP(0, license_exam_coord[i][0], license_exam_coord[i][1], license_exam_coord[i][2], license_exam_coord[i+1][0], license_exam_coord[i+1][1], license_exam_coord[i+1][2], 4.0, 0, 0, -1, 1000.0);

    license_exam_cp[sizeof(license_exam_cp)-1] = CreateDynamicRaceCP(1, license_exam_coord[sizeof(license_exam_cp)-1][0], license_exam_coord[sizeof(license_exam_cp)-1][1], license_exam_coord[sizeof(license_exam_cp)-1][2], 0.0, 0.0, 0.0, 4.0, 0, 0, -1, 1000.0);

    for(new i; i != sizeof(fly_exam_cp)-1; i++)
	    fly_exam_cp[i] = CreateDynamicRaceCP(3, fly_exam_coord[i][0], fly_exam_coord[i][1], fly_exam_coord[i][2], fly_exam_coord[i+1][0], fly_exam_coord[i+1][1], fly_exam_coord[i+1][2], 4.0);

    fly_exam_cp[sizeof(fly_exam_cp)-1] = CreateDynamicRaceCP(1, fly_exam_coord[sizeof(fly_exam_cp)-1][0], fly_exam_coord[sizeof(fly_exam_cp)-1][1], fly_exam_coord[sizeof(fly_exam_cp)-1][2], 0.0, 0.0, 0.0, 4.0, 0, 0, -1, 1000.0);
	//STR ???????????
    bronze_str[sizeof(bronze_str)-1] = '\n';
	bronze_str_2[sizeof(bronze_str_2)-1] = '\0';

    silver_str[sizeof(silver_str)-1] = '\n';
	silver_str_2[sizeof(silver_str_2)-1] = '\n';
	silver_str_3[sizeof(silver_str_3)-1] = '\0';

    gold_str[sizeof(gold_str)-1] = '\n';
	gold_str_2[sizeof(gold_str_2)-1] = '\n';
	gold_str_3[sizeof(gold_str_3)-1] = '\0';
	return 1;
}

public OnGameModeExit()
{
    SendRconCommand("unloadfs objects");
    SendRconCommand("unloadfs ls_beachside");
	mysql_close(dbHandle);
	return 1;
}

forward OnLogsExitInsert();
public OnLogsExitInsert()
{
    logs_exit = cache_insert_id();
    return 1;
}

stock TracePlayer(playerid)
{
	new targetid = pTemp[playerid][pTracePlayer];
	pTemp[playerid][pTraceStage]++;

	if(pTemp[playerid][pTraceStage] < 9 && (0 == IsPlayerLogged(targetid) || PlayerInfo[targetid][pPhoneAirplane] != 0 || PlayerInfo[targetid][pPhoneOff] != 0 || 0 == GetPlayerNetwork(targetid)))
	{
	    if(pTemp[playerid][pTraceGZ] != -1)
			GangZoneDestroy(pTemp[playerid][pTraceGZ]);
	    pTemp[playerid][pTraceGZ] = -1;

	    pTemp[playerid][pTracePlayer] = INVALID_PLAYER_ID;
	    pTemp[playerid][pTraceStage] = 0;
	    SendErrorMessage(playerid, "Semnal pierdut.");
	    return 1;
	}

	new mulstatus[16],
		sevstatus[16],
		verstatus[16],
		mes[712];

	if(pTemp[playerid][pTraceDist][0] >= 1250.0) mulstatus = "{FF6347}SLAB";
	else if(pTemp[playerid][pTraceDist][0] < 1250.0) mulstatus = "{DABB3E}BUN";

	if(pTemp[playerid][pTraceDist][1] >= 1250.0) sevstatus = "{FF6347}Slab";
	else if(pTemp[playerid][pTraceDist][1] < 1250.0) sevstatus = "{DABB3E}BUN";

	if(pTemp[playerid][pTraceDist][1] >= 1250.0) verstatus = "{FF6347}SLAB";
	else if(pTemp[playerid][pTraceDist][1] < 1250.0) verstatus = "{DABB3E}BUN";

    if(pTemp[playerid][pTraceStage] < 9)
    {
	    if(pTemp[playerid][pTraceStage] > 1)
	        format(mes, sizeof(mes), "{AFAFAF}Semnal %s {AFAFAF}in zona {FFFFFF}Mulholland{AFAFAF}...\n", mulstatus);

	    if(pTemp[playerid][pTraceStage] > 3)
	        format(mes, sizeof(mes), "%s{AFAFAF}Semnal %s {AFAFAF}in zona {FFFFFF}Mulholland{AFAFAF}...\n", mes, sevstatus);

	    if(pTemp[playerid][pTraceStage] > 5)
	        format(mes, sizeof(mes), "%s{AFAFAF}Semnal %s {AFAFAF}in zona {FFFFFF}Verona Beach{AFAFAF}...",mes, verstatus);

		if(pTemp[playerid][pTraceStage] == 8)
		{
		    new location[MAX_ZONE_NAME];
		    GetPlayer2DZone(targetid, location, MAX_ZONE_NAME);

		    new Float:x,
				Float:y,
				Float:z;
			if(GetWorld(targetid) || GetInterior(targetid))
			{
				x = PlayerInfo[targetid][pLocationPos][0];
				y = PlayerInfo[targetid][pLocationPos][1];
				z = PlayerInfo[targetid][pLocationPos][2];
			}
			else GetPlayerPos(targetid, x, y, z);

		    format(mes, sizeof(mes), "%s\n\n\n{AFAFAF}... Urmarirea s-a incheiat. Locatie aproximativa: %s\nTelefon: %i\nProprietar: %s", mes, location, PlayerInfo[targetid][pNumber], GetNameEx(targetid));

		    pTemp[playerid][pTraceGZ] = GangZoneCreate(x+65, y+65, x-65,y-65);
			GangZoneShowForPlayer(playerid, pTemp[playerid][pTraceGZ], 0xFF0000AA);
		}
		Dialog_Show(playerid, ShowTrace, DIALOG_STYLE_MSGBOX, "{8D8DFF}Sistem de urmarire", mes, "Inchide", "");
	}

	if(pTemp[playerid][pTraceStage] > 600)
	{
	    if(pTemp[playerid][pTraceGZ] != -1)
			GangZoneDestroy(pTemp[playerid][pTraceGZ]);
	    pTemp[playerid][pTraceGZ] = -1;

	    pTemp[playerid][pTracePlayer] = INVALID_PLAYER_ID;
	    pTemp[playerid][pTraceStage] = 0;
	}
	return 1;
}
public OnPlayerRequestClass(playerid, classid)
{
	if(IsPlayerNPC(playerid))
		return 1;

    if(IsPlayerLogged(playerid))
	{
     	SetSpawnInfoEx(playerid, PlayerInfo[playerid][pPosX],PlayerInfo[playerid][pPosY],PlayerInfo[playerid][pPosZ]);
    	SpawnPlayer(playerid);
		return 1;
	}
	return 1;
}

public OnPlayerConnect(playerid)
{
    if(IsPlayerNPC(playerid))
		return 1;

	//Anti Cheat
	ac_spawn{playerid} = 0;
    ac_fake_kill{playerid} = 0;
	ac_carshot_flood{playerid} = 0;
    ac_veh_airbreak_flood{playerid} = 0;
    ac_veh_health{playerid} = 0;
    player_remove_vehicle[playerid] = 0;
    ignore_remove_vehicle[playerid] = 0;
	ac_off_protect{playerid} = 254;
	ac_off_flood{playerid} = 0;
	ac_fly_detect{playerid} = 0;
	ac_controllable{playerid} = 0;
	ac_vehicle_death[playerid] = 0;
	//
	for(new i = 0; i < 10; i++)
		RemovePlayerAttachedObject(playerid, i);

	for(new i = 0; i < 4; i++)
		TextDrawHideForPlayer(playerid, TD_restaurant[i]);

	PreloadAnimations(playerid);
	StopAudioStreamForPlayer(playerid);

	ResetPlayerVariables(playerid);
	CreatePlayerTextDraws(playerid);

    TogglePlayerAllDynamicRaceCPs(playerid, false);

	for(new i; i < 11; i++)
	{
	    TextDrawHideForPlayer(playerid, zond_cam[i]);
	}
    SetPlayerColor(playerid, TEAM_HIT_COLOR);
	GetNameForPlayer(playerid);
	SetTimerEx("CheckAccount", 2000, false, "i", playerid);
	return 1;
}

public OnPlayerDisconnect(playerid, reason)
{
	if(IsPlayerNPC(playerid))
		return 1;

    new reason_name[3][20] =
		{"iesire", "crash", "kick/ban"};

    DisableWaypoint(playerid);
	ResetDamages(playerid);
	DestroyAllBort(playerid);
    Destroy_Boombox(playerid);

    if(IsAdminDuty(playerid))
		server_admins--;

	if(TaxiMade[playerid])
	{
		GiveCash(playerid, TaxiMade[playerid]);
        TaxiMade[playerid] = 0;
	}

	if(GetPVarInt(playerid, #show_fish) == 1)
	{
	    DeletePVar(playerid, #show_fish);
	    GangZoneHideForPlayer(playerid, gz_fish[0]);
	    GangZoneHideForPlayer(playerid, gz_fish[1]);
	    GangZoneHideForPlayer(playerid, gz_fish[2]);
	    GangZoneHideForPlayer(playerid, gz_fish[3]);
	}

    pTemp[playerid][pRamType] = 0;
    pTemp[playerid][pRamTime] = 0;
    if(IsValidDynamicObject(pTemp[playerid][pRamObj]))
	{
		DestroyDynamicObject(pTemp[playerid][pRamObj]);
		pTemp[playerid][pRamObj] = INVALID_OBJECT_ID;
	}

    if(pTemp[playerid][pPatrol])
	{
	    new id = pTemp[playerid][pPatrol]-1;
	    pTemp[playerid][pPatrol] = 0;

        if(PatrolInfo[GetPatrolID(playerid)][id][patrulOfficer][0] == playerid) PatrolInfo[GetPatrolID(playerid)][id][patrulOfficer][0] = INVALID_PLAYER_ID;
        if(PatrolInfo[GetPatrolID(playerid)][id][patrulOfficer][1] == playerid) PatrolInfo[GetPatrolID(playerid)][id][patrulOfficer][1] = INVALID_PLAYER_ID;

		if(PatrolInfo[GetPatrolID(playerid)][id][patrulOfficer][0] == INVALID_PLAYER_ID && PatrolInfo[GetPatrolID(playerid)][id][patrulOfficer][0] == INVALID_PLAYER_ID)
		    PatrolInfo[GetPatrolID(playerid)][id][patrulExists] = 0;

	    SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_LSPDNEW, "[DISP] %s %s a iesit pe teren sub %s (%s).", GetRankName(playerid), GetNameEx(playerid), PatrolInfo[GetPatrolID(playerid)][id][patrulName], reason_name[reason]);
	}

    if(IsPlayerPhoneCreated(playerid))
		Phone_Destroy(playerid);

	if(pTemp[playerid][p3DMenu] != -1)
	{
    	Destroy3DMenu(pTemp[playerid][p3DMenu]);
		pTemp[playerid][p3DMenu] = -1;
	}

	if(pTemp[playerid][pTracePlayer] != INVALID_PLAYER_ID)
	{
	    pTemp[playerid][pTracePlayer] = INVALID_PLAYER_ID;
		pTemp[playerid][pTraceStage] = 0;
		if(pTemp[playerid][pTraceGZ] != -1) GangZoneDestroy(pTemp[playerid][pTraceGZ]);
		pTemp[playerid][pTraceGZ] = -1;
	}

	if(IsValidDynamic3DTextLabel(PrisonLabel[playerid]))
	{
		DestroyDynamic3DTextLabel(PrisonLabel[playerid]);
        PrisonLabel[playerid] = Text3D:INVALID_3DTEXT_ID;
	}

    if(pTemp[playerid][pInteriorBiz] != 0)
	{
		SetPlayerBuyInterior(playerid, 0);
        pTemp[playerid][pInteriorBiz] = 0;
	}

	if(pTemp[playerid][pZond] != 0)
	{
		SetPlayerZond(playerid, 0);
        pTemp[playerid][pZond] = 0;
	}

    if(pTemp[playerid][pPayphone])
    {
		PayphoneInfo[pTemp[playerid][pPayphone]-1][phUsed] = INVALID_PLAYER_ID;
		pTemp[playerid][pPayphone] = 0;
	}

	if(pTemp[playerid][pCallLine] != INVALID_PLAYER_ID)
	{
	    if(IsPlayerLogged(pTemp[playerid][pCallLine])) SendClientMessage(pTemp[playerid][pCallLine], -1, "> Fara semnal...");
	    CancelCall(playerid);
	}

	if(IsPlayerLogged(playerid))
	{
	    foreach(Player, i)
		{
			if(!IsPlayerLogged(i))
				continue;

			if(!(PlayerInfo[i][pSettings] & togJoin))
			{
				if(CheckAdmin(i, 1))
					SendClientMessageEx(i, COLOR_GRAD2, "*** %s s-a deconectat (%s) (bani in mana: $%s, bani in banca: $%s)", GetNameEx(playerid), reason_name[reason], FormatNumber(PlayerInfo[playerid][pCash]), FormatNumber(PlayerInfo[playerid][pBank]));

				else if(GetPlayerDistanceFromPlayer(playerid, i) < 15.0 && GetWorld(playerid) == GetWorld(i) && GetInterior(playerid) == GetInterior(i))
                	SendClientMessageEx(i, COLOR_GRAD2, "** %s (%s)", GetNameEx(playerid), reason_name[reason]);
			}
		}

		if(pTemp[playerid][pRentveh] != 0)
		{
		    new vehicle = pTemp[playerid][pRentveh];
    		VehicleInfo[vehicle][carTerminate] = 600;
    		pTemp[playerid][pRentveh] = 0;
    	}

		if(PlayerInfo[playerid][pCarKey] != 0)
		{
			new vehicle = PlayerInfo[playerid][pCarKey];
		    Save_Car(vehicle);
            VehicleInfo[vehicle][carOwnerPlayer] = INVALID_PLAYER_ID;
			PlayerInfo[playerid][pCarKey] = 0;
		}

		CheckPMBlockList(playerid);

		new query[128];
		format(query, sizeof(query), "UPDATE `logs_exit` SET `reason_%i`=`reason_%i`+1 WHERE `id`='%i'", reason, reason, logs_exit);
    	mysql_tquery(dbHandle, query);

		Save_User(playerid);
	}

	pTemp[playerid][pLogged] = 0;
	ResetPlayerVariables(playerid);
	return 1;
}

stock DeleteFire(id)
{
	if(FiresInfo[id][fireOn] != 1)
	    return 1;

    FiresInfo[id][fireOn] = 0;

    if(IsValidDynamicObject(FiresInfo[id][fireObj]))
    	DestroyDynamicObject(FiresInfo[id][fireObj]);

    if(IsValidDynamic3DTextLabel(FiresInfo[id][fireLabel]))
	{
		DestroyDynamic3DTextLabel(FiresInfo[id][fireLabel]);
        FiresInfo[id][fireLabel] = Text3D:INVALID_3DTEXT_ID;
	}
	return 1;
}

stock IsPlayerAimingObject(playerid, objectid, Float: radius)
{
	new Float:X1,
		Float:Y1,
		Float:Z1,
		Float:X2,
		Float:Y2,
		Float:Z2;

	GetPlayerPos(playerid, X1, Y1, Z1);
	GetDynamicObjectPos(objectid, X2, Y2, Z2);

	new Float:distance =
		floatsqroot(floatpower(floatabs(X1-X2), 2) + floatpower(floatabs(Y1-Y2), 2));

	if(distance > 99)
		return 0;

	new Float:a;
	GetPlayerFacingAngle(playerid, a);
	X1 += (distance * floatsin(-a, degrees));
	Y1 += (distance * floatcos(-a, degrees));

	distance =
		floatsqroot(floatpower(floatabs(X1-X2), 2) + floatpower(floatabs(Y1-Y2), 2));

	return (distance <= radius)?(1):(0);
}

stock ProxDetectorOutOfCharacter(Float:radi, playerid, string[], color)
{
	foreach(Player,i)
	{
		if(IsPlayerLogged(i) == 0 || 0 == PlayerNearPlayer(radi, playerid, i))
			continue;

		SCM(i,color,string);
	}
	return 1;
}
//==========================
stock PlayerNearPlayer(Float:radi, playerid, targetid)
{
	new
		Float:fX,
		Float:fY,
		Float:fZ;

	GetPlayerPos(targetid, fX, fY, fZ);

	return (GetInterior(playerid) == GetInterior(targetid) && GetWorld(playerid) == GetWorld(targetid)) && IsPlayerInRangeOfPoint(playerid, radi, fX, fY, fZ);
}

stock SavePlayerPos(playerid)
{
	GetPlayerPos(playerid, PlayerInfo[playerid][pPosX],PlayerInfo[playerid][pPosY],PlayerInfo[playerid][pPosZ]);
	GetPlayerFacingAngle(playerid, PlayerInfo[playerid][pPosA]);
	PlayerInfo[playerid][pWorld] = GetWorld(playerid);
	PlayerInfo[playerid][pInt] = GetInterior(playerid);

	SetSpawnInfoEx(playerid, PlayerInfo[playerid][pPosX],PlayerInfo[playerid][pPosY],PlayerInfo[playerid][pPosZ]);
	return 1;
}

stock SetSpawnInfoEx(playerid, Float:x, Float:y, Float:z, Float:Angle = 0.0)
{
    if(PlayerInfo[playerid][pChar] > 0)
  		SetSpawnInfo(playerid, 0, PlayerInfo[playerid][pChar], x, y, z, Angle, 0, 0, 0, 0, 0, 0);
	else
		SetSpawnInfo(playerid, 0, PlayerInfo[playerid][pSkin], x, y, z, Angle, 0, 0, 0, 0, 0, 0);
	return 1;
}

stock OnPlayAnim(playerid,animlib[],animname[], Float:Speed, looping, lockx, locky, lockz, lp)
{
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT || IsPlayerInjured(playerid) || JackingEngine[playerid] != 0 || JackingLock[playerid] != 0 || pTemp[playerid][pTaserTime] || pTemp[playerid][pCuffed])
		return 0;

	OnAnim{playerid} = true;
	ApplyAnimation(playerid, animlib, animname, Speed, looping, lockx, locky, lockz, lp, 1);

	return 1;
}

stock ChatAnimation(playerid, len)
{
	if(pTemp[playerid][pEmergency] != 0 || GetPVarInt(playerid, #selfie) || pTemp[playerid][pCallStatus] == 2 || 0 == PlayerInfo[playerid][pTalk] || IsPlayerInjured(playerid) || IsPlayerInAnyVehicle(playerid) || JackingEngine[playerid] != 0 || JackingLock[playerid] != 0 || GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DUCK || pTemp[playerid][pTaserTime] || pTemp[playerid][pCuffed])
		return 1;

	switch(PlayerInfo[playerid][pTalk])
	{
	    case 1: ApplyAnimation(playerid,"PED","IDLE_CHAT",4.0,1,0,0,1,1);
	    case 2: ApplyAnimation(playerid,"GANGS","prtial_gngtlkA",4.0,1,0,0,1,1);
	    case 3: ApplyAnimation(playerid,"GANGS","prtial_gngtlkB",4.0,1,0,0,1,1);
	    case 4: ApplyAnimation(playerid,"GANGS","prtial_gngtlkC",4.0,1,0,0,1,1);
	    case 5: ApplyAnimation(playerid,"GANGS","prtial_gngtlkD",4.0,1,0,0,1,1);
	    case 6: ApplyAnimation(playerid,"GANGS","prtial_gngtlkE",4.0,1,0,0,1,1);
	    case 7: ApplyAnimation(playerid,"GANGS","prtial_gngtlkF",4.0,1,0,0,1,1);
	    case 8: ApplyAnimation(playerid,"GANGS","prtial_gngtlkG",4.0,1,0,0,1,1);
	    case 9: ApplyAnimation(playerid,"GANGS","prtial_gngtlkH",4.0,1,0,0,1,1);
	}
	SetTimerEx("TalkTimer", len * 50, 0, "i", playerid);
	return 1;
}

stock StopPlayerAnims(playerid)
{
	if(IsPlayerInjured(playerid) || GetPlayerState(playerid) != PLAYER_STATE_ONFOOT || JackingEngine[playerid] != 0 || JackingLock[playerid] != 0 || pTemp[playerid][pTaserTime] || pTemp[playerid][pCuffed])
		return 0;

	OnAnim{playerid} = false;
	ClearAnimations(playerid);
	return 1;
}

stock GetNameForPlayer(playerid)
{
    GetPlayerName(playerid, PlayerInfo[playerid][pUsername], MAX_PLAYER_NAME+1);
    GetPlayerName(playerid, PlayerInfo[playerid][pUsername_], MAX_PLAYER_NAME+1);
    strreplace(PlayerInfo[playerid][pUsername_], '_', ' ');
    format(PlayerInfo[playerid][pMaskname], 32, PlayerInfo[playerid][pUsername_]);
    return 1;
}

stock place_color(string[])
{
	for(new i=0; string[i]; i++)
	{
		if(string[i] != '~')
		    continue;

        if(string[i + 7] == '~')
		{
			string[i + 7] = '}';
            string[i] = '{';
		}

		if(string[i + 1] == 'n' && string[i + 2] == '~')
        {
            strdel(string, i, i + 2);
            strins(string, "\n", i, 3);

            strdel(string, i + 1, i + 2);
            strins(string, "", i + 1, 1);
		}
	}
	return 1;
}

stock strreplace(string[], find, replace)
{
	for(new i=0; string[i]; i++)
	{
		if(string[i] != find)
		    continue;

		string[i] = replace;
	}
	return 1;
}

stock SetSkin(playerid, skinid)
{
	PlayerInfo[playerid][pSkin] = skinid;
	SetSpawnInfoEx(playerid, 1642.2006, -2334.4751, -2.6797);
	return SetPlayerSkin(playerid, skinid);
}

stock GetSkin(playerid) return PlayerInfo[playerid][pSkin];
///////////////////////////Bank///////////////////////////////////
stock GiveBankCash(playerid, cash)
{
	PlayerInfo[playerid][pBank] = PlayerInfo[playerid][pBank] + cash;
	return 1;
}
stock ResetBankCash(playerid)
{
	PlayerInfo[playerid][pBank] = 0;
	return 1;
}
stock SetBankCash(playerid, cash)
{
	PlayerInfo[playerid][pBank] = cash;
	return 1;
}
stock GetBankCash(playerid) return PlayerInfo[playerid][pBank];
///////////////////////////Bank///////////////////////////////////

///////////////////////////Cash///////////////////////////////////
stock GiveBizCash(bizid, cash)
{
	if(bizid < 0 || bizid > MAX_BIZ-1 || BizInfo[bizid][bizID] == 0 || BizInfo[bizid][bizOwnerID] == 0)
		return 0;

	BizInfo[bizid][bizCash] += cash;

	new query[128];
	mysql_format(dbHandle, query, sizeof(query), "UPDATE `business` SET `cash` = %i, `product` = %i WHERE `id` = %i",
	BizInfo[bizid][bizCash],
	BizInfo[bizid][bizProduct],
	BizInfo[bizid][bizID]);
	mysql_tquery(dbHandle, query);
	return 1;
}

stock GiveCash(playerid, cash)
{
 	PlayerInfo[playerid][pCash] += cash;
	ResetPlayerMoney(playerid);
	GivePlayerMoney(playerid, PlayerInfo[playerid][pCash]);

	new __cash = cash;
	if(cash < 0)
	    cash = -cash;

    new mes[19];
	format(mes, sizeof(mes), "%s$%i", (__cash < 0)?("~r~-"):("~g~+"), cash);
	GameTextForPlayer(playerid, mes, 1000, 1);
	return 1;
}

stock SetCash(playerid, cash)
{
	PlayerInfo[playerid][pCash] = cash;
	ResetPlayerMoney(playerid);
	GivePlayerMoney(playerid, cash);
	return 1;
}

stock GetCash(playerid)
	return PlayerInfo[playerid][pCash];
///////////////////////////Cash///////////////////////////////////

stock GetMonthName(month)
{
	new name[32];
	switch(month)
	{
		case 1: format(name,32,"Ianuarie");
		case 2: format(name,32,"Februarie");
		case 3: format(name,32,"Martie");
		case 4: format(name,32,"Aprilie");
		case 5: format(name,32,"Mai");
		case 6: format(name,32,"Iunie");
		case 7: format(name,32,"Iulie");
		case 8: format(name,32,"August");
		case 9: format(name,32,"Septembrie");
		case 10: format(name,32,"Octombrie");
		case 11: format(name,32,"Noiembrie");
		case 12: format(name,32,"Decembrie");
	}
	return name;
}
stock GetMonthNameRus(month)
{
	new name[32];
	switch(month)
	{
		case 1: format(name,32,"Ianuarie");
		case 2: format(name,32,"Februarie");
		case 3: format(name,32,"Martie");
		case 4: format(name,32,"Aprilie");
		case 5: format(name,32,"Mai");
		case 6: format(name,32,"Iunie");
		case 7: format(name,32,"Iulie");
		case 8: format(name,32,"August");
		case 9: format(name,32,"Septembrie");
		case 10: format(name,32,"Octombrie");
		case 11: format(name,32,"Noiembrie");
		case 12: format(name,32,"Decembrie");
	}
	return name;
}

stock ShowProperty(playerid, id)
{
	new count;

	new year, month, day, hour, minute, second;
	getdate(year, month, day);
	gettime(hour, minute, second);

    SendClientMessageEx(playerid, COLOR_GREEN,"|____________________Proprietatea %s [%02d %s %i, %02d:%02d:%02d]____________________|", GetName(id), day, GetMonthNameRus(month), year, hour, minute, second);

	for(new i; i != MAX_HOUSES; i++)
	{
	    if(HouseInfo[i][hID] == 0 || HouseInfo[i][hOwnerID] != PlayerInfo[id][pID])
	        continue;

        if (HouseInfo[i][hPosInt] == 0)
            SendClientMessageEx(playerid, COLOR_STATS1, "| Casa (ID: %i) Adresa: %s", i, GetHouseZone(i));
		else
        	SendClientMessageEx(playerid, COLOR_STATS1, "| Casa (ID: %i)", i);
        count++;
	}

	for(new i; i != MAX_BIZ; i++)
	{
	    if(BizInfo[i][bizID] == 0 || BizInfo[i][bizOwnerID] != PlayerInfo[id][pID])
	        continue;

        SendClientMessageEx(playerid, COLOR_STATS1, "| Afacere (ID: %i)", i);
        count++;
	}

	for(new i; i != MAX_GARAGES; i++)
	{
	    if(GarageInfo[i][garageID] == 0 || GarageInfo[i][garageOwner] != PlayerInfo[id][pID])
	        continue;

        SendClientMessageEx(playerid, COLOR_STATS1, "| Garaj (ID: %i)", i);
        count++;
	}

	if(count == 0 && playerid == id)
 		SendClientMessage(playerid, COLOR_STATS1, "Nu ai o locuinta, o afacere sau un garaj.");

    if(count == 0 && playerid != id)
    	SendClientMessage(playerid, COLOR_STATS1, "Acel jucator nu detine o locuinta, o afacere sau un garaj.");

	return 1;
}

stock ShowStats(playerid, id)
{
	new nums[12];
	if(PlayerInfo[id][pNumber] == 0)
		nums = "Fara";
	else
		format(nums, sizeof(nums), "%i", PlayerInfo[id][pNumber]);

	new works[32];
	if(PlayerInfo[id][pWorkOn] == 0)
		works = "Fara";
	else
		format(works, sizeof(works), "%i", PlayerInfo[id][pWorkOn]);

	new donate[11];
	switch(PlayerInfo[id][pPremium])
	{
	    case 1: donate = "BRONZE";
	    case 2: donate = "SILVER";
	    case 3: donate = "GOLD";
		default: donate = "Fara";
	}

	new fname[32];
	if(PlayerInfo[id][pFaction] == 0)
		fname = "Fara";
	else
		format(fname, 32, "%s", Factions[PlayerInfo[id][pFaction]][fName]);

	new rname[32];
	if(PlayerInfo[id][pRank] == 0)
		rname = "Fara";
	else
		format(rname, 32, "%s", GetRankName(id));

	new year, month, day, hour, minute, second;
	getdate(year, month, day);
	gettime(hour, minute, second);
	SendClientMessageEx(playerid, COLOR_ORANGE,"|____________________%s [%02d %s %i, %02d:%02d:%02d]____________________|", GetNameEx(id), day, GetMonthNameRus(month), year, hour, minute, second);
	SendClientMessageEx(playerid, COLOR_STATS1, "| Caracter | UCP:[%s] Factiune:[%s] Rang:[%s] Telefon:[%s] Dependenta:[%i]", GetAccName(id), fname, rname, nums, PlayerInfo[id][pDependence]);
	SendClientMessageEx(playerid, COLOR_STATS1, "| Diverse | Nivel:[%i] Experienta:[%i/%i] Donator:[%s]", PlayerInfo[id][pLevel], PlayerInfo[id][pExp], (PlayerInfo[id][pLevel]+1) * LEVEL_EXP, donate);
	SendClientMessageEx(playerid, COLOR_STATS2,"| Aptitudini | Ore jucate:[%i] Tip de lupta:[%s]", PlayerInfo[id][pHours], GetFightStyleName(id));
	SendClientMessageEx(playerid, COLOR_STATS1,"| Bani | In mana:[$%i] In banca:[$%i] Salariu:[$%i] Economii:[$%i]", GetCash(id), PlayerInfo[id][pBank], PlayerInfo[id][pPayCheckMoney], PlayerInfo[id][pSavings]);
	SendClientMessageEx(playerid, COLOR_STATS2,"| Job | Angajat la afacerea:[%s] Loc de munca principal:[%s] Loc de munca secundar:[%s]", works, GetJobName(PlayerInfo[id][pJob]), GetJobName(PlayerInfo[id][pSideJob]));
	SendClientMessageEx(playerid, COLOR_STATS2,"| OOC | Avertismente:[%i] Tester:[%s]", PlayerInfo[id][pWarns], (PlayerInfo[id][pTester] != 0)?("Da"):("Nu"));

	if(playerid != id)
	{
		for(new i; i != MAX_WEAP; i++)
		{
			if(PlayerInfo[id][pWeap][i] == 0)
			    SendClientMessageEx(playerid, COLOR_STATS2,"| Arme %i | Nimic.", i+1);
			else
            	SendClientMessageEx(playerid, COLOR_STATS2,"| Arme %i | %s (%i).", i+1, inventory_items[PlayerInfo[id][pWeap][i]][itemName], PlayerInfo[id][pAmmo][i]);
		}
	}

	if(CheckAdmin(playerid, 1))
	{
    	if(PlayerInfo[id][pMutedTime] > 0)
   	 		SendClientMessageEx(playerid, COLOR_STATS2, "> Ai mute. Iti va expira in: %i secunde.", PlayerInfo[id][pMutedTime]);

    	if(PlayerInfo[id][pJailed] != 0)
			SendClientMessageEx(playerid, COLOR_STATS2, "> Esti in jail. Vei fi eliberat in: %i secunde.", PlayerInfo[id][pJailTime]);
	}

	SendClientMessageEx(playerid, COLOR_ORANGE,"|____________________%s [%02d %s %i, %02d:%02d:%02d]____________________|", GetNameEx(id), day, GetMonthNameRus(month), year, hour, minute, second);
	return 1;
}

stock CheckAdmin(playerid, level)
{
	return PlayerInfo[playerid][pAdmin] >= level && IsAdminDuty(playerid) ? 1 : 0;
}

stock IsTester(playerid)
{
	return PlayerInfo[playerid][pTester] >= 1 && IsTesterDuty(playerid) ? 1 : 0;
}

stock IsAdminDuty(playerid)
{
	return pTemp[playerid][pAdminDuty] == 1 ? 1 : 0;
}

stock IsTesterDuty(playerid)
{
	return pTemp[playerid][pTesterDuty] == 1 ? 1 : 0;
}

stock BroadCast(color, string[])
{
	new mes[128];
	if(strlen(string) > MAXLEN)
	{
		new pos = MAXLEN;
		if(pos < MAXLEN-1) pos = MAXLEN;
		format(mes, sizeof(mes), "%.*s ...", pos, string);
		SCMALL(color, mes);
		format(mes, sizeof(mes), "... %s", string[pos]);
		SCMALL(color, mes);
	}
	else
	{
		format(mes, sizeof(mes), "%s", string);
		SCMALL(color, mes);
	}
	return 1;
}
//cards
stock ClearPackCards(playerid)
{
	for(new i = 0; i < MAX_PLAYER_CURRENT_CARDS; i++)
	{
		PlayerCurrentCards[playerid][i][0] = 0;
		PlayerCurrentCards[playerid][i][1] = 0;
	}
	DeletePVar(playerid, "SummCards");
	InsertPackCards(playerid);
	return 1;
}
stock InsertPackCards(playerid)
{
	for(new i = 0; i < MAX_TYPE_CARDS; i++)
	{
		PackCards[playerid][i] = i;
		for(new c = 0; c < MAX_CARDS_FOR_LEAR; c++)
		{
			PackCardsLears[playerid][i][c] = c+1;
		}
	}
	return 1;
}
stock GetPlayerSummCard(playerid)
{
	PlayerSumm[playerid] = 0;
	for(new i = 0; i < MAX_TYPE_CARDS; i++)
	{
		if(PackCards[playerid][i] == -1) { continue; }
		PlayerSumm[playerid]++;
		PlayerSummLear[playerid][i] = 0;
		for(new c = 0; c < MAX_CARDS_FOR_LEAR; c++)
		{
			if(PackCardsLears[playerid][i][c] == -1) { continue; }
			PlayerSummLear[playerid][i]++;
		}
	}
}
stock GivePlayerCard(playerid, &newcard, &newcardlear)
{
	new SummEx[2];
	new returnresult[2];
	returnresult[0] = random(PlayerSumm[playerid]);
	returnresult[1] = random(PlayerSummLear[playerid][returnresult[0]]);
	if(returnresult[0] == 0) { returnresult[0] += 1; }
	if(returnresult[1] == 0) { returnresult[1] += 1; }

	for(new i = 0; i < MAX_TYPE_CARDS; i++)
	{
		if(PackCards[playerid][i] == -1) { continue; }
		SummEx[0]++;
		if(SummEx[0] == returnresult[0])
		{
			for(new c = 0; c < MAX_CARDS_FOR_LEAR; c++)
			{
				if(PackCardsLears[playerid][i][c] == -1) { continue; }
				SummEx[1]++;
				if(SummEx[1] == returnresult[1])
				{
					PackCardsLears[playerid][i][c] = -1;
					if(PlayerSummLear[playerid][i] == 1) { PackCards[playerid][i] = -1; }
					newcard = i; newcardlear = c+1;
					return 1;
				}
			}
		}
	}
	return 0;
}
stock ShowPlayerCards(playerid)
{
	new cardname[156], cardslist[186];

	for(new i = 0; i < GetPVarInt(playerid, "SummCards"); i++)
	{
		format(cardname, sizeof(cardname), "%s%s ", exicards[PlayerCurrentCards[playerid][i][0]][0], GetTypeCard(PlayerCurrentCards[playerid][i][1]));
		strcat(cardslist, cardname, sizeof(cardslist));
	}

	SendClientMessageEx(playerid, COLOR_YELLOW, "Carti in mana: %s. Foloseste /showdown pentru a iti arata cartile.", cardslist);
	return 1;
}
stock ShowPlayerCardsToAll(playerid)
{
	new cardname[156],
		cardslist[186];

	for(new i = 0; i < GetPVarInt(playerid, "SummCards"); i++)
	{
		format(cardname, sizeof(cardname), "%s%s ", exicards[PlayerCurrentCards[playerid][i][0]][0], GetTypeCard(PlayerCurrentCards[playerid][i][1]));
		strcat(cardslist, cardname, sizeof(cardslist));
	}
	SendNearbyMessage(Range_Normal, playerid, COLOR_WHITE, "* %s si-a aratat cartile: %s", GetNameWithMask(playerid), cardslist);
	ClearPackCards(playerid);
	return 1;
}

stock GetTypeCard(learid)
{
	new leartext[15];
	if(learid == LEAR_HEARTS) { leartext = "[Inima rosie]"; }
	if(learid == LEAR_DIAMONDS) { leartext = "[Romb]"; }
	if(learid == LEAR_CLUBS) { leartext = "[Trefla]"; }
	if(learid == LEAR_SPADES) { leartext = "[Inima neagra]"; }
	return leartext;
}

forward UnFreezePlayer(playerid);
public UnFreezePlayer(playerid)
{
	TogglePlayerControllable(playerid, 1);
	return 1;
}

forward FreezePlayer(playerid);
public FreezePlayer(playerid)
{
	TogglePlayerControllable(playerid, 0);
	return 1;
}

public OnVehicleSirenStateChange(playerid, vehicleid, newstate)
{
	return 1;
}

stock TextDraws_Init()
{
	//logo
	logo = TextDrawCreate(26.666776, 426.859466, "~b~TRW-RP.RO");
	TextDrawLetterSize(logo, 0.246665, 1.749333);
	TextDrawAlignment(logo, 1);
	TextDrawColor(logo, -328859393);
	TextDrawSetShadow(logo, 0);
	TextDrawSetOutline(logo, 1);
	TextDrawBackgroundColor(logo, 255);
	TextDrawFont(logo, 2);
	TextDrawSetProportional(logo, 1);
	TextDrawSetShadow(logo, 0);


	//?????????
	TD_restaurant[0] = TextDrawCreate(487.599975, 139.384429, "usebox");
	TextDrawLetterSize(TD_restaurant[0], 0.000000, 20.258150);
	TextDrawTextSize(TD_restaurant[0], 133.600006, 0.000000);
	TextDrawAlignment(TD_restaurant[0], 1);
	TextDrawColor(TD_restaurant[0], 0);
	TextDrawUseBox(TD_restaurant[0], true);
	TextDrawBoxColor(TD_restaurant[0], 255);
	TextDrawSetShadow(TD_restaurant[0], 0);
	TextDrawSetOutline(TD_restaurant[0], 0);
	TextDrawFont(TD_restaurant[0], 0);
	TextDrawSetProportional(TD_restaurant[0], 1);

	TD_restaurant[1] = TextDrawCreate(148.600006, 165.884429, "Iata o lista cu meniurile acestui restaurant.");
	TextDrawLetterSize(TD_restaurant[1], 0.209995, 1.086665);
	TextDrawTextSize(TD_restaurant[1], 1010.000000, -9.333333);
	TextDrawAlignment(TD_restaurant[1], 1);
	TextDrawColor(TD_restaurant[1], -1);
	TextDrawUseBox(TD_restaurant[1], true);
	TextDrawBoxColor(TD_restaurant[1], 0);
	TextDrawSetShadow(TD_restaurant[1], 0);
	TextDrawSetOutline(TD_restaurant[1], 1);
	TextDrawBackgroundColor(TD_restaurant[1], 51);
	TextDrawFont(TD_restaurant[1], 1);
	TextDrawSetProportional(TD_restaurant[1], 1);

	TD_restaurant[2] = TextDrawCreate(148.600006, 176.217773, "Alege unul pe placul tau apasand pe imaginea acestuia.");
	TextDrawLetterSize(TD_restaurant[2], 0.209995, 1.086665);
	TextDrawTextSize(TD_restaurant[2], 1010.000000, -9.333333);
	TextDrawAlignment(TD_restaurant[2], 1);
	TextDrawColor(TD_restaurant[2], -1);
	TextDrawUseBox(TD_restaurant[2], true);
	TextDrawBoxColor(TD_restaurant[2], 0);
	TextDrawSetShadow(TD_restaurant[2], 0);
	TextDrawSetOutline(TD_restaurant[2], 1);
	TextDrawBackgroundColor(TD_restaurant[2], 51);
	TextDrawFont(TD_restaurant[2], 1);
	TextDrawSetProportional(TD_restaurant[2], 1);

	TD_restaurant[3] = TextDrawCreate(468.000000, 146.222290, "X");
	TextDrawLetterSize(TD_restaurant[3], 0.449598, 1.241600);
	TextDrawTextSize(TD_restaurant[3], 482.000000, 9.955554);
	TextDrawAlignment(TD_restaurant[3], 1);
	TextDrawColor(TD_restaurant[3], -1061109505);
	TextDrawSetShadow(TD_restaurant[3], 0);
	TextDrawSetOutline(TD_restaurant[3], 1);
	TextDrawBackgroundColor(TD_restaurant[3], 51);
	TextDrawFont(TD_restaurant[3], 1);
	TextDrawSetProportional(TD_restaurant[3], 1);
	TextDrawSetSelectable(TD_restaurant[3], true);

	//?????????? ?? ????
	TD_vehicle_info[0] = TextDrawCreate(429.000000, 409.000000, ".");
	TextDrawBackgroundColor(TD_vehicle_info[0], 255);
	TextDrawFont(TD_vehicle_info[0], 2);
	TextDrawLetterSize(TD_vehicle_info[0], 36.150016, -0.500000);
	TextDrawColor(TD_vehicle_info[0], -1);
	TextDrawSetOutline(TD_vehicle_info[0], 0);
	TextDrawSetProportional(TD_vehicle_info[0], 1);
	TextDrawSetShadow(TD_vehicle_info[0], 1);
	TextDrawSetSelectable(TD_vehicle_info[0], 0);

	TD_vehicle_info[1] = TextDrawCreate(458.000000, 395.000000, "vehicle");
	TextDrawBackgroundColor(TD_vehicle_info[1], 255);
	TextDrawFont(TD_vehicle_info[1], 3);
	TextDrawLetterSize(TD_vehicle_info[1], 0.400000, 0.899999);
	TextDrawColor(TD_vehicle_info[1], -1);
	TextDrawSetOutline(TD_vehicle_info[1], 0);
	TextDrawSetProportional(TD_vehicle_info[1], 1);
	TextDrawSetShadow(TD_vehicle_info[1], 1);
	TextDrawSetSelectable(TD_vehicle_info[1], 0);
    //???? ??????
	zond_cam[0] = TextDrawCreate(200.600006, 183.000000, "box");
	TextDrawLetterSize(zond_cam[0], 0.000000, -0.354317);
	TextDrawTextSize(zond_cam[0], 0.000000, 37.000000);
	TextDrawAlignment(zond_cam[0], 2);
	TextDrawColor(zond_cam[0], -1);
	TextDrawUseBox(zond_cam[0], 1);
	TextDrawBoxColor(zond_cam[0], -1);
	TextDrawSetShadow(zond_cam[0], 0);
	TextDrawSetOutline(zond_cam[0], 0);
	TextDrawBackgroundColor(zond_cam[0], 255);
	TextDrawFont(zond_cam[0], 1);
	TextDrawSetProportional(zond_cam[0], 1);
	TextDrawSetShadow(zond_cam[0], 0);

	zond_cam[1] = TextDrawCreate(200.100006, 320.000000, "box");
	TextDrawLetterSize(zond_cam[1], 0.000000, -0.354317);
	TextDrawTextSize(zond_cam[1], 0.000000, 37.000000);
	TextDrawAlignment(zond_cam[1], 2);
	TextDrawColor(zond_cam[1], -1);
	TextDrawUseBox(zond_cam[1], 1);
	TextDrawBoxColor(zond_cam[1], -1);
	TextDrawSetShadow(zond_cam[1], 0);
	TextDrawSetOutline(zond_cam[1], 0);
	TextDrawBackgroundColor(zond_cam[1], 255);
	TextDrawFont(zond_cam[1], 1);
	TextDrawSetProportional(zond_cam[1], 1);
	TextDrawSetShadow(zond_cam[1], 0);

	zond_cam[2] = TextDrawCreate(460.000000, 320.000000, "box");
	TextDrawLetterSize(zond_cam[2], 0.000000, -0.354317);
	TextDrawTextSize(zond_cam[2], 0.000000, 37.000000);
	TextDrawAlignment(zond_cam[2], 2);
	TextDrawColor(zond_cam[2], -1);
	TextDrawUseBox(zond_cam[2], 1);
	TextDrawBoxColor(zond_cam[2], -1);
	TextDrawSetShadow(zond_cam[2], 0);
	TextDrawSetOutline(zond_cam[2], 0);
	TextDrawBackgroundColor(zond_cam[2], 255);
	TextDrawFont(zond_cam[2], 1);
	TextDrawSetProportional(zond_cam[2], 1);
	TextDrawSetShadow(zond_cam[2], 0);

	zond_cam[3] = TextDrawCreate(460.000000, 183.000000, "box");
	TextDrawLetterSize(zond_cam[3], 0.000000, -0.354317);
	TextDrawTextSize(zond_cam[3], 0.000000, 37.000000);
	TextDrawAlignment(zond_cam[3], 2);
	TextDrawColor(zond_cam[3], -1);
	TextDrawUseBox(zond_cam[3], 1);
	TextDrawBoxColor(zond_cam[3], -1);
	TextDrawSetShadow(zond_cam[3], 0);
	TextDrawSetOutline(zond_cam[3], 0);
	TextDrawBackgroundColor(zond_cam[3], 255);
	TextDrawFont(zond_cam[3], 1);
	TextDrawSetProportional(zond_cam[3], 1);
	TextDrawSetShadow(zond_cam[3], 0);

	zond_cam[4] = TextDrawCreate(180.365997, 183.000015, "box");
	TextDrawLetterSize(zond_cam[4], 0.000000, 3.206443);
	TextDrawTextSize(zond_cam[4], 0.000000, -5.000000);
	TextDrawAlignment(zond_cam[4], 2);
	TextDrawColor(zond_cam[4], -1);
	TextDrawUseBox(zond_cam[4], 1);
	TextDrawBoxColor(zond_cam[4], -1);
	TextDrawSetShadow(zond_cam[4], 0);
	TextDrawSetOutline(zond_cam[4], 0);
	TextDrawBackgroundColor(zond_cam[4], 255);
	TextDrawFont(zond_cam[4], 1);
	TextDrawSetProportional(zond_cam[4], 1);
	TextDrawSetShadow(zond_cam[4], 0);

	zond_cam[5] = TextDrawCreate(180.365997, 286.833435, "box");
	TextDrawLetterSize(zond_cam[5], 0.000000, 3.206443);
	TextDrawTextSize(zond_cam[5], 0.000000, -5.000000);
	TextDrawAlignment(zond_cam[5], 2);
	TextDrawColor(zond_cam[5], -1);
	TextDrawUseBox(zond_cam[5], 1);
	TextDrawBoxColor(zond_cam[5], -1);
	TextDrawSetShadow(zond_cam[5], 0);
	TextDrawSetOutline(zond_cam[5], 0);
	TextDrawBackgroundColor(zond_cam[5], 255);
	TextDrawFont(zond_cam[5], 1);
	TextDrawSetProportional(zond_cam[5], 1);
	TextDrawSetShadow(zond_cam[5], 0);

	zond_cam[6] = TextDrawCreate(480.219818, 288.000122, "box");
	TextDrawLetterSize(zond_cam[6], 0.000000, 3.206443);
	TextDrawTextSize(zond_cam[6], 0.000000, -5.000000);
	TextDrawAlignment(zond_cam[6], 2);
	TextDrawColor(zond_cam[6], -1);
	TextDrawUseBox(zond_cam[6], 1);
	TextDrawBoxColor(zond_cam[6], -1);
	TextDrawSetShadow(zond_cam[6], 0);
	TextDrawSetOutline(zond_cam[6], 0);
	TextDrawBackgroundColor(zond_cam[6], 255);
	TextDrawFont(zond_cam[6], 1);
	TextDrawSetProportional(zond_cam[6], 1);
	TextDrawSetShadow(zond_cam[6], 0);

	zond_cam[7] = TextDrawCreate(479.751220, 183.000106, "box");
	TextDrawLetterSize(zond_cam[7], 0.000000, 3.206443);
	TextDrawTextSize(zond_cam[7], 0.000000, -5.000000);
	TextDrawAlignment(zond_cam[7], 2);
	TextDrawColor(zond_cam[7], -1);
	TextDrawUseBox(zond_cam[7], 1);
	TextDrawBoxColor(zond_cam[7], -1);
	TextDrawSetShadow(zond_cam[7], 0);
	TextDrawSetOutline(zond_cam[7], 0);
	TextDrawBackgroundColor(zond_cam[7], 255);
	TextDrawFont(zond_cam[7], 1);
	TextDrawSetProportional(zond_cam[7], 1);
	TextDrawSetShadow(zond_cam[7], 0);

	zond_cam[8] = TextDrawCreate(468.506805, 164.333358, "box");
	TextDrawLetterSize(zond_cam[8], 0.000000, 0.442169);
	TextDrawTextSize(zond_cam[8], 0.000000, 18.000000);
	TextDrawAlignment(zond_cam[8], 2);
	TextDrawColor(zond_cam[8], -1);
	TextDrawUseBox(zond_cam[8], 1);
	TextDrawBoxColor(zond_cam[8], -176);
	TextDrawSetShadow(zond_cam[8], 0);
	TextDrawSetOutline(zond_cam[8], 0);
	TextDrawBackgroundColor(zond_cam[8], 255);
	TextDrawFont(zond_cam[8], 1);
	TextDrawSetProportional(zond_cam[8], 1);
	TextDrawSetShadow(zond_cam[8], 0);

	zond_cam[9] = TextDrawCreate(481.656890, 164.133316, "box");
	TextDrawLetterSize(zond_cam[9], 0.000000, 0.489021);
	TextDrawTextSize(zond_cam[9], 469.500030, 0.000000);
	TextDrawAlignment(zond_cam[9], 1);
	TextDrawColor(zond_cam[9], -1);
	TextDrawUseBox(zond_cam[9], 1);
	TextDrawBoxColor(zond_cam[9], -1523963137);
	TextDrawSetShadow(zond_cam[9], 0);
	TextDrawSetOutline(zond_cam[9], 0);
	TextDrawBackgroundColor(zond_cam[9], 255);
	TextDrawFont(zond_cam[9], 1);
	TextDrawSetProportional(zond_cam[9], 1);
	TextDrawSetShadow(zond_cam[9], 0);

	zond_cam[10] = TextDrawCreate(456.593719, 167.250015, "box");
	TextDrawLetterSize(zond_cam[10], 0.000000, -0.166905);
	TextDrawTextSize(zond_cam[10], 0.000000, -2.000000);
	TextDrawAlignment(zond_cam[10], 2);
	TextDrawColor(zond_cam[10], -1);
	TextDrawUseBox(zond_cam[10], 1);
	TextDrawBoxColor(zond_cam[10], -176);
	TextDrawSetShadow(zond_cam[10], 0);
	TextDrawSetOutline(zond_cam[10], 0);
	TextDrawBackgroundColor(zond_cam[10], 255);
	TextDrawFont(zond_cam[10], 1);
	TextDrawSetProportional(zond_cam[10], 1);
	TextDrawSetShadow(zond_cam[10], 0);
	return 1;
}

stock ShowAclass(playerid)
{
   	ShowModelSelectionMenu(playerid, "Clasa A", MODEL_SELECTION_BUYCAR, a_class_model, sizeof(a_class_model), 0.0, 0.0, -27.0, 0.8, 1, true, a_class_price, "$");
	return 1;
}
stock ShowBclass(playerid)
{
	ShowModelSelectionMenu(playerid, "Clasa B", MODEL_SELECTION_BUYCAR, b_class_model, sizeof(b_class_model), 0.0, 0.0, -27.0, 0.8, 1, true, b_class_price, "$");
	return 1;
}
stock ShowCclass(playerid)
{
    ShowModelSelectionMenu(playerid, "Clasa C", MODEL_SELECTION_BUYCAR, c_class_model, sizeof(c_class_model), 0.0, 0.0, -27.0, 0.8, 1, true, c_class_price, "$");
	return 1;
}
stock ShowSport(playerid)
{
	ShowModelSelectionMenu(playerid, "Sport", MODEL_SELECTION_BUYCAR, sport_model, sizeof(sport_model), 0.0, 0.0, -27.0, 0.8, 1, true, sport_price, "$");
	return 1;
}
stock ShowOffRoad(playerid)
{
	ShowModelSelectionMenu(playerid, "Off-Road", MODEL_SELECTION_BUYCAR, offroad_model, sizeof(offroad_model), 0.0, 0.0, -27.0, 0.8, 1, true, offroad_price, "$");
	return 1;
}
stock ShowMotoBike(playerid)
{
	ShowModelSelectionMenu(playerid, "Motociclete & biciclete", MODEL_SELECTION_BUYCAR, motobike_model, sizeof(motobike_model), 0.0, 0.0, -27.0, 0.8, 1, true, motobike_price, "$");
	return 1;
}
stock ShowIndustrial(playerid)
{
    ShowModelSelectionMenu(playerid, "Industriale", MODEL_SELECTION_BUYCAR, industrial_model, sizeof(industrial_model), 0.0, 0.0, -27.0, 0.8, 1, true, industrial_price, "$");
	return 1;
}
stock ShowOther(playerid)
{
	ShowModelSelectionMenu(playerid, "Altele", MODEL_SELECTION_BUYCAR, other_model, sizeof(other_model), 0.0, 0.0, -27.0, 0.8, 1, true, other_price, "$");
	return 1;
}
stock ShowBoats(playerid)
{
	ShowModelSelectionMenu(playerid, "Barci", MODEL_SELECTION_BUYCAR, boat_model, sizeof(boat_model), 0.0, 0.0, -27.0, 0.8, 1, true, boat_price, "$");
	return 1;
}
stock ShowFly(playerid)
{
	ShowModelSelectionMenu(playerid, "Aeronave", MODEL_SELECTION_BUYCAR, fly_model, sizeof(fly_model), 0.0, 0.0, -27.0, 0.8, 1, true, fly_price, "$");
	return 1;
}

stock SetPlayerCurrentTimeAndWeather(playerid)
{
	SetPlayerTime(playerid, server_hour, 0);
	SetPlayerWeather(playerid, server_weather);
	return 1;
}

stock SetCurrentTime()
{
	gettime(server_hour);
	SetWorldTime(server_hour);
	return 1;
}

stock randomEx(min, max)
{
	new rand = random(max-min)+min;
	return rand;
}

stock SendStaffMessage(color, string[])
{
	foreach(Player, i)
	{
	    if(0 == IsPlayerLogged(i) || (!IsTester(i) && !CheckAdmin(i, 1)) || (PlayerInfo[i][pSettings] & togTester))
			continue;

        SCM(i, color, string);
	}
	return 1;
}

stock PlaySound(playerid, soundid)
{
	PlayerPlaySound(playerid, soundid, 0.0, 0.0, 0.0);
}

stock PlayerPlaySoundEx(playerid, sound)
{
	new
	    Float:x,
	    Float:y,
	    Float:z;

	GetPlayerPos(playerid, x, y, z);

	foreach (new i : Player)
	{
	    if(0 == IsPlayerLogged(i) || 0 == IsPlayerInRangeOfPoint(i, 20.0, x, y, z) || GetWorld(i) != GetWorld(playerid) || GetInterior(playerid) != GetInterior(i))
	        continue;

	    PlayerPlaySound(i, sound, 0.0, 0.0, 0.0);
	}
	return 1;
}

stock GetPlayerIP(playerid)
{
	new IP[24];
	GetPlayerIp(playerid, IP, sizeof(IP));
	return IP;
}

stock ShowLicenses(playerid, targetid)
{
	SCM(targetid, COLOR_GREEN, "__________CARTE DE IDENTITATE__________");
	SendClientMessageEx(targetid, COLOR_WHITE, "Nume: %s, Data nasterii: %s", GetNameEx(playerid), PlayerInfo[playerid][pBirthdate]);
	SendClientMessageEx(targetid, COLOR_WHITE, "Licenta de condus: {AFAFAF}%s{FFFFFF}. {FF8C8C}Puncte de penalizare: (%i)", (PlayerInfo[playerid][pCarLic])?("Da"):("Nu"), PlayerInfo[playerid][pDriveWarns]);
	SendClientMessageEx(targetid, COLOR_WHITE, "Licenta de arme: {AFAFAF}%s{FFFFFF}. {FF8C8C}Puncte de penalizare: (%i)", (PlayerInfo[playerid][pWepLic])?("Da"):("Nu"), PlayerInfo[playerid][pWepWarns]);
	SendClientMessageEx(targetid, COLOR_WHITE, "Licenta de aviatie: {AFAFAF}%s{FFFFFF}.", (PlayerInfo[playerid][pFlyLic])?("Da"):("Nu"));
	SendClientMessageEx(targetid, COLOR_WHITE, "Licenta de taximetrist: {AFAFAF}%s{FFFFFF}.", (PlayerInfo[playerid][pTaxiLic])?("Da"):("Nu"));
	SCM(targetid, COLOR_GREEN, "_________________________________");
	return 1;
}

stock IsPlayerInjured(playerid)
{
	return PlayerInfo[playerid][pInjured];
}

stock RespawnVehicle(vehicleid, spawned = 0)
{
	new Float: health,
		Float: x,
		Float: y,
		Float: z,
		Float: fa,
		world = veh_vw[vehicleid],
		interior = veh_int[vehicleid];

	GetVehiclePos(vehicleid, x, y, z);
	GetVehicleZAngle(vehicleid, fa);
	GetVehicleHealth(vehicleid, health);

    new
		panels,
		doorss,
		lightss,
		tires;

	GetVehicleDamageStatus(vehicleid, panels, doorss, lightss, tires);

	SetVehicleToRespawn(vehicleid);

	if(spawned == 1)
	{
	    SetVehicleVirtualWorld(vehicleid, world);
		LinkVehicleToInterior(vehicleid, interior);
	    SetVehiclePos(vehicleid, x, y, z);
	    SetVehicleZAngle(vehicleid, fa);
	}
	else
	{
		SetVehicleVirtualWorld(vehicleid, VehicleInfo[vehicleid][carVW]);
		LinkVehicleToInterior(vehicleid, VehicleInfo[vehicleid][carInt]);
	}

	if(VehicleInfo[vehicleid][carOwnerID] == 0)
	    return 1;

	UpdateVehicleDamageStatus(vehicleid, panels, doorss, lightss, tires);
	LoadComp(vehicleid);
	SetVehicleHealth(vehicleid, health);
	return 1;
}

stock ToggleVehicleLock(vehicleid, bool:toggle)
{
    new engine,lights,alarm,doors,bonnet,boot,objective;
    GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
    if(toggle == true)
	{
		SetVehicleParamsEx(vehicleid, engine, lights, alarm, VEHICLE_PARAMS_ON, bonnet, boot, objective);
		VehicleInfo[vehicleid][carLocked] = 1;
	}
	else
	{
 	   SetVehicleParamsEx(vehicleid, engine, lights, alarm, VEHICLE_PARAMS_OFF, bonnet, boot, objective);
 	   VehicleInfo[vehicleid][carLocked] = 0;
 	}
	return 1;
}

stock VehicleLight(vehicleid, bool:toggle)
{
    new engine,lights,alarm,doors,bonnet,boot,objective;
	GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
	if(toggle == true)
		SetVehicleParamsEx(vehicleid, engine, VEHICLE_PARAMS_ON, alarm, doors, bonnet, boot, objective);
	else
		SetVehicleParamsEx(vehicleid, engine, VEHICLE_PARAMS_OFF, alarm, doors, bonnet, boot, objective);
	return 1;
}

stock VehicleEngine(vehicleid, bool:toggle)
{
    new engine,lights,alarm,doors,bonnet,boot,objective;
	GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
	if(toggle == true)
	{
		SetVehicleParamsEx(vehicleid, VEHICLE_PARAMS_ON, lights, alarm, doors, bonnet, boot, objective);
 		VehicleInfo[vehicleid][carEngineOn] = 1;
 	}
	else
	{
		SetVehicleParamsEx(vehicleid, VEHICLE_PARAMS_OFF, lights, alarm, doors, bonnet, boot, objective);
  		VehicleInfo[vehicleid][carEngineOn] = 0;
 	}
	return 1;
}

stock ToggleVehicleEngine(vehicleid, playerid)
{
    new engine,lights,alarm,doors,bonnet,boot,objective;
	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);

	if(VehicleInfo[vehicleid][carEngineOn])
	{
		SetVehicleParamsEx(vehicleid, VEHICLE_PARAMS_OFF, lights, alarm, doors, bonnet, boot, objective);

		new mes[128];
		format(mes, sizeof(mes), "a oprit motorul vehiculului %s.", VehicleNames[GetVehicleModel(vehicleid)-400]);
		cmd::ame(playerid, mes);

		format(mes, sizeof(mes), "~w~%s MOTOR ~r~OPRIT",VehicleNames[GetVehicleModel(vehicleid)-400]);
		GameTextForPlayer(playerid, mes, 2500, 4);

		VehicleInfo[vehicleid][carEngineOn] = false;
		return 1;
	}

	if(VehicleInfo[vehicleid][carOwnerID] && VehicleInfo[vehicleid][carEngine] <= 0.0)
	    return GameTextForPlayer(playerid, "~r~Motorul este uzat. Vehiculul nu poate porni.", 3000, 4);

    if(VehicleInfo[vehicleid][carOwnerID] && VehicleInfo[vehicleid][carBattery] <= 0.0)
	    return GameTextForPlayer(playerid, "~r~Bateria este uzata. Vehiculul nu poate porni.", 3000, 4);

	new Float: health;
	GetVehicleHealth(vehicleid, health);

	if(health <= 330.0)
	{
	    GameTextForPlayer(playerid, "~r~Motorul este deteliorat. Vehiculul nu poate porni.", 3000, 4);
	    return 1;
	}
	else if(health < 390.0 && health > 330.0)
	{
	    SendErrorMessage(playerid, "SERVER: Motorul nu a putut fi pornit.");
	    SendClientMessage(playerid, COLOR_YELLOWG, "HINT: Tine apasat {ffffff}W{FFFF00} pentru a incerca sa repornesti motorul.");
	    SendClientMessage(playerid, COLOR_YELLOWG, "HINT: Ai la dispozitie {ffffff}10 secunde{FFFF00}.");
        GameTextForPlayer(playerid, "~r~Procesul a esuat. Vehiculul nu a pornit.", 30000, 4);
		SetPVarInt(playerid, #try_engine, 2);
		return 1;
	}
	else if(health < 600.0 && health > 390.0 && random(2) == 0)
	    return GameTextForPlayer(playerid, "~r~Motorul este deteliorat. Vehiculul nu poate porni.", 3000, 4);

	SetVehicleParamsEx(vehicleid, VEHICLE_PARAMS_ON, lights, alarm, doors, bonnet, boot, objective);

	new mes[128];
	format(mes, sizeof(mes), "a pornit motorul vehiculului %s.", VehicleNames[GetVehicleModel(vehicleid)-400]);
	cmd::ame(playerid, mes);

	format(mes, sizeof(mes), "~w~%s MOTOR ~g~PORNIT",VehicleNames[GetVehicleModel(vehicleid)-400]);
	GameTextForPlayer(playerid, mes, 2500, 4);

	VehicleInfo[vehicleid][carEngineOn] = true;

	return 1;
}

stock Object_Nearest(playerid)
{
	for(new i; i != MAX_OBJECTS; i++)
	{
	    if(GetWorld(playerid) == ObjectsInfo[i][oVW] && ObjectsInfo[i][oInt] == GetInterior(playerid) && IsPlayerInRangeOfPoint(playerid, 5.0, ObjectsInfo[i][oPosX], ObjectsInfo[i][oPosY], ObjectsInfo[i][oPosZ]) && ObjectsInfo[i][oObjectOn])
	        return i;
	}
	return -1;
}

stock Boombox_Nearest(playerid)
{
	return (BoomboxInfo[playerid][bUsed] == 0 || !IsPlayerInRangeOfPoint(playerid, 2.0, BoomboxInfo[playerid][bPosX], BoomboxInfo[playerid][bPosY], BoomboxInfo[playerid][bPosZ]) || GetWorld(playerid) != BoomboxInfo[playerid][bVW] || GetInterior(playerid) != BoomboxInfo[playerid][bInt])?(0):(1);
}

stock Gate_Nearest(playerid)
{
	for(new i; i != MAX_GATES; i++)
	{
	    if(GetWorld(playerid) == Gates[i][gateVW] && Gates[i][gateInt] == GetInterior(playerid) && IsPlayerInRangeOfPoint(playerid, Gates[i][gateRadius], Gates[i][gatePosX], Gates[i][gatePosY], Gates[i][gatePosZ]) && Gates[i][gateObjectOn])
	        return i;
	}
	return -1;
}

stock IsPlayerApartmentOutside(playerid, i, Float: radius = 5.0)
{
    return (IsPlayerInRangeOfPoint(playerid, radius, ApartInfo[i][aPosX], ApartInfo[i][aPosY], ApartInfo[i][aPosZ]) && GetWorld(playerid) == ApartInfo[i][aPosVW] && GetInterior(playerid) == ApartInfo[i][aPosInt]) ? (1) : (0);
}

stock IsPlayerApartmentInside(playerid, i, Float: radius = 60.0)
{
    return (IsPlayerInRangeOfPoint(playerid, radius, ApartInfo[i][aExitX], ApartInfo[i][aExitY], ApartInfo[i][aExitZ]) && GetWorld(playerid) == ApartInfo[i][aExitVW] && GetInterior(playerid) == ApartInfo[i][aExitInt]) ? (1) : (0);
}

stock GetNearApartmentOutside(playerid)
{
    for(new i; i != MAX_APART; i++)
	{
	    if(ApartInfo[i][aApartOn] == 0) continue;

	    if (IsPlayerInRangeOfPoint(playerid, 3.0, ApartInfo[i][aPosX], ApartInfo[i][aPosY], ApartInfo[i][aPosZ]) && GetWorld(playerid) == ApartInfo[i][aPosVW] && GetInterior(playerid) == ApartInfo[i][aPosInt])
			return i;
	}
	return -1;
}

stock GetNearApartmentInside(playerid, Float: radius = 60.0)
{
	if(pTemp[playerid][pApartEntered] != -1 && IsPlayerApartmentInside(playerid, pTemp[playerid][pApartEntered], radius))
	    return pTemp[playerid][pApartEntered];

    for(new i; i != MAX_APART; i++)
	{
	    if(ApartInfo[i][aApartOn] == 0) continue;

	    if (IsPlayerInRangeOfPoint(playerid, radius, ApartInfo[i][aExitX], ApartInfo[i][aExitY], ApartInfo[i][aExitZ]) && GetWorld(playerid) == ApartInfo[i][aExitVW] && GetInterior(playerid) == ApartInfo[i][aExitInt])
		{
		    pTemp[playerid][pApartEntered] = i;
			return i;
		}
	}
	return -1;
}

stock GetNextApartID()
{
	for(new i; i != MAX_APART; i++)
	{
	    if(ApartInfo[i][aApartOn] == 0)
			return i;
	}
	return -1;
}

stock GetNextHouseID()
{
	for(new i; i < MAX_HOUSES; i++)
	{
	    if(HouseInfo[i][hID] == 0)
			return i;
	}
	return -1;
}

stock GarageNearestOutside(playerid)
{
	if ( 0 != GetInterior(playerid))
	    return -1;

	new vehicle = GetPlayerVehicleID(playerid);
    for(new i = 0; i < MAX_GARAGES; i++)
	{
	    if(0 == GarageInfo[i][garageID])
     		continue;

 		if(vehicle == 0 && GetWorld(playerid) == GarageInfo[i][garageEnterVW] && GetInterior(playerid) == GarageInfo[i][garageEnterInt] && IsPlayerInRangeOfPoint(playerid, 2.0, GarageInfo[i][garagePlayer_Enter][0], GarageInfo[i][garagePlayer_Enter][1], GarageInfo[i][garagePlayer_Enter][2]))
			return i;

        else if(vehicle != 0 && GetWorld(playerid) == GarageInfo[i][garageEnterVW] && GetInterior(playerid) == GarageInfo[i][garageEnterInt] && IsPlayerInRangeOfPoint(playerid, 3.0, GarageInfo[i][garageVeh_Enter][0], GarageInfo[i][garageVeh_Enter][1], GarageInfo[i][garageVeh_Enter][2]))
			return i;
	}
	return -1;
}

stock GarageNearestInside(playerid)
{
	if(0 == GetInterior(playerid))
	    return -1;

    new vehicle = GetPlayerVehicleID(playerid);
    for(new i = 0; i < MAX_GARAGES; i++)
	{
	    if(0 == GarageInfo[i][garageID])
	        continue;

     	if(vehicle == 0 && IsPlayerInRangeOfPoint(playerid, 2.0, GarageInfo[i][garagePlayer_Exit][0], GarageInfo[i][garagePlayer_Exit][1], GarageInfo[i][garagePlayer_Exit][2]) && GetInterior(playerid) == GarageInfo[i][garageExitInt] && GetWorld(playerid) == GarageInfo[i][garageExitVW])
			return i;

        else if(vehicle != 0 && IsPlayerInRangeOfPoint(playerid, 10.0, GarageInfo[i][garageVeh_Exit][0], GarageInfo[i][garageVeh_Exit][1], GarageInfo[i][garageVeh_Exit][2]) && GetInterior(playerid) == GarageInfo[i][garageExitInt] && GetWorld(playerid) == GarageInfo[i][garageExitVW])
			return i;
	}
	return -1;
}

stock IsPlayerEntranceOutside(playerid, i, Float: radius = 1.0)
{
    return (IsPlayerInRangeOfPoint(playerid, radius, EntranceInfo[i][eEnterX], EntranceInfo[i][eEnterY], EntranceInfo[i][eEnterZ]) && GetWorld(playerid) == EntranceInfo[i][eEnterVW] && GetInterior(playerid) == EntranceInfo[i][eEnterInt]) ? (1) : (0);
}

stock IsPlayerEntranceInside(playerid, i, Float: radius = 1.0)
{
    return (IsPlayerInRangeOfPoint(playerid, radius, EntranceInfo[i][eExitX], EntranceInfo[i][eExitY], EntranceInfo[i][eExitZ]) && GetWorld(playerid) == EntranceInfo[i][eExitVW] && GetInterior(playerid) == EntranceInfo[i][eExitInt]) ? (1) : (0);
}

stock GetNearEntranceOutside(playerid, Float: radius = 1.0)
{
    for(new i; i != MAX_ENTRANCE; i++)
	{
	    if(EntranceInfo[i][entranceOn] == 0) continue;

	    if(IsPlayerEntranceOutside(playerid, i, radius))
	        return i;
	}
	return -1;
}

stock GetNearEntranceInside(playerid, Float: radius = 1.0)
{
    for(new i; i != MAX_ENTRANCE; i++)
	{
	    if(EntranceInfo[i][entranceOn] == 0) continue;

	    if(IsPlayerEntranceInside(playerid, i, radius))
	        return i;
	}
	return -1;
}

stock GetNextBizID()
{
	for(new i; i != MAX_BIZ; i++)
	{
	    if(BizInfo[i][bizID] == 0) return i;
	}
	return -1;
}

stock GetPlayerBizes(playerid)
{
	new total;
    for(new i; i != MAX_BIZ; i++)
	{
	    if(BizInfo[i][bizID] == 0 || BizInfo[i][bizOwnerID] != PlayerInfo[playerid][pID]) continue;
		total++;
	}
	return total;
}

stock GetMaxPlayerCars(playerid)
{
	switch(PlayerInfo[playerid][pPremium])
	{
	    case 0, 1: return 3;
	    case 2: return 5;
	    case 3: return 7;
	}
	return 100;
}

stock GetMaxPlayerContacts(playerid)
{
	switch(PlayerInfo[playerid][pPremium])
	{
	    case 0: return 20;
	    case 1: return 25;
	    case 2: return 35;
	    case 3: return 40;
	}
	return 100;
}

stock GetMaxPlayerBiz(playerid)
{
	switch(PlayerInfo[playerid][pPremium])
	{
	    case 0: return 1;
	    case 1: return 1;
	    case 2: return 2;
	    case 3: return 3;
	}
	return 1;
}

stock IsPlayerBizOutside(playerid, i, Float: radius = 5.0)
{
    return (BizInfo[i][bizID] != 0 && IsPlayerInRangeOfPoint(playerid, radius, BizInfo[i][bizPosX], BizInfo[i][bizPosY], BizInfo[i][bizPosZ]) && GetWorld(playerid) == BizInfo[i][bizPosVW] && GetInterior(playerid) == BizInfo[i][bizPosInt]) ? (1) : (0);
}

stock IsPlayerBizInside(playerid, i, Float: radius = 15.0)
{
    return (BizInfo[i][bizID] != 0 && IsPlayerInRangeOfPoint(playerid, radius, BizInfo[i][bizExitX], BizInfo[i][bizExitY], BizInfo[i][bizExitZ]) && GetWorld(playerid) == BizInfo[i][bizExitVW] && GetInterior(playerid) == BizInfo[i][bizExitInt]) ? (1) : (0);
}

stock GetNearBizOutside(playerid, Float: radius = 3.0)
{
    for(new i; i != MAX_BIZ; i++)
	{
	    if(BizInfo[i][bizID] == 0) continue;

	    if (IsPlayerInRangeOfPoint(playerid, radius, BizInfo[i][bizPosX], BizInfo[i][bizPosY], BizInfo[i][bizPosZ]) && GetWorld(playerid) == BizInfo[i][bizPosVW] && GetInterior(playerid) == BizInfo[i][bizPosInt])
			return i;
	}
	return -1;
}

stock GetNearBizInside(playerid, Float: radius = 25.0)
{
	if(pTemp[playerid][pBizEntered] != -1 && IsPlayerBizInside(playerid, pTemp[playerid][pBizEntered], radius))
	    return pTemp[playerid][pBizEntered];

    for(new i; i != MAX_BIZ; i++)
	{
	    if(BizInfo[i][bizID] == 0) continue;

	    if (IsPlayerInRangeOfPoint(playerid, radius, BizInfo[i][bizExitX], BizInfo[i][bizExitY], BizInfo[i][bizExitZ]) && GetWorld(playerid) == BizInfo[i][bizExitVW] && GetInterior(playerid) == BizInfo[i][bizExitInt])
		{
		    pTemp[playerid][pBizEntered] = i;
			return i;
		}
	}
	return -1;
}

stock GetHouseIDByMysql(mysqlid)
{
    for(new i; i != MAX_HOUSES; i++)
	{
	    if(HouseInfo[i][hID] == mysqlid) return i;
	}
	return -1;
}

stock GetPlayerHouses(playerid)
{
	new total;
    for(new i; i != MAX_HOUSES; i++)
	{
	    if(HouseInfo[i][hID] == 0 || HouseInfo[i][hOwnerID] != PlayerInfo[playerid][pID]) continue;
		total++;
	}
	return total;
}

stock GetMaxPlayerHouse(playerid)
{
	switch(PlayerInfo[playerid][pPremium])
	{
	    case 0: return 1;
	    case 1: return 2;
	    case 2: return 3;
	    case 3: return 5;
	}
	return 1;
}

stock IsPlayerHouseOutside(playerid, i, Float: radius = 5.0)
{
    return (IsPlayerInRangeOfPoint(playerid, radius, HouseInfo[i][hPosX], HouseInfo[i][hPosY], HouseInfo[i][hPosZ]) && GetWorld(playerid) == HouseInfo[i][hPosVW] && GetInterior(playerid) == HouseInfo[i][hPosInt]) ? (1) : (0);
}

stock IsPlayerHouseInside(playerid, i, Float: radius = 30.0)
{
    return (IsPlayerInRangeOfPoint(playerid, radius, HouseInfo[i][hExitX], HouseInfo[i][hExitY], HouseInfo[i][hExitZ]) && GetWorld(playerid) == HouseInfo[i][hExitVW] && GetInterior(playerid) == HouseInfo[i][hExitInt]) ? (1) : (0);
}

stock GetNearHouse(playerid, Float: radius_inside = 30.0, Float: radius_outside = 3.0)
{
    if(pTemp[playerid][pHouseEntered] != -1 && IsPlayerHouseInside(playerid, pTemp[playerid][pHouseEntered], radius_inside))
	    return pTemp[playerid][pHouseEntered];

    for(new i; i != MAX_HOUSES; i++)
	{
	    if(HouseInfo[i][hID] == 0)
			continue;

	    if(IsPlayerHouseInside(playerid, i, radius_inside))
	        return i;

		else if(IsPlayerHouseOutside(playerid, i, radius_outside))
		    return i;
	}
	return -1;
}

stock GetNearHouseOutside(playerid, Float: radius = 1.5)
{
    for(new i; i != MAX_HOUSES; i++)
	{
	    if(HouseInfo[i][hID] == 0) continue;

	    if (IsPlayerInRangeOfPoint(playerid, radius, HouseInfo[i][hPosX], HouseInfo[i][hPosY], HouseInfo[i][hPosZ]) && GetWorld(playerid) == HouseInfo[i][hPosVW] && GetInterior(playerid) == HouseInfo[i][hPosInt])
			return i;
	}
	return -1;
}

stock GetNearHouseInside(playerid, Float:radius = 30.0)
{
	if(pTemp[playerid][pHouseEntered] != -1 && IsPlayerHouseInside(playerid, pTemp[playerid][pHouseEntered], radius))
	    return pTemp[playerid][pHouseEntered];

    for(new i; i != MAX_HOUSES; i++)
	{
	    if(HouseInfo[i][hID] == 0) continue;

	    if (IsPlayerInRangeOfPoint(playerid, radius, HouseInfo[i][hExitX], HouseInfo[i][hExitY], HouseInfo[i][hExitZ]) && GetWorld(playerid) == HouseInfo[i][hExitVW] && GetInterior(playerid) == HouseInfo[i][hExitInt])
		{
		    pTemp[playerid][pHouseEntered] = i;
  			return i;
		}
	}
	return -1;
}

stock GetNearVehicle(playerid, Float: radius, vehicleid = 0)
{
	new Float: x,
		Float: y,
		Float: z;

	if(vehicleid != 0)
	{
		if (GetVehiclePos(vehicleid, x, y, z) && IsPlayerInRangeOfPoint(playerid, radius, x, y, z) && GetWorld(playerid) == GetVehicleVirtualWorld(vehicleid))
			return 1;

		return 0;
	}

    foreach(new v:Vehicle)
	{
	    if (GetVehiclePos(v, x, y, z) && IsPlayerInRangeOfPoint(playerid, radius, x, y, z) && GetWorld(playerid) == GetVehicleVirtualWorld(v))
			return v;
	}
	return 0;
}

stock TruckCargo_Nearest(playerid, Float: radius = 10.0)
{
	for(new i; i != MAX_TRUCK_CARGO; i++)
	{
	    if(TruckCargo[i][tOn] == 0)
	        continue;

        if(IsPlayerInRangeOfPoint(playerid, radius, TruckCargo[i][tPosX], TruckCargo[i][tPosY], TruckCargo[i][tPosZ]) && 0 == GetInterior(playerid) && 0 == GetWorld(playerid))
            return i;
	}
	return -1;
}

stock IsPlayerAtPayphone(playerid, i)
	return (IsPlayerInRangeOfPoint(playerid, 2.0, PayphoneInfo[i][phX], PayphoneInfo[i][phY], PayphoneInfo[i][phZ]) && PayphoneInfo[i][phInt] == GetInterior(playerid) && PayphoneInfo[i][phVW] == GetWorld(playerid))?(1):(0);

stock Payphone_Nearest(playerid)
{
	for(new i; i != MAX_PAYPHONES; i++)
	{
	    if(PayphoneInfo[i][phID] == 0)
	        continue;

        if(IsPlayerInRangeOfPoint(playerid, 2.0, PayphoneInfo[i][phX], PayphoneInfo[i][phY], PayphoneInfo[i][phZ]) && PayphoneInfo[i][phInt] == GetInterior(playerid) && PayphoneInfo[i][phVW] == GetWorld(playerid))
            return i;
	}
	return -1;
}

stock ATM_Nearest(playerid)
{
	for(new i; i != MAX_ATMS; i++)
	{
	    if(ATMInfo[i][atmID] == 0)
	        continue;

        if(IsPlayerInRangeOfPoint(playerid, 2.0, ATMInfo[i][atmPosX], ATMInfo[i][atmPosY], ATMInfo[i][atmPosZ]) && ATMInfo[i][atmInt] == GetInterior(playerid) && ATMInfo[i][atmVW] == GetWorld(playerid))
            return i;
	}
	return -1;
}

stock GetVehicleSpeed(vehicleid)
{
	new Float: vel_x,
		Float: vel_y,
		Float: vel_z;

	GetVehicleVelocity(vehicleid, vel_x, vel_y, vel_z);
	return floatround(VectorSize(vel_x, vel_y, vel_z) * 179.28625);
}

stock GetFightStyleName(playerid)
{
	new style[9];
	switch(PlayerInfo[playerid][pFightStyle])
	{
		case FIGHT_STYLE_BOXING: format(style, sizeof(style), "Boxing");
		case FIGHT_STYLE_KUNGFU: format(style, sizeof(style), "Kungfu");
		case FIGHT_STYLE_GRABKICK: format(style, sizeof(style), "Grabkick");
		case FIGHT_STYLE_KNEEHEAD: format(style, sizeof(style), "Kneehead");
		case FIGHT_STYLE_NORMAL: format(style, sizeof(style), "Normal");
	}
	return style;
}

stock UpdateHouseText(houseid)
{
    if(IsValidDynamic3DTextLabel(HouseInfo[houseid][hLabel]))
	{
		DestroyDynamic3DTextLabel(HouseInfo[houseid][hLabel]);
        HouseInfo[houseid][hLabel] = Text3D:INVALID_3DTEXT_ID;
	}

	if(HouseInfo[houseid][hOwnerID] != 0)
	    return 1;

	new door[15],
		mes[128];

	switch(HouseInfo[houseid][hDoor])
    {
       case 0: door = "Normala";
   	   case 1: door = "Din lemn";
        case 2: door = "Din fier";
 	}

	format(mes, sizeof(mes), "Casa[%i] De vanzare:\nPret: $%i\nNivel: %i\nIncuietoare: %i\nAlarma: %i\nUsa: %s\n\n\n\n\n\n\n\n\n\n", houseid,HouseInfo[houseid][hPrice],HouseInfo[houseid][hLevelbuy],HouseInfo[houseid][hLock],HouseInfo[houseid][hAlarm],door);

	HouseInfo[houseid][hLabel] =
		CreateDynamic3DTextLabel(mes, COLOR_GOLD, HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ], 3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, HouseInfo[houseid][hPosVW], HouseInfo[houseid][hPosInt], -1, 15.0);
	return 1;
}
stock UpdateHouseDoor(houseid)
{
    if(IsValidDynamic3DTextLabel(HouseInfo[houseid][hLabelDDoor]))
	{
		DestroyDynamic3DTextLabel(HouseInfo[houseid][hLabelDDoor]);
        HouseInfo[houseid][hLabelDDoor] = Text3D:INVALID_3DTEXT_ID;
	}
	if(0 == HouseInfo[houseid][hDDoor])
	    return 1;

	new door_str[][] =
		{"USA SPARTA", "USA EXPLODATA"};

	HouseInfo[houseid][hLabelDDoor] =
		CreateDynamic3DTextLabel(door_str[HouseInfo[houseid][hDDoor]-1], COLOR_WHITE, HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ], 3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, HouseInfo[houseid][hPosVW], -1, -1, 100.0);
	return 1;
}

stock UpdateBusinessDoor(bizid)
{
	if(IsValidDynamic3DTextLabel(BizInfo[bizid][bizLabelDDoor]))
	{
	    DestroyDynamic3DTextLabel(BizInfo[bizid][bizLabelDDoor]);
        BizInfo[bizid][bizLabelDDoor] = Text3D:INVALID_3DTEXT_ID;
	}
	if(0 == BizInfo[bizid][bizDDoor])
	    return 1;

    new door_str[][] =
		{"USA SPARTA", "USA EXPLODATA"};

	BizInfo[bizid][bizLabelDDoor] =
		CreateDynamic3DTextLabel(door_str[BizInfo[bizid][bizDDoor]-1], COLOR_WHITE, BizInfo[bizid][bizPosX], BizInfo[bizid][bizPosY], BizInfo[bizid][bizPosZ], 3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, BizInfo[bizid][bizPosVW], BizInfo[bizid][bizPosInt], -1, 100.0);
	return 1;
}

stock GetIDByName(playername[])
{
    foreach(Player, i)
    {
        if(0 == IsPlayerLogged(i))
            continue;

        if(strcmp(GetName(i), playername, true, strlen(playername) == 0)
            return i;
    }
	return INVALID_PLAYER_ID;
}

stock GetIDByID(databaseid)
{
	foreach(Player, i)
	{
		if(!IsPlayerLogged(i)) continue;

		if (PlayerInfo[i][pID] == databaseid)
			return i;
	}
	return INVALID_PLAYER_ID;
}

ResetDamages(playerid)
{
	for(new i = 0; i != MAX_DAMAGES; i++)
	{
	    if(DamageInfo[playerid][i][damageOn] == 0)
	        continue;

        DamageInfo[playerid][i][damageOn] = 0;
        DamageInfo[playerid][i][damageWeapon] = 0;
        DamageInfo[playerid][i][damageAmount] = 0;
        DamageInfo[playerid][i][damageArmour] = 0;
	}

	pTemp[playerid][pDamagesCount] = 0;
	pTemp[playerid][pInjuredTime] = 0;
    pTemp[playerid][pInjuredLegTime] = 0;
    pTemp[playerid][pInjuredInvulnerable] = 0;

	PlayerInfo[playerid][pInjured] = 0;
	return 1;
}

GetBodyPartName(bodypart)
{
	new part[15];
	switch(bodypart)
	{
		case BODY_PART_TORSO: part = "piept";
		case BODY_PART_GROIN: part = "stomac";
		case BODY_PART_LEFT_ARM: part = "mana stanga";
		case BODY_PART_RIGHT_ARM: part = "mana dreapta";
		case BODY_PART_LEFT_LEG: part = "picior stang";
		case BODY_PART_RIGHT_LEG: part = "picior drept";
		case BODY_PART_HEAD: part = "cap";
		default: part = "nimic";
	}
	return part;
}

DisplayDamages(toplayer, playerid)
{
	new title[45],
	    count,
	    str[1024],
	    weaponname[32];

	format(title, sizeof(title), "Rani: %s.", GetNameEx(playerid));
	for(new i = 0; i != MAX_DAMAGES; i++)
	{
	    if(DamageInfo[playerid][i][damageOn] != 1)
			continue;

        GetWeaponName(DamageInfo[playerid][i][damageWeapon], weaponname, 32);
		if(DamageInfo[playerid][i][damageWeapon] == 51)
 			format(str, sizeof(str), "%s\nRani de %.0f HP", str, DamageInfo[playerid][i][damageAmount]);
		else if(DamageInfo[playerid][i][damageArmour] == 0)
			format(str, sizeof(str), "%s\nRani de %.0f HP provocate de %s in %s.", str, DamageInfo[playerid][i][damageAmount], weaponname, GetBodyPartName(DamageInfo[playerid][i][damageBodypart]));
		else
		   	format(str, sizeof(str), "%s\nLovituri in kevlar de %.0f HP provocate de %s.", str, DamageInfo[playerid][i][damageAmount], weaponname);

		count++;
	}

	if(!count)
	    return Dialog_Show(toplayer, None, DIALOG_STYLE_LIST, title, "Nu exista rani.", ">>>", "");

    Dialog_Show(toplayer, None, DIALOG_STYLE_LIST, title, str, ">>>", "");
	return 1;
}

stock GetNextToySlot(playerid)
{
	for(new i = 0; i < MAX_PLAYER_ATTACH; i++)
	{
		if(AttachInfo[playerid][i][aID] == 0)
			return i;
	}
	return -1;
}

stock ShowBoomBoxStations(playerid)
{
	Dialog_Show(playerid, RadioStations, DIALOG_STYLE_LIST, "Posturi de radio (genuri)", "Pop/Dance/Dubstep\nJazz/Country/Rock\nHip-hop/RnB/Reggae\nPersonalizat\nOpreste radioul", "Alege", "Inchide");
	return 1;
}

stock StopCarBoomBox(vehicle)
{
	if(VehicleInfo[vehicle][carRadioOn] != 1)
		return 1;

    VehicleInfo[vehicle][carRadioOn] = 0;

	foreach(Player, i)
	{
		if(0 == IsPlayerLogged(i) || GetPlayerVehicleID(i) != vehicle)
			continue;

		StopAudioStreamForPlayer(i);
	}
	return 1;
}

stock StopHouseBoomBox(houseid)
{
	if(HouseInfo[houseid][hRadioOn] != 1)
	    return 1;

	HouseInfo[houseid][hRadioOn] = 0;
	foreach(Player, i)
	{
		if(0 == IsPlayerLogged(i) || pTemp[i][pBoombox_house] != houseid)
		    continue;

	 	StopAudioStreamForPlayer(i);
		pTemp[i][pBoombox_house] = -1;
	}
	return 1;
}

stock StopBusinessBoomBox(biz)
{
	if(BizInfo[biz][bizRadioOn] != 1)
	    return 1;

	BizInfo[biz][bizRadioOn] = 0;
	foreach(Player, i)
	{
		if(0 == IsPlayerLogged(i) || pTemp[i][pBoombox_biz] != biz)
		    continue;

		StopAudioStreamForPlayer(i);
		pTemp[i][pBoombox_biz] = -1;
	}
	return 1;
}


stock GetNextVehicleTrunkSlot(vehicleid)
{
	for(new i; i != MAX_VEHICLE_INVENTORY; i++)
	{
	    if(VehicleInfo[vehicleid][carInv][i] == 0)
			return i;
	}
	return -1;
}

stock GetMaxPlayerFurniture(playerid)
{
	switch(PlayerInfo[playerid][pPremium])
	{
	    case 0: return 150;
	    case 1: return 200;
	    case 2: return 300;
	    case 3: return 400;
	}
	return 100;
}

#define GetHouseFurnitures(%0) \
	HouseInfo[%0][hFurniture]

#define GetHouseOutsideFurnitures(%0) \
    HouseInfo[%0][hOutsideFurniture]

stock GetWeaponNameEx(weaponid)
{
	new wname[64];
	GetWeaponName(weaponid, wname, sizeof(wname));
	return wname;
}

stock GetWeaponNameeEx(weaponid)
{
	new weapon[22];
	switch(weaponid)
	{
		case 0: weapon = "Pumn";
		case 18: weapon = "Molotov Cocktail";
		case 44: weapon = "Night Vision Goggles";
		case 45: weapon = "Thermal Goggles";
		case 30: weapon = "AK-47";
		default: GetWeaponName(weaponid, weapon, sizeof(weapon));
	}
	return weapon;
}

stock DropFood_Nearest(playerid)
{
	for(new i; i != MAX_FOOD_DROPS; i++)
	{
	    if(FoodDrop[i][foodDropped] == 0)
	        continue;

		if(IsPlayerInRangeOfPoint(playerid, 2.0, FoodDrop[i][foodPosX], FoodDrop[i][foodPosY], FoodDrop[i][foodPosZ]) && FoodDrop[i][foodInt] == GetInterior(playerid) && FoodDrop[i][foodVW] == GetWorld(playerid))
			return i;
	}
	return -1;
}

stock ItemDrop_Drop(playerid, item, amount)
{
	for(new i; i != MAX_ITEM_DROPS; i++)
	{
	    if(ItemDrop[i][dropID] != 0)
	        continue;

  		ItemDrop[i][dropID] = item;
		ItemDrop[i][dropAmount] = amount;

        GetXYInFrontOfPlayer(playerid, ItemDrop[i][dropPosX], ItemDrop[i][dropPosY], ItemDrop[i][dropPosZ], 1.5);
		ItemDrop[i][dropPosZ] -= 1.0;
		ItemDrop[i][dropInt] = GetInterior(playerid);
		ItemDrop[i][dropVW] = GetWorld(playerid);

		new mes[128],
		    drop_name[32] = "bani",
		    drop_model = 1212;

		if(item != 9999)
		{
		    format(drop_name, sizeof(drop_name), inventory_items[item][itemName]);
            drop_model = inventory_items[item][itemModel];
		}

		format(mes, sizeof(mes), "a lasat arma %s din mana.", drop_name);
		cmd::ame(playerid, mes);

		ItemDrop[i][dropObject] =
			CreateDynamicObject(drop_model, ItemDrop[i][dropPosX], ItemDrop[i][dropPosY], ItemDrop[i][dropPosZ], 93.7, 120.0, 120.0, GetWorld(playerid), GetInterior(playerid));

		EditDynamicObject(playerid, ItemDrop[i][dropObject]);
		SetPVarInt(playerid, #edit_item, i+1);

    	new query[128];
		if(ValidWeaponForInventory(drop_model))
		{
		    format(query, sizeof(query), "%s [MYSQL: %i | IP: %s] a aruncat arma %s (cantitate: %i)",
			GetName(playerid), PlayerInfo[playerid][pID], GetPlayerIP(playerid), drop_name, amount);
		 	insert_log(query, WEAPON_LOG, 3, playerid);
		}
		else
		{
		    format(query, sizeof(query), "%s [MYSQL: %i | IP: %s] a aruncat arma %s (cantitate: %i)",
			GetName(playerid), PlayerInfo[playerid][pID], GetPlayerIP(playerid), drop_name, amount);
		 	insert_log(query, ITEM_LOG, 1, playerid);
		}
  		return i;
	}
	return -1;
}

stock ItemDrop_Pickup(playerid, dropid)
{
	if(ItemDrop[dropid][dropID] == 0)
	    return 1;

	new item = ItemDrop[dropid][dropID];
	if(ValidWeaponForInventory(item) != 0)
	{
	    new slot = GetWeapSlot(item);

		if(slot == -1)
	    	return SendErrorMessage(playerid, "Aceasta arma nu poate fi luata.");

	    if(!PlayerInfo[playerid][pOnDuty])
		{
		    if(PlayerInfo[playerid][pWeap][slot] != 0)
		        return SendErrorMessage(playerid, "Acel slot al inventarului este deja ocupat.");

			if(ac_GivePlayerWeapon(playerid, item, ItemDrop[dropid][dropAmount]) == 0)
			    return SendErrorMessage(playerid, "Nu poti ridica aceasta arma.");

			SendClientMessageEx(playerid,COLOR_GREEN,"Ai luat arma %s, gloante: %i.", inventory_items[item][itemName], ItemDrop[dropid][dropAmount]);
		}
		else
			SendClientMessageEx(playerid,COLOR_GREEN, "Ai luat arma %s.", inventory_items[item][itemName]);
	}
	else
	{
	    if(item == 9999)
	        GiveCash(playerid, ItemDrop[dropid][dropAmount]);
	    else
	    {
	    	if(GivePlayerItem(playerid, item, ItemDrop[dropid][dropAmount]) == -1)
				return SendErrorMessage(playerid, "Nu ai loc in inventar.");
		}
	}

    new mes[128],
  		drop_name[32] = "bani";

	if(item != 9999)
 		format(drop_name, sizeof(drop_name), inventory_items[item][itemName]);

	format(mes, sizeof(mes), "* %s a ridicat %s.", GetNameWithMask(playerid), drop_name);
	SetPlayerChatBubble(playerid, mes, COLOR_PURPLE, Range_Normal, 10000);

    new query[128];
	if(ValidWeaponForInventory(item))
	{
	    format(query, sizeof(query), "%s [MYSQL: %i | IP: %s] a ridicat %s (cantitate: %i)",
		GetName(playerid), PlayerInfo[playerid][pID], GetPlayerIP(playerid), drop_name, ItemDrop[dropid][dropAmount]);
	 	insert_log(query, WEAPON_LOG, 4, playerid);
	}
	else
	{
	    format(query, sizeof(query), "%s [MYSQL: %i | IP: %s] a ridicat %s (cantitate: %i)",
		GetName(playerid), PlayerInfo[playerid][pID], GetPlayerIP(playerid), drop_name, ItemDrop[dropid][dropAmount]);
	 	insert_log(query, ITEM_LOG, 2, playerid);
	}
	ItemDrop_Delete(dropid);
	return 1;
}

stock ItemDrop_Delete(dropid)
{
	if(ItemDrop[dropid][dropID] == 0)
	    return 1;

	if(IsValidDynamicObject(ItemDrop[dropid][dropObject]))
 	   DestroyDynamicObject(ItemDrop[dropid][dropObject]);

	ItemDrop[dropid][dropID] = 0;
	ItemDrop[dropid][dropAmount] = 0;
	ItemDrop[dropid][dropPosX] = 0.0;
	ItemDrop[dropid][dropPosY] = 0.0;
	ItemDrop[dropid][dropPosZ] = 0.0;
	return 1;
}

stock ItemDrop_Nearest(playerid)
{
	for(new i; i != MAX_ITEM_DROPS; i++)
	{
	    if(ItemDrop[i][dropID] == 0)
	        continue;

		if(IsPlayerInRangeOfPoint(playerid, 1.5, ItemDrop[i][dropPosX], ItemDrop[i][dropPosY], ItemDrop[i][dropPosZ]) && GetWorld(playerid) == ItemDrop[i][dropVW] && GetInterior(playerid) == ItemDrop[i][dropInt])
			return i;
	}
	return -1;
}

stock ShowRadioTextDraw(playerid)
{
	if(PlayerInfo[playerid][pHud] == 1)
	{
	    PlayerTextDrawShow(playerid, RadioDraw0[playerid]);
	    PlayerTextDrawShow(playerid, ChannelDraw0[playerid]);
		PlayerTextDrawShow(playerid, SlotDraw0[playerid]);

		if(IsPlayerInAnyVehicle(playerid))
		{
			PlayerTextDrawShow(playerid, SpeedText0[playerid]);
			PlayerTextDrawShow(playerid, FuelText0[playerid]);
		}
	}
	else if(PlayerInfo[playerid][pHud] == 2)
	{
		PlayerTextDrawShow(playerid, ChannelDraw1[playerid]);
		PlayerTextDrawShow(playerid, SlotDraw1[playerid]);

		if(IsPlayerInAnyVehicle(playerid))
			PlayerTextDrawShow(playerid, SpeedText1[playerid]);
	}
	else if(PlayerInfo[playerid][pHud] == 3 && IsPlayerInAnyVehicle(playerid))
		PlayerTextDrawShow(playerid, SpeedText2[playerid]);

	else if(PlayerInfo[playerid][pHud] == 4)
	{
	    if(IsPlayerInAnyVehicle(playerid))
	        PlayerTextDrawShow(playerid, SpeedText3[playerid]);

		PlayerTextDrawShow(playerid, RadioDraw3[playerid]);
	}

	SetRadioChannel(playerid, GetPlayerChannel(playerid));
	SetRadioSlot(playerid, GetPlayerSlot(playerid));
	return 1;
}

stock HideRadioTextDraw(playerid)
{
	PlayerTextDrawHide(playerid, RadioDraw0[playerid]);
	PlayerTextDrawHide(playerid, ChannelDraw0[playerid]);
	PlayerTextDrawHide(playerid, SlotDraw0[playerid]);
	PlayerTextDrawHide(playerid, ChannelDraw1[playerid]);
	PlayerTextDrawHide(playerid, SlotDraw1[playerid]);
	PlayerTextDrawHide(playerid, RadioDraw3[playerid]);
	//Vehicle
	PlayerTextDrawHide(playerid, SpeedText0[playerid]);
	PlayerTextDrawHide(playerid, FuelText0[playerid]);
	PlayerTextDrawHide(playerid, SpeedText1[playerid]);
	PlayerTextDrawHide(playerid, SpeedText2[playerid]);
	PlayerTextDrawHide(playerid, SpeedText3[playerid]);
	return 1;
}

stock SetRadioChannel(playerid, channel)
{
	new mes[128];
	if(PlayerInfo[playerid][pHud] == 1)
	{
		if(channel == 0)
		{
			format(mes, sizeof(mes), "~b~Canal: ~h~~g~0");
			PlayerInfo[playerid][pAuthed] = 0;
		}
		else
			format(mes, sizeof(mes), "~b~Canal: ~h~~g~%i", channel);

		PlayerTextDrawSetString(playerid, ChannelDraw0[playerid], mes);
	}
	else if(PlayerInfo[playerid][pHud] == 2)
	{
		if(channel == 0)
		{
			format(mes, sizeof(mes), "~w~Radio Info: ~h~~y~0");
			PlayerInfo[playerid][pAuthed] = 0;
		}
		else
			format(mes, sizeof(mes), "~w~Radio Info: ~h~~y~%i", channel);

		PlayerTextDrawSetString(playerid, ChannelDraw1[playerid], mes);
	}
	else if(PlayerInfo[playerid][pHud] == 4)
	{
		if(channel == 0)
		{
			format(mes, sizeof(mes), "~w~Radio Info:~n~~w~0~n~~w~Slot: %i", PlayerInfo[playerid][pSlot]);
			PlayerInfo[playerid][pAuthed] = 0;
		}
		else
			format(mes, sizeof(mes), "~w~Radio Info:~n~~w~%i~n~~w~Slot: %i", channel, PlayerInfo[playerid][pSlot]);

		PlayerTextDrawSetString(playerid, RadioDraw3[playerid], mes);
	}
	PlayerInfo[playerid][pChannel] = channel;
	return 1;
}

stock SetRadioSlot(playerid, slot)
{
	new mes[128];
	if(PlayerInfo[playerid][pHud] == 1)
	{
		format(mes, sizeof(mes), "~b~Slot: ~h~~g~%i", slot);
		PlayerTextDrawSetString(playerid, SlotDraw0[playerid], mes);
	}
	else if(PlayerInfo[playerid][pHud] == 2)
	{
		format(mes, sizeof(mes), "~w~Slot: ~h~~y~%i", slot);
		PlayerTextDrawSetString(playerid, SlotDraw1[playerid], mes);
	}
	else if(PlayerInfo[playerid][pHud] == 4)
	{
		format(mes, sizeof(mes), "~w~Radio Info:~n~~w~%i~n~~w~Slot: %i", PlayerInfo[playerid][pChannel], slot);
		PlayerTextDrawSetString(playerid, RadioDraw3[playerid], mes);
	}
	PlayerInfo[playerid][pSlot] = slot;
	return 1;
}

stock GetPlayerChannel(playerid)
	return PlayerInfo[playerid][pChannel];

stock GetPlayerSlot(playerid)
	return PlayerInfo[playerid][pSlot];


stock ChannelExists(channelid)
{
	switch(channelid)
	{
	    case 911, 999, 912, 998, 379: return 1;
	}

	for(new i = 0; i != MAX_RADIOS; i++)
	{
		if(RadiosInfo[i][radioOn] != 0 && RadiosInfo[i][radioChannel] == channelid)
		    return 1;
	}
	return 0;
}

stock GetChannelID(mysql_id)
{
	for(new i = 0; i != MAX_RADIOS; i++)
	{
		if(RadiosInfo[i][radioOn] != 0 && RadiosInfo[i][radioID] == mysql_id)
		    return i;
	}
	return -1;
}

stock StringHasSymbols(string[])
{
	for(new i = 0; i < strlen(string); i++)
	{
		switch(string[i])
		{
			case '!', '@', '#', '$','%','^','&','*','(',')','_','+','=','|','[',']','{','}','-','.','`','~','<','>','?',',','/': return 1;
			default: continue;
		}
	}
	return 0;
}

stock FixVehicle(vehicleid)
{
    VehicleInfo[vehicleid][carDeath] = 0;
	RepairVehicle(vehicleid);
    if(VehicleInfo[vehicleid][carOwnerID] != 0)
    {
		SetVehicleHealth(vehicleid, MAX_HEALTH_VEHICLE + VehicleInfo[vehicleid][carArmour]);
	}
	else
	{
	    if(GetVehicleModel(vehicleid) == 601 || GetVehicleModel(vehicleid) == 528 || GetVehicleModel(vehicleid) == 427)
	        SetVehicleHealth(vehicleid, 10000.0);
	    else
	    	SetVehicleHealth(vehicleid, 1000.0);
	}
	return 1;
}

stock IsPlayerLogged(playerid)
{
	return (playerid != INVALID_PLAYER_ID && pTemp[playerid][pLogged] == 2 && IsPlayerConnected(playerid)) ? (1) : (0);
}

stock ShowPlayerName(playerid, bool:show)
{
	if(show)
	{
		foreach(Player, i)
		{
			ShowPlayerNameTagForPlayer(i, playerid, 1);
		}
	}
	else
	{
		foreach(Player, i)
		{
			ShowPlayerNameTagForPlayer(i, playerid, 0);
		}
	}
	return 1;
}

stock RemovePlayerMask(playerid)
{
	maskOn{playerid} = false;
	ShowPlayerName(playerid, true);
	format(PlayerInfo[playerid][pMaskname], 32, PlayerInfo[playerid][pUsername_]);
	return 1;
}

stock CompareStrings(string[], string2[])
{
	return (!strcmp(string, string2, true)) ? (1):(0);
}

stock ResetPlayerVariables(playerid)
{
    ResetDamages(playerid);
	for(new i = 0; i != MAX_CHARACTERS; i++)
	{
	    login_char_id[playerid][i] = 0;
	    format(login_char_name[playerid][i], MAX_PLAYER_NAME, "Slot liber");
	}
	//-----------------------------------------------------------------
	maskOn{playerid} = false;

	//Jacking sys
	JackingEngine[playerid] = 0;
	JackingLock[playerid] = 0;
	JackingVehicle[playerid] = 0;
	//
	OnAnim{playerid} = false;

	//Mechanic job
 	RefillPrice[playerid] = 0;
 	RefillOffer[playerid] = INVALID_PLAYER_ID;
	RepairOffer[playerid] = INVALID_PLAYER_ID;
	RepairToVehicle[playerid] = INVALID_VEHICLE_ID;
	RepairTowTruck[playerid] = INVALID_VEHICLE_ID;
	RepairTime[playerid] = 0;
    RepairService[playerid] = 0;
    //
   	Seatbelt[playerid] = 0;
    //Taxi job
	TaxiDuty[playerid] = false;
	TaxiFare[playerid] = 0;
	TaxiMoney[playerid] = 0;
	TaxiMade[playerid] = 0;
	TaxiPassenger[playerid] = INVALID_PLAYER_ID;
	//
	//-----------------------------------------------------------------
	for(new i; i != MAX_PLAYERS; i++)
		people_blocking[playerid][i] = 0;
	//-----------------------------------------------------------------
	for(new i = 0; i < MAX_PLAYER_CONTACTS; i++)
		PlayerContacts[playerid][i][contactOn] = 0;
	//-----------------------------------------------------------------
	for(new i = 0; i < MAX_PLAYER_NOTES; i++)
		PlayerNotes[playerid][i][noteOn] = 0;
	//-----------------------------------------------------------------
	for(new i = 0; i < MAX_PLAYER_TICKETS; i++)
	{
		pTickets[playerid][i][tID] = 0;
		pTemp[playerid][pTicketListed][i] = -1;
	}

	for(new i; i != 30; i++)
		pTemp[playerid][pWeaponListed][i] = 0;

    for(new i; i != 5; i++)
		pTemp[playerid][pTenantListed][i] = 0;

	for(new i = 0; i < MAX_INVENTORY; i++)
	{
		PlayerInfo[playerid][pInv][i] = 0;
		PlayerInfo[playerid][pInvAmount][i] = 0;
	}
	//????????? ?????????? ??? ????.
	pTemp[playerid][pPayphone] = 0;
	pTemp[playerid][pPizzaBoy] = 0;
	pTemp[playerid][pChangeNick] = EOS;
    pTemp[playerid][pDemolitionTime] = 0;
	pTemp[playerid][pDrugUse] = 0;
	pTemp[playerid][pDrugTime] = 0;
	pTemp[playerid][pDrugChgWeather] = 0;
	pTemp[playerid][pLicenseExam] = 0;
    pTemp[playerid][pJetpack] = 0;
	pTemp[playerid][pBoombox_house] = -1;
	pTemp[playerid][pBoombox_biz] = -1;
	pTemp[playerid][pBoombox] = INVALID_PLAYER_ID;
    pTemp[playerid][pTesterDuty] = 0;
    pTemp[playerid][pAdminDuty] = 0;
	pTemp[playerid][pServePlayer] = INVALID_PLAYER_ID;
	pTemp[playerid][pServeType] = 0;
    pTemp[playerid][pReportTime] = 0;
	pTemp[playerid][pGreetPlayer] = INVALID_PLAYER_ID;
	pTemp[playerid][pGreetType] = 0;
	pTemp[playerid][pFoodStand] = 0;
	pTemp[playerid][pDMLog] = 0;
	pTemp[playerid][pNews] = 0;
	pTemp[playerid][pDarkAFK] = 0;
	pTemp[playerid][pBizEntered] = -1;
	pTemp[playerid][pApartEntered] = -1;
	pTemp[playerid][pHouseEntered] = -1;
	pTemp[playerid][pCuffed] = 0;
	pTemp[playerid][pPlantTime] = 0;
    pTemp[playerid][pFishTime] = 0;
	pTemp[playerid][pCallOn] = 0;
	pTemp[playerid][pPatrol] = 0;
	pTemp[playerid][pCmdCount] = 0;
	pTemp[playerid][pCmdFlood] = 0;
	pTemp[playerid][pChatCount] = 0;
	pTemp[playerid][pMDCPlayer] = INVALID_PLAYER_ID;
	pTemp[playerid][pDriver] = INVALID_VEHICLE_ID;
	pTemp[playerid][pLogged] = 0;
	pTemp[playerid][pLoggedTime] = 0;
	pTemp[playerid][pLoggedTry] = 0;
	pTemp[playerid][pWepPlayer] = INVALID_PLAYER_ID;
	pTemp[playerid][pWepPrice] = 0;
	pTemp[playerid][pRentPlayer] = INVALID_PLAYER_ID;
	pTemp[playerid][pRentPrice] = 0;
	pTemp[playerid][pHouseHouse] = -1;
	pTemp[playerid][pHousePrice] = 0;
	pTemp[playerid][pPMPlayer] = INVALID_PLAYER_ID;
	pTemp[playerid][pHousePlayer] = INVALID_PLAYER_ID;
	pTemp[playerid][pInterview] = INVALID_PLAYER_ID;
	pTemp[playerid][pInterviewPlayer] = INVALID_PLAYER_ID;
	pTemp[playerid][pHealPlayer] = INVALID_PLAYER_ID;
	pTemp[playerid][pFactionPlayer] = INVALID_PLAYER_ID;
	pTemp[playerid][pFriskPlayer] = INVALID_PLAYER_ID;
	pTemp[playerid][pSpecPlayer] = INVALID_PLAYER_ID;
	pTemp[playerid][pHirePlayer] = INVALID_PLAYER_ID;
	pTemp[playerid][pTaser] = 0;
	pTemp[playerid][pRubber] = 0;
	pTemp[playerid][pTaserTime] = 0;
	pTemp[playerid][pFreezeTime] = 0;
	pTemp[playerid][pInvulnerable] = 0;
	pTemp[playerid][pEditBort] = 0;
    pTemp[playerid][pCCTV] = 0;
	pTemp[playerid][pZondActor] = INVALID_ACTOR_ID;
	pTemp[playerid][pZond] = 0;
	pTemp[playerid][pFlashTime] = 0;
	pTemp[playerid][pCarPlayer] = INVALID_PLAYER_ID;
	pTemp[playerid][pCarPrice] = 0;
	pTemp[playerid][pHouseFurniture] = -1;
	pTemp[playerid][p3DMenu] = -1;
	pTemp[playerid][pHealTime] = 0;
	pTemp[playerid][pBuildHouse] = 0;
	pTemp[playerid][pRamType] = 0;
    pTemp[playerid][pRamTime] = 0;
    pTemp[playerid][pRamHouse] = -1;
    pTemp[playerid][pRamBiz] = -1;
    pTemp[playerid][pRamObj] = INVALID_OBJECT_ID;
    pTemp[playerid][pCargoID] = 0;
    pTemp[playerid][pCallLine] = INVALID_PLAYER_ID;
	pTemp[playerid][pCallStatus] = 0;
	pTemp[playerid][pCallIncoming] = 0;
	pTemp[playerid][pCallTime] = 0;
	pTemp[playerid][pCallName] = EOS;
    pTemp[playerid][pEmergency] = 0;
    pTemp[playerid][pTracePlayer] = INVALID_PLAYER_ID;
    pTemp[playerid][pTraceStage] = 0;
	pTemp[playerid][pTraceGZ] = -1;
	pTemp[playerid][pGoogle] = EOS;
	pTemp[playerid][pInteriorHouse] = 0;
	pTemp[playerid][pInteriorBiz] = 0;
	pTemp[playerid][pInteriorID] = 0;
	//????????? ?????????? ???? ??????.
	for(new i = 0; i < MAX_WEAP-1; i++)	PlayerInfo[playerid][pHideWeap][i] = 0;
	PlayerInfo[playerid][pFishTime] = 0;
	PlayerInfo[playerid][pGoogle] = EOS;
	PlayerInfo[playerid][pGanjaTime] = 0;
	PlayerInfo[playerid][pPrescribe] = 0;
	PlayerInfo[playerid][pDependence] = 0;
	PlayerInfo[playerid][pDemolition] = 0;
	PlayerInfo[playerid][pID] = 0;
	PlayerInfo[playerid][pAccID] = 0;
	PlayerInfo[playerid][pAccname] = EOS;
	PlayerInfo[playerid][pCarKey] = 0;
	PlayerInfo[playerid][pTog][0] = 0;
	PlayerInfo[playerid][pTog][1] = 0;
	PlayerInfo[playerid][pTog][2] = 0;
	PlayerInfo[playerid][pSwatDuty] = 0;
	PlayerInfo[playerid][pOnDuty] = 0;
	PlayerInfo[playerid][pCash] = 0;
	PlayerInfo[playerid][pBank] = 0;
	PlayerInfo[playerid][pSkin] = 0;
	PlayerInfo[playerid][pSex] = 0;
	PlayerInfo[playerid][pBirthdate] = EOS;
	PlayerInfo[playerid][pLevel] = 0;
	PlayerInfo[playerid][pExp] = 0;
	PlayerInfo[playerid][pHours] = 0;
	PlayerInfo[playerid][pAdmin] = 0;
	PlayerInfo[playerid][pAdminHide] = 0;
	PlayerInfo[playerid][pTester] = 0;
	PlayerInfo[playerid][pInt] = 0;
	PlayerInfo[playerid][pWorld] = 0;
	PlayerInfo[playerid][pJailed] = 0;
	PlayerInfo[playerid][pIsolateTime] = 0;
	PlayerInfo[playerid][pJailTime] = 0;
	PlayerInfo[playerid][pWarns] = 0;

	PlayerInfo[playerid][pPremium] = 0;
	PlayerInfo[playerid][pPremiumTime] = 0;
	PlayerInfo[playerid][pNameChanges] = 0;
	PlayerInfo[playerid][pNumberChanges] = 0;

	PlayerInfo[playerid][pCarLic] = 0;
	PlayerInfo[playerid][pWepLic] = 0;
	PlayerInfo[playerid][pFlyLic] = 0;
	PlayerInfo[playerid][pTaxiLic] = 0;
	PlayerInfo[playerid][pPosX] = 0.0;
	PlayerInfo[playerid][pPosY] = 0.0;
	PlayerInfo[playerid][pPosZ] = 0.0;
	PlayerInfo[playerid][pPosA] = 0.0;
	PlayerInfo[playerid][pInjured] = 0;
	PlayerInfo[playerid][pFightStyle] = 0;
	PlayerInfo[playerid][pPayCheckMoney] = 0;
	PlayerInfo[playerid][pPayDayTime] = 0;
	PlayerInfo[playerid][pNumber] = 0;
	PlayerInfo[playerid][pSavings] = 0;
	PlayerInfo[playerid][pRentKey] = 0;
	PlayerInfo[playerid][pRentPrice] = 0;
	PlayerInfo[playerid][pChannel] = 0;
	PlayerInfo[playerid][pOwnedChannel] = 0;
	PlayerInfo[playerid][pAuthed] = 0;
	PlayerInfo[playerid][pSpareKey] = 0;
	PlayerInfo[playerid][pWorkOn] = 0;
	PlayerInfo[playerid][pWalk] = 0;
	PlayerInfo[playerid][pArmour] = 0.0;
	PlayerInfo[playerid][pFaction] = 0;
	PlayerInfo[playerid][pJob] = 0;
	PlayerInfo[playerid][pCareer] = 0;
	PlayerInfo[playerid][pRank] = 0;
	PlayerInfo[playerid][pBadgeNumber] = 0;
	PlayerInfo[playerid][pDriveWarns] = 0;
	PlayerInfo[playerid][pWepWarns] = 0;
	PlayerInfo[playerid][pWepCount] = 0;
	PlayerInfo[playerid][pArrested] = 0;
	PlayerInfo[playerid][pTalk] = 0;
	PlayerInfo[playerid][pSwat] = 0;
	PlayerInfo[playerid][pAuthwep] = 0;
	PlayerInfo[playerid][pSlot] = 1;
	PlayerInfo[playerid][pSpawnType] = 0;
	PlayerInfo[playerid][pSpawnPoint] = 0;
	PlayerInfo[playerid][pPrisoned] = 0;
	PlayerInfo[playerid][pHud] = 0;

	//Tog
	PlayerInfo[playerid][pSettings] &= ~togService;
	PlayerInfo[playerid][pSettings] &= ~togName;
	PlayerInfo[playerid][pSettings] &= ~togOOC;
	PlayerInfo[playerid][pSettings] &= ~togJoin;
	PlayerInfo[playerid][pSettings] &= ~togAdv;
	PlayerInfo[playerid][pSettings] &= ~togGov;
	PlayerInfo[playerid][pSettings] &= ~togPM;
    PlayerInfo[playerid][pSettings] &= ~togAdmCmds;
    PlayerInfo[playerid][pSettings] &= ~togNews;
    PlayerInfo[playerid][pSettings] &= ~togAFK;
    PlayerInfo[playerid][pSettings] &= ~togHUD;
    PlayerInfo[playerid][pSettings] &= ~togFaction;
    PlayerInfo[playerid][pSettings] &= ~togTester;
    PlayerInfo[playerid][pSettings] &= ~togEnter;

	ResetPlayerWeapons(playerid);
	return 1;
}

stock CreatePlayerTextDraws(playerid)
{
    drug_effect[playerid] = CreatePlayerTextDraw(playerid, 320.000000, 0.000000, "_");
	PlayerTextDrawAlignment(playerid, drug_effect[playerid], 2);
	PlayerTextDrawBackgroundColor(playerid, drug_effect[playerid], 255);
	PlayerTextDrawFont(playerid, drug_effect[playerid], 1);
	PlayerTextDrawLetterSize(playerid, drug_effect[playerid], 0.500000, 53.000000);
	PlayerTextDrawColor(playerid, drug_effect[playerid], -1);
	PlayerTextDrawSetOutline(playerid, drug_effect[playerid], 0);
	PlayerTextDrawSetProportional(playerid, drug_effect[playerid], 1);
	PlayerTextDrawSetShadow(playerid, drug_effect[playerid], 1);
	PlayerTextDrawUseBox(playerid, drug_effect[playerid], 1);
	PlayerTextDrawBoxColor(playerid, drug_effect[playerid], -14837680);
	PlayerTextDrawTextSize(playerid, drug_effect[playerid], 0.000000, 1215.000000);
	PlayerTextDrawSetSelectable(playerid, drug_effect[playerid], 0);

    TD_job_message[playerid] = CreatePlayerTextDraw(playerid, 95.000000, 292.000000, "Se incarca...");
	PlayerTextDrawBackgroundColor(playerid, TD_job_message[playerid], 255);
	PlayerTextDrawFont(playerid, TD_job_message[playerid], 1);
	PlayerTextDrawLetterSize(playerid, TD_job_message[playerid], 0.290000, 1.099999);
	PlayerTextDrawColor(playerid, TD_job_message[playerid], -1);
	PlayerTextDrawSetOutline(playerid, TD_job_message[playerid], 1);
	PlayerTextDrawSetProportional(playerid, TD_job_message[playerid], 1);

    spectate_TD[playerid][0] = CreatePlayerTextDraw(playerid, 1.000000, 1.000000, "Se incarca...");
	PlayerTextDrawBackgroundColor(playerid, spectate_TD[playerid][0], 255);
	PlayerTextDrawFont(playerid, spectate_TD[playerid][0], 1);
	PlayerTextDrawLetterSize(playerid, spectate_TD[playerid][0], 0.230000, 0.899999);
	PlayerTextDrawColor(playerid, spectate_TD[playerid][0], -1);
	PlayerTextDrawSetOutline(playerid, spectate_TD[playerid][0], 0);
	PlayerTextDrawSetProportional(playerid, spectate_TD[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, spectate_TD[playerid][0], 1);
	PlayerTextDrawUseBox(playerid, spectate_TD[playerid][0], 1);
	PlayerTextDrawBoxColor(playerid, spectate_TD[playerid][0], 255);
	PlayerTextDrawTextSize(playerid, spectate_TD[playerid][0], 638.000000, 0.000000);

	spectate_TD[playerid][1] = CreatePlayerTextDraw(playerid, 1.000000, 437.000000, "Se incarca...");
	PlayerTextDrawBackgroundColor(playerid, spectate_TD[playerid][1], 255);
	PlayerTextDrawFont(playerid, spectate_TD[playerid][1], 1);
	PlayerTextDrawLetterSize(playerid, spectate_TD[playerid][1], 0.230000, 0.899999);
	PlayerTextDrawColor(playerid, spectate_TD[playerid][1], -1);
	PlayerTextDrawSetOutline(playerid, spectate_TD[playerid][1], 0);
	PlayerTextDrawSetProportional(playerid, spectate_TD[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, spectate_TD[playerid][1], 1);
	PlayerTextDrawUseBox(playerid, spectate_TD[playerid][1], 1);
	PlayerTextDrawBoxColor(playerid, spectate_TD[playerid][1], 255);
	PlayerTextDrawTextSize(playerid, spectate_TD[playerid][1], 638.000000, 0.000000);

	RadioDraw0[playerid] = CreatePlayerTextDraw(playerid, 520.000000, 103.000000, "~b~Radio Info");
	PlayerTextDrawBackgroundColor(playerid, RadioDraw0[playerid], 0x000000ff);
	PlayerTextDrawFont(playerid, RadioDraw0[playerid], 3);
	PlayerTextDrawLetterSize(playerid, RadioDraw0[playerid], 0.40, 1.0);
	PlayerTextDrawColor(playerid, RadioDraw0[playerid], 0xffffffff);
	PlayerTextDrawSetShadow(playerid, RadioDraw0[playerid], 1);

	ChannelDraw0[playerid] = CreatePlayerTextDraw(playerid, 520.000000, 112.000000, "~b~Canal: ~h~~g~0");
	PlayerTextDrawBackgroundColor(playerid, ChannelDraw0[playerid], 0x000000ff);
	PlayerTextDrawFont(playerid, ChannelDraw0[playerid], 3);
	PlayerTextDrawLetterSize(playerid, ChannelDraw0[playerid], 0.40, 1.0);
	PlayerTextDrawColor(playerid, ChannelDraw0[playerid], 0xffffffff);
	PlayerTextDrawSetShadow(playerid, ChannelDraw0[playerid], 1);

	SlotDraw0[playerid] = CreatePlayerTextDraw(playerid, 520.000000, 121.000000, "~b~Slot: ~h~~g~0");
	PlayerTextDrawBackgroundColor(playerid, SlotDraw0[playerid], 0x000000ff);
	PlayerTextDrawFont(playerid, SlotDraw0[playerid], 3);
	PlayerTextDrawLetterSize(playerid, SlotDraw0[playerid], 0.40, 1.0);
	PlayerTextDrawColor(playerid, SlotDraw0[playerid], 0xffffffff);
	PlayerTextDrawSetShadow(playerid, SlotDraw0[playerid], 1);

	ChannelDraw1[playerid] = CreatePlayerTextDraw(playerid, 19.000000, 148.000000, "~w~Radio Info: ~h~~y~0");
	PlayerTextDrawLetterSize(playerid, ChannelDraw1[playerid], 0.419999, 1.899999);
	PlayerTextDrawAlignment(playerid, ChannelDraw1[playerid], 1);
	PlayerTextDrawColor(playerid, ChannelDraw1[playerid], -1);
	PlayerTextDrawSetShadow(playerid, ChannelDraw1[playerid], 0);
	PlayerTextDrawSetOutline(playerid, ChannelDraw1[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, ChannelDraw1[playerid], 0x000000FF);
	PlayerTextDrawFont(playerid, ChannelDraw1[playerid], 1);
	PlayerTextDrawSetProportional(playerid, ChannelDraw1[playerid], 1);

	SlotDraw1[playerid] = CreatePlayerTextDraw(playerid, 19.000000, 165.000000, "~w~Slot: ~h~~y~0");
	PlayerTextDrawLetterSize(playerid, SlotDraw1[playerid], 0.419999, 1.899999);
	PlayerTextDrawAlignment(playerid, SlotDraw1[playerid], 1);
	PlayerTextDrawColor(playerid, SlotDraw1[playerid], -1);
	PlayerTextDrawSetShadow(playerid, SlotDraw1[playerid], 0);
	PlayerTextDrawSetOutline(playerid, SlotDraw1[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, SlotDraw1[playerid], 0x000000FF);
	PlayerTextDrawFont(playerid, SlotDraw1[playerid], 1);
	PlayerTextDrawSetProportional(playerid, SlotDraw1[playerid], 1);

	RadioDraw3[playerid] = CreatePlayerTextDraw(playerid, 536.000000, 402.204559, "~w~Radio Info:~n~~w~0~n~~w~Slot: 0~n~~w~");
	PlayerTextDrawLetterSize(playerid, RadioDraw3[playerid], 0.415999, 1.127111);
	PlayerTextDrawAlignment(playerid, RadioDraw3[playerid], 1);
	PlayerTextDrawColor(playerid, RadioDraw3[playerid], -1);
	PlayerTextDrawSetShadow(playerid, RadioDraw3[playerid], 0);
	PlayerTextDrawSetOutline(playerid, RadioDraw3[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, RadioDraw3[playerid], 51);
	PlayerTextDrawFont(playerid, RadioDraw3[playerid], 3);
	PlayerTextDrawSetProportional(playerid, RadioDraw3[playerid], 1);

	SpeedText0[playerid] = CreatePlayerTextDraw(playerid, 520.000000, 135.000000, "");
	PlayerTextDrawBackgroundColor(playerid, SpeedText0[playerid], 0x000000ff);
	PlayerTextDrawFont(playerid, SpeedText0[playerid], 3);
	PlayerTextDrawLetterSize(playerid, SpeedText0[playerid], 0.40, 1.0);
	PlayerTextDrawColor(playerid, SpeedText0[playerid], 0xffffffff);
	PlayerTextDrawSetShadow(playerid, SpeedText0[playerid], 1);

	FuelText0[playerid] = CreatePlayerTextDraw(playerid,520.000000, 144.000000, "");
	PlayerTextDrawBackgroundColor(playerid,FuelText0[playerid], 0x000000ff);
	PlayerTextDrawFont(playerid,FuelText0[playerid], 3);
	PlayerTextDrawLetterSize(playerid,FuelText0[playerid], 0.40, 1.0);
	PlayerTextDrawColor(playerid,FuelText0[playerid], 0xffffffff);
	PlayerTextDrawSetShadow(playerid,FuelText0[playerid], 1);

	SpeedText1[playerid] = CreatePlayerTextDraw(playerid,19.000000, 130.000000, "");
	PlayerTextDrawLetterSize(playerid, SpeedText1[playerid],0.420000, 1.900000);
	PlayerTextDrawAlignment(playerid, SpeedText1[playerid], 1);
	PlayerTextDrawColor(playerid, SpeedText1[playerid], -1);
	PlayerTextDrawSetShadow(playerid, SpeedText1[playerid], 0);
	PlayerTextDrawSetOutline(playerid, SpeedText1[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, SpeedText1[playerid], 0x000000FF);
	PlayerTextDrawFont(playerid, SpeedText1[playerid], 1);
	PlayerTextDrawSetProportional(playerid, SpeedText1[playerid], 1);

	SpeedText2[playerid] = CreatePlayerTextDraw(playerid,544.200073, 413.155517, "");
	PlayerTextDrawLetterSize(playerid, SpeedText2[playerid], 0.449999, 1.600000);
	PlayerTextDrawAlignment(playerid, SpeedText2[playerid], 2);
	PlayerTextDrawColor(playerid, SpeedText2[playerid], 255);
	PlayerTextDrawSetShadow(playerid, SpeedText2[playerid], 0);
	PlayerTextDrawSetOutline(playerid, SpeedText2[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, SpeedText2[playerid], -1061109505);
	PlayerTextDrawFont(playerid, SpeedText2[playerid], 2);
	PlayerTextDrawSetProportional(playerid, SpeedText2[playerid], 1);

	SpeedText3[playerid] = CreatePlayerTextDraw(playerid, 535.200012, 383.288909, "");
	PlayerTextDrawLetterSize(playerid, SpeedText3[playerid], 0.347999, 1.052444);
	PlayerTextDrawAlignment(playerid, SpeedText3[playerid], 1);
	PlayerTextDrawColor(playerid, SpeedText3[playerid], -1);
	PlayerTextDrawSetShadow(playerid, SpeedText3[playerid], 0);
	PlayerTextDrawSetOutline(playerid, SpeedText3[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, SpeedText3[playerid], 51);
	PlayerTextDrawFont(playerid, SpeedText3[playerid], 3);
	PlayerTextDrawSetProportional(playerid, SpeedText3[playerid], 1);

	errormsg[playerid] = TextDrawCreate(318.000000,112.000000,"~r~Eroare");
	TextDrawAlignment(errormsg[playerid],2);
	TextDrawBackgroundColor(errormsg[playerid],0x000000ff);
	TextDrawFont(errormsg[playerid],1);
	TextDrawLetterSize(errormsg[playerid],0.299999,1.300000);
	TextDrawColor(errormsg[playerid],0xffffffff);
	TextDrawSetOutline(errormsg[playerid],1);
	TextDrawSetProportional(errormsg[playerid],1);
	TextDrawSetShadow(errormsg[playerid],1);

	infotxt[playerid] = TextDrawCreate(90.000000, 260.000000, "Mesaj informativ");
	TextDrawBackgroundColor(infotxt[playerid], 255);
	TextDrawFont(infotxt[playerid], 2);
	TextDrawLetterSize(infotxt[playerid], 0.200000, 1.000000);
	TextDrawColor(infotxt[playerid], -1);
	TextDrawSetOutline(infotxt[playerid], 0);
	TextDrawSetProportional(infotxt[playerid], 1);
	TextDrawSetShadow(infotxt[playerid], 1);

    TD_vehicle_name[playerid] = CreatePlayerTextDraw(playerid, 553.000000, 407.000000, "info");
	PlayerTextDrawBackgroundColor(playerid, TD_vehicle_name[playerid], 255);
	PlayerTextDrawFont(playerid, TD_vehicle_name[playerid], 2);
	PlayerTextDrawLetterSize(playerid, TD_vehicle_name[playerid], 0.200000, 0.699998);
	PlayerTextDrawColor(playerid, TD_vehicle_name[playerid], -1);
	PlayerTextDrawSetOutline(playerid, TD_vehicle_name[playerid], 0);
	PlayerTextDrawSetProportional(playerid, TD_vehicle_name[playerid], 1);
	PlayerTextDrawSetShadow(playerid, TD_vehicle_name[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, TD_vehicle_name[playerid], 0);
	PlayerTextDrawHide(playerid, TD_vehicle_name[playerid]);
	//????????
	TD_restaurant_prod[playerid][0] = CreatePlayerTextDraw(playerid, 157.000000, 277.200042, "Produs 1");
	PlayerTextDrawLetterSize(playerid, TD_restaurant_prod[playerid][0], 0.267998, 0.993332);
	PlayerTextDrawAlignment(playerid, TD_restaurant_prod[playerid][0], 1);
	PlayerTextDrawColor(playerid, TD_restaurant_prod[playerid][0], -1);
	PlayerTextDrawSetShadow(playerid, TD_restaurant_prod[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, TD_restaurant_prod[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, TD_restaurant_prod[playerid][0], 51);
	PlayerTextDrawFont(playerid, TD_restaurant_prod[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, TD_restaurant_prod[playerid][0], 1);

	TD_restaurant_prod[playerid][1] = CreatePlayerTextDraw(playerid, 239.000000, 277.200042, "Produs 2");
	PlayerTextDrawLetterSize(playerid, TD_restaurant_prod[playerid][1], 0.267998, 0.993332);
	PlayerTextDrawAlignment(playerid, TD_restaurant_prod[playerid][1], 1);
	PlayerTextDrawColor(playerid, TD_restaurant_prod[playerid][1], -1);
	PlayerTextDrawSetShadow(playerid, TD_restaurant_prod[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, TD_restaurant_prod[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, TD_restaurant_prod[playerid][1], 51);
	PlayerTextDrawFont(playerid, TD_restaurant_prod[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, TD_restaurant_prod[playerid][1], 1);

	TD_restaurant_prod[playerid][2] = CreatePlayerTextDraw(playerid, 321.000000, 277.200042, "Produs 3");
	PlayerTextDrawLetterSize(playerid, TD_restaurant_prod[playerid][2], 0.267998, 0.993332);
	PlayerTextDrawAlignment(playerid, TD_restaurant_prod[playerid][2], 1);
	PlayerTextDrawColor(playerid, TD_restaurant_prod[playerid][2], -1);
	PlayerTextDrawSetShadow(playerid, TD_restaurant_prod[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, TD_restaurant_prod[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, TD_restaurant_prod[playerid][2], 51);
	PlayerTextDrawFont(playerid, TD_restaurant_prod[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid, TD_restaurant_prod[playerid][2], 1);

	TD_restaurant_prod[playerid][3] = CreatePlayerTextDraw(playerid, 403.000000, 277.200042, "Produs 4");
	PlayerTextDrawLetterSize(playerid, TD_restaurant_prod[playerid][3], 0.267998, 0.993332);
	PlayerTextDrawAlignment(playerid, TD_restaurant_prod[playerid][3], 1);
	PlayerTextDrawColor(playerid, TD_restaurant_prod[playerid][3], -1);
	PlayerTextDrawSetShadow(playerid, TD_restaurant_prod[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, TD_restaurant_prod[playerid][3], 0);
	PlayerTextDrawBackgroundColor(playerid, TD_restaurant_prod[playerid][3], 51);
	PlayerTextDrawFont(playerid, TD_restaurant_prod[playerid][3], 1);
	PlayerTextDrawSetProportional(playerid, TD_restaurant_prod[playerid][3], 1);

	TD_restaurant_prod[playerid][4] = CreatePlayerTextDraw(playerid, 152.799987, 188.657760, "2218");
	PlayerTextDrawLetterSize(playerid, TD_restaurant_prod[playerid][4], 0.495200, 1.196799);
	PlayerTextDrawTextSize(playerid, TD_restaurant_prod[playerid][4], 59.999931, 68.195480);
	PlayerTextDrawAlignment(playerid, TD_restaurant_prod[playerid][4], 2);
	PlayerTextDrawColor(playerid, TD_restaurant_prod[playerid][4], -1);
	PlayerTextDrawUseBox(playerid, TD_restaurant_prod[playerid][4], true);
	PlayerTextDrawBoxColor(playerid, TD_restaurant_prod[playerid][4], 255);
	PlayerTextDrawSetShadow(playerid, TD_restaurant_prod[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, TD_restaurant_prod[playerid][4], 0);
	PlayerTextDrawBackgroundColor(playerid, TD_restaurant_prod[playerid][4], 51);
	PlayerTextDrawFont(playerid, TD_restaurant_prod[playerid][4], 5);
	PlayerTextDrawSetProportional(playerid, TD_restaurant_prod[playerid][4], 1);
	PlayerTextDrawSetSelectable(playerid, TD_restaurant_prod[playerid][4], true);
	PlayerTextDrawSetPreviewModel(playerid, TD_restaurant_prod[playerid][4], 2218);
	PlayerTextDrawSetPreviewRot(playerid, TD_restaurant_prod[playerid][4], -220.000000, -200.000000, 200.000000, 1.000000);

	TD_restaurant_prod[playerid][5] = CreatePlayerTextDraw(playerid, 234.799987, 188.657760, "2219");
	PlayerTextDrawLetterSize(playerid, TD_restaurant_prod[playerid][5], 0.495200, 1.196799);
	PlayerTextDrawTextSize(playerid, TD_restaurant_prod[playerid][5], 59.999931, 68.195480);
	PlayerTextDrawAlignment(playerid, TD_restaurant_prod[playerid][5], 2);
	PlayerTextDrawColor(playerid, TD_restaurant_prod[playerid][5], -1);
	PlayerTextDrawUseBox(playerid, TD_restaurant_prod[playerid][5], true);
	PlayerTextDrawBoxColor(playerid, TD_restaurant_prod[playerid][5], 255);
	PlayerTextDrawSetShadow(playerid, TD_restaurant_prod[playerid][5], 0);
	PlayerTextDrawSetOutline(playerid, TD_restaurant_prod[playerid][5], 0);
	PlayerTextDrawBackgroundColor(playerid, TD_restaurant_prod[playerid][5], 51);
	PlayerTextDrawFont(playerid, TD_restaurant_prod[playerid][5], 5);
	PlayerTextDrawSetProportional(playerid, TD_restaurant_prod[playerid][5], 1);
	PlayerTextDrawSetSelectable(playerid, TD_restaurant_prod[playerid][5], true);
	PlayerTextDrawSetPreviewModel(playerid, TD_restaurant_prod[playerid][5], 2219);
	PlayerTextDrawSetPreviewRot(playerid, TD_restaurant_prod[playerid][5], -220.000000, -200.000000, 200.000000, 1.000000);

	TD_restaurant_prod[playerid][6] = CreatePlayerTextDraw(playerid, 316.799987, 188.657760, "2220");
	PlayerTextDrawLetterSize(playerid, TD_restaurant_prod[playerid][6], 0.495200, 1.196799);
	PlayerTextDrawTextSize(playerid, TD_restaurant_prod[playerid][6], 59.999931, 68.195480);
	PlayerTextDrawAlignment(playerid, TD_restaurant_prod[playerid][6], 2);
	PlayerTextDrawColor(playerid, TD_restaurant_prod[playerid][6], -1);
	PlayerTextDrawUseBox(playerid, TD_restaurant_prod[playerid][6], true);
	PlayerTextDrawBoxColor(playerid, TD_restaurant_prod[playerid][6], 255);
	PlayerTextDrawSetShadow(playerid, TD_restaurant_prod[playerid][6], 0);
	PlayerTextDrawSetOutline(playerid, TD_restaurant_prod[playerid][6], 0);
	PlayerTextDrawBackgroundColor(playerid, TD_restaurant_prod[playerid][6], 51);
	PlayerTextDrawFont(playerid, TD_restaurant_prod[playerid][6], 5);
	PlayerTextDrawSetProportional(playerid, TD_restaurant_prod[playerid][6], 1);
	PlayerTextDrawSetSelectable(playerid, TD_restaurant_prod[playerid][6], true);
	PlayerTextDrawSetPreviewModel(playerid, TD_restaurant_prod[playerid][6], 2220);
	PlayerTextDrawSetPreviewRot(playerid, TD_restaurant_prod[playerid][6], -220.000000, -200.000000, 200.000000, 1.000000);

	TD_restaurant_prod[playerid][7] = CreatePlayerTextDraw(playerid, 398.799987, 188.657760, "2355");
	PlayerTextDrawLetterSize(playerid, TD_restaurant_prod[playerid][7], 0.495200, 1.196799);
	PlayerTextDrawTextSize(playerid, TD_restaurant_prod[playerid][7], 59.999931, 68.195480);
	PlayerTextDrawAlignment(playerid, TD_restaurant_prod[playerid][7], 2);
	PlayerTextDrawColor(playerid, TD_restaurant_prod[playerid][7], -1);
	PlayerTextDrawUseBox(playerid, TD_restaurant_prod[playerid][7], true);
	PlayerTextDrawBoxColor(playerid, TD_restaurant_prod[playerid][7], 255);
	PlayerTextDrawSetShadow(playerid, TD_restaurant_prod[playerid][7], 0);
	PlayerTextDrawSetOutline(playerid, TD_restaurant_prod[playerid][7], 0);
	PlayerTextDrawBackgroundColor(playerid, TD_restaurant_prod[playerid][7], 51);
	PlayerTextDrawFont(playerid, TD_restaurant_prod[playerid][7], 5);
	PlayerTextDrawSetProportional(playerid, TD_restaurant_prod[playerid][7], 1);
	PlayerTextDrawSetSelectable(playerid, TD_restaurant_prod[playerid][7], true);
	PlayerTextDrawSetPreviewModel(playerid, TD_restaurant_prod[playerid][7], 2355);
	PlayerTextDrawSetPreviewRot(playerid, TD_restaurant_prod[playerid][7], -220.000000, -200.000000, 200.000000, 1.000000);
	return 1;
}

stock IsDriver(playerid)
{
	return IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER ? 1 : 0;
}

stock VehicleEmpty(vehicleid)
{
	foreach(Player, i)
	{
		if(IsPlayerInVehicle(i, vehicleid))
			return 0;
	}
	return 1;
}

stock GetVehicleZone(vehicleid, zone[], len)
{
	new Float:x,
		Float:y,
		Float:z;

	GetVehiclePos(vehicleid, x, y, z);
	for(new i = 0; i != sizeof(gSAZones); i++ )
	{
		if(x >= gSAZones[i][SAZONE_AREA][0] && x <= gSAZones[i][SAZONE_AREA][3] && y >= gSAZones[i][SAZONE_AREA][1] && y <= gSAZones[i][SAZONE_AREA][4])
			return format(zone, len, gSAZones[i][SAZONE_NAME], 0);
	}
	return 0;
}

stock GetCoords2DZone(Float:x, Float:y, zone[], len)
{
	for(new i = 0; i != sizeof(gSAZones); i++ )
	{
		if(x >= gSAZones[i][SAZONE_AREA][0] && x <= gSAZones[i][SAZONE_AREA][3] && y >= gSAZones[i][SAZONE_AREA][1] && y <= gSAZones[i][SAZONE_AREA][4])
			return format(zone, len, gSAZones[i][SAZONE_NAME], 0);
	}
	return 0;
}

stock GetPlayer2DZone(playerid, zone[], len)
{
	new Float:x,
		Float:y,
		Float:z;
	GetPlayerPos(playerid, x, y, z);

	if(GetWorld(playerid) || GetInterior(playerid))
	{
		x = PlayerInfo[playerid][pLocationPos][0];
		y = PlayerInfo[playerid][pLocationPos][1];
		z = PlayerInfo[playerid][pLocationPos][2];
	}

	for(new i = 0; i != sizeof(gSAZones); i++)
	{
		if(x >= gSAZones[i][SAZONE_AREA][0] && x <= gSAZones[i][SAZONE_AREA][3] && y >= gSAZones[i][SAZONE_AREA][1] && y <= gSAZones[i][SAZONE_AREA][4])
		return format(zone, len, gSAZones[i][SAZONE_NAME], 0);
	}
	return 0;
}

stock ErrorMsg(playerid, message[], time = 3)
{
	format(ErrorInfo[playerid][0][eMsg],80,"%s",ErrorInfo[playerid][1][eMsg]);
	ErrorInfo[playerid][0][eExpire] = ErrorInfo[playerid][1][eExpire];
	format(ErrorInfo[playerid][1][eMsg],80,"%s",ErrorInfo[playerid][2][eMsg]);
	ErrorInfo[playerid][1][eExpire] = ErrorInfo[playerid][2][eExpire];
	format(ErrorInfo[playerid][2][eMsg],80,"%s",message);
	ErrorInfo[playerid][2][eExpire] = time;
	PlaySound(playerid,1085);
	RefreshErrorMsg(playerid);
	return 1;
}

stock InfoMSG(playerid, message[], delay)
{
	TextDrawSetString(infotxt[playerid], message);
	TextDrawShowForPlayer(playerid, infotxt[playerid]);
	infotxt_expire{playerid} = delay;
	return 1;
}

stock InfoMSG2(playerid, header[], message[], delay)
{
	TD_SendMessage(playerid, message, header, delay, 12840, 10.0000, 100.000000, 300.000000, strlen(message));
	return 1;
}

stock RefreshErrorMsg(playerid)
{
	new sendstr[256],
		tmp[80],
		display = false;

	if(ErrorInfo[playerid][0][eExpire] || ErrorInfo[playerid][1][eExpire] || ErrorInfo[playerid][2][eExpire])
	    display = true;

	format(sendstr,sizeof(sendstr),"~r~");

	if(ErrorInfo[playerid][2][eExpire])
	{
		format(tmp,sizeof(tmp),"~n~%s",ErrorInfo[playerid][2][eMsg]);
		strins(sendstr,tmp,strlen(sendstr));
	}

	TextDrawSetString(errormsg[playerid],sendstr);

	if(display) TextDrawShowForPlayer(playerid,errormsg[playerid]);
	else TextDrawHideForPlayer(playerid,errormsg[playerid]);
}

stock FirstNameLetters(name[MAX_PLAYER_NAME])
{
	new
	strpos = strfind(name, "_", true),
	string[4];

	format(string, sizeof(string), "%c%c", name[0], name[strpos+1]);
	return string;
}


stock GetInsurancePrice(modelid)
{
	for(new i = 0; i < sizeof(InsurancesPrice); i++)
	{
		if(modelid == InsurancesPrice[i][insuranceModel])
			return InsurancesPrice[i][insurancePrice];
	}
	return 350;
}

forward GarageInsert(garageid);
public GarageInsert(garageid)
{
	GarageInfo[garageid][garageID] = cache_insert_id();
	return 1;
}

forward OnNoteInsert(playerid, noteid);
public OnNoteInsert(playerid, noteid)
{
	PlayerNotes[playerid][noteid][noteID] = cache_insert_id();
	return 1;
}

forward OnContactInsert(playerid, contactid);
public OnContactInsert(playerid, contactid)
{
    PlayerContacts[playerid][contactid][contactID] = cache_insert_id();
	return 1;
}
//==================================Player Tickets==================================//
stock CountPlayerTickets(playerid)
{
	new count = 0;
	for(new i = 0; i < MAX_PLAYER_TICKETS; i++)
	{
		if(pTickets[playerid][i][tID] == 0)
		    continue;

		count++;
	}
	return count;
}

forward OnTicketInsert(playerid, tickid);
public OnTicketInsert(playerid, tickid)
{
	pTickets[playerid][tickid][tID] = cache_insert_id();
	return 1;
}

stock CountVehicleTickets(vehicle)
{
	new count = 0;
	for(new i = 0; i < MAX_CAR_TICKETS; i++)
	{
		if(vTickets[vehicle][i][tID] == 0)
		    continue;

		count++;
	}
	return count;
}

forward OnTicketVehicleInsert(vehicle, tickid);
public OnTicketVehicleInsert(vehicle, tickid)
{
	vTickets[vehicle][tickid][tID] = cache_insert_id();
	return 1;
}
//==================================Player Tickets==================================//
stock AlarmOn(vehicle)
{
    if(VehicleInfo[vehicle][carAlarm] < 1)
        return 1;

    new engine,lights,alarm,doors,bonnet,boot,objective;
    GetVehicleParamsEx(vehicle,engine,lights,alarm,doors,bonnet,boot,objective);
    SetVehicleParamsEx(vehicle,engine,lights,VEHICLE_PARAMS_ON,doors,bonnet,boot,objective);

    if(VehicleInfo[vehicle][carAlarm] < 2)
  		return 1;

    new zone_name[MAX_ZONE_NAME];

	GetVehicleZone(vehicle, zone_name, MAX_ZONE_NAME);
	SendFactionMessage(LSPD, COLOR_LIGHTRED, "[Alarma vehicul] %s in %s.", VehicleNames[GetVehicleModel(vehicle)-400], zone_name);

    VehicleInfo[vehicle][carObjectiveTime] = 150;
    VehicleInfo[vehicle][carAlarmTime] = 30;

	GetVehicleParamsEx(vehicle,engine,lights,alarm,doors,bonnet,boot,objective);
	SetVehicleParamsEx(vehicle,engine,lights,VEHICLE_PARAMS_ON,doors,bonnet,boot,VEHICLE_PARAMS_ON);

    if(VehicleInfo[vehicle][carAlarm] < 3)
		return 1;

	foreach(Player, i)
	{
		if(!IsPlayerLogged(i) || PlayerInfo[i][pCarKey] != vehicle)
			continue;

		if(VehicleInfo[vehicle][carAlarm] == 4)
			return SCM(i, COLOR_YELLOWG, "SMS: Alarma vehiculului tau a fost declansata.");
		else
			return SendClientMessageEx(i, COLOR_YELLOWG, "SMS: Alarma vehiculului tau %s a fost declansata in zona: %s.", VehicleNames[GetVehicleModel(vehicle)-400], zone_name);
	}
	return 1;
}

stock AlarmOff(vehicleid)
{
    VehicleInfo[vehicleid][carObjectiveTime] = 0;
    VehicleInfo[vehicleid][carAlarmTime] = 30;
    new engine,lights,alarm,doors,bonnet,boot,objective;
	GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
	SetVehicleParamsEx(vehicleid,engine,lights,VEHICLE_PARAMS_OFF,doors,bonnet,boot,VEHICLE_PARAMS_OFF);
	return 1;
}

stock StartVehicleUpgrade(playerid, vehicleid, type, cost, level = 0, color2 = 0)
{
	if(VehicleInfo[vehicleid][carOwnerID] != PlayerInfo[playerid][pID])
	    return SendErrorMessage(playerid, "Acest vehicul iti apartine.");

    if(VehicleInfo[vehicleid][carAttach3DtextUse] != 0)
		return SCM(playerid, COLOR_LIGHTRED, "Operatiunea este in progres.");

    VehicleInfo[vehicleid][carAttach3DtextUse] = type;
	SetTimerEx("VehicleUpgrade", 1, 0, "iiii", playerid, cost, level, color2);
	SetPVarInt(playerid, #vehicle_upgrade_timer, 0);
	return 1;
}

forward VehicleUpgrade(playerid, cost, level, color2);
public VehicleUpgrade(playerid, cost, level, color2)
{
	new vehicleid = PlayerInfo[playerid][pCarKey],
	    model = GetVehicleModel(vehicleid);

	if(0 == IsValidVehicle(vehicleid) || 0 == IsPlayerLogged(playerid))
	{
	    DeletePVar(playerid, #vehicle_upgrade_timer);
		UpdateDynamic3DTextLabelText(status_update[vehicleid], 0x33AA3300, "(( ---------- ))");
		VehicleInfo[vehicleid][carAttach3DtextUse] = 0;
		return 1;
	}

	new upgrade_name[11][32] =
		{"Respawneaza (tracteaza) vehicul", "Avanseaza incuietoarea", "Avanseaza alarma", "Avanseaza imobilizarea","Cumpara asigurare", "?", "Inmatriculare vehicul", "?", "Inlocuieste motorul", "Schimba culoarea vehiculului", "Inlocuieste bateria"};

	new string[128] = "(( ",
	    upgrade = 0;

	for(new i; i != 10; i++)
	{
	    if(GetPVarInt(playerid, #vehicle_upgrade_timer) >= i)
			strcat(string, "I");
		else
		    strcat(string, "-");
	}

	format(string, sizeof(string), "%s ))\n%s", string, upgrade_name[VehicleInfo[vehicleid][carAttach3DtextUse]-1]);
	UpdateDynamic3DTextLabelText(status_update[vehicleid], 0x33AA33FF, string);
	SetPVarInt(playerid, #vehicle_upgrade_timer, GetPVarInt(playerid, #vehicle_upgrade_timer) + 1);

	if(GetPVarInt(playerid, #vehicle_upgrade_timer) == 11)
	{
	    upgrade = VehicleInfo[vehicleid][carAttach3DtextUse];
	    DeletePVar(playerid, #vehicle_upgrade_timer);
		UpdateDynamic3DTextLabelText(status_update[vehicleid], 0x33AA3300, "(( ---------- ))");
		VehicleInfo[vehicleid][carAttach3DtextUse] = 0;
	}
	else
		SetTimerEx("VehicleUpgrade", 1000, 0, "iiii", playerid, cost, level, color2);

	if(upgrade == 0)
	    return 1;

	new dealer = -1;
	if(upgrade != 1 && upgrade != 7 && (dealer = ModShop_Nearest(playerid)) == -1)
 		return SendErrorMessage(playerid, "Nu esti langa un tuning.");

	if(upgrade == 1)
	{
	    if(GetCash(playerid) < cost)
			return SendNotCash(playerid);

		GiveCash(playerid, -cost);

		RespawnVehicle(vehicleid);
		return SendClientMessageEx(playerid, COLOR_GREEN, "Vehiculul tau %s a fost tractat (respawnat) cu succes.", VehicleNames[model-400]);
	}
	else if(upgrade == 2)
	{
		if(GetCash(playerid) < cost)
			return SendNotCash(playerid);

		GiveCash(playerid, -cost);
		SendClientMessageEx(playerid, COLOR_GREEN, "Incuietoarea vehiculului tau a fost avansata la nivelul %i. Ai fost taxat cu $%i.", level, cost);
        UnFreezePlayer(playerid);

		VehicleInfo[vehicleid][carLock] = level;
		Save_Car(vehicleid);

		GiveBizCash(dealer, cost / 100 * 80);
		return 1;
	}
	else if(upgrade == 3)
	{
		if(GetCash(playerid) < cost)
			return SendNotCash(playerid);

		GiveCash(playerid, -cost);
		SendClientMessageEx(playerid, COLOR_GREEN, "Alarma vehiculului tau a fost avansata la nivelul %i. Ai fost taxat cu $%i.", level, cost);
        UnFreezePlayer(playerid);

		VehicleInfo[vehicleid][carAlarm] = level;
		Save_Car(vehicleid);

		GiveBizCash(dealer, cost / 100 * 80);
		return 1;
	}
	else if(upgrade == 4)
	{
	    if(GetCash(playerid) < cost)
			return SendNotCash(playerid);

		GiveCash(playerid, -cost);
		SendClientMessageEx(playerid, COLOR_GREEN, "Imobilizarea vehiculului tau a fost avansata la nivelul %i. Ai fost taxat cu $%i.", level, cost);
        UnFreezePlayer(playerid);

		VehicleInfo[vehicleid][carImmob] = level;
		Save_Car(vehicleid);

		GiveBizCash(dealer, cost / 100 * 80);
		return 1;
	}
	else if(upgrade == 5)
	{
        if(GetCash(playerid) < cost)
			return SendNotCash(playerid);

		GiveCash(playerid, -cost);
		SendClientMessageEx(playerid, COLOR_GREEN, "Vehiculul tau are acum %i asigurari. Ai fost taxat cu $%i.", level, cost);
        UnFreezePlayer(playerid);

		VehicleInfo[vehicleid][carInsurance] = level;
		Save_Car(vehicleid);

		GiveBizCash(dealer, cost / 100 * 80);
		return 1;
	}
	else if(upgrade == 6)
	{
	    if(GetCash(playerid) < cost)
			return SendNotCash(playerid);

		GiveCash(playerid, -cost);
		SendClientMessageEx(playerid, COLOR_GREEN, "Vehiculul a fost armurat (nivel: %i). Ai fost taxat cu $%i.", level, cost);
        UnFreezePlayer(playerid);

		VehicleInfo[vehicleid][carArmour] += float(level);
		if(VehicleInfo[vehicleid][carArmour] > 250.0)
		    VehicleInfo[vehicleid][carArmour] = 250.0;

		SetVehicleHealth(vehicleid, MAX_HEALTH_VEHICLE + VehicleInfo[vehicleid][carArmour]);
		UpdateVehicleDamageStatus(vehicleid, 0, 0, 0, 0);
		Save_Car(vehicleid);

		GiveBizCash(dealer, cost / 100 * 80);
		return 1;
	}
	else if(upgrade == 7)
	{
		if(GetCash(playerid) < cost)
			return SendNotCash(playerid);

        if(0 == IsVehicleInRangeOfPoint(vehicleid, 15.0, 1536.0444,-1674.1277,13.3828) && 0 == IsVehicleInRangeOfPoint(vehicleid, 15.0, 635.3169,-576.1884,16.3359))
			return SendErrorMessage(playerid, "");

		format(VehicleInfo[vehicleid][carPlate], 24, "%s", GetVehicleNumber());
		VehicleInfo[vehicleid][carRegistered] = 1;
		SetVehicleNumberPlate(vehicleid, VehicleInfo[vehicleid][carPlate]);
		RespawnVehicle(vehicleid, 1);

		GiveCash(playerid, -cost);
		SendClientMessageEx(playerid, COLOR_GREEN, "Vehiculul a fost inregistrat pentru $%i. Noul tau numar de inmatriculare este: %s", cost, VehicleInfo[vehicleid][carPlate]);
		UnFreezePlayer(playerid);

		new mes[128];
		format(mes, sizeof(mes), "", VehicleInfo[vehicleid][carPlate], cost);
		JobMessage(playerid, mes, 6);

		Save_Car(vehicleid);

		GiveBizCash(dealer, cost / 100 * 80);
        return 1;
	}
	else if(upgrade == 8)
	{
	    if(GetCash(playerid) < cost)
			return SendNotCash(playerid);

		format(VehicleInfo[vehicleid][carPlate], 24, "_");
		VehicleInfo[vehicleid][carRegistered] = 0;
		SetVehicleNumberPlate(vehicleid, "_");
		RespawnVehicle(vehicleid, 1);
		Save_Car(vehicleid);

		SCM(playerid, COLOR_GREEN, "Numerele de inmatriculare au fost inlaturate.");
		JobMessage(playerid, "", 2);
		UnFreezePlayer(playerid);
		return 1;
	}
	else if(upgrade == 9)
	{
		if(GetCash(playerid) < cost)
			return SendNotCash(playerid);

		format(string, sizeof(string), "Motor: ~w~100.00 HP (-$%i).", cost);
		JobMessage(playerid, string, 6);

        SendClientMessageEx(playerid, COLOR_GREEN, "Inlocuirea motorului a fost realizata. Ai fost taxat cu $%i.", cost);
		GiveCash(playerid, -cost);
		UnFreezePlayer(playerid);

		VehicleInfo[vehicleid][carEngine] = 100.00;

		GiveBizCash(dealer, cost / 100 * 80);
		return 1;
	}
	else if(upgrade == 10)
	{
	    if(GetCash(playerid) < cost)
			return SendNotCash(playerid);

		SendClientMessageEx(playerid, COLOR_GREEN, "Vehiculul tau a fost revopsit in schimbul sumei de $%i.", cost);
		GiveCash(playerid, -cost);
		UnFreezePlayer(playerid);

		ChangeVehicleColor(vehicleid, level, color2);
		VehicleInfo[vehicleid][carColor1] = level;
		VehicleInfo[vehicleid][carColor2] = color2;
		Save_Car(vehicleid);

		GiveBizCash(dealer, cost / 100 * 80);
	    return 1;
	}
	else if(upgrade == 11)
	{
		if(GetCash(playerid) < cost)
			return SendNotCash(playerid);

		format(string, sizeof(string), "~w~Baterie: 100.00 HP (-$%i).", cost);
		JobMessage(playerid, string, 6);

        SendClientMessageEx(playerid, COLOR_GREEN, "Inlocuirea bateriei a fost realizata. Ai fost taxat cu $%i.", cost);
		GiveCash(playerid, -cost);
		UnFreezePlayer(playerid);

		VehicleInfo[vehicleid][carBattery] = 100.00;

		GiveBizCash(dealer, cost / 100 * 80);
		return 1;
	}
	return 1;
}

stock ResetVariables(playerid)
{
    pTemp[playerid][pPizzaBoy] = 0;
    pTemp[playerid][pDemolitionTime] = 0;
	pTemp[playerid][pDrugUse] = 0;
	pTemp[playerid][pDrugTime] = 0;
	pTemp[playerid][pDrugChgWeather] = 0;
    pTemp[playerid][pLicenseExam] = 0;
    TogglePlayerAllDynamicRaceCPs(playerid, false);
    DisableWaypoint(playerid);
    pTemp[playerid][pWepPlayer] = INVALID_PLAYER_ID;
	pTemp[playerid][pWepPrice] = 0;
	pTemp[playerid][pRentPlayer] = INVALID_PLAYER_ID;
	pTemp[playerid][pRentPrice] = 0;
    pTemp[playerid][pHouseHouse] = -1;
	pTemp[playerid][pHousePrice] = 0;
	pTemp[playerid][pHousePlayer] = INVALID_PLAYER_ID;
    pTemp[playerid][pRentveh] = 0;
    pTemp[playerid][pServePlayer] = INVALID_PLAYER_ID;
	pTemp[playerid][pServeType] = 0;
	pTemp[playerid][pGreetPlayer] = INVALID_PLAYER_ID;
	pTemp[playerid][pGreetType] = 0;
    pTemp[playerid][pNews] = 0;
	pTemp[playerid][pFishTime] = 0;
  	pTemp[playerid][pCallOn] = 0;
    pTemp[playerid][pEditBort] = 0;
    pTemp[playerid][pInterview] = INVALID_PLAYER_ID;
	pTemp[playerid][pInterviewPlayer] = INVALID_PLAYER_ID;
	pTemp[playerid][pHealPlayer] = INVALID_PLAYER_ID;
    pTemp[playerid][pFactionPlayer] = INVALID_PLAYER_ID;
    pTemp[playerid][pFriskPlayer] = INVALID_PLAYER_ID;
	pTemp[playerid][pSpecPlayer] = INVALID_PLAYER_ID;
	pTemp[playerid][pHirePlayer] = INVALID_PLAYER_ID;
	pTemp[playerid][pCarPlayer] = INVALID_PLAYER_ID;
	pTemp[playerid][pCarPrice] = 0;
    pTemp[playerid][pHealTime] = 0;

    pTemp[playerid][pRamType] = 0;
    pTemp[playerid][pRamTime] = 0;
    if(IsValidDynamicObject(pTemp[playerid][pRamObj]))
	{
		DestroyDynamicObject(pTemp[playerid][pRamObj]);
		pTemp[playerid][pRamObj] = INVALID_OBJECT_ID;
	}

	PlayerInfo[playerid][pArmour] = 0.0;

	if(pTemp[playerid][pFlashTime]) pTemp[playerid][pFlashTime] = 1;

	if(pTemp[playerid][p3DMenu] != -1)
	{
    	Destroy3DMenu(pTemp[playerid][p3DMenu]);
		pTemp[playerid][p3DMenu] = -1;
	}

	if(IsPlayerPhoneCreated(playerid))
		Phone_Destroy(playerid);

	if(pTemp[playerid][pCallLine] != INVALID_PLAYER_ID)
	{
	    SendClientMessage(pTemp[playerid][pCallLine], -1, "> Fara semnal...");
	    CancelCall(playerid);
	}
	pTemp[playerid][pEmergency] = 0;

	if (GetPVarInt(playerid, #selfie))
        DeletePVar(playerid, #selfie);

    if(pTemp[playerid][pTracePlayer] != INVALID_PLAYER_ID)
	{
	    pTemp[playerid][pTracePlayer] = INVALID_PLAYER_ID;
		pTemp[playerid][pTraceStage] = 0;
		if(pTemp[playerid][pTraceGZ] != -1) GangZoneDestroy(pTemp[playerid][pTraceGZ]);
		pTemp[playerid][pTraceGZ] = -1;
	}

	if(pTemp[playerid][pCargoID])
	{
		RemovePlayerAttachedObject(playerid, ATTACH_HANDS);
        pTemp[playerid][pCargoID] = 0;
	}
	return 1;
}

stock ResetVehicleStuff(vehicleid)
{
	if(IsABicycle(vehicleid))
	    return 1;

    new panels, doors, lights, tires;
	GetVehicleDamageStatus(vehicleid, panels, doors, lights, tires);

	if(VehicleInfo[vehicleid][carInsurance] == 0)
	{
		for(new i = 0; i < MAX_VEHICLE_INVENTORY; i++)
		{
			VehicleInfo[vehicleid][carInv][i] = 0;
			VehicleInfo[vehicleid][carInvAmount][i] = 0;
		}
		VehicleInfo[vehicleid][carPaintJob] = 3;
		VehicleInfo[vehicleid][carRadio] = 0;
		VehicleInfo[vehicleid][carComps] = 0;


		UpdateVehicleDamageStatus(vehicleid, 17895697, 16843009, 15, tires);

		for(new i = 0; i < 14; i++)
		{
		    if(VehicleInfo[vehicleid][carComponent][i] != 0)
		        RemoveVehicleComponent(vehicleid, VehicleInfo[vehicleid][carComponent][i]);

            VehicleInfo[vehicleid][carComponent][i] = 0;
		}
	}
	else
	{
		if(VehicleInfo[vehicleid][carInsurance] != 3)
		{
			for(new i = 0; i < 14; i++)
			{
			    if(VehicleInfo[vehicleid][carComponent][i] != 0)
			        RemoveVehicleComponent(vehicleid, VehicleInfo[vehicleid][carComponent][i]);

	            VehicleInfo[vehicleid][carComponent][i] = 0;
			}

            VehicleInfo[vehicleid][carPaintJob] = 3;
			VehicleInfo[vehicleid][carRadio] = 0;
			VehicleInfo[vehicleid][carComps] = 0;

			if(VehicleInfo[vehicleid][carInsurance] < 2)
				UpdateVehicleDamageStatus(vehicleid, 17895697, 16843009, 15, tires);
		}

		if(VehicleInfo[vehicleid][carDestroyed]++ >= 4)
		{
		    VehicleInfo[vehicleid][carDestroyed] = 0;
		    VehicleInfo[vehicleid][carInsurance] = 0;
		}
	}

	if(VehicleInfo[vehicleid][carEngine] > 0.0)
	{
		VehicleInfo[vehicleid][carEngine] -= 5.0 + random(6);
		if(VehicleInfo[vehicleid][carEngine] <= 0.0)
			VehicleInfo[vehicleid][carEngine] = 0.0;
	}

	if(VehicleInfo[vehicleid][carBattery] > 0.0)
	{
		VehicleInfo[vehicleid][carBattery] -= 10.0;
		if(VehicleInfo[vehicleid][carBattery] <= 0.0)
			VehicleInfo[vehicleid][carBattery] = 0.0;
	}

	new userid = GetVehicleOwner(vehicleid);
	if(userid != INVALID_PLAYER_ID)
	{
	    VehicleInfo[vehicleid][carOwnerPlayer] = INVALID_PLAYER_ID;
        SendErrorMessage(userid, "Vehiculul tau %s este deteliorat.", VehicleNames[GetVehicleModel(vehicleid)-400]);
        SendErrorMessage(userid, "INFO: Durabilitatea motorului a scazut la {FFFFFF}%.2f{FF6347}. Durabilitatea bateriei a scazut la {FFFFFF}%.2f{FF6347}.", VehicleInfo[vehicleid][carEngine], VehicleInfo[vehicleid][carBattery]);
	}

	Save_Car(vehicleid);
    VehicleInfo[vehicleid][carDeath] = 1;
	//DestroyVehicle(vehicleid);
	return 1;
}

stock HasComponent(vehicleid, compid)
{
	for(new i = 0; i < 14; i++)
	{
		if(VehicleInfo[vehicleid][carComponent][i] == compid)
			return 1;
	}
	return 0;
}

stock SetVehicleComponent(vehicleid, component, slot)
{
	VehicleInfo[vehicleid][carComponent][slot] = component;
	AddVehicleComponent(vehicleid, component);
	Save_Car(vehicleid);
	return 1;
}

stock GetDriver(vehicleid)
{
	foreach(Player, i)
	{
		if(IsPlayerInVehicle(i, vehicleid) && IsDriver(i))
			return i;
	}
	return -1;
}

stock CheckPMBlockList(playerid)
{
	foreach(Player, i)
	{
	    if(0 == IsPlayerLogged(i) || people_blocking[i][playerid] != 1)
	        continue;

        SendClientMessageEx(i, COLOR_INFO, "(( %s s-a deconectat. ))", GetNameEx(playerid), playerid);
		people_blocking[i][playerid] = 0;
	}
	return 1;
}

stock SetHouseInterior(houseid, id)
{
	HouseInfo[houseid][hExitX] = AdminTeles[id][telesPosX];
	HouseInfo[houseid][hExitY] = AdminTeles[id][telesPosY];
	HouseInfo[houseid][hExitZ] = AdminTeles[id][telesPosZ];
	HouseInfo[houseid][hExitInt] = AdminTeles[id][telesInt];
	Save_House(houseid);
	return 1;
}

stock SetBizInterior(playerid, bizid, id)
{
    BizInfo[bizid][bizExitX] = AdminTeles[id][telesPosX];
	BizInfo[bizid][bizExitY] = AdminTeles[id][telesPosY];
	BizInfo[bizid][bizExitZ] = AdminTeles[id][telesPosZ];
	BizInfo[bizid][bizExitInt] = AdminTeles[id][telesInt];
	SendClientMessageEx(playerid, COLOR_GREEN,"ID afacere: %i - Interior: %s", bizid, AdminTeles[id][telesMapName]);
	Save_Business(bizid);
	return 1;
}

stock SetAparmentInterior(playerid, apartid, int)
{
	if(int == 1)
	{
		ApartInfo[apartid][aExitX] = 162.9840;
		ApartInfo[apartid][aExitY] = -24.6746;
		ApartInfo[apartid][aExitZ] = 996.4470;
		ApartInfo[apartid][aExitInt] = 1;
		SendClientMessageEx(playerid, COLOR_GREEN, "ID complex: %i - Interior: Ghetto Hotel", apartid);
	}
	else if(int == 2)
	{
		ApartInfo[apartid][aExitX] = 2099.8064;
		ApartInfo[apartid][aExitY] = -1180.0836;
		ApartInfo[apartid][aExitZ] = 1029.6458;
		ApartInfo[apartid][aExitInt] = 1;
		SendClientMessageEx(playerid, COLOR_GREEN, "ID complex: %i - Interior: Ghetto Hotel(2)", apartid);
	}
	else if(int == 3)
	{
		ApartInfo[apartid][aExitX] = 313.3590;
		ApartInfo[apartid][aExitY] = 53.9657;
		ApartInfo[apartid][aExitZ] = 1072.7437;
		ApartInfo[apartid][aExitInt] = 1;
		SendClientMessageEx(playerid, COLOR_GREEN, "ID complex: %i - Interior: Hotel", apartid);
	}
	else if(int == 4)
	{
		ApartInfo[apartid][aExitX] = 787.8120;
		ApartInfo[apartid][aExitY] = -896.5082;
		ApartInfo[apartid][aExitZ] = 482.8069;
		ApartInfo[apartid][aExitInt] = 1;
		SendClientMessageEx(playerid, COLOR_GREEN, "ID complex: %i - Interior: Hotel(2)", apartid);
	}
	else if(int == 5)
	{
		ApartInfo[apartid][aExitX] = 1528.6999511719;
		ApartInfo[apartid][aExitY] = -26.700000762939;
		ApartInfo[apartid][aExitZ] = 1002.5;
		ApartInfo[apartid][aExitInt] = 1;
		SendClientMessageEx(playerid, COLOR_GREEN, "ID complex: %i - Interior: Normal", apartid);
	}
	else if(int == 6)
	{
		ApartInfo[apartid][aExitX] = 665.6864;
		ApartInfo[apartid][aExitY] = -673.1936;
		ApartInfo[apartid][aExitZ] = 787.2360;
		ApartInfo[apartid][aExitInt] = 1;
		SendClientMessageEx(playerid, COLOR_GREEN, "ID complex: %i - Interior: Ghetto", apartid);
	}
	else if(int == 7)
	{
		ApartInfo[apartid][aExitX] = 1469.9661;
		ApartInfo[apartid][aExitY] = -190.8232;
		ApartInfo[apartid][aExitZ] = 1031.9879;
		ApartInfo[apartid][aExitInt] = 1;
		SendClientMessageEx(playerid, COLOR_GREEN, "ID complex: %i - Interior: Ghetto(2)", apartid);
	}
	else if(int == 8)
	{
		ApartInfo[apartid][aExitX] = 1632.6002;
		ApartInfo[apartid][aExitY] = 744.2397;
		ApartInfo[apartid][aExitZ] = 900.9210;
		ApartInfo[apartid][aExitInt] = 1;
		SendClientMessageEx(playerid, COLOR_GREEN, "ID complex: %i - Interior: Stil chinezesc", apartid);
	}
	else if(int == 9)
	{
		ApartInfo[apartid][aExitX] = 1256.0890;
		ApartInfo[apartid][aExitY] = -1848.6511;
		ApartInfo[apartid][aExitZ] = 612.0620;
		ApartInfo[apartid][aExitInt] = 1;
		SendClientMessageEx(playerid, COLOR_GREEN, "ID complex: %i - Interior: Normal(2)", apartid);
	}
	else if(int == 10)
	{
		ApartInfo[apartid][aExitX] = 2795.1311;
		ApartInfo[apartid][aExitY] = -1215.3330;
		ApartInfo[apartid][aExitZ] = 984.7050;
		ApartInfo[apartid][aExitInt] = 1;
		SendClientMessageEx(playerid, COLOR_GREEN, "ID complex: %i - Interior: Normal(3)", apartid);
	}
	else if(int == 11)
	{
		ApartInfo[apartid][aExitX] = -152.8758;
		ApartInfo[apartid][aExitY] = 37.3332;
		ApartInfo[apartid][aExitZ] = 1001.0859;
		ApartInfo[apartid][aExitInt] = 1;
		SendClientMessageEx(playerid, COLOR_GREEN, "ID complex: %i - Interior: Hotel(3)", apartid);
	}
	else if(int == 12)
	{
		ApartInfo[apartid][aExitX] = -528.3482;
		ApartInfo[apartid][aExitY] = -361.4522;
		ApartInfo[apartid][aExitZ] = 1001.0859;
		ApartInfo[apartid][aExitInt] = 1;
		SendClientMessageEx(playerid, COLOR_GREEN, "ID complex: %i - Interior: Hotel(4)", apartid);
	}
	else if(int == 13)
	{
		ApartInfo[apartid][aExitX] = -2055.2624511719;
		ApartInfo[apartid][aExitY] = 1013.7964477539;
		ApartInfo[apartid][aExitZ] = 1464.8419189453;
		ApartInfo[apartid][aExitInt] = 1;
		SendClientMessageEx(playerid, COLOR_GREEN, "ID complex: %i - Interior: Ghetto(3)", apartid);
	}
	else if(int == 14)
	{
		ApartInfo[apartid][aExitX] = 619.0;
		ApartInfo[apartid][aExitY] = -1397.0;
		ApartInfo[apartid][aExitZ] = 1000.0;
		ApartInfo[apartid][aExitInt] = 1;
		SendClientMessageEx(playerid, COLOR_GREEN, "ID complex: %i - Interior: Special(1)", apartid);
	}

	else if(int == 15)
	{
		ApartInfo[apartid][aExitX] = 1301.7100;
		ApartInfo[apartid][aExitY] = -1467.8789;
		ApartInfo[apartid][aExitZ] = 3001.0859;
		ApartInfo[apartid][aExitInt] = 16;
		SendClientMessageEx(playerid, COLOR_GREEN, "ID complex: %i - Interior: Special(2)", apartid);
	}
	else if(int == 16)
	{
		ApartInfo[apartid][aExitX] = 1767.8296;
		ApartInfo[apartid][aExitY] = -1541.9338;
		ApartInfo[apartid][aExitZ] = 1187.3810;
		ApartInfo[apartid][aExitInt] = 14;
		SendClientMessageEx(playerid, COLOR_GREEN, "ID complex: %i - Interior: Motel", apartid);
	}
	else if(int == 17)
	{
		ApartInfo[apartid][aExitX] = 2168.4255;
		ApartInfo[apartid][aExitY] = -1720.0083;
		ApartInfo[apartid][aExitZ] = 1730.8040;
		ApartInfo[apartid][aExitInt] = 15;
		SendClientMessageEx(playerid, COLOR_GREEN, "ID complex: %i - Interior: Motel(2)", apartid);
	}
	Save_Apart(apartid);
	return 1;
}

stock GetVehicleNumber()
{
	new str[24];
	new allowedchars[][2] =
	{
		"A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z" //26
	};

	format(str, 24, "%i%s%s%s%i%i%i", random(9), allowedchars[random(sizeof(allowedchars))], allowedchars[random(sizeof(allowedchars))], allowedchars[random(sizeof(allowedchars))], random(9), random(9), random(9));
	return str;
}
forward Float:GetArmour(playerid);
public Float:GetArmour(playerid)
{
	new Float:armour;
	GetPlayerArmour(playerid, armour);
	return armour;
}


stock split(const strsrc[], strdest[][], delimiter)
{
	new i, li;
	new aNum;
	new len;
	while(i <= strlen(strsrc))
	{
		if(strsrc[i] == delimiter || i == strlen(strsrc))
		{
			len = strmid(strdest[aNum], strsrc, li, i, 128);
			strdest[aNum][len] = 0;
			li = i+1;
			aNum++;
		}
		i++;
	}
	return 1;
}

stock GetInitials(const string[])
{
	new
	    ret[64],
		index = 0;

	for (new i = 0, l = strlen(string); i != l; i ++)
	{
	    if (('A' <= string[i] <= 'Z') && (i == 0 || string[i - 1] == ' '))
			ret[index++] = string[i];
	}
	return ret;
}

stock isLeader(playerid)
{
	return PlayerInfo[playerid][pFaction] != 0 && PlayerInfo[playerid][pRank] == Factions[PlayerInfo[playerid][pFaction]][fRanks] ? 1 : 0;
}

stock AddCriminalRecord(playerid, const charge[], officer)
{
	if(!strlen(charge))
	    return SendErrorMessage(playerid, "Textul introdus este prea scurt.");

    new query[256];
	mysql_format(dbHandle, query, sizeof(query),"INSERT INTO `criminalrecords` (userid, charge, date, officer) VALUES(%i, '%e', '%s', %i)", PlayerInfo[playerid][pID], charge, GetFullDate(), PlayerInfo[officer][pID]);
	mysql_tquery(dbHandle, query);
	return 1;
}

stock FindVehicleByPlate(plate[])
{
	foreach(new i:Vehicle)
	{
		if(CompareStrings(plate, VehicleInfo[i][carPlate]))
			return i;
	}
	return 0;
}

stock CreateStrip(Float:x, Float:y, Float:z, Float:angle)
{
	for(new i; i != MAX_SPIKE; i++)
	{
	    if(SpikeInfo[i][sCreated] == 1)
	        continue;

        SpikeInfo[i][sObject] = CreateDynamicObject(2899, x, y, z-0.9, 0, 0, angle-90);
		SpikeInfo[i][sCreated] = 1;
		SpikeInfo[i][sX] = x;
		SpikeInfo[i][sY] = y;
		SpikeInfo[i][sZ] = z-0.9;
		return i;
	}
	return -1;
}

stock GetNextHouseTrunkSlot(house)
{
	for(new i = 0; i < MAX_HOUSE_INVENTORY; i++)
	{
		if(HouseInfo[house][hInv][i] == 0)
			return i;
	}
	return -1;
}

stock VehicleTrunk(vehicle, bool:toggle)
{
    new engine,lights,alarm,doors,bonnet,boot,objective;
	GetVehicleParamsEx(vehicle,engine,lights,alarm,doors,bonnet,boot,objective);
	if(toggle)
	{
		SetVehicleParamsEx(vehicle,engine,lights,alarm,doors,bonnet, 1,objective);
		VehicleInfo[vehicle][carTrunkLock] = 1;
	}
	else
	{
		SetVehicleParamsEx(vehicle,engine,lights,alarm,doors,bonnet, 0, objective);
		VehicleInfo[vehicle][carTrunkLock] = 0;
	}
	return 1;
}

stock VehicleHood(vehicle, bool:toggle)
{
    new engine,lights,alarm,doors,bonnet,boot,objective;
	GetVehicleParamsEx(vehicle,engine,lights,alarm,doors,bonnet,boot,objective);
	if(toggle)
	{
		SetVehicleParamsEx(vehicle,engine,lights,alarm,doors,1,boot,objective);
		VehicleInfo[vehicle][carHoodLock] = 1;
	}
	else
	{
		SetVehicleParamsEx(vehicle,engine,lights,alarm,doors,0,boot,objective);
		VehicleInfo[vehicle][carHoodLock] = 0;
	}
	return 1;
}

stock SendClientMessageEx(playerid, color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 12)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 12); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string
		#emit PUSH.C args
		#emit SYSREQ.C format

		SendClientMessage(playerid, color, string);

		#emit LCTRL 5
		#emit SCTRL 4
		#emit RETN
	}
	return SendClientMessage(playerid, color, str);
}

stock SendFactionMessageF(faction, color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 12)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 12); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string
		#emit PUSH.C args
		#emit SYSREQ.C format

		foreach(Player, i)
		{
		    if(!IsPlayerLogged(i) || PlayerInfo[i][pFaction] != faction || (PlayerInfo[i][pSettings] & togFaction))
				continue;

			SendClientMessage(i, color, string);
		}

		#emit LCTRL 5
		#emit SCTRL 4
		#emit RETN
		return 1;
	}

	foreach(Player, i)
	{
	    if(!IsPlayerLogged(i) || PlayerInfo[i][pFaction] != faction || (PlayerInfo[i][pSettings] & togFaction))
			continue;

		SendClientMessage(i, color, str);
	}
	return 1;
}

stock SendFactionMessage(faction, color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 12)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 12); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string
		#emit PUSH.C args
		#emit SYSREQ.C format

		foreach(Player, i)
		{
		    if(!IsPlayerLogged(i) || PlayerInfo[i][pFaction] != faction || 0 == PlayerInfo[i][pOnDuty])
				continue;

			SendClientMessage(i, color, string);
		}

		#emit LCTRL 5
		#emit SCTRL 4
		#emit RETN
		return 1;
	}

	foreach(Player, i)
	{
	    if(!IsPlayerLogged(i) || PlayerInfo[i][pFaction] != faction || 0 == PlayerInfo[i][pOnDuty])
			continue;

		SendClientMessage(i, color, str);
	}
	return 1;
}

stock SendClientMessageByAdmin(color, string[])
{
    foreach(Player, i)
	{
		if(!IsPlayerLogged(i) || (PlayerInfo[i][pSettings] & togAdmCmds))
			continue;

		SendClientMessage(i, color, string);
	}
	return 1;
}


stock AMSG(color, const str[], {Float,_}:...)
{
    static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 8)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 8); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string

		#emit LOAD.S.pri 8
		#emit ADD.C 4
		#emit PUSH.pri

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

        foreach(Player, i)
		{
		    if(!IsPlayerLogged(i) || !CheckAdmin(i, 1))
				continue;
			SendClientMessage(i, color, string);
		}
		return 1;
	}
	foreach(Player, i)
	{
	    if(!IsPlayerLogged(i) || !CheckAdmin(i, 1))
			continue;
		SendClientMessage(i, color, str);
	}
	return 1;
}

stock StaffMSG(color, const str[], {Float,_}:...)
{
    static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 8)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 8); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string

		#emit LOAD.S.pri 8
		#emit ADD.C 4
		#emit PUSH.pri

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

        foreach(Player, i)
		{
		    if(!IsPlayerLogged(i) || (!CheckAdmin(i, 1) && !IsTester(i))) continue;
		    SendClientMessage(i, color, string);
		}
		return 1;
	}
	foreach(Player, i)
	{
	    if(!IsPlayerLogged(i) || (!CheckAdmin(i, 1) && !IsTester(i))) continue;
	    SendClientMessage(i, color, str);
	}
	return 1;
}

stock SendNearbyMessage(Float:radius, playerid, color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 16)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 16); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string

		#emit LOAD.S.pri 8
		#emit CONST.alt 4
		#emit SUB
		#emit PUSH.pri

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

        foreach (new i : Player)
		{
		    if(0 == IsPlayerLogged(i) || 0 == PlayerNearPlayer(radius, i, playerid))
		        continue;

			SendClientMessage(i, color, string);
		}
		return 1;
	}

	foreach (new i : Player)
	{
	    if(0 == IsPlayerLogged(i) || 0 == PlayerNearPlayer(radius, i, playerid))
	        continue;

		SendClientMessage(i, color, str);
	}
	return 1;
}

stock SendLocalMessage(Float:radius, playerid, col1, col2, col3, col4, col5, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 16)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 16); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string

		#emit LOAD.S.pri 8
		#emit CONST.alt 4
		#emit SUB
		#emit PUSH.pri

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

        foreach (new i : Player)
		{
		    if(0 == IsPlayerLogged(i))
		        continue;

			if (PlayerNearPlayer(radius/16, i, playerid))
			    SendClientMessage(i, col1, string);

            else if (PlayerNearPlayer(radius/8, i, playerid))
			    SendClientMessage(i, col2, string);

            else if (PlayerNearPlayer(radius/4, i, playerid))
			    SendClientMessage(i, col3, string);

            else if (PlayerNearPlayer(radius/2, i, playerid))
			    SendClientMessage(i, col4, string);

            else if (PlayerNearPlayer(radius, i, playerid))
			    SendClientMessage(i, col5, string);
		}
		return 1;
	}

	foreach (new i : Player)
	{
	    if(0 == IsPlayerLogged(i))
	        continue;

	    if (PlayerNearPlayer(radius/16, i, playerid))
	    	SendClientMessage(i, col1, string);

		else if (PlayerNearPlayer(radius/8, i, playerid))
  			SendClientMessage(i, col2, string);

		else if (PlayerNearPlayer(radius/4, i, playerid))
  			SendClientMessage(i, col3, string);

		else if (PlayerNearPlayer(radius/2, i, playerid))
  			SendClientMessage(i, col4, string);

		else if (PlayerNearPlayer(radius, i, playerid))
  			SendClientMessage(i, col5, string);
	}
	return 1;
}

stock IsPlayerAimingAt(playerid, Float:x, Float:y, Float:z, Float:radius)
{
	new Float:cx,Float:cy,Float:cz,Float:fx,Float:fy,Float:fz;
	GetPlayerCameraPos(playerid, cx, cy, cz);
	GetPlayerCameraFrontVector(playerid, fx, fy, fz);
	return (radius >= DistanceCameraTargetToLocation(cx, cy, cz, x, y, z, fx, fy, fz));
}

stock SendPMToPlayer(playerid, targetid, text[])
{
    new pos = MAXLEN;
	if(pos < MAXLEN-1) pos = MAXLEN;

	if(strlen(text) > MAXLEN)
	{
		if(IsAdminDuty(playerid))
			SendClientMessageEx(targetid, COLOR_PMIN, "(( PM de la {FF9A00}%s{FFDB18} (ID: %i): %.*s ... ))", GetName(playerid), playerid, pos, (text));
		else
			SendClientMessageEx(targetid, COLOR_PMIN, "(( PM de la %s (ID: %i): %.*s ... ))", GetName(playerid), playerid, pos, (text));

		SendClientMessageEx(targetid, COLOR_PMIN, "(( ... %s ))", (text)[pos]);

		if(IsAdminDuty(targetid))
			SendClientMessageEx(playerid, COLOR_PMOUT, "(( PM catre {FF9A00}%s{FFDB18} (ID: %i): %.*s ... ))", GetName(targetid), targetid, pos, (text));
		else
			SendClientMessageEx(playerid, COLOR_PMOUT, "(( PM catre %s (ID: %i): %.*s ... ))", GetName(targetid), targetid, pos, (text));

		SendClientMessageEx(playerid, COLOR_PMOUT, "(( ... %s ))", (text)[pos]);
	}
	else
	{
	    if(IsAdminDuty(playerid))
			SendClientMessageEx(targetid, COLOR_PMIN, "(( PM de la {FF9A00}%s{FFDB18} (ID: %i): %s ))", GetName(playerid), playerid, (text));
		else
			SendClientMessageEx(targetid, COLOR_PMIN, "(( PM de la %s (ID: %i): %s ))", GetName(playerid), playerid, (text));

		if(IsAdminDuty(targetid))
			SendClientMessageEx(playerid, COLOR_PMOUT, "(( PM catre {FF9A00}%s{FFDB18} (ID: %i): %s ))", GetName(targetid), targetid, (text));
		else
			SendClientMessageEx(playerid, COLOR_PMOUT, "(( PM catre %s (ID: %i): %s ))", GetName(targetid), targetid, (text));
	}

	foreach(Player, i)
	{
	    if(0 == IsPlayerLogged(i) || 0 == IsAdminDuty(i) || (pTemp[i][pPMPlayer] != playerid && GetPVarInt(i, #spypm_all) != 1))
			continue;

        if(strlen(text) > MAXLEN)
		{
			SendClientMessageEx(i, COLOR_PMIN, "(( PM | %s catre %s (ID: %i): %.*s ... ))", GetName(playerid), GetName(targetid), targetid, pos, (text));
			SendClientMessageEx(i, COLOR_PMIN, "(( ... %s ))", (text)[pos]);
		}
		else
			SendClientMessageEx(i, COLOR_PMIN, "(( PM | %s catre %s (ID: %i): %s ))", GetName(playerid), GetName(targetid), targetid, text);
	}
	return 1;
}

stock Add_Call(playerid, type, text[])
{
	new Float: x,
		Float: y,
		Float: z;

	GetPlayerPos(playerid,x, y, z);
	for(new i = 0; i != MAX_CALLS_AND_ARREST; i++)
	{
	    if(CallInfo[i][callExists] != 0)
			continue;

        GetPlayerPos(playerid, CallInfo[i][callPosX], CallInfo[i][callPosY], CallInfo[i][callPosZ]);
        CallInfo[i][callType] = type;
        format(CallInfo[i][callText], 128, "%s", text);
        format(CallInfo[i][callDate], 32, "%s", GetFullDate());
        GetPlayer2DZone(playerid, CallInfo[i][callLocation], MAX_ZONE_NAME);
        CallInfo[i][callPhone] = PlayerInfo[playerid][pNumber];
        format(CallInfo[i][callName], MAX_PLAYER_NAME, "%s", GetNameEx(playerid));

        CallInfo[i][callDelete] = gettime() + 1200;

        CallInfo[i][callExists] = 1;
        break;
	}
	return 1;
}

stock Get_Calls(playerid)
{
	if(PlayerInfo[playerid][pFaction] != LSPD && PlayerInfo[playerid][pFaction] != SASD && PlayerInfo[playerid][pFaction] != LSFD)
	    return 1;

	new mes[512],
	    count,
		type = (PlayerInfo[playerid][pFaction] == LSFD)?(2):(1);

    for(new i = 0; i != MAX_CALLS_AND_ARREST; i++)
	{
	    if(CallInfo[i][callExists] == 0 || CallInfo[i][callType] != type)
			continue;

		format(mes, sizeof(mes), "%s\n%i. %s (Camera: %i), %s", mes, count+1, CallInfo[i][callName], CallInfo[i][callPhone], CallInfo[i][callDate]);
		count++;
	}

	if(!count)
	    return SendErrorMessage(playerid, "Nu exista apeluri de preluat.");

	Dialog_Show(playerid, MDCCall, DIALOG_STYLE_LIST, "{8D8DFF}Apeluri urgente", mes, "Alege", "Inapoi");
	return 1;
}

stock Add_Arrest(playerid, suspect, time)
{
	for(new i = 0; i != MAX_CALLS_AND_ARREST; i++)
	{
		if(ArrestInfo[i][arrestExists] != 0)
		    continue;

		format(ArrestInfo[i][arrestDate], 32, "%s", GetFullDate());
		format(ArrestInfo[i][arrestSuspect], MAX_PLAYER_NAME, "%s", GetNameEx(suspect));
		format(ArrestInfo[i][arrestOfficer], MAX_PLAYER_NAME, "%s", GetNameEx(playerid));
		ArrestInfo[i][arrestTime] = time;
		ArrestInfo[i][arrestDelete] = gettime() + 1200;
		ArrestInfo[i][arrestExists] = 1;
		break;
	}
	return 1;
}

stock GetFullDate()
{
	new date[21],
		year,
		month,
		day,
		hour,
		minute,
		second;

	getdate(year, month, day);
	gettime(hour, minute, second);

	format(date, sizeof(date), "%02d/%02d/%i, %02d:%02d:%02d", day, month, year, hour, minute, second);
	return date;
}

stock isHouseDoor(model)
{
	switch(model)
	{
	    case 1493, 1495..1498, 1500, 1501, 1504, 1506, 1507, 1522, 1532, 1533, 1535, 1536, 1557, 1566, 1567, 3089: return 1;
	}
	return 0;
}

stock JobMessage(playerid, string[], length = 5)
{
	PlayerTextDrawShow(playerid, TD_job_message[playerid]);
	PlayerTextDrawSetString(playerid, TD_job_message[playerid], string);
	SetPVarInt(playerid, #hide_job_message, gettime() + length);
	return 1;
}

stock ShowJobMessage(playerid, message[])
{
	PlayerTextDrawShow(playerid, TD_job_message[playerid]);
	PlayerTextDrawSetString(playerid, TD_job_message[playerid], message);
	SetPVarInt(playerid, #hide_job_message, gettime() + 5);
	return 1;
}

stock HoldingKey(playerid, key)
{
	new keys, ud, lr;
	GetPlayerKeys(playerid, keys, ud, lr);
	return (keys & key == key) ? (1):(0);
}

stock RepairVehicleBody(vehicle)
{
	UpdateVehicleDamageStatus(vehicle, 0, 0, 0, 0);
	return 1;
}

stock SendMechanicHelp(playerid, location[])
{
	foreach(Player, i)
	{
	    if(0 == IsPlayerLogged(i) || PlayerInfo[i][pJob] != JOB_MECHANIC)
	        continue;

       	SendClientMessage(i, COLOR_GREEN, "|_________Linia mecanicilor_________|");
		SendClientMessageEx(i, COLOR_WHITE, "Apel de la: %s Telefon: %i", GetNameEx(playerid), PlayerInfo[playerid][pNumber]);
		SendClientMessageEx(i, COLOR_WHITE, "Situatie: %s", location);
 	}
	return 1;
}

stock SendTaxiRequest(playerid, location[])
{
    foreach(Player, i)
	{
	    if(0 == IsPlayerLogged(i) || !TaxiDuty[i] || PlayerInfo[i][pJob] != JOB_TAXI)
	        continue;

        SendClientMessage(i, COLOR_GREEN, "|___________Linia taximetristilor___________|");
		SendClientMessageEx(i, COLOR_WHITE, "Apel de la: %s Telefon: %i", GetNameEx(playerid), PlayerInfo[playerid][pNumber]);
		SendClientMessageEx(i, COLOR_WHITE, "Situatie: %s", location);
		SendClientMessageEx(i, COLOR_WHITE, "** /taxi accept %i pentru a accepta comanda. **", playerid);
	}
	return 1;
}

stock CountVehiclePlayers(vehicle)
{
	new count;
	foreach(Player, i)
	{
		if(IsPlayerInAnyVehicle(i) && GetPlayerVehicleID(i) == vehicle && GetPlayerState(i) != PLAYER_STATE_DRIVER)
		{
			count++;
		}
	}
	return count;
}

//Plant
stock Plant_Nearest(playerid, Float: radius = 2.5)
{
	for(new i; i != MAX_PLANTS; i++)
	{
	    if(CropsInfo[i][pPlanted] == 0)
	        continue;

        if(IsPlayerInRangeOfPoint(playerid, radius, CropsInfo[i][pX], CropsInfo[i][pY], CropsInfo[i][pZ]) && CropsInfo[i][pInt] == GetInterior(playerid) && CropsInfo[i][pVW] == GetWorld(playerid))
            return i;
	}
	return -1;
}

stock CreateCrop(playerid)
{
    UnFreezePlayer(playerid);
	StopPlayerAnims(playerid);

    if(IsPlayerHasItem(playerid, INV_SEED_GANJA) == -1)
    	return SendErrorMessage(playerid, "Nu ai seminte de marijuana.");

	new plant = -1;
	for(new i; i != MAX_PLANTS; i++)
	{
	    if(CropsInfo[i][pPlanted] != 0)
	        continue;

		plant = i;
		break;
 	}

 	if(plant == -1)
 	    return SendErrorMessage(playerid, "Numarul maxim de plante a fost atins.");

	new hours =
	    12 + random(12);

    RemovePlayerItem(playerid, INV_SEED_GANJA, 1);
	GetPlayerPos(playerid, CropsInfo[plant][pX], CropsInfo[plant][pY], CropsInfo[plant][pZ]);
 	CropsInfo[plant][pZ] -= 1.0;
	CropsInfo[plant][pInt] = GetInterior(playerid);
 	CropsInfo[plant][pVW] = GetWorld(playerid);
	format(CropsInfo[plant][pPlanter], 52, "%s (ACCID: %i)", GetName(playerid), PlayerInfo[playerid][pID]);
	CropsInfo[plant][pGrowTime] = gettime() + (hours * 3600);
	CropsInfo[plant][pPlanted] = 1;

	CropsInfo[plant][pObject] =
		CreateDynamicObject(19473, CropsInfo[plant][pX], CropsInfo[plant][pY], CropsInfo[plant][pZ], 0.0, 0.0, 0.0, CropsInfo[plant][pVW], CropsInfo[plant][pInt], -1, 200.0);

	SendClientMessageEx(playerid, COLOR_LIGHTGREEN, "Ai plantat seminte de marijuana. Poti colecta plantatia in: %i ore.", hours);
	SCM(playerid, COLOR_YELLOWG, "(( Plantarea non-roleplay este sanctionata. ))");
	SCM(playerid, COLOR_YELLOWG, "(( Poti tasta /checkplant pentru a vedea informatii despre plantatia ta. ))");

    new query[256];
	mysql_format(dbHandle, query, sizeof(query), "INSERT INTO `plants` (planter, posx, posy, posz, interior, vw, growtime) VALUES ('%s', %f, %f, %f, %i, %i, %i)",
	CropsInfo[plant][pPlanter], CropsInfo[plant][pX], CropsInfo[plant][pY], CropsInfo[plant][pZ], CropsInfo[plant][pInt], CropsInfo[plant][pVW], CropsInfo[plant][pGrowTime]);
	mysql_tquery(dbHandle, query, "OnPlantInsert", "i", plant);
	return 1;
}

stock DestroyCrop(crop)
{
	if(CropsInfo[crop][pPlanted] != 1)
	    return 1;

	new query[128];
	mysql_format(dbHandle, query, sizeof(query), "DELETE FROM `plants` WHERE `id` = %i", CropsInfo[crop][pID]);
	mysql_tquery(dbHandle, query);

	CropsInfo[crop][pGrowTime] = 0;
	CropsInfo[crop][pX] = 0.0;
	CropsInfo[crop][pY] = 0.0;
	CropsInfo[crop][pZ] = 0.0;
	CropsInfo[crop][pPlanted] = 0;
	CropsInfo[crop][pID] = 0;

	if(IsValidDynamicObject(CropsInfo[crop][pObject]))
		DestroyDynamicObject(CropsInfo[crop][pObject]);

	if(IsValidDynamic3DTextLabel(CropsInfo[crop][pLabel]))
	{
		DestroyDynamic3DTextLabel(CropsInfo[crop][pLabel]);
        CropsInfo[crop][pLabel] = Text3D:INVALID_3DTEXT_ID;
	}
	return 1;
}

public OnPlayerSpawn(playerid)
{
    ac_fake_kill{playerid} = 1;
    ac_off_protect{playerid} = 3;
    //
	if(0 == IsPlayerLogged(playerid))
	{
	    SendErrorMessage(playerid, "Nu esti autentificat.");
		KickEx(playerid);
		return 1;
	}

	if(ac_spawn{playerid} != 1)
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "Ai primit kick deoarece sistemul a considerat ca folosesti programe avantajoase. (#011)");
	    KickEx(playerid);
	    return 1;
	}
    ac_spawn{playerid} = 0;

	SetPlayerFightingStyle(playerid, PlayerInfo[playerid][pFightStyle]);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_SAWNOFF_SHOTGUN, 1);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, 1);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, 1);

	for(new i = 0; i < MAX_PLAYER_ATTACH; i++)
	{
	    RemovePlayerAttachedObject(playerid, i);
		if(0 == AttachInfo[playerid][i][aID] || 0 == AttachInfo[playerid][i][aUsed])
			continue;

		SetPlayerAttachedObject(playerid, i, AttachInfo[playerid][i][aModel], AttachInfo[playerid][i][aBone], AttachInfo[playerid][i][aOffsetX], AttachInfo[playerid][i][aOffsetY], AttachInfo[playerid][i][aOffsetZ], AttachInfo[playerid][i][aRotX], AttachInfo[playerid][i][aRotY], AttachInfo[playerid][i][aRotZ], AttachInfo[playerid][i][aScaleX], AttachInfo[playerid][i][aScaleY], AttachInfo[playerid][i][aScaleZ]);
	}

	SetPlayerWeapons(playerid);

	if(PlayerInfo[playerid][pChar] > 0 && PlayerInfo[playerid][pOnDuty])
		SetPlayerSkin(playerid, PlayerInfo[playerid][pChar]);
	else
		SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);

    SetPlayerCurrentTimeAndWeather(playerid);
    SetPlayerScore(playerid, PlayerInfo[playerid][pLevel]);
 	SetPlayerSpawn(playerid);
	return 1;
}
public OnPlayerDeath(playerid, killerid, reason)
{
	if(ac_fake_kill{playerid} != 1)
	    return Kick(playerid);

    ac_spawn{playerid} = 1;
    ac_fake_kill{playerid} = 0;

	ResetVariables(playerid);
	ac_ResetPlayerWeapons(playerid);
	RemovePlayerMask(playerid);

	if((reason == WEAPON_VEHICLE || reason == WEAPON_COLLISION) && 0 == IsPlayerInjured(playerid))
	    InjuredPlayer(playerid, killerid, reason);

	foreach(Player, i)
	{
	    if(!IsPlayerLogged(i) || pTemp[i][pDMLog] != 1)
			continue;

		SendDeathMessageToPlayer(i, killerid, playerid, reason);
	}
	return 1;
}

public OnVehicleSpawn(vehicleid)
{
    for(new i; i != MAX_TRUCK_PRODUCT; i++)
	{
	    if(i < 6 && IsValidDynamicObject(VehicleInfo[vehicleid][carCargoObj][i]))
		{
			DestroyDynamicObject(VehicleInfo[vehicleid][carCargoObj][i]);
            VehicleInfo[vehicleid][carCargoObj][i] = INVALID_OBJECT_ID;
		}

		if(i < 5 && IsValidDynamicObject(VehicleInfo[vehicleid][carSiren][i]))
		{
		    DestroyDynamicObject(VehicleInfo[vehicleid][carSiren][i]);
		    VehicleInfo[vehicleid][carSiren][i] = INVALID_OBJECT_ID;
		}

	    VehicleInfo[vehicleid][carCargoAmount][i] = 0;
	}

	SetVehicleParamsEx(vehicleid, 0, 0, 0, 0, 0, 0, 0);
 	VehicleInfo[vehicleid][carLocked] =
 	VehicleInfo[vehicleid][carTrunkLock] =
 	VehicleInfo[vehicleid][carEngineOn] = 0;

    if(VehicleInfo[vehicleid][carOwnerID] == 0)
    {
		FixVehicle(vehicleid);
		VehicleInfo[vehicleid][carFuel] = 100;
	}

    if(VehicleInfo[vehicleid][carFaction] || VehicleInfo[vehicleid][carOwnerID])
		ToggleVehicleLock(vehicleid, true);

	if(VehicleInfo[vehicleid][carOwnerID] != 0 && VehicleInfo[vehicleid][carDeath] == 1)
	{
		SetVehicleHealth(vehicleid, MAX_HEALTH_VEHICLE + VehicleInfo[vehicleid][carArmour]);
	}

	if(IsRentCar(vehicleid))
	{
	    for(new i = 0; i < MAX_VEHICLE_INVENTORY; i++)
		{
			VehicleInfo[vehicleid][carInv][i] = 0;
			VehicleInfo[vehicleid][carInvAmount][i] = 0;
		}
	}

	VehicleInfo[vehicleid][carDeath] = 0;
	return 1;
}

public OnVehicleDeath(vehicleid, killerid)
{
    if(killerid != INVALID_PLAYER_ID)
	{
		new ac_i = GetTickCount();
		if(ac_i < ac_vehicle_death[killerid] + 300)
		{
			Kick(killerid);
			return 1;
		}
		ac_vehicle_death[killerid] = ac_i;
	}

	if(killerid == GetVehicleOwner(vehicleid) && VehicleInfo[vehicleid][carDeath] == 0)
	    ResetVehicleStuff(vehicleid);

	if(VehicleInfo[vehicleid][carOwnerID] != 0)
	{
	    new userid = GetVehicleOwner(vehicleid);
		if(IsPlayerLogged(userid))
  			PlayerInfo[userid][pCarKey] = 0;

		DestroyVehicle(vehicleid);
	}

	if(VehicleInfo[vehicleid][carRent] != 0)
	{
	    new userid = GetIDByID(VehicleInfo[vehicleid][carRent]);
	    if(0 != IsPlayerLogged(userid))
	    {
	        pTemp[userid][pRentveh] = 0;
			SendErrorMessage(userid, "Vehiculul tau inchiriat a fost distrus.");
	    }
	    VehicleInfo[vehicleid][carRent] = 0;
	}
	return 1;
}

public OnPlayerCommandPerformed(playerid, cmdtext[], success)
{
	if(success == -1)
		return SCM(playerid,0x7EB7EDAA, "EROARE:{FFFFFF} Aceasta comanda nu exista. Foloseste /help sau /askq daca ai nevoie de ajutor.");

	return 1;
}
public OnPlayerCommandReceived(playerid, cmdtext[])
{
	if(0 == IsPlayerLogged(playerid))
	    return 0;

	if(pTemp[playerid][pCmdFlood])
	{
	    SendErrorMessage(playerid, "Accesul la comenzi ti-a fost blocat temporar.");
	    return 0;
	}

	//???? ???? ?????????
	if(GetTickCount() < GetPVarInt(playerid, #spam_cmd))
	    pTemp[playerid][pCmdCount]++;

    SetPVarInt(playerid, #spam_cmd, GetTickCount()+500);

    if(pTemp[playerid][pCmdCount] == 5)
   	{
	   	pTemp[playerid][pCmdFlood] = 30;
   	    pTemp[playerid][pCmdCount] = 0;
 		SendErrorMessage(playerid, "Nu poti folosi comenzi timp de 30 de secunde.");
		AMSG(COLOR_LIGHTRED, "(Admin Info) {FFFFFF}%s (ID: %i) a incercat sa foloseasca comenzi daunatoare serverului.", GetNameEx(playerid), playerid);
		return 0;
	}
	//

	return 1;
}
stock SendVehicleMessage(vehicleid,color,string[]) // id ??????,????,?????????
{
	foreach(Player, i) // ????????? ????
	{
	    if(0 == IsPlayerLogged(i) || 0 == IsPlayerInVehicle(i,vehicleid))
	        continue;

        SendClientMessage(i,color,string);
	}
	return 1;
}

public OnPlayerText(playerid, text[])
{
	if(!IsPlayerLogged(playerid))
	    return 0;

    new vehicle = GetPlayerVehicleID(playerid),
        str[128];

	if(PlayerInfo[playerid][pMutedTime] > 0)
	{
		SCM(playerid, COLOR_LIGHTRED, "Chat-ul tau local a fost blocat de catre sistem.");
		return 0;
	}

	//???? ???? ?????
	if(GetTickCount() < GetPVarInt(playerid, #spam_chat))
    	pTemp[playerid][pChatCount]++;

    SetPVarInt(playerid, #spam_chat, GetTickCount()+1000);
    if(pTemp[playerid][pChatCount] == 5)
   	{
	   	PlayerInfo[playerid][pMutedTime] = 30;
   	    pTemp[playerid][pChatCount] = 0;
 		SendErrorMessage(playerid, "Asteapta 30 de secunde inainte de a tasta o noua comanda.");
		AMSG(COLOR_LIGHTRED, "(Admin Info) %s (ID: %i) a incercat sa foloseasca comenzi daunatoare serverului.", GetNameEx(playerid), playerid);
		return 0;
	}
	//
	if(text[0] == '.')
	{
	    SCM(playerid,0x7EB7EDAA, "EROARE:{FFFFFF} Acea comanda nu exista. Foloseste /help sau /askq daca ai nevoie de ajutor.");
	    return 0;
	}

    if(CheckAdmin(playerid, 1) && text[0] == '!')
	{
		cmd::adminchat(playerid, text[1]);
		return 0;
	}

	if(IsPlayerInjured(playerid) == 2)
	{
		SCM(playerid, COLOR_GREY, "Esti mort.");
		return 0;
	}

	if(pTemp[playerid][pEmergency] == 544)
	{
	    if(!strlen(text))
		{
			SCM(playerid, COLOR_YELLOWG, "Dispecerat (telefon): Va rog sa repetati. Nu am putut intelege.");
			return 0;
		}

		SendMechanicHelp(playerid, text);

		SCM(playerid, COLOR_YELLOWG, "Dispecerat (telefon): Serviciul solicitat a fost notificat. Va rugam sa ramaneti in locatia curenta.");
		SendCellMessage(playerid, "Disperecatul a inchis.");

		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
		RemovePlayerAttachedObject(playerid, ATTACH_HANDS);
		pTemp[playerid][pEmergency] = 0;
		return 0;
	}
	else if(pTemp[playerid][pEmergency] == 555)
	{
	    if(!strlen(text))
		{
			SCM(playerid, COLOR_YELLOWG, "Dispecerat (telefon): Va rog sa repetati. Nu am putut intelege.");
			return 0;
		}

		SendTaxiRequest(playerid, text);

		SCM(playerid, COLOR_YELLOWG, "Dispecerat (telefon): Serviciul solicitat a fost notificat. Va rugam sa ramaneti in locatia curenta.");
		SendCellMessage(playerid, "Disperecatul a inchis.");

		SetPVarInt(playerid, "NeedTaxi", 1);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
		RemovePlayerAttachedObject(playerid, ATTACH_HANDS);
		pTemp[playerid][pEmergency] = 0;
		return 0;
	}
	else if(pTemp[playerid][pEmergency] == 911)
	{
		if(!strlen(text))
		{
			SCM(playerid, COLOR_YELLOWG, "Dispecerat (telefon): Va rog sa repetati. Nu am putut intelege.");
			return 0;
		}

		if(!CompareStrings("LSPD", text) && !CompareStrings("SASD", text) && !CompareStrings("POLICE", text) && !CompareStrings("LSFD", text))
		{
		    SCM(playerid, COLOR_YELLOWG, "Dispecerat (telefon): Care este serviciul pe care il necesitati? POLICE sau LSFD?");
		    return 0;
		}

		new dep;
		if(CompareStrings("POLICE", text) || CompareStrings("LSPD", text) || CompareStrings("SASD", text)) dep = 1;
		else if(CompareStrings("LSFD", text)) dep = 2;

		SCM(playerid, COLOR_YELLOWG, "Dispecerat (telefon): Care este locatia dumneavoastra si ce s-a intamplat?.");
		pTemp[playerid][pEmergency] = 911 + dep;
		return 0;
	}
	else if(pTemp[playerid][pEmergency] == 912)
	{
	    if(!strlen(text))
		{
			SCM(playerid, COLOR_YELLOWG, "Dispecerat (telefon): Va rog sa repetati. Nu am putut intelege.");
			return 0;
		}
		new location[MAX_ZONE_NAME];
		GetPlayer2DZone(playerid, location, MAX_ZONE_NAME);
		foreach(Player, i)
		{
		    if(!IsPlayerLogged(i) || (PlayerInfo[i][pFaction] != LSPD && PlayerInfo[i][pFaction] != SASD) || (PlayerInfo[i][pSettings] & togFaction))
				continue;
			SendClientMessage(i, COLOR_LIGHTBLUE, "|__________APEL DE URGENTA__________|");
			SendClientMessageEx(i, COLOR_LIGHTBLUE, "Apelant: %s, Telefon: %i", GetNameWithMask(playerid), PlayerInfo[playerid][pNumber]);
			SendClientMessage(i, COLOR_LIGHTBLUE, "Servicii solicitate: LSPD, SASD");
			SendClientMessageEx(i, COLOR_LIGHTBLUE, "Locatie: %s", location);
			if(strlen(text) > MAXLEN)
			{
				SendClientMessageEx(i, COLOR_LIGHTBLUE, "Situatie: %.*s ...", MAXLEN, text);
				SendClientMessageEx(i, COLOR_LIGHTBLUE, "Situatie: ... %s", text[MAXLEN]);
			}
			else
			    SendClientMessageEx(i, COLOR_LIGHTBLUE, "Situatie: %s", text);
		}

		Add_Call(playerid, 1, text);

		SCM(playerid, COLOR_YELLOWG, "Dispecerat (telefon): Echipajele au fost alertate. Ramaneti la locul situatiei.");
		SendCellMessage(playerid, "Dispeceratul a inchis.");

		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
		RemovePlayerAttachedObject(playerid, ATTACH_HANDS);
		pTemp[playerid][pEmergency] = 0;
		return 0;
	}
	else if(pTemp[playerid][pEmergency] == 913)
	{
	    if(!strlen(text))
		{
			SCM(playerid, COLOR_YELLOWG, "Dispecerat (telefon): Va rog sa repetati. Nu am putut intelege.");
			return 0;
		}
        new location[MAX_ZONE_NAME];
		GetPlayer2DZone(playerid, location, MAX_ZONE_NAME);
		foreach(Player, i)
		{
		    if(!IsPlayerLogged(i) || PlayerInfo[i][pFaction] != LSFD || (PlayerInfo[i][pSettings] & togFaction))
				continue;

			SendClientMessage(i, 0xfe8281ff, "|__________APEL DE URGENTA__________|");
			SendClientMessageEx(i, 0xfe8281ff, "Apelant: %s, Telefon: %i", GetNameWithMask(playerid), PlayerInfo[playerid][pNumber]);
			SendClientMessage(i, 0xfe8281ff, "Serviciu solicitat: LSFD");
			SendClientMessageEx(i, 0xfe8281ff, "Locatie: %s", location);
			if(strlen(text) > MAXLEN)
			{
				SendClientMessageEx(i, 0xfe8281ff, "Situatie: %.*s ...", MAXLEN, text);
				SendClientMessageEx(i, 0xfe8281ff, "Situatie: ... %s", text[MAXLEN]);
			}
			else
			    SendClientMessageEx(i, 0xfe8281ff, "Situatie: %s", text);
		}

		Add_Call(playerid, 2, text);

		SCM(playerid, COLOR_YELLOWG, "Dispecerat (telefon): Echipajele au fost alertate. Ramaneti la locul situatiei.");
		SendCellMessage(playerid, "Dispeceratul a inchis.");

		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
		RemovePlayerAttachedObject(playerid, ATTACH_HANDS);
		pTemp[playerid][pEmergency] = 0;
		return 0;
	}
	else if(pTemp[playerid][pEmergency] == 991)
	{
	    if(!strlen(text))
		{
			SCM(playerid, COLOR_YELLOWG, "Dispecerat (telefon): Va rog sa repetati. Nu am putut intelege.");
			return 0;
		}

		new location[MAX_ZONE_NAME];
		GetPlayer2DZone(playerid, location, MAX_ZONE_NAME);
        foreach(Player, i)
		{
		    if(!IsPlayerLogged(i) || (PlayerInfo[i][pFaction] != LSPD && PlayerInfo[i][pFaction] != SASD) || (PlayerInfo[i][pSettings] & togFaction))
				continue;

			SendClientMessage(i, COLOR_LSPDNEW, "|_____________Apel non-urgent_____________|");
			SendClientMessageEx(i, COLOR_LSPDNEW, "Apelant: %s, Telefon: %i", GetNameWithMask(playerid), PlayerInfo[playerid][pNumber]);
			SendClientMessageEx(i, COLOR_LSPDNEW, "Locatie: %s", location);
			if(strlen(text) > MAXLEN)
			{
				SendClientMessageEx(i, COLOR_LSPDNEW, "Situatie: %.*s ...", MAXLEN, text);
				SendClientMessageEx(i, COLOR_LSPDNEW, "Situatie: ... %s", text[MAXLEN]);
			}
			else
				SendClientMessageEx(i, COLOR_LSPDNEW, "Situatie: %s", text);
		}
		GetPlayerPos(playerid, pTemp[playerid][pCallPosX], pTemp[playerid][pCallPosY], pTemp[playerid][pCallPosZ]);
        pTemp[playerid][pCallOn] = 1;

		SendFactionMessage(LSPD, COLOR_LSPDNEW, " * Pentru accepta apelul, foloseste /rne %i.", playerid);
		SendFactionMessage(SASD, COLOR_LSPDNEW, " * Pentru a accepta apelul, foloseste /rne %i.", playerid);

		SCM(playerid, COLOR_YELLOWG, "Dispecerat (telefon): Echipajele au fost notificate. Ramaneti la locul situatiei.");
		SendCellMessage(playerid, "Dispeceratul a inchis.");

		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
		RemovePlayerAttachedObject(playerid, ATTACH_HANDS);
		pTemp[playerid][pEmergency] = 0;
		return 0;
	}

	if(pTemp[playerid][pInterview] != INVALID_PLAYER_ID)
	{
	    if(strlen(text) > MAXLEN)
	    {
			format(str, sizeof(str), "** [SAN] Invitat %s: %.*s ...", GetNameWithMask(playerid), MAXLEN, text);
			NewsChat(0x04FB5AAA,str);
			format(str, sizeof(str), "... %s", text[MAXLEN]);
			NewsChat(0x04FB5AAA,str);
		}
		else
		{
		    format(str, sizeof(str), "** [SAN] Invitat %s: %s", GetNameWithMask(playerid), text);
			NewsChat(0x04FB5AAA,str);
		}
		return 0;
	}
	else if(pTemp[playerid][pNews] == 1)
	{
	    if(strlen(text) > MAXLEN)
	    {
			format(str, sizeof(str), "** [SAN] Reporter %s: %.*s ...", GetNameWithMask(playerid), MAXLEN, text);
			NewsChat(0x04FB5AAA,str);
			format(str, sizeof(str), "... %s", text[MAXLEN]);
			NewsChat(0x04FB5AAA,str);
		}
		else
		{
		    format(str, sizeof(str), "** [SAN] Reporter %s: %s", GetNameWithMask(playerid), text);
			NewsChat(0x04FB5AAA,str);
		}
		return 0;
	}

	if(IsPlayerInAnyVehicle(playerid) && !IsADontWindow(vehicle) && 0 != IsWindowsClose(GetPlayerVehicleID(playerid)))
	{
	    if(strlen(text) > MAXLEN-15)
	    {
			format(str, sizeof(str), "%s spune (in vehiculul %s): %.*s ...", GetNameWithMask(playerid), ((pTemp[playerid][pCallLine] != INVALID_PLAYER_ID && pTemp[playerid][pCallStatus] == 2) || pTemp[playerid][pEmergency])?(" | telefon"):(""), MAXLEN-15, text);
			SendVehicleMessage(GetPlayerVehicleID(playerid),COLOR_YELLOWG,str);
			format(str, sizeof(str), "... %s", text[MAXLEN-15]);
			SendVehicleMessage(GetPlayerVehicleID(playerid),COLOR_YELLOWG,str);
		}
		else
		{
		    format(str, sizeof(str), "%s spune (in vehiculul %s): %s", GetNameWithMask(playerid), ((pTemp[playerid][pCallLine] != INVALID_PLAYER_ID && pTemp[playerid][pCallStatus] == 2) || pTemp[playerid][pEmergency])?(" | telefon"):(""), text);
			SendVehicleMessage(GetPlayerVehicleID(playerid),COLOR_YELLOWG,str);
		}
	}
	else
	{
	    if(strlen(text) > MAXLEN)
	    {
	        if((pTemp[playerid][pCallLine] != INVALID_PLAYER_ID && pTemp[playerid][pCallStatus] == 2) || pTemp[playerid][pEmergency])
	        {
				SendLocalMessage(Range_Normal, playerid, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5, "%s spune (telefon): %.*s ...", GetNameWithMask(playerid), MAXLEN, text);
				SendLocalMessage(Range_Normal, playerid, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5, "... %s", text[MAXLEN]);
	        }
	        else
	        {
				SendLocalMessage(Range_Normal, playerid, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5, "%s spune: %.*s ...", GetNameWithMask(playerid), MAXLEN, text);
				SendLocalMessage(Range_Normal, playerid, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5, "... %s", text[MAXLEN]);
			}
		}
		else
		{
		    if((pTemp[playerid][pCallLine] != INVALID_PLAYER_ID && pTemp[playerid][pCallStatus] == 2) || pTemp[playerid][pEmergency])
				SendLocalMessage(Range_Normal, playerid, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5, "%s spune (telefon): %s", GetNameWithMask(playerid), text);
	        else
				SendLocalMessage(Range_Normal, playerid, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5, "%s spune: %s", GetNameWithMask(playerid), text);
		}
	}
	ChatAnimation(playerid, strlen(text));

	if(pTemp[playerid][pCallLine] != INVALID_PLAYER_ID && pTemp[playerid][pCallStatus] == 2)
	{
	    new targetid = pTemp[playerid][pCallLine];
	    if(IsPlayerLogged(targetid) == 0)
	    {
	        CancelCall(playerid);
	        return 0;
	    }
        if(strlen(text) > MAXLEN)
		{
			SendClientMessageEx(targetid, COLOR_YELLOWG, "%s spune (telefon): %.*s ...", pTemp[targetid][pCallName], MAXLEN, text);
			SendClientMessageEx(targetid, COLOR_YELLOWG, "%s spune (telefon): ... %s", pTemp[targetid][pCallName], text[MAXLEN]);

			if(GetPVarInt(targetid, #loud_speak) == 1)
			{
				SendLocalMessage(10.0, targetid, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5, "%s spune (telefon): %.*s ...", pTemp[targetid][pCallName], MAXLEN, text);
				SendLocalMessage(10.0, targetid, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5, "%s spune (telefon): ... %s", pTemp[targetid][pCallName], text[MAXLEN]);
			}
		}
		else
		{
			SendClientMessageEx(targetid, COLOR_YELLOWG, "%s spune (telefon): %s", pTemp[targetid][pCallName], text);

			if(GetPVarInt(targetid, #loud_speak) == 1)
				SendLocalMessage(10.0, targetid, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5, "%s spune (telefon): %s", pTemp[targetid][pCallName], text);
		}
	}
	return 0;
}

public OnPlayerCommandText(playerid, cmdtext[])
{
	return 0;
}

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
    if (GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CUFFED || GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY)
	{
	    ClearAnimations(playerid);
	    return 1;
	}

	if(ispassenger == 0 && GetPlayerHasRightDrive(playerid, vehicleid) == 0)
		return 1;

	new model = GetVehicleModel(vehicleid) - 417;
	if(ac_enter_vehicle[playerid] != vehicleid)
	{
    	new t_param1, t_param2;
		GetVehicleParamsEx(vehicleid, t_param2,t_param2,t_param2,t_param1,t_param2,t_param2,t_param2);
		if(t_param1 == 0)
		{
	    	ac_enter_vehicle[playerid] = vehicleid;
	    	if(12 < model < 179 && ac_vType[model] == 3)
				ac_enter_vehicle_time[playerid] = 0;
	    	else
            	ac_enter_vehicle_time[playerid] = GetTickCount();
		}
	}
	return 1;
}
public OnPlayerExitVehicle(playerid, vehicleid)
{
    //ac_off_protect{playerid} = 5;
    //GetVehiclePos(vehicleid, ac_pos_x[playerid], ac_pos_y[playerid], ac_pos_z[playerid]);

	if(GetPVarInt(playerid, #repair_time))
	    DeletePVar(playerid, #repair_time);

    if (IsAPlane(vehicleid) || IsAHelicopter(vehicleid) && PlayerInfo[playerid][pWeap][3] != 46)
		ResetPlayerWeaponID(playerid, 46);

	if(RepairService[playerid] != 0)
	{
		ShowJobMessage(playerid, "~h~~p~Foloseste continutul tubului pe vehicul.");
		ac_GivePlayerWeapon(playerid, 41, 9999);
	}

	if(pTemp[playerid][pLicenseExam])
	{
	    pTemp[playerid][pLicenseExam] = 0;
		DeletePVar(playerid, #exam_second);
		SCM(playerid,COLOR_TOMATO, "[ ! ] {FFFFFF}Ai picat examenul deoarece ai parasit vehiculul.");
		TogglePlayerAllDynamicRaceCPs(playerid, false);
		RespawnVehicle(vehicleid);
	}

	if(JackingEngine[playerid] != 0)
		JackingEngine[playerid] = 0;

	if(VehicleInfo[vehicleid][carRadioOn] == 1)
		StopAudioStreamForPlayer(playerid);

    foreach(Player, i)
	{
    	if(0 == IsPlayerLogged(i) || BoomboxInfo[i][bUsed] == 0 || IsPlayerInDynamicArea(playerid, BoomboxInfo[i][bArea]) == 0)
    	    continue;

		pTemp[playerid][pBoombox] = i;
 		StopAudioStreamForPlayer(playerid);

		if(strlen(BoomboxInfo[i][bUrl]))
			PlayAudioStreamForPlayer(playerid, BoomboxInfo[i][bUrl], BoomboxInfo[i][bPosX], BoomboxInfo[i][bPosY], BoomboxInfo[i][bPosZ], 50.0, 1);

		break;
	}
	return 1;
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
    if((newstate == 2 && oldstate == 3) || (newstate == 3 && oldstate == 2))
		return Kick(playerid);

	if(IsPlayerNPC(playerid))
		return 1;

	new vehicle = GetPlayerVehicleID(playerid),
	    Float: vhealth;
 	GetVehicleHealth(vehicle, vhealth);

	if(newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER)
	{
	    GetVehiclePos(vehicle, ac_last_veh_x[playerid], ac_last_veh_y[playerid], ac_last_veh_z[playerid]);
	    if(pTemp[playerid][pBoombox] != INVALID_PLAYER_ID)
	    {
	        pTemp[playerid][pBoombox] = INVALID_PLAYER_ID;
			StopAudioStreamForPlayer(playerid);
	    }

		if(VehicleInfo[vehicle][carRadioOn] == 1)
			PlayAudioStreamForPlayer(playerid, VehicleInfo[vehicle][carRadioURL]);

	    if(PlayerHoldingWeapon(playerid, 24))
			SetPlayerArmedWeapon(playerid, 0);

	    TextDrawShowForPlayer(playerid, TD_vehicle_info[0]);
     	TextDrawShowForPlayer(playerid, TD_vehicle_info[1]);
	    PlayerTextDrawSetString(playerid, TD_vehicle_name[playerid], VehicleNames[GetVehicleModel(vehicle)-400]);
		PlayerTextDrawShow(playerid, TD_vehicle_name[playerid]);
		SetPVarInt(playerid, #vehicle_info, 5);
	}

	if(newstate == PLAYER_STATE_PASSENGER)
	{
	    new driver = GetVehicleDriver(vehicle);
        if(IsPlayerLogged(driver) && TaxiDuty[driver] && TaxiPassenger[driver] == INVALID_PLAYER_ID)
        {
            if(GetCash(playerid) < TaxiFare[driver])
			{
		 		SCM(playerid, COLOR_GREY,"Nu ai suficienti bani!");
		 		SCM(driver, COLOR_GREY,"Pasagerul nu are suficienti bani!");
		 		return 1;
			}
			TaxiPassenger[driver] = playerid;
            SendClientMessageEx(playerid, COLOR_YELLOWG, "[TAXI] Ai ajuns la %s. Tarif: $%i/5 secunde.", GetNameEx(driver), TaxiFare[driver]);
		}
	}

	if(newstate == PLAYER_STATE_DRIVER)
	{
	    if(GetPlayerHasRightDrive(playerid, vehicle) == 0)
	        return 1;

	    if(IsABicycle(vehicle))
			VehicleEngine(vehicle, true);

	    VehicleInfo[vehicle][carDriver] = playerid;
	    pTemp[playerid][pDriver] = vehicle;

		if(IsRentCar(vehicle) && VehicleInfo[vehicle][carRent] == 0)
		{
		    SendClientMessage(playerid, -1, "Acest vehicul poate fi inchiriat pentru suma de $300.");
		    SendClientMessage(playerid, -1, "Foloseste /rentcar pentru a inchiria vehiculul.");
		}

		if(VehicleInfo[vehicle][carOwnerID] == PlayerInfo[playerid][pID])
		{
			SendClientMessageEx(playerid, COLOR_WHITE,"Ai fost pasager in %s.",VehicleNames[GetVehicleModel(vehicle)-400]);

			new count = CountVehicleTickets(playerid);
			if(count)
				SendClientMessageEx(playerid,COLOR_TOMATO, "[ ! ] {FFFFFF}Acest vehicul are amenzi neplatite (%i).", count);
		}

		if(!(PlayerInfo[playerid][pSettings] & togHUD))
		{
			if(PlayerInfo[playerid][pHud] == 1)
			{
				PlayerTextDrawShow(playerid, SpeedText0[playerid]);
				PlayerTextDrawShow(playerid, FuelText0[playerid]);
			}
			else if(PlayerInfo[playerid][pHud] == 2) PlayerTextDrawShow(playerid, SpeedText1[playerid]);
			else if(PlayerInfo[playerid][pHud] == 3) PlayerTextDrawShow(playerid, SpeedText2[playerid]);
			else if(PlayerInfo[playerid][pHud] == 4) PlayerTextDrawShow(playerid, SpeedText3[playerid]);
		}

		if(!VehicleInfo[vehicle][carEngineOn] && !IsADMVCar(vehicle) && !IsADMVTaxi(vehicle) && !IsADMVHeli(vehicle) && !IsABicycle(vehicle))
			SCM(playerid, COLOR_GREEN,"Motorul este oprit (/engine).");

		if(IsADMVCar(vehicle) && !PlayerInfo[playerid][pCarLic])
			SendClientMessageEx(playerid, COLOR_WHITE, "Tasteaza /licenseexam pentru a sustine testul. Sustinerea testului va costa {33AA33}$%i{FFFFFF}.",CARLIC_PRICE);

		if(IsADMVHeli(vehicle) && !PlayerInfo[playerid][pFlyLic])
			SendClientMessageEx(playerid, COLOR_WHITE, "Tasteaza /licenseexam pentru a sustine testul. Sustinerea testului va costa {33AA33}$%i{FFFFFF}.",FLYLIC_PRICE);

		if(IsADMVTaxi(vehicle) && !PlayerInfo[playerid][pTaxiLic])
			SendClientMessageEx(playerid, COLOR_WHITE, "Tasteaza /licenseexam pentru a sustine testul. Sustinerea testului va costa {33AA33}$%i{FFFFFF}.",TAXILIC_PRICE);
	}

    if(oldstate == PLAYER_STATE_DRIVER || oldstate == PLAYER_STATE_PASSENGER)
    {
        GetPlayerPos(playerid, ac_pos_x[playerid], ac_pos_y[playerid], ac_pos_z[playerid]);
        ac_carshot_flood{playerid} = 0;
        ac_veh_airbreak_flood{playerid} = 0;
        ac_veh_health{playerid} = 0;
        ac_enter_vehicle[playerid] = 0;
    }

	if(oldstate == PLAYER_STATE_DRIVER)
	{
     	new veh = pTemp[playerid][pDriver];
     	pTemp[playerid][pDriver] = INVALID_VEHICLE_ID;

	    if(veh != INVALID_VEHICLE_ID && VehicleInfo[veh][carDriver] == playerid)
	        VehicleInfo[veh][carDriver] = INVALID_PLAYER_ID;

		if(JackingEngine[playerid] != 0) JackingEngine[playerid] = 0;
		//UnFreezePlayer(playerid);
		if(PlayerInfo[playerid][pHud] == 1)
		{
			PlayerTextDrawHide(playerid, SpeedText0[playerid]);
			PlayerTextDrawHide(playerid, FuelText0[playerid]);
		}
		else if(PlayerInfo[playerid][pHud] == 2) PlayerTextDrawHide(playerid, SpeedText1[playerid]);
		else if(PlayerInfo[playerid][pHud] == 3) PlayerTextDrawHide(playerid, SpeedText2[playerid]);
		else if(PlayerInfo[playerid][pHud] == 4) PlayerTextDrawHide(playerid, SpeedText3[playerid]);
	}

	if(newstate == PLAYER_STATE_SPAWNED)
	{
	    if(GetPVarInt(playerid, #ac_spec) == 1)
	    {
	        DeletePVar(playerid, #ac_spec);
			ac_spawn{playerid} = 1;
		}

		new Float: health
			= 100.0;

		switch(pTemp[playerid][pDrugUse])
		{
		    case INV_GANJA, INV_MED_GANJA: health += 5.0;
		    case INV_LSD: health += 30.0;
		    case INV_MET: health += 15.0;
		    case INV_HEROIN, INV_COCAINE: health += 35.0;
		}
		SetPlayerHealth(playerid, health);
		SetPlayerArmour(playerid, PlayerInfo[playerid][pArmour]);
	}
	return 1;
}

public OnPlayerEnterCheckpoint(playerid)
{
	return 1;
}

public OnPlayerEnterRaceCheckpoint(playerid)
{
	return 1;
}

public OnPlayerLeaveRaceCheckpoint(playerid)
{
	return 1;
}

public OnRconCommand(cmd[])
{
	printf(cmd);
	return 1;
}

public OnPlayerRequestSpawn(playerid)
{
	if(IsPlayerNPC(playerid))
		return 1;

	return 0;
}

public OnDynamicObjectMoved(objectid)
{
    if(objectid == obj_ship[0] && ship_docked == 3)
    {
	    ship_docked = 1;

		new Float: ox,
			Float: oy,
			Float: oz;

		for(new i; i != MAX_TRUCK_CARGO; i++)
	    {
	        if(i < 8)
	            Streamer_SetIntData(STREAMER_TYPE_OBJECT, obj_lamp[i], E_STREAMER_MODEL_ID, 19123);

	        if(i < 4)
	        {
	            GetDynamicObjectPos(obj_gate[i], ox, oy, oz);
	        	MoveDynamicObject(obj_gate[i], ox + 10.0, oy, oz, 1.5);
	        }

	        if(TruckCargo[i][tOn] == 0 || TruckCargo[i][tType] != 2)
			    continue;

			Streamer_SetIntData(STREAMER_TYPE_3D_TEXT_LABEL, TruckCargo[i][tLabel], E_STREAMER_INTERIOR_ID, 0);
       		Streamer_SetIntData(STREAMER_TYPE_PICKUP, TruckCargo[i][tPickup], E_STREAMER_INTERIOR_ID, 0);
		}
	}

	if(objectid == obj_ship[0] && ship_docked == 2)
    	ship_docked = 0;

	return 1;
}

public OnObjectMoved(objectid)
{
	return 1;
}

public OnPlayerObjectMoved(playerid, objectid)
{
	return 1;
}

public OnPlayerPickUpPickup(playerid, pickupid)
{
	return 1;
}

public OnVehicleMod(playerid, vehicleid, componentid)
{
    AMSG(COLOR_LIGHTRED, "(Admin Info) {FFFFFF}%s (ID: %i) a primit kick pentru: s0beit.", GetNameEx(playerid), playerid);

    SendErrorMessage(playerid, "Ai primit kick deoarece ai folosit modificari avantajoase. (#006-1)");
	KickEx(playerid);

	RemoveVehicleComponent(vehicleid, componentid);
	LoadComp(vehicleid);
	return 1;
}

public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
    AMSG(COLOR_LIGHTRED, "(Admin Info) {FFFFFF}%s (ID: %i) a primit kick pentru: s0beit.", GetNameEx(playerid), playerid);

    SendErrorMessage(playerid, "Ai primit kick deoarece ai folosit modificari avantajoase. (#006-2)");
	KickEx(playerid);

	ChangeVehiclePaintjob(vehicleid, 3);
    LoadComp(vehicleid);
	return 1;
}

public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
    AMSG(COLOR_LIGHTRED, "(Admin Info) {FFFFFF}%s (ID: %i) a primit kick pentru: s0beit.", GetNameEx(playerid), playerid);

	SendErrorMessage(playerid, "Ai primit kick deoarece ai folosit modificari avantajoase. (#006-2)");
	KickEx(playerid);

    ChangeVehicleColor(vehicleid, VehicleInfo[vehicleid][carColor1], VehicleInfo[vehicleid][carColor2]);
	return 1;
}

public OnVehicleDamageStatusUpdate(vehicleid, playerid)
{
	new panels, doorsd, lightsf, tires;
	GetVehicleDamageStatus(vehicleid, panels, doorsd, lightsf, tires);
	//SendClientMessageEx(playerid, -1, "panels: %i, doors: %i, light: %i, tires: %i", panels, doorsd, lightsf, tires);

	if(VehicleInfo[vehicleid][carOwnerID] == 0)
	    return 1;

	if(0 == panels && 0 == doorsd && 0 == lightsf && 0 == tires)
		return 1;

	new Float:health;
	GetVehicleHealth(vehicleid, health);

	if(health > 750.0)
		UpdateVehicleDamageStatus(vehicleid, 0, 0, 0, 0);

	if(health < 350.0)
	{
	   	if(VehicleInfo[vehicleid][carEngine] > 0.0)
	   		VehicleInfo[vehicleid][carEngine] -= 1.0;

		if(VehicleInfo[vehicleid][carEngine] < 0.0)
		{
	    	if(VehicleInfo[vehicleid][carEngineOn])
				VehicleEngine(vehicleid, false);

			VehicleInfo[vehicleid][carEngine] = 0.0;
		}
	}
	return 1;
}

public OnPlayerSelectedMenuRow(playerid, row)
{
	if(GetPlayerMenu(playerid) != buy_interior)
	    return 1;

	new houseid = pTemp[playerid][pInteriorHouse]-1;
	switch(row)
	{
	    case 0:
    	{
	        for(new i = pTemp[playerid][pInteriorID]+1; i < MAX_INTERIORS; i++)
	        {
	            if(0 == AdminTeles[i][telesOn] || HouseInfo[houseid][hClass] != AdminTeles[i][telesType])
					continue;

                pTemp[playerid][pInteriorID] = i;

				DestroyPlayerObject(playerid, pTemp[playerid][pInteriorObj]);
	            pTemp[playerid][pInteriorObj] =
					CreatePlayerObject(playerid, 19300, AdminTeles[i][telesPosX], AdminTeles[i][telesPosY], AdminTeles[i][telesPosZ], 0.0, 0.0, 0.0);
				AttachCameraToPlayerObject(playerid, pTemp[playerid][pInteriorObj]);
			    break;
	        }
	        ShowMenuForPlayer(buy_interior, playerid);
		}
	    case 1:
		{
		    for(new i = pTemp[playerid][pInteriorID]-1; i != 0; i--)
	        {
	            if(0 == AdminTeles[i][telesOn] || HouseInfo[houseid][hClass] != AdminTeles[i][telesType])
					continue;

                pTemp[playerid][pInteriorID] = i;
				DestroyPlayerObject(playerid, pTemp[playerid][pInteriorObj]);
	            pTemp[playerid][pInteriorObj] =
					CreatePlayerObject(playerid, 19300, AdminTeles[i][telesPosX], AdminTeles[i][telesPosY], AdminTeles[i][telesPosZ], 0.0, 0.0, 0.0);
				AttachCameraToPlayerObject(playerid, pTemp[playerid][pInteriorObj]);
			    break;
	        }
	        ShowMenuForPlayer(buy_interior, playerid);
		}
		case 2:
		{
		    new id = pTemp[playerid][pInteriorID];
		    if(0 == AdminTeles[id][telesOn] || HouseInfo[houseid][hClass] != AdminTeles[id][telesType])
				return SendErrorMessage(playerid, "A aparut o eroare la interior.");

			Dialog_Show(playerid, BuyInteriorAccept, DIALOG_STYLE_MSGBOX, "Interior", "{ffffff}Esti sigur ca doresti sa cumperi un interior? Pret: $750\nMobilierul actual va disparea!", "Cumpara", "Inchide");
		}
	    case 3:
			SetPlayerBuyInterior(playerid, 0);

	}
	return 1;
}

public OnPlayerExitedMenu(playerid)
{
    if(pTemp[playerid][pInteriorBiz] != 0)
		ShowMenuForPlayer(buy_interior, playerid);

	return 1;
}

public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{
	return 1;
}

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
	if(0 == IsPlayerInAnyVehicle(playerid) && PRESSING(newkeys, KEY_AIM) && pTemp[playerid][pDemolitionTime])
	{
	    SetPlayerDrunkLevel(playerid, 50000);
	}
	else if(0 == IsPlayerInAnyVehicle(playerid) && PRESSING(oldkeys, KEY_AIM) && pTemp[playerid][pDemolitionTime])
	{
	    SetPlayerDrunkLevel(playerid, 1000);
	}

	if(PRESSING(newkeys, KEY_SPRINT) && pTemp[playerid][pDrugUse] == INV_COCAINE && random(10) == 0)
	{
	    ApplyAnimation(playerid, "PED", "FALL_collapse", 4.1, 0, 1, 1, 0, 0);
	}

    if(HOLDING(KEY_FIRE) && IsPlayerAttachedObjectSlotUsed(playerid, ATTACH_HANDS) && GetPVarInt(playerid, #use_ganja) && GetPVarInt(playerid, #time_ganja) < gettime())
	{
	    SetPVarInt(playerid, #time_ganja, gettime()+2);
		SetPVarInt(playerid, #use_ganja, GetPVarInt(playerid, #use_ganja)-1);
		if(GetPVarInt(playerid, #use_ganja) == 0)
		{
		    DeletePVar(playerid, #use_ganja);
			RemovePlayerAttachedObject(playerid, ATTACH_HANDS);
		}
		else
			ApplyAnimation(playerid, "GANGS", "SMKCIG_PRTL", 4.1, 0, 0, 0, 0, 0, 1);
		return 1;
	}

    if(HOLDING(KEY_SECONDARY_ATTACK) && IsPlayerAttachedObjectSlotUsed(playerid, ATTACH_HANDS) && pTemp[playerid][pPizzaBoy])
	{
	    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		RemovePlayerAttachedObject(playerid, ATTACH_HANDS);
		return 1;
	}

    if(HOLDING(KEY_SECONDARY_ATTACK) && IsPlayerAttachedObjectSlotUsed(playerid, ATTACH_HANDS) && GetPVarInt(playerid, #use_ganja))
	{
	    DeletePVar(playerid, #use_ganja);
		RemovePlayerAttachedObject(playerid, ATTACH_HANDS);
		return 1;
	}

	if(HOLDING(KEY_FIRE) && IsPlayerAttachedObjectSlotUsed(playerid, ATTACH_HANDS) && GetPVarInt(playerid, #use_food) && GetPVarInt(playerid, #time_food) < gettime())
	{
	    SetPVarInt(playerid, #time_food, gettime()+2);
		SetPVarInt(playerid, #use_food, GetPVarInt(playerid, #use_food)-1);
		if(GetPVarInt(playerid, #use_food) == 0)
		{
		    DeletePVar(playerid, #use_food);
			RemovePlayerAttachedObject(playerid, ATTACH_HANDS);
		}
		else
			OnPlayAnim(playerid, "FOOD", "EAT_Burger", 4.1,0,1,1,0,0);
		return 1;
	}

    if(HOLDING(KEY_SECONDARY_ATTACK) && IsPlayerAttachedObjectSlotUsed(playerid, ATTACH_HANDS) && GetPVarInt(playerid, #use_food))
	{
	    DeletePVar(playerid, #use_food);
		RemovePlayerAttachedObject(playerid, ATTACH_HANDS);
		return 1;
	}

    if(HOLDING(KEY_SECONDARY_ATTACK) && GetPVarInt(playerid, #selfie))
        cmd::selfie(playerid, "");

    if(HOLDING(KEY_SPRINT) && pTemp[playerid][pSpecPlayer] != INVALID_PLAYER_ID)
 	{
		if(IsPlayerInAnyVehicle(pTemp[playerid][pSpecPlayer]))
			PlayerSpectateVehicle(playerid, GetPlayerVehicleID(pTemp[playerid][pSpecPlayer]), 1);
		else
			PlayerSpectatePlayer(playerid, pTemp[playerid][pSpecPlayer], 1);

		SetInterior(playerid,GetInterior(pTemp[playerid][pSpecPlayer]));
		SetWorld(playerid, GetWorld(pTemp[playerid][pSpecPlayer]));
	}

    if(((PRESSING(newkeys, KEY_SPRINT) || PRESSING(newkeys, KEY_JUMP)) || (HOLDING(KEY_SPRINT) || HOLDING(KEY_JUMP))) && pTemp[playerid][pInjuredLegTime])
	{
		TogglePlayerControllable(playerid,0);
		cmd::stopanim(playerid, "");
		TogglePlayerControllable(playerid,1);
		if(PRESSED(KEY_SPRINT) || HOLDING(KEY_SPRINT))
		{
			ApplyAnimation(playerid, "PED", "FALL_collapse", 4.1, 0, 1, 1, 0, 0);
		}
		else if(PRESSED(KEY_JUMP)|| HOLDING(KEY_JUMP))
			ApplyAnimation(playerid, "PED", "getup_front", 4.0, 0, 0, 0, 0, 0);
	}

	if(HOLDING(KEY_SECONDARY_ATTACK) && pTemp[playerid][p3DMenu] != -1)
	{
    	Destroy3DMenu(pTemp[playerid][p3DMenu]);
		pTemp[playerid][p3DMenu] = -1;
  		ShowEditFurniture(playerid);
		return 1;
	}

	if(HOLDING(KEY_CROUCH) && 0 != IsPlayerInAnyVehicle(playerid))
	{
	    cmd::open(playerid, "");
	    return 1;
	}

    if(HOLDING( KEY_SUBMISSION ) && IsPlayerInAnyVehicle(playerid))
	{
	    cmd::lights(playerid, "");
	    return 1;
	}

	if(HOLDING(KEY_CTRL_BACK) && 0 == IsPlayerInAnyVehicle(playerid) && pTemp[playerid][p3DMenu] != -1)
	{
	    UpdateIntVar(playerid, "chose_texture", 1);
	    if(GetPVarInt(playerid, "chose_texture") > 4) SetPVarInt(playerid, "chose_texture", 0);

		new mes[32];
		format(mes, sizeof(mes), "~y~Schimbare textura: ~w~%i", GetPVarInt(playerid, "chose_texture")+1);
		InfoMSG(playerid, mes, 4);
		return 1;
	}

    if(HOLDING(KEY_WALK) && !IsPlayerInAnyVehicle(playerid))
	{
	    cmd::atm(playerid, "");
	}

	if(HOLDING(KEY_ANALOG_LEFT) && pTemp[playerid][pSpecPlayer] != INVALID_PLAYER_ID)
	{
	    new maxplayers = GetMaxPlayers();
		for(new i = pTemp[playerid][pSpecPlayer]+1, bool:secondloop; i < maxplayers; i++)
		{
			if(i == maxplayers && !secondloop)
			{
				secondloop = true;
				i = 0;
				continue;
			}

			if(!IsPlayerLogged(i) || playerid == i)
				continue;

			new mes[4];
			format(mes, sizeof(mes), "%i", i);
			cmd::spec(playerid, mes);
			break;
		}
	    return 1;
	}
	else if(HOLDING(KEY_ANALOG_RIGHT) && pTemp[playerid][pSpecPlayer] != INVALID_PLAYER_ID)
	{
	    new maxplayers = GetMaxPlayers();
		for(new i = pTemp[playerid][pSpecPlayer]-1, bool:secondloop; i < maxplayers; i--)
		{
			if(i <= 0 && !secondloop)
			{
				secondloop = true;
				i = maxplayers;
				continue;
			}

			if(!IsPlayerLogged(i) || playerid == i)
				continue;

			new mes[4];
			format(mes, sizeof(mes), "%i", i);
			cmd::spec(playerid, mes);
			break;
		}
	    return 1;
	}

	if(HOLDING(KEY_NO))
	{
	    if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	    {
	        if(BoomboxInfo[playerid][bUsed] != 0)
            	ShowBoomboxMenu(playerid);
	    }

	    if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DUCK && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	    	cmd::pickupitem(playerid, "");
		else if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		    cmd::vmenu(playerid, "");
		return 1;
	}

	if(HOLDING(KEY_CTRL_BACK) && 0 == IsPlayerInAnyVehicle(playerid))
	{
		cmd::inventory(playerid, "");
	}
	if(HOLDING(KEY_YES))
	{
	    if(GetPlayerAcceptAction(playerid) != 0)
	        return 1;

	    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	    	cmd::engine(playerid, "");
	}
	//--------------
	if(pTemp[playerid][pFoodStand] != 0 && (PRESSED(KEY_JUMP) || PRESSED(KEY_FIRE) || PRESSED(KEY_CROUCH)))
	{
		OnPlayAnim(playerid,"PED","IDLE_tired",4.1,0,1,1,0,1);
		RemovePlayerAttachedObject(playerid, ATTACH_HANDS);
		pTemp[playerid][pFoodStand] = 0;
	}

	if(PRESSED(KEY_FIRE) && RepairService[playerid] != 0 && RepairOffer[playerid] != INVALID_PLAYER_ID && RepairToVehicle[playerid] != INVALID_VEHICLE_ID)
	{
		if(GetNearVehicle(playerid, 4.2, RepairToVehicle[playerid]) == 0)
			ShowJobMessage(playerid, "~h~~p~TREBUIE SA STAI LANGA UN VEHICUL.");
		else
		{
			RepairOffer[playerid] = INVALID_PLAYER_ID;
			RepairTime[playerid] = 15;
		}
	}
	return 1;
}
public OnRconLoginAttempt(ip[], password[], success)
{
	return 1;
}

stock CheckWeapon(playerid)
{
	if(0 == IsPlayerLogged(playerid))
	    return 1;

    new weap,
		ammo;

   	GetPlayerWeaponData(playerid, 8, weap, ammo);
	if(weap && !ammo)
		ResetPlayerWeaponID(playerid, weap);

    GetPlayerWeaponData(playerid, 9, weap, ammo);
	if(weap && !ammo)
		ResetPlayerWeaponID(playerid, weap);


	weap = GetPlayerWeapon(playerid),
 	ammo = GetPlayerAmmo(playerid);

	if(GetPVarInt(playerid, #crt_fire) != 0 || 0 == weap)
		return 1;

	new slot;
	if((slot = GetWeapSlot(weap)) == -1)
	{
	    ac_ResetPlayerWeapons(playerid);
	    SendErrorMessage(playerid, "Ai primit kick deoarece ai folosit modificari avantajoase. (#001-1)");
	    KickEx(playerid);

	    AMSG(COLOR_LIGHTRED, "(Admin Info) {FFFFFF}%s (ID: %i) a primit kick pentru: s0beit.", GetNameEx(playerid), playerid);
	    return 1;
	}

	if(slot == 3)
	{
    	if(PlayerInfo[playerid][pAmmo][3] > ammo)
	    	PlayerInfo[playerid][pAmmo][3] = ammo;

		if(PlayerInfo[playerid][pWeap][3] != 0 && PlayerInfo[playerid][pAmmo][3] <= 0)
  			ResetPlayerWeaponID(playerid, PlayerInfo[playerid][pWeap][3]);
	}

	if(PlayerInfo[playerid][pWeap][slot] != weap && 0 == pTemp[playerid][pTaser])
	{
        ac_ResetPlayerWeapons(playerid);
	    SendErrorMessage(playerid, "Ai primit kick deoarece ai folosit modificari avantajoase. (#001-1 | Arma: %s. Gloante: %i)", GetWeaponNameEx(weap), ammo);
	    KickEx(playerid);

        AMSG(COLOR_LIGHTRED, "(Admin Info) {FFFFFF}%s (ID: %i) a primit kick pentru: weapon hack.", GetNameEx(playerid), playerid);
	    return 1;
	}

    if(PlayerInfo[playerid][pAmmo][slot]+5 < ammo && 0 == pTemp[playerid][pTaser])
	{
	    ac_ResetPlayerWeapons(playerid);
	    SendErrorMessage(playerid, "Ai primit kick deoarece ai folosit modificari avantajoase. (#002-1 | Arma: %s. Gloante reale: %i Dupa adaugare: %i)", GetWeaponNameEx(weap), PlayerInfo[playerid][pAmmo][slot], ammo);
		KickEx(playerid);

		AMSG(COLOR_LIGHTRED, "(Admin Info) {FFFFFF}%s (ID: %i) a primit kick pentru: weapon hack.", GetNameEx(playerid), playerid);
	    return 1;
	}
	return 1;
}

public OnPlayerUpdate(playerid)
{
	if(IsPlayerNPC(playerid) || !IsPlayerLogged(playerid))
		return 1;

	new
		ac_gtc = GetTickCount();

    if(IsPlayerAFK(playerid))
	{
		if(!(PlayerInfo[playerid][pSettings] & togAFK))
			SendClientMessageEx(playerid, COLOR_GREY, "Ai fost AFK timp de %i secunde.", pTemp[playerid][pDarkAFK]-2);
	}
	pTemp[playerid][pDarkAFK] = 0;

	new keys[3];
	GetPlayerKeys(playerid, keys[0], keys[1], keys[2]);
    if(GetPVarInt(playerid, #selfie))
	{
	    if(keys[1] == KEY_UP)
	    {
	        new Float: pz =
	        	GetPVarFloat(playerid, #selfie_z);

			pz += 0.01;
			if(pz < 0.70)
			{
			    new Float: rot;
     			GetPlayerFacingAngle(playerid, rot);

                SetPVarFloat(playerid, #selfie_z, pz);

		        new Float: x,
					Float: y,
					Float: z,
					Float: new_x,
					Float: new_y,
					Float: radius = 0.9;

			    GetPlayerPos(playerid, x, y, z);
		        new_x = x + radius * floatcos(rot - 270.0, degrees);
		        new_y = y + radius * floatsin(rot - 270.0, degrees);

				SetPlayerCameraPos(playerid, new_x, new_y, z + 0.78);
				SetPlayerCameraLookAt(playerid, x, y, z + pz);
				SetPlayerFacingAngle(playerid, rot);
			}
	    }
	    else if(keys[1] == KEY_DOWN)
	    {
	        new Float: pz =
	        	GetPVarFloat(playerid, #selfie_z);

			pz -= 0.01;
			if(pz > 0.50)
			{
			    new Float: rot;
     			GetPlayerFacingAngle(playerid, rot);

                SetPVarFloat(playerid, #selfie_z, pz);

		        new Float: x,
					Float: y,
					Float: z,
					Float: new_x,
					Float: new_y,
					Float: radius = 0.9;

			    GetPlayerPos(playerid, x, y, z);
		        new_x = x + radius * floatcos(rot - 270.0, degrees);
		        new_y = y + radius * floatsin(rot - 270.0, degrees);

				SetPlayerCameraPos(playerid, new_x, new_y, z + 0.78);
				SetPlayerCameraLookAt(playerid, x, y, z + pz);
				SetPlayerFacingAngle(playerid, rot);
			}
	    }
	    if(keys[2] == KEY_LEFT)
	    {
	        new Float: rot;
	        GetPlayerFacingAngle(playerid, rot);

			rot += 1.0;
			if(rot >= 359.0) rot = 0.0;

	        new Float: x,
				Float: y,
				Float: z,
				Float: new_x,
				Float: new_y,
				Float: radius = 0.9;

		    GetPlayerPos(playerid, x, y, z);
	        new_x = x + radius * floatcos(rot - 270.0, degrees);
	        new_y = y + radius * floatsin(rot - 270.0, degrees);

			SetPlayerCameraPos(playerid, new_x, new_y, z + 0.78);
			SetPlayerCameraLookAt(playerid, x, y, z + GetPVarFloat(playerid, #selfie_z));
			SetPlayerFacingAngle(playerid, rot);
	    }
	    else if(keys[2] == KEY_RIGHT)
	    {
	        new Float: rot;
	        GetPlayerFacingAngle(playerid, rot);

	        rot -= 1.0;
			if(rot <= 1.0) rot = 359.0;

	        new Float: x,
				Float: y,
				Float: z,
				Float: new_x,
				Float: new_y,
				Float: radius = 0.9;

		    GetPlayerPos(playerid, x, y, z);
	        new_x = x + radius * floatcos(rot - 270.0, degrees);
	        new_y = y + radius * floatsin(rot - 270.0, degrees);

			SetPlayerCameraPos(playerid, new_x, new_y, z + 0.78);
			SetPlayerCameraLookAt(playerid, x, y, z + GetPVarFloat(playerid, #selfie_z));
			SetPlayerFacingAngle(playerid, rot);
	    }
	}

	new vehicleid = GetPlayerVehicleID(playerid);
    if(vehicleid)
	{
	    if(!ac_veh[playerid])
		{
			if(ac_enter_vehicle[playerid] != vehicleid || ac_gtc < ac_enter_vehicle_time[playerid] + 600)
			{
			    //SendErrorMessage(playerid, "?? ???? ??????? ?? ????????????? ???????????? ?????. (#004-1)");
   				AMSG(COLOR_LIGHTRED, "(Admin Info) {FFFFFF}%s (ID: %i) a primit kick pentru: car hack.", GetNameEx(playerid), playerid);
   				Kick(playerid);
                SetVehicleHealth(vehicleid, vehicle_hp[vehicleid]);
			}
		}
		else if(ac_veh[playerid] != vehicleid)
		{
		    //SendErrorMessage(playerid, "?? ???? ??????? ?? ????????????? ???????????? ?????. (#004-2)");
   			AMSG(COLOR_LIGHTRED, "(Admin Info) {FFFFFF}%s (ID: %i) a primit kick pentru: car hack.", GetNameEx(playerid), playerid);
   			Kick(playerid);
   			SetVehicleHealth(vehicleid, vehicle_hp[vehicleid]);
		}

		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
	    	for(new i; i != MAX_SPIKE; i++)
			{
			    if(SpikeInfo[i][sCreated] == 0 || !IsPlayerInRangeOfPoint(playerid, 3.5, SpikeInfo[i][sX], SpikeInfo[i][sY], SpikeInfo[i][sZ]))
			        continue;

				new panels, doorsd, lightsf, tires;
				GetVehicleDamageStatus(vehicleid, panels, doorsd, lightsf, tires);
				UpdateVehicleDamageStatus(vehicleid, panels, doorsd, lightsf, 15);
				break;
			}
		}

		new string[64],
			kmh = GetVehicleSpeed(vehicleid);

		switch(PlayerInfo[playerid][pHud])
		{
			case 1:
			{
				format(string, sizeof(string), "~b~km/h: ~h~~g~%i", kmh);
				PlayerTextDrawSetString(playerid, SpeedText0[playerid], string);
				format(string, sizeof(string), "~b~Combustibil: ~h~~g~%i", VehicleInfo[vehicleid][carFuel]);
				PlayerTextDrawSetString(playerid, FuelText0[playerid], string);
			}
			case 2:
			{
				format(string, sizeof(string), "~w~%s ~r~%i %i~y~KMH", VehicleNames[GetVehicleModel(vehicleid)-400], VehicleInfo[vehicleid][carFuel], kmh);
				PlayerTextDrawSetString(playerid, SpeedText1[playerid], string);
			}
			case 3:
			{
				format(string, sizeof(string), "~l~%s~n~~w~%i ~l~%i~n~", VehicleNames[GetVehicleModel(vehicleid)-400], kmh, VehicleInfo[vehicleid][carFuel]);
				PlayerTextDrawSetString(playerid, SpeedText2[playerid], string);
			}
			case 4:
			{
				if(VehicleInfo[vehicleid][carFuel] < 1) format(string, sizeof(string), "~r~0");
				else if(VehicleInfo[vehicleid][carFuel] < 11) format(string, sizeof(string), "~r~-");
				else if(VehicleInfo[vehicleid][carFuel] < 21) format(string, sizeof(string), "~g~--");
				else if(VehicleInfo[vehicleid][carFuel] < 31) format(string, sizeof(string), "~g~---");
				else if(VehicleInfo[vehicleid][carFuel] < 41) format(string, sizeof(string), "~g~----");
				else if(VehicleInfo[vehicleid][carFuel] < 51) format(string, sizeof(string), "~g~-----");
				else if(VehicleInfo[vehicleid][carFuel] < 61) format(string, sizeof(string), "~g~------");
				else if(VehicleInfo[vehicleid][carFuel] < 71) format(string, sizeof(string), "~g~-------");
				else if(VehicleInfo[vehicleid][carFuel] < 81) format(string, sizeof(string), "~g~--------");
				else if(VehicleInfo[vehicleid][carFuel] < 91) format(string, sizeof(string), "~g~---------");
				else if(VehicleInfo[vehicleid][carFuel] < 101 || VehicleInfo[vehicleid][carFuel] > 100) format(string, sizeof(string), "~g~----------");

				if(kmh == 0) format(string, sizeof(string), "%s~n~~w~0", string);
				else if(kmh < 20) format(string, sizeof(string), "%s~n~~w~-", string);
				else if(kmh < 40) format(string, sizeof(string), "%s~n~~w~--", string);
				else if(kmh < 60) format(string, sizeof(string), "%s~n~~w~---", string);
				else if(kmh < 80) format(string, sizeof(string), "%s~n~~w~---~h~~y~-", string);
				else if(kmh < 100) format(string, sizeof(string), "%s~n~~w~---~h~~y~--", string);
				else if(kmh < 120) format(string, sizeof(string), "%s~n~~w~---~h~~y~---", string);
				else if(kmh < 140) format(string, sizeof(string), "%s~n~~w~---~h~~y~----", string);
				else if(kmh < 160) format(string, sizeof(string), "%s~n~~w~---~h~~y~----~r~-", string);
				else if(kmh < 180) format(string, sizeof(string), "%s~n~~w~---~h~~y~----~r~--", string);
				else if(kmh < 200) format(string, sizeof(string), "%s~n~~w~---~h~~y~----~r~---", string);
				else if(kmh >= 200) format(string, sizeof(string), "%s~n~~w~---~h~~y~----~r~----", string);
				PlayerTextDrawSetString(playerid, SpeedText3[playerid], string);
			}
		}
	}
    ac_veh[playerid] = vehicleid;
	return 1;
}

public OnPlayerStreamIn(playerid, forplayerid)
{
    if((PlayerInfo[forplayerid][pSettings] & togName) || maskOn{playerid})
	{
		ShowPlayerNameTagForPlayer(forplayerid, playerid, 0);
	}
	return 1;
}

public OnPlayerStreamOut(playerid, forplayerid)
{
	if(IsPlayerLogged(playerid) && maskOn{playerid})
	{
		ShowPlayerNameTagForPlayer(playerid, playerid, false);
	}
	return 1;
}

public OnVehicleStreamIn(vehicleid, forplayerid)
{
	if(VehicleInfo[vehicleid][carLocked]) SetVehicleParamsForPlayer(vehicleid,forplayerid,0,1);
	return 1;
}

public OnVehicleStreamOut(vehicleid, forplayerid)
{
    SetVehicleParamsForPlayer(vehicleid,forplayerid,0,0);
	return 1;
}

public OnPlayerClickPlayer(playerid, clickedplayerid, source)
{
	return 1;
}

new PreloadAnimLibs[][] =
{
	"AIRPORT",      "ATTRACTORS",   "BAR",          "BASEBALL",     "BD_FIRE",
	"BEACH",        "BENCHPRESS",   "BF_INJECTION", "BIKE_DBZ",     "BIKED",
	"BIKEH",        "BIKELEAP",     "BIKES",        "BIKEV",        "BLOWJOBZ",
	"BMX",          "BOMBER",       "BOX",          "BSKTBALL",     "BUDDY",
	"BUS",          "CAMERA",       "CAR",          "CAR_CHAT",     "CARRY",
	"CASINO",       "CHAINSAW",     "CHOPPA",       "CLOTHES",      "COACH",
	"COLT45",       "COP_AMBIENT",  "COP_DVBYZ",    "CRACK",        "CRIB",
	"DAM_JUMP",     "DANCING",      "DEALER",       "DILDO",        "DODGE",
	"DOZER",        "DRIVEBYS",     "FAT",          "FIGHT_B",      "FIGHT_C",
	"FIGHT_D",      "FIGHT_E",      "FINALE",       "FINALE2",      "FLAME",
	"FLOWERS",      "FOOD",         "FREEWEIGHTS",  "GANGS",        "GFUNK",
	"GHANDS",       "GHETTO_DB",    "GOGGLES",      "GRAFFITI",     "GRAVEYARD",
	"GRENADE",      "GYMNASIUM",    "HAIRCUTS",     "HEIST9",       "INT_HOUSE",
	"INT_OFFICE",   "INT_SHOP",     "JST_BUISNESS", "KART",         "KISSING",
	"KNIFE",        "LAPDAN1",      "LAPDAN2",      "LAPDAN3",      "LOWRIDER",
	"MD_CHASE",     "MD_END",       "MEDIC",        "MISC",         "MTB",
	"MUSCULAR",     "NEVADA",       "ON_LOOKERS",   "OTB",          "PARACHUTE",
	"PARK",         "PAULNMAC",     "PED",          "PLAYER_DVBYS", "PLAYIDLES",
	"POLICE",       "POOL",         "POOR",         "PYTHON",       "QUAD",
	"QUAD_DBZ",     "RAPPING",      "RIFLE",        "RIOT",         "ROB_BANK",
	"ROCKET",       "RUNNINGMAN",   "RUSTLER",      "RYDER",        "SCRATCHING",
	"SEX",          "SHAMAL",       "SHOP",         "SHOTGUN",      "SILENCED",
	"SKATE",        "SMOKING",      "SNIPER",       "SNM",          "SPRAYCAN",
	"STRIP",        "SUNBATHE",     "SWAT",         "SWEET",        "SWIM",
	"SWORD",        "TANK",         "TATTOOS",      "TEC",          "TRAIN",
	"TRUCK",        "UZI",          "VAN",          "VENDING",      "VORTEX",
	"WAYFARER",     "WEAPONS",      "WOP",          "WUZI"
};

stock PreloadAnimations(playerid)
{
	for (new i = 0; i < sizeof(PreloadAnimLibs); i ++) {
	    ApplyAnimation(playerid, PreloadAnimLibs[i], "null", 4.0, 0, 0, 0, 0, 0, 1);
	}
	return 1;
}

stock SetPlayerSpawn(playerid)
{
	if(IsPlayerNPC(playerid))
		return 1;

	if(pTemp[playerid][pSpecPlayer] != INVALID_PLAYER_ID)
	{
	    pTemp[playerid][pSpecPlayer] = INVALID_PLAYER_ID;
		SetInterior(playerid,PlayerInfo[playerid][pInt]);
		SetWorld(playerid, PlayerInfo[playerid][pWorld]);
		SetPlayerPosEx(playerid,PlayerInfo[playerid][pPosX],PlayerInfo[playerid][pPosY],PlayerInfo[playerid][pPosZ]);
		PlayerTextDrawHide(playerid, spectate_TD[playerid][0]);
		PlayerTextDrawHide(playerid, spectate_TD[playerid][1]);
		return 1;
	}

    if(pTemp[playerid][pCCTV] == 1)
	{
	    pTemp[playerid][pCCTV] = 0;
		SetInterior(playerid,PlayerInfo[playerid][pInt]);
		SetWorld(playerid, PlayerInfo[playerid][pWorld]);
		SetPlayerPosEx(playerid,PlayerInfo[playerid][pPosX],PlayerInfo[playerid][pPosY],PlayerInfo[playerid][pPosZ]);
	    return 1;
	}

	if(pTemp[playerid][pInteriorBiz] != 0)
	{
	    new bizid = pTemp[playerid][pInteriorBiz]-1;
		SetPlayerPosEx(playerid,BizInfo[bizid][bizExitX], BizInfo[bizid][bizExitY], BizInfo[bizid][bizExitZ]);
		SetInterior(playerid,BizInfo[bizid][bizExitInt]);
		SetWorld(playerid,BizInfo[bizid][bizExitVW]);

        pTemp[playerid][pInteriorBiz] = 0;
        pTemp[playerid][pInteriorID] = 0;
        pTemp[playerid][pInteriorHouse] = 0;
	    return 1;
	}

	if(pTemp[playerid][pZond] == 1)
	{
	    pTemp[playerid][pZond] = 0;
		SetInterior(playerid,PlayerInfo[playerid][pInt]);
		SetWorld(playerid, PlayerInfo[playerid][pWorld]);
		SetPlayerPosEx(playerid,PlayerInfo[playerid][pPosX],PlayerInfo[playerid][pPosY],PlayerInfo[playerid][pPosZ]);
	    return 1;
	}

	if(PlayerInfo[playerid][pAJailed] != 0)
	{
		SetInterior(playerid, 18);
		SetWorld(playerid, playerid + 100);
		SetPlayerPosEx(playerid, -219.4580,1410.6747,27.7734);
		SendClientMessageEx(playerid, COLOR_WHITE,"Esti inchis. Vei fi eliberat in: %i minute.", PlayerInfo[playerid][pAJailTime]/60);
		return 1;
	}

	if(PlayerInfo[playerid][pJailed])
	    return PutPlayerInPrison(playerid);

	if(PlayerInfo[playerid][pInjured] != 0)
	{
	    SetPlayerPosEx(playerid, PlayerInfo[playerid][pPosX], PlayerInfo[playerid][pPosY], PlayerInfo[playerid][pPosZ]);
		SetInterior(playerid, PlayerInfo[playerid][pInt]);
		SetWorld(playerid, PlayerInfo[playerid][pWorld]);
		OnAnim{playerid} = true;
		return 1;
	}

	if(PlayerInfo[playerid][pSpawnType] == 0)
	{
	    if(PlayerInfo[playerid][pSpawnPoint] > 4)
	        PlayerInfo[playerid][pSpawnPoint] = 1;

	   	SetPlayerPosEx(playerid, first_spawn[PlayerInfo[playerid][pSpawnPoint]-1][0], first_spawn[PlayerInfo[playerid][pSpawnPoint]-1][1], first_spawn[PlayerInfo[playerid][pSpawnPoint]-1][2]);
	    SetPlayerFacingAngle(playerid, first_spawn[PlayerInfo[playerid][pSpawnPoint]-1][3]);
		SetInterior(playerid,0);
		SetWorld(playerid, 0);
	}
 	else if(PlayerInfo[playerid][pSpawnType] == -1)
	{
		if(PlayerInfo[playerid][pFaction] == 0)
		{
			SCM(playerid, COLOR_LIGHTRED, "Nu faci parte dintr-o factiune.");
			PlayerInfo[playerid][pSpawnType] = 0;
            if(PlayerInfo[playerid][pSpawnPoint] > 4)
		       	PlayerInfo[playerid][pSpawnPoint] = 1;

			SetPlayerPosEx(playerid, first_spawn[PlayerInfo[playerid][pSpawnPoint]-1][0], first_spawn[PlayerInfo[playerid][pSpawnPoint]-1][1], first_spawn[PlayerInfo[playerid][pSpawnPoint]-1][2]);
		    SetPlayerFacingAngle(playerid, first_spawn[PlayerInfo[playerid][pSpawnPoint]-1][3]);
			SetInterior(playerid,0);
			SetWorld(playerid, 0);
		}
		else
		{
			SetPlayerPosEx(playerid,Factions[PlayerInfo[playerid][pFaction]][fPosX],Factions[PlayerInfo[playerid][pFaction]][fPosY],Factions[PlayerInfo[playerid][pFaction]][fPosZ]);
			SetInterior(playerid, Factions[PlayerInfo[playerid][pFaction]][fSpawnInt]);
			SetWorld(playerid, Factions[PlayerInfo[playerid][pFaction]][fSpawnVW]);
		}
	}
	else if(PlayerInfo[playerid][pSpawnType] == -2)
	{
	    SetPlayerPosEx(playerid, PlayerInfo[playerid][pPosX],PlayerInfo[playerid][pPosY],PlayerInfo[playerid][pPosZ]);
		SetPlayerFacingAngle(playerid, PlayerInfo[playerid][pPosA]);
		SetInterior(playerid, PlayerInfo[playerid][pInt]);
		SetWorld(playerid, PlayerInfo[playerid][pWorld]);
	}
	else if(PlayerInfo[playerid][pSpawnType] > 0)
	{
	    new houseid = GetHouseIDByMysql(PlayerInfo[playerid][pSpawnType]);
	    if(houseid == -1 || (HouseInfo[houseid][hOwnerID] != PlayerInfo[playerid][pID] && PlayerInfo[playerid][pRentKey] != PlayerInfo[playerid][pSpawnType]))
		{
			SCM(playerid, COLOR_LIGHTRED, "Nu ai o casa sau un loc unde stai in chirie.");
			PlayerInfo[playerid][pSpawnType] = 0;

            if(PlayerInfo[playerid][pSpawnPoint] > 4)
		       	PlayerInfo[playerid][pSpawnPoint] = 1;

			SetPlayerPosEx(playerid, first_spawn[PlayerInfo[playerid][pSpawnPoint]-1][0], first_spawn[PlayerInfo[playerid][pSpawnPoint]-1][1], first_spawn[PlayerInfo[playerid][pSpawnPoint]-1][2]);
		    SetPlayerFacingAngle(playerid, first_spawn[PlayerInfo[playerid][pSpawnPoint]-1][3]);
			SetInterior(playerid,0);
			SetWorld(playerid, 0);
		}
		else
		{
			SetPlayerPosEx(playerid, HouseInfo[houseid][hExitX], HouseInfo[houseid][hExitY],HouseInfo[houseid][hExitZ]);
			SetInterior(playerid,HouseInfo[houseid][hExitInt]);
			SetWorld(playerid,HouseInfo[houseid][hExitVW]);
			pTemp[playerid][pHouseEntered] = houseid;
		}
	}
	return 1;
}

stock PutPlayerInPrison(playerid)
{
	if(PlayerInfo[playerid][pJailed] == 0)
	    return 1;

    if(PlayerInfo[playerid][pJailed] == LSPD_JAIL)
	{
	    new i = random(sizeof(prison_lspd));
	    SetPlayerPosEx(playerid, prison_lspd[i][0], prison_lspd[i][1], prison_lspd[i][2]);
		SetInterior(playerid, 1);
		SetWorld(playerid, 1);
		return 1;
	}
	else if(PlayerInfo[playerid][pJailed] == SASD_JAIL)
	{
	    SetPlayerPosEx(playerid, -133.8623,1331.5747,845.0739);
		SetInterior(playerid, 3);
		SetWorld(playerid, 3);
		return 1;
	}
	else if(PlayerInfo[playerid][pJailed] == JEFF_JAIL)
	{
	    SetPlayerPosEx(playerid, 1452.5619,-1789.7159,2340.5710);
		SetInterior(playerid, 16);
		SetWorld(playerid, 23);
		return 1;
	}

	if(PlayerInfo[playerid][pIsolateTime] != 0)
	{
	    if(IsValidDynamic3DTextLabel(PrisonLabel[playerid]))
		{
			DestroyDynamic3DTextLabel(PrisonLabel[playerid]);
	        PrisonLabel[playerid] = Text3D:INVALID_3DTEXT_ID;
		}
		new mes[5];
		format(mes, sizeof(mes), "B%i", PlayerInfo[playerid][pPrisoned] + 100);
        PrisonLabel[playerid] = CreateDynamic3DTextLabel(mes, 0xFF0000FF, 0,0,0.1, 15.0, playerid, INVALID_VEHICLE_ID, 1);

	    new i = PlayerInfo[playerid][pPrisoned];
	    SetPlayerPosEx(playerid, prison_isolate[i][0], prison_isolate[i][1], prison_isolate[i][2]);
		SetInterior(playerid, 6);
		SetWorld(playerid, 7);
		return 1;
	}

	if(PlayerInfo[playerid][pJailed] == PRISON_JAIL)
	{
        if(IsValidDynamic3DTextLabel(PrisonLabel[playerid]))
		{
			DestroyDynamic3DTextLabel(PrisonLabel[playerid]);
	        PrisonLabel[playerid] = Text3D:INVALID_3DTEXT_ID;
		}
		new mes[5];
		format(mes, sizeof(mes), "A%i", PlayerInfo[playerid][pPrisoned] + 100);
        PrisonLabel[playerid] = CreateDynamic3DTextLabel(mes, 0x00FF00FF, 0,0,0.1, 15.0, playerid, INVALID_VEHICLE_ID, 1);

	    new i = PlayerInfo[playerid][pPrisoned];
	    SetPlayerPosEx(playerid, prison_sadoc[i][0], prison_sadoc[i][1], prison_sadoc[i][2]);
		SetInterior(playerid, 6);
		SetWorld(playerid, 6);
		return 1;
	}
	return 1;
}

public OnPlayerGiveDamage(playerid, damagedid, Float:amount, weaponid, bodypart)
{
    new Float:health,
		Float:armour;

	GetPlayerHealth(damagedid, health);
	GetPlayerArmour(damagedid, armour);

	if(damagedid != INVALID_PLAYER_ID)
	{
        if(pTemp[damagedid][pInvulnerable])
			return 1;

	    if(PlayerInfo[damagedid][pInjured] == 1 && pTemp[damagedid][pInjuredInvulnerable] < gettime())
		{
		    ac_ResetPlayerWeapons(damagedid);
		    SetPlayerHealth(damagedid, 100.0);
		    PlayerInfo[damagedid][pInjured] = 2;
			SendClientMessageEx(damagedid, COLOR_LIGHTRED, "(( Ai murit din cauza ranilor severe. ))");
			ApplyAnimation(damagedid,"PARACHUTE","FALL_skyDive_DIE",3.5,0,0,0,1,0);
		}

		if(PlayerInfo[damagedid][pInjured])
		{
		    SetPlayerHealth(damagedid, 100.0);
		    return 1;
		}

        if(weaponid == 23 && pTemp[playerid][pTaser])
		{
		    SetPlayerHealth(damagedid, health);
            SetPlayerArmour(damagedid, armour);

            if(!PlayerNearPlayer(10.0, damagedid, playerid))
				return SendErrorMessage(playerid, "Acel jucator este prea departe.");

            new vehicle = GetPlayerVehicleID(damagedid);
			if(vehicle != 0 && !IsABiker(vehicle) && !IsABicycle(vehicle))
				return 1;

            if(pTemp[damagedid][pTaserTime])
                return SendErrorMessage(playerid, "Acel jucator a fost deja lovit de catre pinii tazerului.");

            if(vehicle != 0)
			    RemovePlayerFromVehicle(damagedid);

            SavePlayerPos(damagedid);
            ApplyAnimation(damagedid, "SWEET", "Sweet_injuredloop", 4.0, 1, 0, 0, 1, 0);
            pTemp[damagedid][pTaserTime] = 10;

			if(PlayerInfo[damagedid][pSex] == 1)
				cmd::me(damagedid, "a fost imobilizat de catre un tazer.");
			else
				cmd::me(damagedid, "a fost imobilizata de catre un tazer.");

			SetPlayerDrunkLevel(damagedid, 2500);
		    return 1;
		}
		else if(weaponid == 25 && pTemp[playerid][pRubber])
		{
            SetPlayerHealth(damagedid, health);
            SetPlayerArmour(damagedid, armour);

            if(!PlayerNearPlayer(10.0, damagedid, playerid))
				return SendErrorMessage(playerid, "Acel jucator este prea departe.");

			new vehicle = GetPlayerVehicleID(damagedid);
			if(vehicle != 0 && !IsABiker(vehicle) && !IsABicycle(vehicle))
				return 1;

            if(pTemp[damagedid][pTaserTime])
                return SendErrorMessage(playerid, "Acel jucator a fost deja lovit de catre tazer.");

			if(vehicle != 0)
			    RemovePlayerFromVehicle(damagedid);

            SavePlayerPos(damagedid);
            ApplyAnimation(damagedid, "SWEET", "Sweet_injuredloop", 4.0, 1, 0, 0, 1, 0);
            pTemp[damagedid][pTaserTime] = 20;

			if(PlayerInfo[damagedid][pSex] == 1)
				cmd::me(damagedid, "a fost paralizat de catre munitie non-letala.");
			else
				cmd::me(damagedid, "a fost paralizata de catre munitie non-letala.");

			SetPlayerDrunkLevel(damagedid, 2500);
		    return 1;
		}

        if((bodypart == 7 || bodypart == 8) && pTemp[damagedid][pInjuredLegTime] == 0)
		{
		    SendErrorMessage(damagedid, "Caracterul tau a fost lovit in picior. Nu va putea alerga sau sari timp de doua minute.");
    		pTemp[damagedid][pInjuredLegTime] = 120;
		}

		new Float:damage;
		switch(weaponid)
		{
		    case 0: damage = 2.0; // Fist
			case 1: damage = 5.0; // Brass Knuckles
			case 2: damage = 5.0;   // Golf Club
			case 3: damage = 5.0; // Nightstick
			case 4: damage = 7.0; // Knife
			case 5: damage = 5.0; // Baseball Bat
			case 6: damage = 5.0; // Shovel
			case 7: damage = 5.0; // Pool Cue
			case 8: damage = 8.0; // Katana
			case 9: damage = 10.0; // Chainsaw
			case 14: damage = 2.0; // Flowers
			case 15: damage = 5.0; // Cane
			case 16: damage = 50.0; // Grenade
			case 18: damage = 20.0; // Molotov
			case 22: damage = float(randomEx(15, 20)); // Colt45
			case 23, 28, 29, 32: damage = float(randomEx(17, 23)); // SD Pistol, UZI, MP5, Tec
			case 24: damage = float(randomEx(38, 43)); // Desert Eagle
			case 25, 26, 27: // Shotgun, Sawnoff Shotgun, CombatShotgun
			{
			    new Float: p_x, Float: p_y, Float: p_z;
			    GetPlayerPos(playerid, p_x, p_y, p_z);
			    new Float: dist = GetPlayerDistanceFromPoint(damagedid, p_x, p_y, p_z);

			    if (dist < 5.0)
					damage = float(randomEx(50, 55));

				else if (dist < 10.0)
					damage = float(randomEx(23, 35));

				else if (dist < 15.0)
					damage = float(randomEx(15, 25));

				else if (dist < 20.0)
					damage = float(randomEx(10, 15));

				else if (dist < 30.0)
					damage = float(randomEx(5, 8));
			}
			case 30: damage = float(randomEx(20, 25)); // AK47
			case 31: damage = float(randomEx(20, 22)); // M4A1
			case 33, 34: damage = float(randomEx(70, 75)); // Country Rifle, Sniper Rifle
			case 35: damage = 0.0; // RPG
			case 36: damage = 0.0; // HS Rocket
			case 38: damage = 0.0; // Minigun
		}

        if(bodypart == BODY_PART_TORSO && armour > 0.0 && (22 <= weaponid <= 38))
		{
		    if(armour - damage <= 7.0)
				SetPlayerArmour(damagedid, 0.0);
	 		else
			 	SetPlayerArmour(damagedid, armour - damage);

            SetPlayerHealth(damagedid, health);
			RecordDamage(damagedid, weaponid, bodypart, damage, 1);
		}
		else
		{
		    if(health - damage <= 7.0)
				InjuredPlayer(damagedid, playerid, weaponid);
			else
			 	SetPlayerHealth(damagedid, health - damage);

			if(armour)
			    SetPlayerArmour(damagedid, armour);

			RecordDamage(damagedid, weaponid, bodypart, damage, 0);
		}
	}
	else
	{
	    if(health - amount <= 7.0)
			InjuredPlayer(damagedid, playerid, weaponid);
	}
	return 1;
}

stock RecordDamage(playerid, weaponid, bodypart, Float: amount, armour)
{
	for(new i = 0; i != MAX_DAMAGES; i++)
	{
	    if(DamageInfo[playerid][i][damageOn] == 1)
	        continue;

        DamageInfo[playerid][i][damageOn] = 1;
		DamageInfo[playerid][i][damageWeapon] = weaponid;
		DamageInfo[playerid][i][damageBodypart] = bodypart;
		DamageInfo[playerid][i][damageAmount] = amount;
		DamageInfo[playerid][i][damageArmour] = armour;

		pTemp[playerid][pDamagesCount]++;
		break;
    }
    return 1;
}

public OnPlayerTakeDamage(playerid, issuerid, Float:amount, weaponid, bodypart)
{
	return 1;
}

stock InjuredPlayer(playerid, killerid, weaponid)
{
	if(!IsPlayerLogged(playerid))
	    return 1;

	ResetVariables(playerid);
	RemovePlayerMask(playerid);

	foreach(Player, i)
	{
	    if(!IsPlayerLogged(i) || pTemp[i][pDMLog] != 1)
			continue;

		SendDeathMessageToPlayer(i, killerid, playerid, weaponid);
	}

	SavePlayerPos(playerid);

	if (IsPlayerInAnyVehicle(playerid))
 		SetPlayerPosEx(playerid, PlayerInfo[playerid][pPosX],PlayerInfo[playerid][pPosY],PlayerInfo[playerid][pPosZ]);

	SetPlayerHealth(playerid, 100);
	PlayerInfo[playerid][pInjured] = 1;
	pTemp[playerid][pInjuredTime] = 60;
    pTemp[playerid][pInjuredLegTime] = 0;
    pTemp[playerid][pInjuredInvulnerable] = gettime() + 4;
	//
	SendClientMessageEx(playerid, COLOR_LIGHTRED, "(( Ai fost ranit de %i ori, foloseste /damages %i pentru mai multe informatii. ))", pTemp[playerid][pDamagesCount], playerid);
	SCM(playerid, COLOR_WHITE, "Esti sever ranit. Asteapta ajutor sau foloseste \"/acceptdeath\".");

	OnAnim{playerid} = true;
	ApplyAnimation(playerid, "PED", "KO_SHOT_STOM", 4.0, 1, 0, 0, 0, 0, 1);
	return 1;
}

forward OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ);
public OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ)
{
    if(hittype == BULLET_HIT_TYPE_PLAYER)
    {
        if((floatcmp(floatabs(fX), 20.0) == 1)
        || (floatcmp(floatabs(fY), 20.0) == 1)
        || (floatcmp(floatabs(fZ), 20.0) == 1))
            return KickEx(playerid), 0;
    }

	if (weaponid < 22 || weaponid > 38)
        return 0;

	if(GetPVarInt(playerid, #crt_fire) == 1)
	{
	    new Float:fOriginX, Float:fOriginY, Float:fOriginZ,
			Float:fHitPosX, Float:fHitPosY, Float:fHitPosZ;
		GetPlayerLastShotVectors(playerid, fOriginX, fOriginY, fOriginZ, fHitPosX, fHitPosY, fHitPosZ);

		new fireid = -1;
		for(new i; i != MAX_FIRES; i++)
		{
		    if(FiresInfo[i][fireOn] != 0)
		        continue;

			fireid = i;
			break;
		}

		if(fireid == -1)
		    return SendErrorMessage(playerid, "Numarul maxim de incendii a fost atins.");

		FiresInfo[fireid][fireOn] = 1;
		FiresInfo[fireid][fireObj] = CreateDynamicObject(18691, fHitPosX, fHitPosY, fHitPosZ-2.0, 0.0, 0.0, 0.0, GetWorld(playerid), GetInterior(playerid));
		FiresInfo[fireid][firePos][0] = fHitPosX;
		FiresInfo[fireid][firePos][1] = fHitPosY;
		FiresInfo[fireid][firePos][2] = fHitPosZ;
		FiresInfo[fireid][fireVW] = GetWorld(playerid);
		FiresInfo[fireid][fireInt] = GetInterior(playerid);
		FiresInfo[fireid][fireHealth] = 100;
		FiresInfo[fireid][fireTimer] = 1800;

		SendClientMessageEx(playerid, -1, "????? ID: %i ??????.", fireid);

		FiresInfo[fireid][fireLabel] =
			CreateDynamic3DTextLabel("100 %", 0xCC0500FFF, fHitPosX, fHitPosY, fHitPosZ+2.3, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, GetWorld(playerid), GetInterior(playerid), -1, 100.0);
	    return 0;
	}

    if(IsPlayerAFK(playerid))
	{
	    if(0 == server_admins)
	        return Kick(playerid);

	    new weaponname[32];
	    GetWeaponName(weaponid, weaponname, 32);
        UpdateIntVar(playerid, #ac_private, 1);
	    if(GetPVarInt(playerid, #ac_private) > 4)
	    {
	        AMSG(COLOR_LIGHTRED, "(Admin Info) {FFFFFF}%s (ID: %i) a primit kick pentru ca a tras in %s cat timp era AFK.", GetNameEx(playerid), playerid, weaponname);
	        KickEx(playerid);
	        return 1;
	    }
	    AMSG(COLOR_LIGHTRED, "(Admin Info) {FFFFFF}%s (ID: %i) a primit kick pentru ca a tras in %s cat timp era AFK.", GetNameEx(playerid), playerid, weaponname);
	}

	if(0 == HasWeapon(playerid, weaponid) && pTemp[playerid][pTaser] == 0)
	{
	    ac_ResetPlayerWeapons(playerid);
	    SendErrorMessage(playerid, "Ai primit kick deoarece ai folosit modificari avantajoase. (#001-2 | Arma: %s.)", GetWeaponNameEx(weaponid));
	    KickEx(playerid);

        AMSG(COLOR_LIGHTRED, "(Admin Info) {FFFFFF}%s (ID: %i) a primit kick pentru: weapon hack.", GetNameEx(playerid), playerid);
	    return 0;
	}

	if (pTemp[playerid][pTaser] == 0)
	{
	    new slot;
	    if((slot = GetWeapSlot(weaponid)) == -1)
			return Kick(playerid), 0;

	    PlayerInfo[playerid][pAmmo][slot] --;
	    if(PlayerInfo[playerid][pAmmo][slot] > GetPlayerAmmo(playerid)) PlayerInfo[playerid][pAmmo][slot] = GetPlayerAmmo(playerid);
	    else if(PlayerInfo[playerid][pAmmo][slot]+5 < GetPlayerAmmo(playerid))
	    {
			ac_ResetPlayerWeapons(playerid);
	    	SendErrorMessage(playerid, "Ai primit kick deoarece ai folosit modificari avantajoase. (#002-2 | Arma: %s. Gloante reale: %i Adaugate (dupa): %i)", GetWeaponNameEx(weaponid), PlayerInfo[playerid][pAmmo][slot], GetPlayerAmmo(playerid));
	    	KickEx(playerid);

	    	AMSG(COLOR_LIGHTRED, "(Admin Info) {FFFFFF}%s (ID: %i) a primit kick pentru: weapon hack.", GetNameEx(playerid), playerid);
			return 0;
		}
    }

	if(weaponid == 23 && pTemp[playerid][pTaser])
	{
	    PlayerPlaySoundEx(playerid, 6003);
	    ApplyAnimation(playerid, "COLT45", "colt45_reload", 4.1, 0, 0, 0, 0, 0, 1);

		if(GetPlayerWeaponState(playerid) == WEAPONSTATE_LAST_BULLET)
		{
	    	SetPlayerWeapons(playerid);
    		pTemp[playerid][pTaser] = 0;
    		cmd::ame(playerid, "scoate un tazer din suport.");
		}
	}

	if(IsPlayerInjured(playerid) != 0)
	{
	    if(!PlayerToPoint(2.0, playerid, PlayerInfo[playerid][pPosX], PlayerInfo[playerid][pPosY], PlayerInfo[playerid][pPosZ]))
	        SetPlayerPosEx(playerid, PlayerInfo[playerid][pPosX], PlayerInfo[playerid][pPosY], PlayerInfo[playerid][pPosZ]);

	    ApplyAnimation(playerid, "WUZI",  "CS_Dead_Guy", 4.0, 1, 1, 1, 1, 0, 1);
	    return 0;
	}

	if (IsPlayerAFK(playerid))
		return 0; //?????? ?? ?????????? ????


	if (hittype == BULLET_HIT_TYPE_VEHICLE && hitid != INVALID_VEHICLE_ID)
	{
	    new Float: health;
	    GetVehicleHealth(hitid, health);
	    return (health < 350.0)?(0):(1);
	}

	if (hittype == BULLET_HIT_TYPE_PLAYER && hitid != INVALID_PLAYER_ID && (IsPlayerAFK(hitid) || pTemp[hitid][pInvulnerable] || PlayerInfo[hitid][pInjured] == 2))
		return 0;

	if((weaponid == 25 || weaponid == 26 || weaponid == 27) && hittype == BULLET_HIT_TYPE_PLAYER && hitid != INVALID_PLAYER_ID)
	{
	    CallRemoteFunction( "OnPlayerGiveDamage", "iifii", playerid, hitid, 0.0, weaponid, BODY_PART_TORSO);
	    return 0;
	}
	return 1;
}

public OnPlayerChange3DMenuBox(playerid,MenuID,boxid,list,boxes)
{
	return 1;
}

public OnPlayerSelect3DMenuBox(playerid,MenuID,boxid,list,boxes)
{
    if(pTemp[playerid][p3DMenu] == MenuID)
    {
        if(pTemp[playerid][pHouseFurniture] == -1 || (IsPlayerHouseOutside(playerid, pTemp[playerid][pHouseFurniture], 5.0) == 0 && 0 == IsPlayerHouseInside(playerid, pTemp[playerid][pHouseFurniture])))
    		return 1;

    	new houseid = pTemp[playerid][pHouseFurniture],
	    	slot = GetPVarInt(playerid, "chose_slot"),
	    	texture = GetPVarInt(playerid, "chose_texture");

		new mes[56];
		format(mes, 56, "", texture+1);
        InfoMSG(playerid, mes, 4);

     	new tid = (list * boxes) + boxid;

        HouseFurniture[houseid][slot][fTexture][texture] = tid;
     	new query[128];
		mysql_format(dbHandle, query, sizeof(query), "UPDATE `furnitures` SET `texture_%i` = %i WHERE `id` = %i", texture, tid, HouseFurniture[houseid][slot][fID]);
		mysql_tquery(dbHandle, query);
     	SetDynamicObjectMaterial(HouseFurniture[houseid][slot][fObject], texture, ObjectTextures[tid][TModel], ObjectTextures[tid][TXDName], ObjectTextures[tid][TextureName], ObjectTextures[tid][MaterialColor]);
     	return 1;
	}
	return 1;
}

public OnPlayerSelectDynamicObject(playerid, STREAMER_TAG_OBJECT objectid, modelid, Float:x, Float:y, Float:z)
{
	if(GetPVarInt(playerid, #edit_objects) == 1)
	{
	    DeletePVar(playerid, #edit_objects);
	    new objid = -1;
		for(new i; i != MAX_OBJECTS; i++)
		{
		    if(ObjectsInfo[i][oID] == 0 || ObjectsInfo[i][oObjectOn] == 0 || ObjectsInfo[i][oObject] != objectid)
		        continue;

			objid = i;
			break;
		}

		if(objid == -1)
		    return SendErrorMessage(playerid, "Acest obiect nu a fost creat cu /makeobject.");

        SetPVarInt(playerid, #edit_object, objid+1);
		EditDynamicObject(playerid, ObjectsInfo[objid][oObject]);
		return 1;
	}

    if(pTemp[playerid][pHouseFurniture] != -1)
    {
        if(IsPlayerHouseOutside(playerid, pTemp[playerid][pHouseFurniture], 5.0) == 0 && 0 == IsPlayerHouseInside(playerid, pTemp[playerid][pHouseFurniture]))
    		return 1;

    	new houseid = pTemp[playerid][pHouseFurniture],
    	    slot = -1;

    	for(new i; i < MAX_FURNITURE; i++)
		{
			if(HouseFurniture[houseid][i][fObject] != objectid || HouseFurniture[houseid][i][fOn] != 1 || !IsValidDynamicObject(HouseFurniture[houseid][i][fObject])) continue;
			slot = i;
			break;
		}

		if(slot == -1)
		    return SendErrorMessage(playerid, "Acest obiect nu apartine acestei locuinte.");

		CancelEdit(playerid);
		SetPVarInt(playerid, "chose_slot", slot);
        Dialog_Show(playerid, EditFurniture, DIALOG_STYLE_LIST, HouseFurniture[houseid][slot][fName], "Informatii\nSchimba pozitia\nEditeaza textura\nVinde\nSchimba numele\nCreeaza o copie", "Alege", "Inapoi");
	}
	return 1;
}

public OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	/*
	0 - EDIT_RESPONSE_CANCEL   // player cancelled (ESC)
	1 - EDIT_RESPONSE_FINAL    // player clicked on save
	2 - EDIT_RESPONSE_UPDATE   // player moved the object (edition did not stop at all)
	*/

	new Float:oldX, Float:oldY, Float:oldZ,
	Float:oldRotX, Float:oldRotY, Float:oldRotZ;
	GetDynamicObjectPos(objectid, oldX, oldY, oldZ);
	GetDynamicObjectRot(objectid, oldRotX, oldRotY, oldRotZ);
	//=============================================================================================================================
    if(GetPVarInt(playerid, #edit_food) != 0 && (response == EDIT_RESPONSE_FINAL || response == EDIT_RESPONSE_CANCEL))
	{
	    new id = GetPVarInt(playerid, #edit_food)-1;
	    DeletePVar(playerid, #edit_food);

	    if(GetDistanceBetweenPoints(x, y, z, FoodDrop[id][foodPosX], FoodDrop[id][foodPosY], FoodDrop[id][foodPosZ]) > 10.0)
	    {
     		SetDynamicObjectPos(objectid, FoodDrop[id][foodPosX], FoodDrop[id][foodPosY], FoodDrop[id][foodPosZ]);
	        return SendErrorMessage(playerid, "Obiectul a fost mutat prea departe de locatia initiala.");
	    }

	    if(objectid != FoodDrop[id][foodObject])
	        return SendErrorMessage(playerid, "A aparut o eroare in timpul editarii.");

		SetDynamicObjectPos(objectid, x, y, z);
		SetDynamicObjectRot(objectid, rx, ry, rz);

        GetDynamicObjectPos(objectid, FoodDrop[id][foodPosX], FoodDrop[id][foodPosY], FoodDrop[id][foodPosZ]);
	    return 1;
	}
	//==============================================================================================================================
	if(GetPVarInt(playerid, #edit_item) != 0 && (response == EDIT_RESPONSE_FINAL || response == EDIT_RESPONSE_CANCEL))
	{
	    new id = GetPVarInt(playerid, #edit_item)-1;
	    DeletePVar(playerid, #edit_item);

	    if(GetDistanceBetweenPoints(x, y, z, ItemDrop[id][dropPosX], ItemDrop[id][dropPosY], ItemDrop[id][dropPosZ]) > 10.0)
	    {
     		SetDynamicObjectPos(objectid, ItemDrop[id][dropPosX], ItemDrop[id][dropPosY], ItemDrop[id][dropPosZ]);
        	SetDynamicObjectRot(objectid, ItemDrop[id][dropPosRX], ItemDrop[id][dropPosRY], ItemDrop[id][dropPosRZ]);
	        return SendErrorMessage(playerid, "Obiectul a fost mutat prea departe de locatia initiala.");
	    }

	    if(objectid != ItemDrop[id][dropObject])
	        return SendErrorMessage(playerid, "A aparut o eroare in timpul editarii.");

		SetDynamicObjectPos(objectid, x, y, z);
		SetDynamicObjectRot(objectid, rx, ry, rz);

        GetDynamicObjectPos(objectid, ItemDrop[id][dropPosX], ItemDrop[id][dropPosY], ItemDrop[id][dropPosZ]);
        GetDynamicObjectRot(objectid, ItemDrop[id][dropPosRX], ItemDrop[id][dropPosRY], ItemDrop[id][dropPosRZ]);
	    return 1;
	}
	//===========================================================================================================================
	if(GetPVarInt(playerid, #edit_atm) != 0 && (response == EDIT_RESPONSE_FINAL || response == EDIT_RESPONSE_CANCEL))
	{
	    new id = GetPVarInt(playerid, #edit_atm)-1;
	    DeletePVar(playerid, #edit_atm);
	    if(id < 0 || id >= MAX_ATMS || ATMInfo[id][atmID] == 0)
	        return SendErrorMessage(playerid, "A aparut o eroare in timpul editarii. (1)");

	    if(objectid != ATMInfo[id][atmObject])
	        return SendErrorMessage(playerid, "A aparut o eroare in timpul editarii. (2)");

		SetDynamicObjectPos(objectid, x, y, z);
		SetDynamicObjectRot(objectid, 0.0, 0.0, rz);

        GetDynamicObjectPos(objectid, ATMInfo[id][atmPosX], ATMInfo[id][atmPosY], ATMInfo[id][atmPosZ]);
        ATMInfo[id][atmPosRZ] = rz;

		new query[128];
		mysql_format(dbHandle, query, sizeof(query), "UPDATE `atms` SET `posx`=%f,`posy`=%f,`posz`=%f,`posrz`=%f WHERE `id`=%i", x, y, z, rz, ATMInfo[id][atmID]);
		mysql_tquery(dbHandle, query);

		SendClientMessageEx(playerid, COLOR_GREEN, "Pozitia ATM-ului %i a fost modificata.", id);
	    return 1;
	}
	//=============================================================================================================================
	if(pTemp[playerid][pEditBort] != 0 && (response == EDIT_RESPONSE_FINAL || response == EDIT_RESPONSE_CANCEL))
	{
	    new bort = pTemp[playerid][pEditBort]-1;
	    pTemp[playerid][pEditBort] = 0;

	    if(BortInfo[playerid][bort][bortOn] == 0 || objectid != BortInfo[playerid][bort][bortObject])
	        return SendErrorMessage(playerid, "Editezi obiectul gresit.");

	    SetDynamicObjectPos(objectid, x, y, z);
	    SetDynamicObjectRot(objectid, rx, ry, rz);

	    SendServerMessage(playerid, "Pozitia \"%s\" a fost schimbata cu succes.", BortInfo[playerid][bort][bortName]);
	    return 1;
	}
	//====================================================================================================================================
	/*if(GetPVarInt(playerid, #veh_editor) != 0 && (response == EDIT_RESPONSE_FINAL || response == EDIT_RESPONSE_CANCEL))
	{
	    new vehicle = GetPVarInt(playerid, #veh_editor),
	    	slot = GetPVarInt(playerid, #veh_slot),
			attobj = GetPVarInt(playerid, #veh_obj);

		DeletePVar(playerid, #veh_editor);
		DeletePVar(playerid, #veh_slot);
		DeletePVar(playerid, #veh_obj);

		new Float:ofx,
			Float:ofy,
			Float:ofz,
			Float:ofaz;

		new Float:finalx,
			Float:finaly;

		new Float:px,
			Float:py,
			Float:pz,
			Float:roz;

		GetVehiclePos(vehicle, px, py, pz);
		GetVehicleZAngle(vehicle, roz);

		ofx = x - px;
		ofy = y - py;
		ofz = z - pz;
		ofaz = rz - roz;

		finalx = ofx*floatcos(roz, degrees)+ofy*floatsin(roz, degrees);
		finaly = -ofx*floatsin(roz, degrees)+ofy*floatcos(roz, degrees);

        VehicleInfo[vehicle][carAttachObj][slot] = attobj;
		VehicleInfo[vehicle][carAttachPosX][slot] = finalx;
		VehicleInfo[vehicle][carAttachPosY][slot] = finaly;
		VehicleInfo[vehicle][carAttachPosZ][slot] = ofz;
		VehicleInfo[vehicle][carAttachRotX][slot] = rx;
		VehicleInfo[vehicle][carAttachRotY][slot] = ry;
		VehicleInfo[vehicle][carAttachRotZ][slot] = ofaz;

		AttachDynamicObjectToVehicle(objectid, vehicle, finalx, finaly, ofz, rx, ry, ofaz);
		Save_CarAttach(vehicle, slot);
		return 1;
	}*/
	if(GetPVarInt(playerid, #veh_editor) != 0 && (response == EDIT_RESPONSE_FINAL || response == EDIT_RESPONSE_CANCEL))
	{
	    new vehicle = GetPVarInt(playerid, #veh_editor),
	    	slot = GetPVarInt(playerid, #veh_slot),
			attobj = GetPVarInt(playerid, #veh_obj);

		DeletePVar(playerid, #veh_editor);
		DeletePVar(playerid, #veh_slot);
		DeletePVar(playerid, #veh_obj);

		new Float:ofx, Float:ofy, Float:ofz, Float:ofaz, Float:finalx, Float:finaly, Float:px, Float:py, Float:pz, Float:roz;
		GetVehiclePos(vehicle, px, py, pz);
		GetVehicleZAngle(vehicle, roz);
		ofx = x-px, ofy = y-py, ofz = z-pz, ofaz = rz-roz;
		finalx = ofx*floatcos(roz, degrees)+ofy*floatsin(roz, degrees);
		finaly = -ofx*floatsin(roz, degrees)+ofy*floatcos(roz, degrees);
		AttachDynamicObjectToVehicle(objectid, vehicle, finalx, finaly, ofz, rx, ry, ofaz);

        VehicleInfo[vehicle][carAttachObj][slot] = attobj;
		VehicleInfo[vehicle][carAttachPosX][slot] = finalx;
		VehicleInfo[vehicle][carAttachPosY][slot] = finaly;
		VehicleInfo[vehicle][carAttachPosZ][slot] = ofz;
		VehicleInfo[vehicle][carAttachRotX][slot] = rx;
		VehicleInfo[vehicle][carAttachRotY][slot] = ry;
		VehicleInfo[vehicle][carAttachRotZ][slot] = ofaz;
        InfoMSG(playerid, "", 5);
		//AttachDynamicObjectToVehicle(objectid, vehicle, finalx, finaly, ofz, rx, ry, ofaz);
		Save_CarAttach(vehicle, slot);
		return 1;
	}
	//=============================================================================================================================
	if(GetPVarInt(playerid, "edit_furniture") == 1)
	{
		new houseid = pTemp[playerid][pHouseFurniture];
		if(response == EDIT_RESPONSE_FINAL)
		{
		    if(HouseFurniture[houseid][GetPVarInt(playerid, "chose_slot")][fCategory] == 28 && IsPlayerHouseOutside(playerid, houseid, 7.0) == 0)
			{
			    EditDynamicObject(playerid, objectid);
				return SendErrorMessage(playerid, "Trebuie sa fii in afara locuintei tale.");
			}
	    	else if(HouseFurniture[houseid][GetPVarInt(playerid, "chose_slot")][fCategory] != 28 && IsPlayerHouseInside(playerid, houseid) == 0)
			{
			    EditDynamicObject(playerid, objectid);
				return SendErrorMessage(playerid, "Trebuie sa fii in interiorul locuintei tale.");
		    }

		    if(HouseFurniture[houseid][GetPVarInt(playerid, "chose_slot")][fCategory] == 28 && GetDistanceBetweenPoints(x, y, z, HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ]) > HouseInfo[houseid][hFurnitureRadius])
		    {
		        EditDynamicObject(playerid, objectid);
		        return SendErrorMessage(playerid, "Mobilierul trebuie sa fie la o distanta de cel mult 7 metri de intrarea in locuinta.");
		    }

		    if(GetPVarInt(playerid, "buy_furniture"))
			{
			    new f_price = HouseFurniture[houseid][GetPVarInt(playerid, "chose_slot")][fMarketPrice];//qqq
			    GiveCash(playerid, -f_price);
			    SendServerMessage(playerid, "Ai cumparat \"%s\" ({00FF22}-${FFFF00}%s{FFFFFF}).", HouseFurniture[houseid][GetPVarInt(playerid, "chose_slot")][fName], FormatNumber(f_price));
				if(GetPVarInt(playerid, "buy_furniture") == 1)
				{
					new str[549] = "1. Canapele\n2. Paturi\n3. Fotolii & scaune\n4. Mese\n5. Mese (diferite)\n6. Obiecte de iluminare\n7. Echipament de club\n8. Dulapuri\n9. Echipament de bucatarie\n10. Produse\n11. Resturi\n12. Imbracaminte\n13. Sticle & pahare\n14. Usi dinamice\n15. Decoratiuni interioare\n16. Arme\n17. Electronice\n18. Baie\n";
	        		strcat(str, "19. Picturi (tablouri)\n20. Plante\n21. Pereti\n22. Pereti (mari)\n23. Pereti (cu loc pentru usa)\n24. Pereti (cu loc pentru fereastra)\n25. Ferestre\n26. Pereti (2)\n27. Pereti (3)\n28. Coloane\n29. Obiecte stradale");
	       	 		Dialog_Show(playerid, FurnitureCategories, DIALOG_STYLE_LIST, "Sectiuni:", str, "Alege", "Anuleaza");
				}
				else
					ShowFurnitureList(playerid);

				DeletePVar(playerid, "buy_furniture");
			}
			else
		    	SendServerMessage(playerid, "Ai terminat de editat: {FFFF00}%s.", HouseFurniture[houseid][GetPVarInt(playerid, "chose_slot")][fName]);

			SetDynamicObjectPos(objectid, x, y, z);
			SetDynamicObjectRot(objectid, rx, ry, rz);
			OnPlayerEditedFurniture(houseid, GetPVarInt(playerid, "chose_slot"), x, y, z, rx, ry, rz);
			DeletePVar(playerid, "edit_furniture");
			DeletePVar(playerid, "chose_slot");
		}
		else if(response == EDIT_RESPONSE_CANCEL)
		{
		    if(GetPVarInt(playerid, "buy_furniture"))
		    {
		        OnPlayerSellFurniture(houseid, GetPVarInt(playerid, "chose_slot"));
		        GiveCash(playerid, HouseFurniture[houseid][GetPVarInt(playerid, "chose_slot")][fMarketPrice]);
		        DeletePVar(playerid, "buy_furniture");
		        //
		        new listitem = GetPVarInt(playerid, "category_furniture");
		        new objects = furniture_objects[listitem];
				new object_names[153],
				    object_amounts[153];

				SetPVarInt(playerid, "category_furniture", listitem);

				for(new i; i < objects; i++)
				{
				    object_names[i] = furniture_list[listitem][i][frModel];
				    object_amounts[i] = furniture_list[listitem][i][frPrice];
				}
			    ShowModelSelectionMenu(playerid, "_", MODEL_SELECTION_FURNITURE, object_names, objects, 0.0, 0.0, 0.0, 1.0, -1, true, object_amounts, "$");
		        return 1;
		    }
			SetDynamicObjectPos(objectid, oldX, oldY, oldZ);
			SetDynamicObjectRot(objectid, oldRotX, oldRotY, oldRotZ);
			DeletePVar(playerid, "edit_furniture");
			DeletePVar(playerid, "chose_slot");
		}
		else if(response == EDIT_RESPONSE_UPDATE)
		{
		    if(HouseFurniture[houseid][GetPVarInt(playerid, "chose_slot")][fCategory] == 28 && GetDistanceBetweenPoints(x, y, z, HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ]) > HouseInfo[houseid][hFurnitureRadius])
			{
			    CancelEdit(playerid);
			    SetDynamicObjectPos(objectid, oldX, oldY, oldZ);
			    EditDynamicObject(playerid, objectid);
			}
		}
		return 1;
	}
	//=============================================================================================================================
	if(GetPVarInt(playerid, #edit_object) && ObjectsInfo[GetPVarInt(playerid, #edit_object)-1][oObject] == objectid && ObjectsInfo[GetPVarInt(playerid, #edit_object)-1][oObjectOn])
	{
		if(response == EDIT_RESPONSE_FINAL)
		{
		    new objid = GetPVarInt(playerid, #edit_object)-1;
	    	DeletePVar(playerid, #edit_object);

			SetDynamicObjectPos(objectid, x, y, z);
			SetDynamicObjectRot(objectid, rx, ry, rz);

			GetDynamicObjectPos(objectid, ObjectsInfo[objid][oPosX], ObjectsInfo[objid][oPosY], ObjectsInfo[objid][oPosZ]);
			GetDynamicObjectRot(objectid, ObjectsInfo[objid][oPosRX], ObjectsInfo[objid][oPosRY], ObjectsInfo[objid][oPosRZ]);

            new query[128 + 56];
			mysql_format(dbHandle, query, sizeof(query), "UPDATE `objects` SET `posx` = %f, `posy` = %f, `posz` = %f, `posrx` = %f, `posry` = %f, `posrz` = %f WHERE `id` = %i", x, y, z, rx, ry, rz, ObjectsInfo[objid][oID]);
			mysql_tquery(dbHandle, query);

  			SendServerMessage(playerid, "Editarea pozitiei obiectului %i a fost finalizata.", objid);
		}
		else if(response == EDIT_RESPONSE_CANCEL)
		{
	    	DeletePVar(playerid, #edit_object);
			SetDynamicObjectPos(objectid, oldX, oldY, oldZ);
			SetDynamicObjectRot(objectid, oldRotX, oldRotY, oldRotZ);
		}
		return 1;
	}
	//=============================================================================================================================
    if(GetPVarInt(playerid, #edit_cctv) && CCTVInfo[GetPVarInt(playerid, #edit_cctv)-1][tvObject] == objectid && CCTVInfo[GetPVarInt(playerid, #edit_cctv)-1][tvObjectOn])
	{
		if(response == EDIT_RESPONSE_FINAL)
		{
		    new cctvid = GetPVarInt(playerid, #edit_cctv)-1;
	    	DeletePVar(playerid, #edit_cctv);

			SetDynamicObjectPos(objectid, x, y, z);
			SetDynamicObjectRot(objectid, rx, ry, rz);

			new query[128 + 56];
			mysql_format(dbHandle, query, sizeof(query), "UPDATE `cctvs` SET `posx` = %f, `posy` = %f, `posz` = %f, `posrx` = %f, `posry` = %f, `posrz` = %f WHERE `id` = %i", x, y, z, rx, ry, rz, CCTVInfo[cctvid][tvID]);
			mysql_tquery(dbHandle, query);

			GetDynamicObjectPos(objectid, CCTVInfo[cctvid][tvPosX], CCTVInfo[cctvid][tvPosY], CCTVInfo[cctvid][tvPosZ]);
			GetDynamicObjectRot(objectid, CCTVInfo[cctvid][tvPosRX], CCTVInfo[cctvid][tvPosRY], CCTVInfo[cctvid][tvPosRZ]);

  			SendServerMessage(playerid, "Editarea pozitiei camerei %i a fost finalizata.", cctvid);
		}
		else if(response == EDIT_RESPONSE_CANCEL)
		{
		    DeletePVar(playerid, #edit_cctv);
			SetDynamicObjectPos(objectid, oldX, oldY, oldZ);
			SetDynamicObjectRot(objectid, oldRotX, oldRotY, oldRotZ);
		}
		return 1;
	}
	//=============================================================================================================================
    if(GetPVarInt(playerid, #edit_tower) && TowerInfo[GetPVarInt(playerid, #edit_tower)-1][towerObject] == objectid && TowerInfo[GetPVarInt(playerid, #edit_tower)-1][towerOn])
	{
		if(response == EDIT_RESPONSE_FINAL)
		{
		    new tower = GetPVarInt(playerid, #edit_tower)-1;
	    	DeletePVar(playerid, #edit_tower);
			SetDynamicObjectPos(objectid, x, y, z);
			SetDynamicObjectRot(objectid, rx, ry, rz);

			new query[156];
			mysql_format(dbHandle, query, sizeof(query), "UPDATE `towers` SET `x` = %f, `y` = %f, `z` = %f, `rx` = %f, `ry` = %f, `rz` = %f WHERE `id` = %i",x,y,z,rx,ry,rz,TowerInfo[tower][towerID]);
			mysql_tquery(dbHandle, query);

			GetDynamicObjectPos(objectid, TowerInfo[tower][towerPosX], TowerInfo[tower][towerPosY], TowerInfo[tower][towerPosZ]);
			GetDynamicObjectRot(objectid, TowerInfo[tower][towerPosRX], TowerInfo[tower][towerPosRY], TowerInfo[tower][towerPosRZ]);

  			SendServerMessage(playerid, "Editarea pozitiei turnului %i a fost finalizata.", tower);
		}
		else if(response == EDIT_RESPONSE_CANCEL)
		{
	    	DeletePVar(playerid, #edit_tower);
			SetDynamicObjectPos(objectid, oldX, oldY, oldZ);
			SetDynamicObjectRot(objectid, oldRotX, oldRotY, oldRotZ);
		}
		return 1;
	}

	if(GetPVarInt(playerid, #edit_gate) && Gates[GetPVarInt(playerid, #edit_gate)-1][gateObject] == objectid && Gates[GetPVarInt(playerid, #edit_gate)-1][gateObjectOn])
	{
		if(response == EDIT_RESPONSE_FINAL)
		{
		    new gate = GetPVarInt(playerid, #edit_gate)-1;
	    	DeletePVar(playerid, #2_edit_gate);
	    	DeletePVar(playerid, #edit_gate);

			SetDynamicObjectPos(objectid, x, y, z);
			SetDynamicObjectRot(objectid, rx, ry, rz);

			new query[128 + 56];
			mysql_format(dbHandle, query, sizeof(query), "UPDATE `gates` SET `posx` = %f, `posy` = %f, `posz` = %f, `posrx` = %f, `posry` = %f, `posrz` = %f WHERE `id` = %i", x, y, z, rx, ry, rz, Gates[gate][gateID]);
			mysql_tquery(dbHandle, query);

            GetDynamicObjectPos(objectid, Gates[gate][gatePosX], Gates[gate][gatePosY], Gates[gate][gatePosZ]);
			GetDynamicObjectRot(objectid, Gates[gate][gatePosRX], Gates[gate][gatePosRY], Gates[gate][gatePosRZ]);
	        Gates[gate][gateOpened] = 0;

			SendServerMessage(playerid, "Editarea pozitiei portii %i a fost finalizata.", gate);
		}
		else if(response == EDIT_RESPONSE_CANCEL)
		{
	    	DeletePVar(playerid, #edit_gate);
			SetDynamicObjectPos(objectid, oldX, oldY, oldZ);
			SetDynamicObjectRot(objectid, oldRotX, oldRotY, oldRotZ);
		}
		return 1;
	}
	if(GetPVarInt(playerid, #2_edit_gate) && Gates[GetPVarInt(playerid, #2_edit_gate)-1][gateObject] == objectid && Gates[GetPVarInt(playerid, #2_edit_gate)-1][gateObjectOn])
	{
		if(response == EDIT_RESPONSE_FINAL)
		{
		    new gate = GetPVarInt(playerid, #2_edit_gate)-1;
	    	DeletePVar(playerid, #2_edit_gate);
	    	DeletePVar(playerid, #edit_gate);

            SetDynamicObjectPos(objectid, x, y, z);
			SetDynamicObjectRot(objectid, rx, ry, rz);

			new query[128 + 56];
			mysql_format(dbHandle, query, sizeof(query), "UPDATE `gates` SET `movex` = %f, `movey` = %f, `movez` = %f, `moverx` = %f, `movery` = %f, `moverz` = %f WHERE `id` = %i", x, y, z, rx, ry, rz, Gates[gate][gateID]);
			mysql_tquery(dbHandle, query);

			GetDynamicObjectPos(objectid, Gates[gate][gateMoveX], Gates[gate][gateMoveY], Gates[gate][gateMoveZ]);
			GetDynamicObjectRot(objectid, Gates[gate][gateMoveRX], Gates[gate][gateMoveRY], Gates[gate][gateMoveRZ]);
	        Gates[gate][gateOpened] = 1;

			SendServerMessage(playerid, "Editarea pozitiei portii %i a fost finalizata.", gate);
		}
		else if(response == EDIT_RESPONSE_CANCEL)
		{
	    	DeletePVar(playerid, #2_edit_gate);
	    	DeletePVar(playerid, #edit_gate);
			SetDynamicObjectPos(objectid, oldX, oldY, oldZ);
			SetDynamicObjectRot(objectid, oldRotX, oldRotY, oldRotZ);
		}
		return 1;
	}
	//=============================================================================================================================
	return 1;
}

public OnPlayerEnterDynamicRaceCP(playerid, checkpointid)
{
	if(pTemp[playerid][pLicenseExam] == 1 || pTemp[playerid][pLicenseExam] == 3)
	{
	    for(new i; i != sizeof(license_exam_cp); i++)
		{
		    if(license_exam_cp[i] != checkpointid)
		        continue;

			if(i == sizeof(license_exam_cp)-1)
			{
			    new Float:health,
			        vehicleid = GetPlayerVehicleID(playerid);
				GetVehicleHealth(vehicleid, health);
				if(health >= 950.0)
				{
				    if(0 == GetPVarInt(playerid, #exam_second))
						SCM(playerid, COLOR_TOMATO, "[ ! ] {FFFFFF}Timpul a expirat. Ai picat examenul.");
					else
					{
				    	if(pTemp[playerid][pLicenseExam] == 1)
							PlayerInfo[playerid][pCarLic] = 1;
						else
						    PlayerInfo[playerid][pTaxiLic] = 1;

						SendClientMessageEx(playerid, COLOR_WHITE, "Felicitari! Ai obtinut permisul de %s. Iti poti vedea licentele folosind /licenses.", (pTemp[playerid][pLicenseExam] == 1)?("condus"):("transport"));
					}
				}
				else
					SCM(playerid, COLOR_TOMATO, "[ ! ] {FFFFFF}Ai picat examenul din cauza condusului imprudent.");


				pTemp[playerid][pLicenseExam] = 0;
				DeletePVar(playerid, #exam_second);
				RespawnVehicle(vehicleid);
			    TogglePlayerDynamicRaceCP(playerid, license_exam_cp[i], false);
			    return 1;
			}
            TogglePlayerDynamicRaceCP(playerid, license_exam_cp[i], false);
            TogglePlayerDynamicRaceCP(playerid, license_exam_cp[i+1], true);
			return 1;
		}
	}
	else if(pTemp[playerid][pLicenseExam] == 2)
	{
	    for(new i; i != sizeof(fly_exam_cp); i++)
		{
		    if(fly_exam_cp[i] != checkpointid)
		        continue;

			if(i == sizeof(fly_exam_cp)-1)
			{
			    new Float:health,
			        vehicleid = GetPlayerVehicleID(playerid);
				GetVehicleHealth(vehicleid, health);
				if(health >= 950.0)
				{
				    if(GetPVarInt(playerid, #exam_second) <= 100)
					{
						PlayerInfo[playerid][pFlyLic] = 1;
						SCM(playerid,COLOR_WHITE, "Felicitari! Ai obtinut permisul de aviatie. Iti poti vedea licentele folosind /licenses.");
					}
					else
						SCM(playerid,COLOR_TOMATO, "[ ! ] {FFFFFF}Ai picat examenul din cauza vitezei excesive.");
				}
				else
				    SCM(playerid, COLOR_TOMATO, "[ ! ] {FFFFFF}Ai picat examenul din cauza condusului imprudent.");

				pTemp[playerid][pLicenseExam] = 0;
				DeletePVar(playerid, #exam_second);
				SetPlayerPosEx(playerid, 1765.36, -2272.22, 26.796);
				RespawnVehicle(vehicleid);
			    TogglePlayerDynamicRaceCP(playerid, fly_exam_cp[i], false);
			    return 1;
			}
            TogglePlayerDynamicRaceCP(playerid, fly_exam_cp[i], false);
            TogglePlayerDynamicRaceCP(playerid, fly_exam_cp[i+1], true);
			return 1;
		}
	}
	return 1;
}

public OnPlayerEnterDynamicCP(playerid, checkpointid)
{
	if(IsValidDynamicCP(pTemp[playerid][pWaypoint]) && checkpointid == pTemp[playerid][pWaypoint])
	{
	    GameTextForPlayer(playerid, "~r~Ai ajuns!", 3000, 3);
	    DisableWaypoint(playerid);
	}

	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{
		for(new i = 0; i < MAX_HOUSES; i++)
		{
		    if(HouseInfo[i][hID] == 0 || checkpointid != HouseInfo[i][hCheckPoint])
				continue;

			if(pTemp[playerid][pPizzaBoy] && pTemp[playerid][pPizzaBoy]-1 == i && IsPlayerAttachedObjectSlotUsed(playerid, ATTACH_HANDS))
			{
			    pTemp[playerid][pPizzaBoy] = 0;
				#define PIZZABOY_COST 25
			    SendClientMessageEx(playerid, -1, "Ai primit $%i.", PIZZABOY_COST);
			    GiveCash(playerid, PIZZABOY_COST);
                RemovePlayerAttachedObject(playerid, ATTACH_HANDS);
			    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
				return 1;
			}

            if(HouseInfo[i][hOwnerID] == 0)
			{
				SCM(playerid,COLOR_GREEN, "Doresti sa cumperi aceasta proprietate?");
				SendClientMessageEx(playerid, COLOR_GREEN,"????: $%i.",HouseInfo[i][hPrice]);
				SCM(playerid,COLOR_WHITE, "Comenzi disponibile: /enter, /(ds)hout, /ddo, /knock, /checkint.");
				SCM(playerid,COLOR_WHITE, "/buyhouse");
				return 1;
	   		}
			else if(HouseInfo[i][hOwnerID] != 0)
   			{
				if (HouseInfo[i][hPosInt] == 0)
					SendClientMessageEx(playerid, COLOR_GREEN,"Esti pe proprietatea lui %s. Adresa: %s %i.", (HouseInfo[i][hOwnerID] != PlayerInfo[playerid][pID])?(""):(""), GetHouseZone(i), i);
				else
				    SendClientMessageEx(playerid, COLOR_GREEN,"Esti pe proprietatea lui %s.", (HouseInfo[i][hOwnerID] != PlayerInfo[playerid][pID])?(""):(""));
				SCM(playerid,COLOR_WHITE, "Comenzi disponibile: /enter, /(ds)hout, /ddo, /knock.");
                return 1;
			}
		}

		for(new i = 0; i < MAX_GARAGES; i++)
		{
		    if(0 == GarageInfo[i][garageID] || GarageInfo[i][garageCP] != checkpointid) continue;

		    if(0 != GarageInfo[i][garageOwner])
		    {
	        	SendClientMessage(playerid, 0x33AA33AA, "Acest garaj apartine deja cuiva.");
				SendClientMessage(playerid, -1, "Comenzi disponibile: /enter, /exit, /garageinfo");
			}
			else if(0 == GarageInfo[i][garageOwner] && 0 == GarageInfo[i][garageHouse] && 0 == GarageInfo[i][garageBiz])
			{
			    new mes[128];
			    SendClientMessage(playerid, 0x33AA33AA, "Doresti sa cumperi acest garaj?");
			    format(mes, sizeof(mes), "Pret: $%i.", GarageInfo[i][garagePrice]);
			    SendClientMessage(playerid, -1, mes);
				SendClientMessage(playerid, -1, "Comenzi disponibile: /enter, /garageinfo, /buygarage");
			}
			else if(0 == GarageInfo[i][garageOwner] && 0 != GarageInfo[i][garageHouse])
			{
			    SendClientMessage(playerid, 0x33AA33AA, "Acest garaj apartine casei.");
				SendClientMessage(playerid, -1, "Comenzi disponibile: /enter, /garageinfo");
			}
			else if(0 == GarageInfo[i][garageOwner] && 0 != GarageInfo[i][garageBiz])
			{
			    SendClientMessage(playerid, 0x33AA33AA, "Acest garaj apartine afacerii.");
				SendClientMessage(playerid, -1, "Comenzi disponibile: /enter, /garageinfo");
			}
			return 1;
		}

		for(new i = 0; i != MAX_APART; i++)
		{
			if(ApartInfo[i][aApartOn] == 0 || checkpointid != ApartInfo[i][aCheckPoint])
			    continue;

            SendClientMessageEx(playerid,COLOR_GREEN, "Adresa: %s, %i.", GetApartmentZone(i),i+1);
			SCM(playerid,COLOR_WHITE, "Comenzi disponibile: /enter, /(ds)hout, /ddo.");
			return 1;
		}
	}
	return 1;
}


public OnPlayerPickUpDynamicPickup(playerid, pickupid)
{
	for(new i = 0; i != MAX_LABELS; i++)
	{
	    if(LabelsInfo[i][tLabelOn] == 0 || pickupid != LabelsInfo[i][tPickUp] || LabelsInfo[i][tGameText] != 1)
	        continue;

		GameTextForPlayer(playerid, LabelsInfo[i][tText], 4000, 4);
		return 1;
	}

	for(new i = 0; i < MAX_BIZ; i++)
	{
	    if(pickupid != BizInfo[i][bizPickUp] || 0 == BizInfo[i][bizID]) continue;

		new mes[128];
	    if(BizInfo[i][bizFreeze] == 1)
	    {
	        format(mes, sizeof(mes), "~w~%s~n~~w~Proprietar: Statul~n~~w~Taxa de intrare: $%i~n~~p~/enter", BizInfo[i][bizName], BizInfo[i][bizEntrance]);
			GameTextForPlayer(playerid, mes, 3000, 3);
			return 1;
	    }
	    else
	    {
	        if(BizInfo[i][bizOwnerID] == 0)
			{
				format(mes, sizeof(mes), "~w~%s~n~~w~Aceasta afacere este de vanzare~n~~w~Pret: $%i Nivel: %i~n~~p~/buybiz", BizInfo[i][bizName], BizInfo[i][bizPrice], BizInfo[i][bizLevelbuy]);
				GameTextForPlayer(playerid, mes, 3000, 3);
			}
			else
			{
				format(mes, sizeof(mes), "~w~%s~n~~w~Proprietar: %s~n~~w~Taxa de intrare: $%i~n~~p~/enter",BizInfo[i][bizName], BizInfo[i][bizOwner], BizInfo[i][bizEntrance]);
				GameTextForPlayer(playerid, mes, 3000, 3);
			}
			return 1;
	    }
	}

	for(new i; i != MAX_ENTRANCE; i++)
	{
	    if(EntranceInfo[i][entranceOn] == 0 || EntranceInfo[i][eEnterPickup] != pickupid)
	        continue;

		if(strlen(EntranceInfo[i][eText]) > 1)
		    GameTextForPlayer(playerid, EntranceInfo[i][eText], 3000, 3);

		return 1;
	}

	if((PlayerInfo[playerid][pFaction] == LSPD && pickupid == Pickup_LSPD) || (PlayerInfo[playerid][pFaction] != 0 && pickupid == Factions[PlayerInfo[playerid][pFaction]][fPickUp]))
	{
	    new mes[32];
		format(mes, sizeof(mes), "~b~%s", Factions[PlayerInfo[playerid][pFaction]][fName]);
		InfoMSG2(playerid, mes, "~w~Foloseste ~y~/duty ~w~pentru a fi la datorie.", 5000);
	}
	return 1;
}

stock ClearChatbox(playerid, lines)
{
	if (!IsPlayerLogged(playerid))
		return 1;

	for(new i=0; i<lines; i++)
	{
		SCM(playerid, COLOR_GREY, " ");
	}
	return 1;
}

forward OnPlayerAttemptLogin(playerid, last_ip[]);
public OnPlayerAttemptLogin(playerid, last_ip[])
{
	if(cache_num_rows() == 0)
	{
	    new ip[24];
	    GetPlayerIp(playerid, ip, sizeof(ip));
	    pTemp[playerid][pLogged] = 1;
		if(CompareStrings(ip, last_ip) || CompareStrings(PlayerInfo[playerid][pGoogle], "!"))
		{
		    static const str_size[] = "{FFFFFF}Bine ai revenit, {BFC0C2}%s\n{FFFFFF}Contul tau a fost gasit in baza de date, autentifica-te folosind parola.\n{FF6347}Ai 60 de secunde la dispozitie.";
		    new mes[sizeof(str_size) - 2 + MAX_PLAYER_NAME + 1];
		    format(mes, sizeof(mes), str_size, GetAccName(playerid));
			Dialog_Show(playerid, Login, DIALOG_STYLE_PASSWORD, "{ffffff}Bun venit pe Trw Roleplay", mes, "Autentifica-te", "Renunta");
		}
		else
			Dialog_Show(playerid, ConfirmWord, DIALOG_STYLE_PASSWORD, "{FF8282}[Google Authenticator]", "{B4B5B7}Te-ai autentificat dintr-o locatie necunoscuta.\nIntrodu codul din aplicatia Google Authenticator pentru a ne asigura ca esti proprietarul contului.", "Gata", "");
	    return 1;
	}

    new reason[64],
		ip[24],
		date[24],
		admin[MAX_PLAYER_NAME];

	cache_get_field_content(0, "reason", reason);
	cache_get_field_content(0, "date", date);
	cache_get_field_content(0, "ip", ip);
	cache_get_field_content(0, "admin", admin);

	new mes[512];
	if(CompareStrings(ip, "-") != 0)
	{
	    format(mes, sizeof(mes), "\
	    {FFFFFF}Contul tau a fost banat de catre moderatorul {B5B5B5}%s.\n\
		{FFFFFF}Data banului: {B5B5B5}%s\n\
	    {FFFFFF}Motivul: {B5B5B5}%s\n\n\
	    Poti cere o reevaluare pe forumul nostru: forum.trw-rp.ro\n\
		Pentru a iesi din joc, apasa F6 si scrie /q", admin, date, reason);
	}
	else
	{
	    format(mes, sizeof(mes), "\
	    {FFFFFF}Acest IP (%s) a fost banat de catre moderatorul {B5B5B5}%s.\n\
		{FFFFFF}Data banului: {B5B5B5}%s\n\
	    {FFFFFF}Motivul: {B5B5B5}%s\n\n\
	    Poti cere o reevaluare pe forumul nostru: forum.trw-rp.ro\n\
		Pentru a iesi din joc, apasa F6 si scrie /q", ip, admin, date, reason);
	}

	Dialog_Show(playerid, None, DIALOG_STYLE_MSGBOX, "OK", mes, "/q", "");
	KickEx(playerid);
	return 1;
}

forward OnAccountCheck(playerid);
public OnAccountCheck(playerid)
{
    if(IsPlayerNPC(playerid))
		return 1;

	if(!cache_num_rows())
	{
	    SCM(playerid, COLOR_GRAD4, "SERVER: Din pacate, contul tau nu a fost gasit in baza de date.");
		SCM(playerid, COLOR_GRAD4, "SERVER: Pentru a putea juca, trebuie sa te intregistrezi pe User Control Panel.");
		SCM(playerid, COLOR_GRAD4, "SERVER: User Control Panelul este: ucp.trw-rp.ro");
		KickEx(playerid);
	    return 1;
	}

	new last_ip[24];
	PlayerInfo[playerid][pAccID] = cache_get_field_content_int(0, "id");
	cache_get_field_content(0, "login", PlayerInfo[playerid][pAccname], dbHandle, MAX_PLAYER_NAME+1);
	cache_get_field_content(0, "last_game_ip", last_ip);
	cache_get_field_content(0, "google_auth", PlayerInfo[playerid][pGoogle], dbHandle, 17);

	if(PlayerInfo[playerid][pAccID] < 1)
	{
	    SendErrorMessage(playerid, "A aparut o eroare. Te rugam sa te reconectezi.");
	    KickEx(playerid);
		return 1;
	}

	new name[MAX_PLAYER_NAME];
	GetPlayerName(playerid, name, sizeof(name));
	if(!CompareStrings(PlayerInfo[playerid][pAccname], name) && SetPlayerName(playerid, PlayerInfo[playerid][pAccname]) != 1)
	{
	    SendErrorMessage(playerid, "Numele introdus apartine deja altei persoane.");
	    KickEx(playerid);
	    return 1;
	}

	new query[170],
		sub[8];

	GetPlayerIp(playerid, sub, sizeof(sub));

	new pos;
	for(new i; i < 2; i++)
	    pos = strfind(sub, ".", true, pos+1);

	if(pos != -1)
		strdel(sub, pos, 24);

	new pip[24];
    GetPlayerIp(playerid, pip, sizeof(pip));

	mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `bans` WHERE `name` = '%e' OR `ip`='%s' OR `ip`='%s'", PlayerInfo[playerid][pAccname], sub, pip);
	mysql_tquery(dbHandle, query, "OnPlayerAttemptLogin", "is", playerid, last_ip);
	return 1;
}

forward LoginPlayer(playerid);
public LoginPlayer(playerid)
{
	if(cache_num_rows() == 0)
	{
    	if(pTemp[playerid][pLoggedTry]++ >= 2)
		{
		    SendErrorMessage(playerid, "Ai gresit parola de 3 ori.");
			KickEx(playerid);
			return 1;
		}

		SendErrorMessage(playerid, "Parola introdusa este gresita.");

		static const str_size[] = "{FFFFFF}Bine ai venit, {BFC0C2}%s\n{FFFFFF}Contul tau a fost gasit in baza de date, autentifica-te folosind parola.\n{FF6347Ai 60 de secunde la dispozitie.";
    	new mes[sizeof(str_size) - 2 + MAX_PLAYER_NAME + 1];
    	format(mes, sizeof(mes), str_size, GetAccName(playerid));
		Dialog_Show(playerid, Login, DIALOG_STYLE_PASSWORD, "{ffffffBine ai venit pe Trw Roleplay", mes, "Autentifica-te", "Renunta");
		return 1;
	}

    pTemp[playerid][pLoggedTime] = 0;
	new query[128];
	//??? ??????????? (???????)
	mysql_format(dbHandle, query, sizeof(query), "INSERT INTO `loginlog` (accountid, ip, method, date) VALUES(%i, '%e', 'Server', '%e')", PlayerInfo[playerid][pAccID], GetPlayerIP(playerid), GetFullDate());
	mysql_tquery(dbHandle, query);

	//????????? ??????? IP ? ??????????? (???????)
	mysql_format(dbHandle, query, sizeof(query), "UPDATE `accounts` SET `last_game_ip` = '%e', `last_game_login` = '%e' WHERE `id` = '%i'", GetPlayerIP(playerid), GetFullDate(), PlayerInfo[playerid][pAccID]);
	mysql_tquery(dbHandle, query);

	ShowCharacterMenu(playerid);
	return 1;
}

stock ShowCharacterMenu(playerid)
{
    new query[128];
	mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `users` WHERE `accountid` = '%i' AND `status`!='4'", PlayerInfo[playerid][pAccID]);
	mysql_tquery(dbHandle, query, "SearchCharacters", "i", playerid);
	return 1;
}

forward SearchCharacters(playerid);
public SearchCharacters(playerid)
{
	if(!cache_num_rows())
	{
	    SendErrorMessage(playerid, "Acest cont nu are caractere.");
	    KickEx(playerid);
	    return 1;
	}
    for(new i = 0; i != MAX_CHARACTERS; i++)
	{
	    login_char_id[playerid][i] = 0;
	    format(login_char_name[playerid][i], MAX_PLAYER_NAME, "Slot liber");
	}

	new status,
	    status_names[][] = {"In asteptare", "Acceptat", "Respins", "Banat"};

	for(new i = 0; i < cache_num_rows(); i++)
	{
	    if(i > 2)
	        break;

	    if(cache_get_field_content_int(i, "accountid") != PlayerInfo[playerid][pAccID])
		{
			KickEx(playerid);
			SendErrorMessage(playerid, "A aparut o eroare. Contacteaza developerul pentru ajutor.");
			return 1;
		}
		status = cache_get_field_content_int(i, "status");
	    login_char_id[playerid][i] = cache_get_field_content_int(i, "id");
	    cache_get_field_content(i, "name", login_char_name[playerid][i], dbHandle, MAX_PLAYER_NAME+1);
	    strreplace(login_char_name[playerid][i], '_', ' ');
	}

	new mes[24 + ((MAX_PLAYER_NAME + 24) * 3) ];
	for(new i=0; i != MAX_CHARACTERS; i++)
	{
		if(login_char_id[playerid][i])
	    	format(mes, sizeof(mes), "%s\n%i. %s (%s)", mes, i+1, login_char_name[playerid][i], status_names[status]);
		else
			format(mes, sizeof(mes), "%s\n%i. %s", mes, i+1, login_char_name[playerid][i]);
	}
	Dialog_Show(playerid, SelectChar, DIALOG_STYLE_LIST, "Alege un caracter", mes, "Alege", "Renunta");
	return 1;
}

forward LoadCharacter(playerid);
public LoadCharacter(playerid)
{
	if(cache_num_rows())
	{
	    new status = cache_get_field_content_int(0, "status");
	    switch(status)
		{
		    case 0: return SendErrorMessage(playerid, "Caracterul tau se afla in lista de asteptare."), ShowCharacterMenu(playerid);
      		case 2: return SendErrorMessage(playerid, "Aplicatia caracterului tau a fost respinsa."), ShowCharacterMenu(playerid);
			case 3:
			{
			    new admin_name[MAX_PLAYER_NAME + 1];
			    cache_get_field_content(0, "block_name", admin_name);

				new reason[65];
			    cache_get_field_content(0, "block_reason", reason);

				static const str_size[] = "Contul tau a fost banat de catre moderatorul %s.\nMotiv: %s";
			    new str[sizeof(str_size) - 4 + MAX_PLAYER_NAME + 64];
			    format(str, sizeof(str), str_size, admin_name, reason);
			    Dialog_Show(playerid, None, DIALOG_STYLE_MSGBOX, "Cont blocat!", str, "Inchide", "");
				return KickEx(playerid);
			}
			case 4: return Kick(playerid);
		}

	    PlayerInfo[playerid][pID] = cache_get_field_content_int(0, "id");
	    foreach (new i : Player)
		{
			if(IsPlayerLogged(i) == 0 || PlayerInfo[playerid][pAccID] != PlayerInfo[i][pAccID])
			    continue;

			SendErrorMessage(playerid, "O alta persoana foloseste deja acest cont.");
			KickEx(playerid);
			return 1;
		}

		new name[MAX_PLAYER_NAME+1];
		cache_get_field_content(0, "name", name);
  		if(!CompareStrings(PlayerInfo[playerid][pAccname], name) && SetPlayerName(playerid, name) != 1)
		{
		    SendErrorMessage(playerid, "O alta persoana foloseste deja acest cont.");
		    KickEx(playerid);
		    return 1;
		}
	    GetNameForPlayer(playerid);
		//Load database
		PlayerInfo[playerid][pCash] = cache_get_field_content_int(0, "cash");
		PlayerInfo[playerid][pBank] = cache_get_field_content_int(0, "bank");
		PlayerInfo[playerid][pSkin] = cache_get_field_content_int(0, "skin");
		PlayerInfo[playerid][pSex] = cache_get_field_content_int(0, "sex");
	 	cache_get_field_content(0, "birthdate", PlayerInfo[playerid][pBirthdate], dbHandle, 24);
		PlayerInfo[playerid][pLevel] = cache_get_field_content_int(0, "level");
		PlayerInfo[playerid][pExp] = cache_get_field_content_int(0, "exp");
		PlayerInfo[playerid][pHours] = cache_get_field_content_int(0, "hours");
		PlayerInfo[playerid][pAdminHide] = cache_get_field_content_int(0, "admin_hide");

		PlayerInfo[playerid][pAdmin] = cache_get_field_content_int(0, "admin");
		PlayerInfo[playerid][pTester] = cache_get_field_content_int(0, "Tester");
		PlayerInfo[playerid][pDonate] = cache_get_field_content_int(0, "donate");
        PlayerInfo[playerid][pNameChanges] = cache_get_field_content_int(0, "name_changes");
        PlayerInfo[playerid][pNumberChanges] = cache_get_field_content_int(0, "number_changes");

		PlayerInfo[playerid][pInt] = cache_get_field_content_int(0, "int");
		PlayerInfo[playerid][pWorld] = cache_get_field_content_int(0, "world");
		PlayerInfo[playerid][pAJailed] = cache_get_field_content_int(0, "ajailed");
		PlayerInfo[playerid][pAJailTime] = cache_get_field_content_int(0, "ajailtime");
		PlayerInfo[playerid][pJailed] = cache_get_field_content_int(0, "jailed");
		PlayerInfo[playerid][pIsolateTime] = cache_get_field_content_int(0, "isolatetime");
		PlayerInfo[playerid][pWarns] = cache_get_field_content_int(0, "warns");
		PlayerInfo[playerid][pPremium] = cache_get_field_content_int(0, "vip");
		PlayerInfo[playerid][pPremiumTime] = cache_get_field_content_int(0, "vip_time");
		PlayerInfo[playerid][pCarLic] = cache_get_field_content_int(0, "carlic");
		PlayerInfo[playerid][pWepLic] = cache_get_field_content_int(0, "weplic");
		PlayerInfo[playerid][pFlyLic] = cache_get_field_content_int(0, "flylic");
		PlayerInfo[playerid][pTaxiLic] = cache_get_field_content_int(0, "taxilic");
		PlayerInfo[playerid][pInjured] = cache_get_field_content_int(0, "injured");
		PlayerInfo[playerid][pPayCheckMoney] = cache_get_field_content_int(0, "paycheck");
		PlayerInfo[playerid][pPayDayTime] = cache_get_field_content_int(0, "paydaytime");
		PlayerInfo[playerid][pNumber] = cache_get_field_content_int(0, "number");
		PlayerInfo[playerid][pSavings] = cache_get_field_content_int(0, "savings");
		PlayerInfo[playerid][pMutedTime] = cache_get_field_content_int(0, "mutetime");
		PlayerInfo[playerid][pRentKey] = cache_get_field_content_int(0, "rent_key");
		PlayerInfo[playerid][pRentPrice] = cache_get_field_content_int(0, "rent_price");
		PlayerInfo[playerid][pWeap][0] = cache_get_field_content_int(0, "weap0");
		PlayerInfo[playerid][pWeap][1] = cache_get_field_content_int(0, "weap1");
		PlayerInfo[playerid][pWeap][2] = cache_get_field_content_int(0, "weap2");
		PlayerInfo[playerid][pWeap][3] = cache_get_field_content_int(0, "weap3");
		PlayerInfo[playerid][pAmmo][0] = cache_get_field_content_int(0, "ammo0");
		PlayerInfo[playerid][pAmmo][1] = cache_get_field_content_int(0, "ammo1");
		PlayerInfo[playerid][pAmmo][2] = cache_get_field_content_int(0, "ammo2");
		PlayerInfo[playerid][pAmmo][3] = cache_get_field_content_int(0, "ammo3");
		PlayerInfo[playerid][pHideWeap][0] = cache_get_field_content_int(0, "weaphide0");
		PlayerInfo[playerid][pHideWeap][1] = cache_get_field_content_int(0, "weaphide1");
		PlayerInfo[playerid][pHideWeap][2] = cache_get_field_content_int(0, "weaphide2");
		PlayerInfo[playerid][pChannel] = cache_get_field_content_int(0, "channel");
		PlayerInfo[playerid][pOwnedChannel] = cache_get_field_content_int(0, "owned_channel");
		PlayerInfo[playerid][pAuthed] = cache_get_field_content_int(0, "authed");
		PlayerInfo[playerid][pSpareKey] = cache_get_field_content_int(0, "sparekey");
		PlayerInfo[playerid][pWorkOn] = cache_get_field_content_int(0, "workon");
		PlayerInfo[playerid][pWalk] = cache_get_field_content_int(0, "walk");
		PlayerInfo[playerid][pArmour] = cache_get_field_content_float(0, "armour");
		PlayerInfo[playerid][pFaction] = cache_get_field_content_int(0, "faction");
		PlayerInfo[playerid][pRank] = cache_get_field_content_int(0, "rank");
		PlayerInfo[playerid][pBadgeNumber] = cache_get_field_content_int(0, "badgenumber");
		PlayerInfo[playerid][pDriveWarns] = cache_get_field_content_int(0, "drivewarns");
		PlayerInfo[playerid][pWepWarns] = cache_get_field_content_int(0, "wepwarns");
		PlayerInfo[playerid][pWepCount] = cache_get_field_content_int(0, "wep_count");
		PlayerInfo[playerid][pJailTime] = cache_get_field_content_int(0, "jailtime");
		PlayerInfo[playerid][pArrested] = cache_get_field_content_int(0, "arrested");
		PlayerInfo[playerid][pTalk] = cache_get_field_content_int(0, "chat");
		PlayerInfo[playerid][pAuthwep] = cache_get_field_content_int(0, "authwep");
  		PlayerInfo[playerid][pSwat] = cache_get_field_content_int(0, "swat");
		PlayerInfo[playerid][pSwatDuty] = cache_get_field_content_int(0, "swat_duty");
		PlayerInfo[playerid][pFishCount] = cache_get_field_content_int(0, "fishcount");
		PlayerInfo[playerid][pSlot] = cache_get_field_content_int(0, "slot");
		PlayerInfo[playerid][pJob] = cache_get_field_content_int(0, "job");
		PlayerInfo[playerid][pSideJob] = cache_get_field_content_int(0, "sidejob");
		PlayerInfo[playerid][pPrescribe] = cache_get_field_content_int(0, "prescribe");
		PlayerInfo[playerid][pGanjaTime] = cache_get_field_content_int(0, "ganja_time");
		PlayerInfo[playerid][pCareer] = cache_get_field_content_int(0, "career");
		PlayerInfo[playerid][pSpawnType] = cache_get_field_content_int(0, "spawntype");
		PlayerInfo[playerid][pSpawnPoint] = cache_get_field_content_int(0, "spawnpoint");
		PlayerInfo[playerid][pPosX] = cache_get_field_content_float(0, "pos_X");
		PlayerInfo[playerid][pPosY] = cache_get_field_content_float(0, "pos_Y");
		PlayerInfo[playerid][pPosZ] = cache_get_field_content_float(0, "pos_Z");
		PlayerInfo[playerid][pPosA] = cache_get_field_content_float(0, "pos_A");
		PlayerInfo[playerid][pPrisoned] = cache_get_field_content_int(0, "prisoned");
		PlayerInfo[playerid][pOnDuty] = cache_get_field_content_int(0, "duty");
		PlayerInfo[playerid][pChar] = cache_get_field_content_int(0, "char");

		PlayerInfo[playerid][pCopWeap][0] = cache_get_field_content_int(0, "copweap0");
		PlayerInfo[playerid][pCopWeap][1] = cache_get_field_content_int(0, "copweap1");
		PlayerInfo[playerid][pCopWeap][2] = cache_get_field_content_int(0, "copweap2");
		PlayerInfo[playerid][pCopWeap][3] = cache_get_field_content_int(0, "copweap3");
		PlayerInfo[playerid][pCopAmmo][0] = cache_get_field_content_int(0, "copammo0");
		PlayerInfo[playerid][pCopAmmo][1] = cache_get_field_content_int(0, "copammo1");
		PlayerInfo[playerid][pCopAmmo][2] = cache_get_field_content_int(0, "copammo2");
		PlayerInfo[playerid][pCopAmmo][3] = cache_get_field_content_int(0, "copammo3");
		PlayerInfo[playerid][pHud] = cache_get_field_content_int(0, "hud");

		PlayerInfo[playerid][pWeaponBone][0] = cache_get_field_content_int(0, "weap_0_bone");
		PlayerInfo[playerid][pWeaponX][0] = cache_get_field_content_float(0, "weap_0_x");
		PlayerInfo[playerid][pWeaponY][0] = cache_get_field_content_float(0, "weap_0_y");
		PlayerInfo[playerid][pWeaponZ][0] = cache_get_field_content_float(0, "weap_0_z");
		PlayerInfo[playerid][pWeaponRX][0] = cache_get_field_content_float(0, "weap_0_rx");
		PlayerInfo[playerid][pWeaponRY][0] = cache_get_field_content_float(0, "weap_0_ry");
		PlayerInfo[playerid][pWeaponRZ][0] = cache_get_field_content_float(0, "weap_0_rz");

		PlayerInfo[playerid][pWeaponBone][1] = cache_get_field_content_int(0, "weap_1_bone");
		PlayerInfo[playerid][pWeaponX][1] = cache_get_field_content_float(0, "weap_1_x");
		PlayerInfo[playerid][pWeaponY][1] = cache_get_field_content_float(0, "weap_1_y");
		PlayerInfo[playerid][pWeaponZ][1] = cache_get_field_content_float(0, "weap_1_z");
		PlayerInfo[playerid][pWeaponRX][1] = cache_get_field_content_float(0, "weap_1_rx");
		PlayerInfo[playerid][pWeaponRY][1] = cache_get_field_content_float(0, "weap_1_ry");
		PlayerInfo[playerid][pWeaponRZ][1] = cache_get_field_content_float(0, "weap_1_rz");

		PlayerInfo[playerid][pWeaponBone][2] = cache_get_field_content_int(0, "weap_2_bone");
		PlayerInfo[playerid][pWeaponX][2] = cache_get_field_content_float(0, "weap_2_x");
		PlayerInfo[playerid][pWeaponY][2] = cache_get_field_content_float(0, "weap_2_y");
		PlayerInfo[playerid][pWeaponZ][2] = cache_get_field_content_float(0, "weap_2_z");
		PlayerInfo[playerid][pWeaponRX][2] = cache_get_field_content_float(0, "weap_2_rx");
		PlayerInfo[playerid][pWeaponRY][2] = cache_get_field_content_float(0, "weap_2_ry");
		PlayerInfo[playerid][pWeaponRZ][2] = cache_get_field_content_float(0, "weap_2_rz");

		PlayerInfo[playerid][pFightStyle] = cache_get_field_content_int(0, "fightstyle");

		PlayerInfo[playerid][pTog][0] = cache_get_field_content_int(0, "tog_0");
		PlayerInfo[playerid][pTog][1] = cache_get_field_content_int(0, "tog_1");
		PlayerInfo[playerid][pTog][2] = cache_get_field_content_int(0, "tog_2");

		PlayerInfo[playerid][pPhoneOff] = cache_get_field_content_int(0, "phone_off");
		PlayerInfo[playerid][pPhoneAirplane] = cache_get_field_content_int(0, "phone_airplane");
		PlayerInfo[playerid][pPhoneSound] = cache_get_field_content_int(0, "phone_sound");
		PlayerInfo[playerid][pPhoneModel] = cache_get_field_content_int(0, "phone_model");
		PlayerInfo[playerid][pPhoneRingtone] = cache_get_field_content_int(0, "phone_ringtone");
        PlayerInfo[playerid][pPhoneStyle] = cache_get_field_content_int(0, "phone_style");
        PlayerInfo[playerid][pSettings] = cache_get_field_content_int(0, "settings");
        PlayerInfo[playerid][pDependence] = cache_get_field_content_int(0, "dependence");
        PlayerInfo[playerid][pDemolition] = cache_get_field_content_int(0, "demolition");
        PlayerInfo[playerid][pFishTime] = cache_get_field_content_int(0, "fish_time");
		//
		LoadPlayerAttach(playerid);
		LoadPlayerMusic(playerid);
        LoadPlayerInventory(playerid);
		LoadPlayerTickets(playerid);
		LoadPlayerNotes(playerid);
		LoadPlayerContacts(playerid);

		foreach(new i:Vehicle)
		{
		    if(VehicleInfo[i][carOwnerID] == PlayerInfo[playerid][pID])
			{
            	PlayerInfo[playerid][pCarKey] = i;
            	VehicleInfo[i][carOwnerPlayer] = playerid;
            }
			else if(VehicleInfo[i][carRent] == PlayerInfo[playerid][pID])
			{
			    pTemp[playerid][pRentveh] = i;
			    VehicleInfo[i][carTerminate] = 0;
			}
		}

		//

        ClearChatbox(playerid, 100);
        TextDrawShowForPlayer(playerid, logo);
        SCM(playerid, COLOR_BLUE, "====================================================================");
		SendClientMessageEx(playerid,COLOR_WHITE,"Bine ai venit, {9ACD32}%s{FFFFFF}!", GetNameEx(playerid));
		SCM(playerid,COLOR_WHITE,"Serverul se afla in stadiul: {B4B5B7}"GameModeVersion", {FFFFFF}Ultima actualizare:{B4B5B7} "GameModeUpdate".");

        new premium_info[4][32] =
			{"Fara", "{CC6633}BRONZE{FFFFFF}", "{C0C0C0}SILVER{FFFFFF}", "{FFD700}GOLD{FFFFFF}"};

		if(PlayerInfo[playerid][pPremium] && PlayerInfo[playerid][pPremiumTime] > gettime())
		{
			new Float:days = float(PlayerInfo[playerid][pPremiumTime] - gettime()) / 86400.0;
		    SendClientMessageEx(playerid, -1, "Beneficiezi de pachetul %s. El va expira in %i zile.", premium_info[PlayerInfo[playerid][pPremium]], floatround(days));
		}
		else if(PlayerInfo[playerid][pPremium] && PlayerInfo[playerid][pPremiumTime] < gettime())
		{
		    SendClientMessageEx(playerid, -1, "Pachetul %s ti-a expirat.", premium_info[PlayerInfo[playerid][pPremium]]);

            PlayerInfo[playerid][pPremium] = 0;
            PlayerInfo[playerid][pPremiumTime] = 0;
            set_user_int(playerid, "vip", 0);

			PlayerInfo[playerid][pHud] = 1;
			PlayerInfo[playerid][pFightStyle] = 4;
		}

        if(!(PlayerInfo[playerid][pSettings] & togHUD))
            ShowRadioTextDraw(playerid);

		if(PlayerInfo[playerid][pInjured])
		{
		    pTemp[playerid][pInjuredInvulnerable] = gettime() + 4;
			pTemp[playerid][pInjuredTime] = 60;
		}

		static const str_size[] = "~w~Bine ai venit ~n~~b~   %s";
		new mes[sizeof(str_size) - 2 + MAX_PLAYER_NAME + 1];
		format(mes, sizeof(mes), str_size, GetName(playerid));
		GameTextForPlayer(playerid, mes, 5000, 1);

		new count = CountPlayerTickets(playerid);
		if(count)
			SendClientMessageEx(playerid,COLOR_TOMATO, "[ ! ] {FFFFFF}Nu uita de amenzile neplatite (%i).", count);

		if(PlayerInfo[playerid][pTester] == 1)
			SCM(playerid,COLOR_WHITE,"Esti autentificat ca tester! {E3E3E3}(/testerhelp)");

		if(PlayerInfo[playerid][pAdmin] > 0)
			SendClientMessageEx(playerid,COLOR_WHITE,"Esti autentificat ca administrator de nivel {FFD700}%i{FFFFFF}! {E3E3E3}(/ah)", PlayerInfo[playerid][pAdmin]);

		foreach(Player, i)
		{
			if(!IsPlayerLogged(i))
				continue;

			if(!(PlayerInfo[i][pSettings] & togJoin))
			{
				if(CheckAdmin(i, 1))
					SendClientMessageEx(i, COLOR_GRAD2, "*** %s (ID: %i) s-a autentificat (IP: %s, bani in mana: $%s, bani in banca: $%s)", GetNameEx(playerid),playerid, GetPlayerIP(playerid), FormatNumber(PlayerInfo[playerid][pCash]), FormatNumber(PlayerInfo[playerid][pBank]));

            	else if(GetPlayerDistanceFromPlayer(playerid, i) < 15.0 && GetWorld(playerid) == GetWorld(i) && GetInterior(playerid) == GetInterior(i))
                	SendClientMessageEx(i, COLOR_GRAD2, "** %s s-a autentificat.", GetNameEx(playerid));
			}
		}

        if (PlayerInfo[playerid][pOnDuty] && PlayerInfo[playerid][pFaction] != 0)
		{
		    SetPlayerColor(playerid, RemoveAlpha(Factions[PlayerInfo[playerid][pFaction]][fColor]));
		    SendClientMessage(playerid, COLOR_LSPDNEW, "Esti la datorie.");
		}
        new query[156];
		mysql_format(dbHandle, query, sizeof(query), "UPDATE `users` SET `last_login` = '%i', `last_ip` = '%e' WHERE `id` = '%i'", gettime(), GetPlayerIP(playerid), PlayerInfo[playerid][pID]);
		mysql_tquery(dbHandle, query);
  		SCM(playerid, COLOR_BLUE, "====================================================================");

		SetCash(playerid, PlayerInfo[playerid][pCash]);

		if(PlayerInfo[playerid][pSpawnPoint] == 0)
		{
      		Dialog_Show(playerid, FirstSpawn, DIALOG_STYLE_LIST, "{8D8DFF}Alege un loc de restaurare (spawn)", "\
			Aeroport (Los Santos)\n\
			Gara (Unity Station)\n\
			Notel (Jefferson)\n\
			Statie (Market)", "Alege", "");
		}
		else
		{
		    pTemp[playerid][pLogged] = 2;
      		//TogglePlayerSpectating(playerid, 0);
		    SpawnPlayer(playerid);
		}
	}
	else
	{
	    SendErrorMessage(playerid, "Caracterul nu a fost gasit.");
	    KickEx(playerid);
	}
	return 1;
}

forward OnPlayerChangePass(playerid);
public OnPlayerChangePass(playerid)
{
	if(!cache_num_rows())
		return Dialog_Show(playerid, ChangePass, DIALOG_STYLE_PASSWORD, "Schimbare parola", "Introdu vechea parola:", "Inainte", "Inchide");

	Dialog_Show(playerid, ChangePass2, DIALOG_STYLE_PASSWORD, "Schimbare parola", "Introdu noua parola:", "Gata", "Inchide");
	return 1;
}

forward OnApartRemove(apartid);
public OnApartRemove(apartid)
{
    ApartInfo[apartid][aID] = 0;
	ApartInfo[apartid][aPosX] = 0.0000;
	ApartInfo[apartid][aPosY] = 0.0000;
	ApartInfo[apartid][aPosZ] = 0.0000;
	ApartInfo[apartid][aExitX] = 0.0000;
	ApartInfo[apartid][aExitY] = 0.0000;
	ApartInfo[apartid][aExitZ] = 0.0000;
	ApartInfo[apartid][aExitInt] = 0;
	ApartInfo[apartid][aExitVW] = 0;
	ApartInfo[apartid][aPosInt] = 0;
	ApartInfo[apartid][aPosVW] = 0;
	ApartInfo[apartid][aApartOn] = 0;
	return 1;
}

stock SaveAllPlayers()
{
	foreach(Player, i)
	{
		KickEx(i);
	}
	return 1;
}

forward KickPlayer(playerid);
public KickPlayer(playerid)
{
    if (1 != GetPVarInt(playerid,"kicked"))
	    return 1;

    DeletePVar(playerid,"kicked");
	Kick(playerid);
	return 1;
}

stock KickEx(playerid)
{
	if (GetPVarInt(playerid,"kicked"))
	    return 1;

    SetPVarInt(playerid,"kicked", 1);
    SetTimerEx("KickPlayer", 200, false, "d", playerid);
    return 1;
}

/*stock GetStringVar(playerid, varname[])
{
	new str[256];
	GetPVarString(playerid, varname, str, sizeof(str));
	return str;
}*/

stock DealerShip_Nearest(playerid, type)
{
	if(0 == IsPlayerLogged(playerid))
	    return -1;

	for(new i = 0; i < MAX_BIZ; i++)
	{
	    if(BizInfo[i][bizID] == 0)
			continue;

		if(PlayerToPoint(35.0,playerid,BizInfo[i][bizPosX], BizInfo[i][bizPosY], BizInfo[i][bizPosZ]) && GetWorld(playerid) == BizInfo[i][bizPosVW] && GetInterior(playerid) == BizInfo[i][bizPosInt] && BizInfo[i][bizType] == type)
			return i;
	}
	return -1;
}

stock ModShop_Nearest(playerid)
{
	if(0 == IsPlayerLogged(playerid))
	    return -1;

	for(new i = 0; i < MAX_BIZ; i++)
	{
	    if(BizInfo[i][bizID] == 0 || BizInfo[i][bizType] != BIZ_TUNING)
			continue;

	    if(PlayerToPoint(15.0,playerid,BizInfo[i][bizPosX], BizInfo[i][bizPosY], BizInfo[i][bizPosZ]) && GetWorld(playerid) == BizInfo[i][bizPosVW] && GetInterior(playerid) == BizInfo[i][bizPosInt])
			return i;
	}
	return -1;
}

stock Bank_Nearest(playerid)
{
 	if(0 == IsPlayerLogged(playerid))
	    return 0;

	for(new i = 0; i < MAX_BIZ; i++)
	{
	    if(BizInfo[i][bizID] == 0 || BizInfo[i][bizType] != BIZ_BANK)
			continue;

		if(PlayerToPoint(25.0,playerid,BizInfo[i][bizExitX], BizInfo[i][bizExitY], BizInfo[i][bizExitZ]) && GetWorld(playerid) == BizInfo[i][bizExitVW] && GetInterior(playerid) == BizInfo[i][bizExitInt])
			return 1;
	}
	return 0;
}
forward IsAtAdvertisement(playerid);
public IsAtAdvertisement(playerid)
{
 	if(0 == IsPlayerLogged(playerid))
	    return 0;

	for(new i = 0; i < MAX_BIZ; i++)
	{
	    if(BizInfo[i][bizID] == 0 || BizInfo[i][bizType] != BIZ_ADVERT)
			continue;

		if(PlayerToPoint(7.0,playerid,BizInfo[i][bizPosX], BizInfo[i][bizPosY], BizInfo[i][bizPosZ]) && GetWorld(playerid) == BizInfo[i][bizPosVW] && GetInterior(playerid) == BizInfo[i][bizPosInt])
			return 1;
	}
	return 0;
}

stock Advertisement_Nearest(playerid)
{
 	if(0 == IsPlayerLogged(playerid))
	    return -1;

	for(new i = 0; i < MAX_BIZ; i++)
	{
	    if(BizInfo[i][bizID] == 0 || BizInfo[i][bizType] != BIZ_ADVERT)
			continue;

		if(PlayerToPoint(7.0,playerid,BizInfo[i][bizPosX], BizInfo[i][bizPosY], BizInfo[i][bizPosZ]) && GetWorld(playerid) == BizInfo[i][bizPosVW] && GetInterior(playerid) == BizInfo[i][bizPosInt])
			return i;
	}
	return -1;
}

stock LicenseOffice_Nearest(playerid)
{
	if(0 == IsPlayerLogged(playerid))
	    return -1;

	for(new i = 0; i < MAX_BIZ; i++)
	{
	    if(BizInfo[i][bizID] == 0 || BizInfo[i][bizType] != BIZ_LICENSE)
			continue;

	    if(PlayerToPoint(85.0,playerid,BizInfo[i][bizPosX], BizInfo[i][bizPosY], BizInfo[i][bizPosZ]) && GetWorld(playerid) == BizInfo[i][bizPosVW] && GetInterior(playerid) == BizInfo[i][bizPosInt])
			return i;
	}
	return -1;
}

stock IsAtShop(playerid)
{
	if(0 == IsPlayerLogged(playerid))
	    return 0;

	for(new i = 0; i < MAX_BIZ; i++)
	{
	    if(BizInfo[i][bizID] == 0 || BizInfo[i][bizType] != BIZ_STORE)
			continue;

	    if(PlayerToPoint(25.0, playerid, BizInfo[i][bizExitX], BizInfo[i][bizExitY], BizInfo[i][bizExitZ]) && GetWorld(playerid) == BizInfo[i][bizExitVW] && GetInterior(playerid) == BizInfo[i][bizExitInt])
			return 1;
	}
	return 0;
}

//=========================Vehicles Checking from MySQL=========================//
stock IsPizzaCar(vehicle)
{
	return VehicleInfo[vehicle][carType] == PIZZA_CAR ? 1 : 0;
}
stock IsADMVCar(vehicle)
{
	return VehicleInfo[vehicle][carType] == DMV_VEHICLE ? 1 : 0;
}
stock IsADMVTaxi(vehicle)
{
	return VehicleInfo[vehicle][carType] == DMV_TAXI ? 1 : 0;
}

stock IsADMVHeli(vehicle)
{
	return VehicleInfo[vehicle][carType] == DMV_HELICOPTER ? 1 : 0;
}

stock IsRentCar(vehicle)
{
    return VehicleInfo[vehicle][carType] == RENT_CAR ? 1 : 0;
}
//==============================================================================
stock IsABicycle(vehicle)
{
	new model = GetVehicleModel(vehicle);
	return (model == 481 || model == 509 || model == 510)?(1):(0);
}

stock IsATowTruck(vehicle)
{
	new model = GetVehicleModel(vehicle);
	return (model == 525)?(1):(0);
}

stock IsAPlane(vehicle)
{
	new model = GetVehicleModel(vehicle);
	return (model == 592 || model == 577 || model == 511 || model == 512 || model == 593 || model == 520 || model == 553 ||
			model == 476 || model == 519 || model == 460 || model == 513 || model == 548 || model == 417 || model == 487 ||
			model == 488 || model == 497 || model == 563 || model == 447 || model == 469 )?(1):(0);
}

stock IsADontTrunk(vehicle)
{
	new model = GetVehicleModel(vehicle);
	return (model == 457 || model == 424 || model == 568 || model == 525 || model == 531 || model == 530 || model == 572)?(1):(0);
}

stock IsAHelicopter(vehicle)
{
	new model = GetVehicleModel(vehicle);
	return (model == 548 || model == 425 || model == 417 || model == 487 || model == 488 || model == 497 || model == 563 || model == 447 || model == 469)?(1):(0);
}

stock IsATaxi(vehicle)
{
	return (GetVehicleModel(vehicle) == 420 || GetVehicleModel(vehicle) == 438)?(1):(0);
}

stock IsADontWindow(vehicle)
{
	new model = GetVehicleModel(vehicle);
	return (model == 586 || model == 424 || model == 448 || model == 457 || model == 461 || model == 462 || model == 463 || model == 468 ||
			model == 471 || model == 481 || model == 509 || model == 572 || model == 510 || model == 521 || model == 522 ||
			model == 523 || model == 530 || model == 531 || model == 532 || model == 539 || model == 568 || model == 571 ||
			model == 581 || model == 582 || model == 430 || model == 446 || model == 452 || model == 453 || model == 454 ||
			model == 472 || model == 473 || model == 484 || model == 493 || model == 595)?(1):(0);
}

stock IsABiker(vehicleid)
{
	new model = GetVehicleModel(vehicleid);
	return (model == 522 || model == 521 || model == 461 || model == 463 || model == 581 || model == 448 || model == 586 || model == 523 || model == 468 || model == 471 || model == 462)?(1):(0);
}

stock IsABoat(vehicleid)
{
	new model = GetVehicleModel(vehicleid);
	return (model == 472 || model == 473 || model == 493 || model == 595 || model == 484 || model == 430 || model == 453 || model == 452 || model == 446 || model == 454)?(1):(0);
}

stock IsDonateVehicle(model)
{
    switch(model)
	{
	    case 424, 568, 495, 541, 411, 490, 522: return 1;
	}
	return 0;
}

stock IsBronzeVehicle(model)
{
	switch(model)
	{
	    case 424, 568: return 1;
	}
	return 0;
}

stock IsSilverVehicle(model)
{
	switch(model)
	{
	    case 495, 541: return 1;
	}
	return 0;
}

stock IsGoldVehicle(model)
{
    switch(model)
	{
	    case 411, 490, 522: return 1;
	}
	return 0;
}
//
stock IsABoatModel(model)
{
	return (model == 472 || model == 473 || model == 493 || model == 595 || model == 484 || model == 430 || model == 453 || model == 452 || model == 446 || model == 454)?(1):(0);
}

stock IsAPlaneModel(model)
{
	return (model == 592 || model == 577 || model == 511 || model == 512 || model == 593 || model == 520 || model == 553 ||
			model == 476 || model == 519 || model == 460 || model == 513 || model == 548 || model == 417 || model == 487 ||
			model == 488 || model == 497 || model == 563 || model == 447 || model == 469 )?(1):(0);
}

//=========================Vehicles Checking from MySQL=========================//
public OnModelSelectionResponse(playerid, extraid, index, modelid, response)
{
	if(extraid == MODEL_SELECTION_COLOR && response == MODEL_RESPONSE_SELECT)
	{
	    if(GetPVarInt(playerid, #veh_color_type) == 1)
	    {
		    new vehicle = GetPlayerVehicleID(playerid);
			if(0 == IsPlayerInAnyVehicle(playerid) || VehicleInfo[vehicle][carOwnerID] == 0)
				return 1;

		    if(GetPVarInt(playerid, #veh_color1) == -1)
		    {
		        SetPVarInt(playerid, #veh_color1, index);

		        new colors[256];
		        for(new i; i != 256; i++)
		            colors[i] = i;

		    	ShowColorSelectionMenu(playerid, MODEL_SELECTION_COLOR, colors, sizeof(colors));
				return 1;
			}
		    StartVehicleUpgrade(playerid, vehicle, 10, 100, GetPVarInt(playerid, #veh_color1), index);
		}
		if(GetPVarInt(playerid, #veh_color_type) == 2)
	    {
		    new vehicle = GetPlayerVehicleID(playerid);
			if(0 == IsPlayerInAnyVehicle(playerid) || VehicleInfo[vehicle][carOwnerID] == 0)
				return 1;

		    if(GetPVarInt(playerid, #veh_color1) == -1)
		    {
		        SetPVarInt(playerid, #veh_color1, index);

		        new colors[256];
		        for(new i; i != 256; i++)
		            colors[i] = i;

		    	ShowColorSelectionMenu(playerid, MODEL_SELECTION_COLOR, colors, sizeof(colors));
				return 1;
			}
		    StartVehicleUpgrade(playerid, vehicle, 10, 500, GetPVarInt(playerid, #veh_color1), index);
		}
	    return 1;
	}
	if(extraid == MODEL_SELECTION_UNIFORM && response == MODEL_RESPONSE_SELECT)
	{
	    if(!PlayerInfo[playerid][pOnDuty])
			return SCM(playerid, COLOR_LIGHTRED, "Trebuie sa fii la datorie (/duty).");

		if(0 == IsPlayerAtUniform(playerid) && 0 == IsPlayerAtSecondUniform(playerid, 1))
    		return SendErrorMessage(playerid, "Nu esti in vestiar.");

		if(0 != PlayerInfo[playerid][pSwatDuty])
  			return SendErrorMessage(playerid, "Echipeaza-te corespunzator.");

	    PlayerInfo[playerid][pChar] = modelid;
	    SetPlayerSkin(playerid, modelid);
	    return 1;
	}

 	if(extraid == MODEL_SELECTION_BUYCLOTHES && response == MODEL_RESPONSE_SELECT)
	{
	    if(modelid < 1 || modelid > 311)
	        return 1;

	    if(GetCash(playerid) < 100)
			return SCM(playerid, COLOR_GREY, "Nu ai suficienti bani! (necesari: $100)");

		if(GetPlayerSkin(playerid) == modelid || PlayerInfo[playerid][pTog][0] == modelid || PlayerInfo[playerid][pTog][1] == modelid || PlayerInfo[playerid][pTog][2] == modelid)
		    return SendErrorMessage(playerid, "Ai cumparat deja acest skin.");

		new mes[128];
		for(new i; i != 3; i++)
		{
		    if(PlayerInfo[playerid][pTog][i] == 0)
		        strcat(mes, "\n[Liber]");
		    else
                format(mes, sizeof(mes), "%s\n[???? #%i]", mes, PlayerInfo[playerid][pTog][i]);
		}
		Dialog_Show(playerid, BuyClothes, DIALOG_STYLE_LIST, "Selecteaza slotul...", mes, "Inlocuieste", "Renunta");
		SetPVarInt(playerid, "clothes_model", modelid);
		return 1;
	}

    if(extraid == MODEL_SELECTION_FURNITURE && response == MODEL_RESPONSE_CANCEL)
	{
	    if(pTemp[playerid][pHouseFurniture] == -1 || (IsPlayerHouseOutside(playerid, pTemp[playerid][pHouseFurniture], 5.0) == 0 && 0 == IsPlayerHouseInside(playerid, pTemp[playerid][pHouseFurniture])))
    		return 1;

	    new str[549] = "1. Canapele\n2. Paturi\n3. Fotolii & scaune\n4. Mese\n5. Mese (diferite)\n6. Obiecte de iluminare\n7. Echipament de club\n8. Dulapuri\n9. Echipament de bucatarie\n10. Produse\n11. Resturi\n12. Imbracaminte\n13. Sticle & pahare\n14. Usi dinamice\n15. Decoratiuni interioare\n16. Arme\n17. Electronice\n18. Baie\n";
     	strcat(str, "19. Picturi (tablouri)\n20. Plante\n21. Pereti\n22. Pereti (mari)\n23. Pereti (cu loc pentru usa)\n24. Pereti (cu loc pentru fereastra)\n25. Ferestre\n26. Pereti (2)\n27. Pereti (3)\n28. Coloane\n29. Obiecte stradale");
      	Dialog_Show(playerid, FurnitureCategories, DIALOG_STYLE_LIST, "Sectiuni:", str, "Alege", "Inchide");
	    return 1;
	}
	else if(extraid == MODEL_SELECTION_FURNITURE && response == MODEL_RESPONSE_SELECT)
	{
	    if(pTemp[playerid][pHouseFurniture] == -1 || (IsPlayerHouseOutside(playerid, pTemp[playerid][pHouseFurniture], 5.0) == 0 && 0 == IsPlayerHouseInside(playerid, pTemp[playerid][pHouseFurniture])))
    		return 1;

	    new houseid = pTemp[playerid][pHouseFurniture],
			listitem = GetPVarInt(playerid, "category_furniture");

        if(GetHouseFurnitures(houseid) >= GetMaxPlayerFurniture(playerid))
			return SCM(playerid, COLOR_YELLOWG, "Ai atins numarul maxim de obiecte.");

        if(listitem == 28 && GetHouseOutsideFurnitures(houseid) > 9)
            return SCM(playerid, COLOR_YELLOWG, "Poti plasa doar 10 obiecte in afara locuintei.");

	    new i = -1;
		for(new a; a < MAX_FURNITURE; a++)
		{
		    if(HouseFurniture[houseid][a][fOn] != 0)
		        continue;

      		i = a;
			break;
		}

		if(i == -1)
			return 1;

		static const str_size[] = "{ffffff}Categorie: {FFFF00}%s\n{ffffff}Nume: {FFFF00}%s\n{ffffff}Pret: {00FF22}${FFFF00}%s";
		new mes[sizeof(str_size) - 6 + 11 + 32 + 64];
		format(mes, sizeof(mes), str_size,
		furniture_title[listitem],
		furniture_list[listitem][index][frName],
		FormatNumber(furniture_list[listitem][index][frPrice]));

		SetPVarInt(playerid, "furniture_index", index);

		Dialog_Show(playerid, BuyFurniture, DIALOG_STYLE_MSGBOX, "Mobilier", mes, "Cumpara", "Inapoi");
		return 1;
	}

 	if(extraid == MODEL_SELECTION_BORT && response == MODEL_RESPONSE_SELECT)
	{
        new faction = PlayerInfo[playerid][pFaction];

		if(faction != LSPD && faction != SASD && faction != DOCS && faction != LSFD && faction != CITY)
			return SCM(playerid, COLOR_LIGHTRED, "Nu faci parte din factiunea potrivita.");

	    if(IsPlayerInAnyVehicle(playerid))
			return SendErrorMessage(playerid, "Nu trebuie sa fii intr-un vehicul.");

	    if(!PlayerInfo[playerid][pOnDuty])
			return SCM(playerid, COLOR_LIGHTRED, "Trebuie sa fii la datorie (/duty).");

		for(new i=0; i<MAX_BORTES;i++)
		{
		    if(BortInfo[playerid][i][bortOn] != 0)
				continue;

		    new Float: x,
				Float: y,
				Float: z;
		  	GetXYInFrontOfPlayer(playerid, x, y, z, 1.5);

			BortInfo[playerid][i][bortOn] = 1;
			BortInfo[playerid][i][bortObject] = CreateDynamicObject(modelid, x, y, z - 0.5, 0.0, 0.0, 0.0, GetWorld(playerid), GetInterior(playerid));
			EditDynamicObject(playerid, BortInfo[playerid][i][bortObject]);
			format(BortInfo[playerid][i][bortName], 32, "%s", (faction == LSFD)?(bort_names_fd[index]):((faction == CITY)?(bort_names_city[index]):(bort_names[index])));

			pTemp[playerid][pEditBort] = i+1;
		    return 1;
		}
		SendErrorMessage(playerid, "Ai atins numarul maxim de obiecte (15).");
	    return 1;
	}

	if(extraid == MODEL_SELECTION_FA && response == MODEL_RESPONSE_SELECT)
	{
	    new faction = PlayerInfo[playerid][pFaction];
	    if(faction != LSPD && faction != SASD && faction != DOCS && faction != LSFD && faction != CITY)
			return SCM(playerid, COLOR_LIGHTRED, "Nu faci parte din factiunea potrivita.");

		Dialog_Show(playerid, SelectBone, DIALOG_STYLE_LIST, "Partile corpului","1: Spate\n2: Cap\n3: Brat stang\n4: Umar drept\n5: Mana stanga\n6: Mana dreapta\n7: Sold stang\n8: Coapsa dreapta\n9: Picior stang\n10: Picior drept\n11: Gamba dreapta\n12: Gamba stanga\n13: Antebrat stang\n14: Antebrat drept\n15: Clavicula stanga\n16: Clavicula dreapta\n17: Gat\n18: Maxilar","Alege","Inchide");
		SetPVarInt(playerid, #select_attach, index);
	    return 1;
	}

	if(extraid == MODEL_SELECTION_BUYCAR && response == MODEL_RESPONSE_SELECT)
	{
	    new price;
	    if((price = GetVehiclePrice(modelid)) == 0)
	        return SendErrorMessage(playerid, "Acest vehicul nu este disponibil.");

	    if (0 == PlayerInfo[playerid][pPremium] && IsDonateVehicle(modelid))
			return SCM(playerid, COLOR_INFO, "Acest vehicul poate fi achizitionat doar de catre donatori.");

		if(PlayerInfo[playerid][pPremium] < 1 && IsBronzeVehicle(modelid))
			return SCM(playerid, COLOR_INFO, "Pentru a achizitiona acest vehicul ai nevoie de donator bronze.");

		if(PlayerInfo[playerid][pPremium] < 2 && IsSilverVehicle(modelid))
			return SCM(playerid, COLOR_INFO, "Pentru a achizitiona acest vehicul ai nevoie de donator silver.");

		if(PlayerInfo[playerid][pPremium] < 3 && IsGoldVehicle(modelid))
			return SCM(playerid, COLOR_INFO, "Pentru a achizitiona acest vehicul ai nevoie de donator gold.");

		DeletePVar(playerid, "BuyingVehicleModel");
		SetPVarInt(playerid, "BuyingVehicleRegister", 0);
		SetPVarInt(playerid, "BuyingVehicleAlarm", 0);
		SetPVarInt(playerid, "BuyingVehicleLock", 0);
		SetPVarInt(playerid, "BuyingVehicleImmob", 0);
		SetPVarInt(playerid, "BuyingVehicleInsurance", 0);
		SetPVarInt(playerid, "BuyingVehicleRadio", 0);
		SetPVarInt(playerid, "BuyingVehicleGps", 0);
		SetPVarInt(playerid, "BuyingVehicleModel", modelid);

		new mes[56];
		format(mes, sizeof(mes), "{bab9ba}%s - {35B835}$%s", VehicleNames[modelid-400], FormatNumber(price));
		if(modelid == 481 || modelid == 509 || modelid == 510)
			Dialog_Show(playerid, BuyingVehicleDone, DIALOG_STYLE_MSGBOX, mes, "{B4B5B7}Esti sigur ca doresti sa achizitionezi acest vehicul?", "Cumpara", "Inchide");
		else
		{
		    static const str_size[] = "{ffffff}Pret: \t{e2bd63}$%s\n\n{ffffff}Apasa 'Cumpara' pentru a finaliza achizitia.";
            new string[sizeof(str_size) - 4 + 1 + 13];
            format(string, sizeof(string), str_size,
				FormatNumber(GetVehiclePrice(modelid))
			);
			Dialog_Show(playerid, BuyingVehicleList, DIALOG_STYLE_MSGBOX, mes, string, "Optiuni", "Cumpara");
		}
	    return 1;
	}

 	/*if(extraid == MODEL_SELECTION_OBJATT && response == MODEL_RESPONSE_SELECT)
	{
	    new vehicle = GetPVarInt(playerid, #veh_editor),
	    	carslot = GetPVarInt(playerid, #veh_slot),
			attobj = modelid;

	    new Float:x,
		Float:y,
		Float:z;

		GetVehiclePos(vehicle, x, y, z);
		VehicleInfo[vehicle][carAttach][carslot] =
			CreateDynamicObject(attobj, x, y, z+2, 0.0, 0.0, 0.0);

		SetPVarInt(playerid, #veh_slot, carslot);
		SetPVarInt(playerid, #veh_obj, modelid);

		EditDynamicObject(playerid,VehicleInfo[vehicle][carAttach][carslot]);


		if(IsPlayerInAnyVehicle(playerid))
		    SendClientMessage(playerid, COLOR_LIGHTRED, "[ ! ] {FFFFFF}Foloseste {FF6347}W {FFFFFF}pentru a misca camera.");
		else
		    SendClientMessage(playerid, COLOR_LIGHTRED, "[ ! ] {FFFFFF}Foloseste {FF6347}SPACE {FFFFFF}pentru a misca camera.");
	    return 1;
	}*/
	return 1;
}

stock Fire_Check(playerid)
{
	new Float: health,
		mes[6];

	for(new i = 0; i != MAX_FIRES; i++)
	{
	    if(FiresInfo[i][fireOn] == 0 || GetWorld(playerid) != FiresInfo[i][fireVW] || GetInterior(playerid) != FiresInfo[i][fireInt])
	        continue;

        if(0 == IsPlayerInjured(playerid) && IsPlayerInRangeOfPoint(playerid, 3.0, FiresInfo[i][firePos][0], FiresInfo[i][firePos][1], FiresInfo[i][firePos][2]) && 0 == IsPlayerInAnyVehicle(playerid))
        {
            GetPlayerHealth(playerid, health);
			if(GetPlayerSkin(playerid) == 277 || GetPlayerSkin(playerid) == 278 || GetPlayerSkin(playerid) == 279)
			{
                SetPlayerHealth(playerid, health - 1.0);
                RecordDamage(playerid, 51, BODY_PART_TORSO, 1.0, 0);
			}
			else
			{
				SetPlayerHealth(playerid, health - 4.5);
                RecordDamage(playerid, 51, BODY_PART_TORSO, 4.5, 0);
			}

			if(health - 4.5 <= 10.0)
			    InjuredPlayer(playerid, INVALID_PLAYER_ID, 51);
        }

        if(0 == HoldingKey(playerid, KEY_FIRE) || (GetPlayerWeapon(playerid) != 42 && GetVehicleModel(GetPlayerVehicleID(playerid)) != 407))
	    	return 1;

	    if(0 == IsPlayerInAnyVehicle(playerid) && 0 == IsPlayerInRangeOfPoint(playerid, 5.0, FiresInfo[i][firePos][0], FiresInfo[i][firePos][1], FiresInfo[i][firePos][2]))
			continue;

        if(IsPlayerInAnyVehicle(playerid) && 0 == IsPlayerInRangeOfPoint(playerid, 30.0, FiresInfo[i][firePos][0], FiresInfo[i][firePos][1], FiresInfo[i][firePos][2]))
			continue;

		FiresInfo[i][fireHealth]--;
		if(FiresInfo[i][fireHealth] > 1)
		{
			format(mes, sizeof(mes), "%i %", FiresInfo[i][fireHealth]);
			UpdateDynamic3DTextLabelText(FiresInfo[i][fireLabel], 0xCC0500FFF, mes);
		}
		else
			DeleteFire(i);
	}
	return 1;
}

stock PlayerTimer()
{
	new string[128];
	foreach(Player, i)
	{
	    if(pTemp[i][pLogged] == 1 && pTemp[i][pLoggedTime]++ >= 60)
	    {
	      	SendErrorMessage(i, "Nu te-ai autentificat la timp.");
			KickEx(i);
			continue;
		}

		if(pTemp[i][pLogged] != 2)
			continue;

		if(GetPVarInt(i, #gun_check) < GetTickCount())
			CheckWeapon(i);

        if(pTemp[i][pPayphone] && 0 == IsPlayerAtPayphone(i, pTemp[i][pPayphone]-1))
		{
			PayphoneInfo[pTemp[i][pPayphone]-1][phUsed] = INVALID_PLAYER_ID;
			pTemp[i][pPayphone] = 0;
		}

        new Float:health;
		GetPlayerHealth(i, health);
    	if(ignore_hp[i] < gettime() && 0 == IsPlayerAFK(i) && GetPlayerState(i) != PLAYER_STATE_SPECTATING)
    	{
    	    if(player_hp[i] >= health)
				player_hp[i] = health;

			else if(player_hp[i] < health)
			{
			    SendErrorMessage(i, "Ai primit kick deoarece ai folosit modificari avantajoase. (#007-1)");
				KickEx(i);
			}
    	}

		new Float:armour;
		GetPlayerArmour(i, armour);
		if(ignore_armour[i] < gettime() && 0 == IsPlayerAFK(i) && GetPlayerState(i) != PLAYER_STATE_SPECTATING)
		{
			if(player_armour[i] >= armour)
				player_armour[i] = armour;

			else if(player_armour[i] < armour)
			{
				SendErrorMessage(i, "Ai primit kick deoarece ai folosit modificari avantajoase. (#007-2)");
				KickEx(i);
			}
		}

    	if(player_remove_vehicle[i] != 0 && ignore_remove_vehicle[i] < gettime() && 0 == IsPlayerAFK(i))
	    {
	        if(IsPlayerInVehicle(i, player_remove_vehicle[i]))
	        {
	            SendErrorMessage(i, "Ai primit kick deoarece ai folosit modificari avantajoase. (#003)");
	            KickEx(i);
	        }
	        player_remove_vehicle[i] = 0;
	        ignore_remove_vehicle[i] = 0;
	    }

        if(!ac_off_protect{i}/* && 0 == CheckAdmin(i, 1)*/)
    	{
    	    new Float: p_x,
				Float: p_y,
				Float: p_z,
				surfing = GetPlayerSurfingVehicleID(i),
				vehicle = GetPlayerVehicleID(i),
				Float: dist = (IsAPlane(vehicle))? (100.0):(70.0);

			GetPlayerPos(i, p_x, p_y, p_z);

			p_x = (p_x > ac_pos_x[i])?(floatsub(p_x, ac_pos_x[i])):(floatsub(ac_pos_x[i], p_x));
			p_y = (p_y > ac_pos_y[i])?(floatsub(p_y, ac_pos_y[i])):(floatsub(ac_pos_y[i], p_y));

			if((floatcmp(p_x, 15.0) == 1 || floatcmp(p_y, 15.0) == 1) && surfing == INVALID_VEHICLE_ID && vehicle == 0 && GetPlayerSpecialAction(i) != SPECIAL_ACTION_USEJETPACK && GetPlayerState(i) == PLAYER_STATE_ONFOOT && !IsPlayerAFK(i))
			{
			    if(!ac_off_flood{i})
			    	AMSG(COLOR_LIGHTRED, "(Admin Info) {FFFFFF}%s (ID: %i) a primit kick pentru fly hack/teleport hack (X: %.2f | Y: %.2f).", GetNameEx(i), i, p_x, p_y),
					ac_off_flood{i} = 10;

                ac_fly_detect{i}++;
			}
			else if((floatcmp(p_x, dist) == 1 || floatcmp(p_y, dist) == 1) && (surfing != INVALID_VEHICLE_ID || 0 != vehicle) && !IsPlayerAFK(i))
			{
			    if(!ac_off_flood{i})
                	AMSG(COLOR_LIGHTRED, "(Admin Info) {FFFFFF}%s (ID: %i) a primit kick pentru fly hack/teleport hack (X: %.2f | Y: %.2f).", GetNameEx(i), i, p_x, p_y),
					ac_off_flood{i} = 10;

                ac_fly_detect{i}++;
			}

			if(ac_fly_detect{i} > 10)
			{
			    if(vehicle != 0)
			    	RespawnVehicle(vehicle);

				AMSG(COLOR_LIGHTRED, "(Admin Info) {FFFFFF}%s (ID: %i) a primit kick pentru fly hack/teleport hack (10 avertismente).", GetNameEx(i), i);
                SendErrorMessage(i, "Ai primit kick deoarece ai folosit modificari avantajaose. (#010)");
				KickEx(i);
			}
        	GetPlayerPos(i, ac_pos_x[i], ac_pos_y[i], ac_pos_z[i]);
    	}
    	else
    		ac_off_protect{i}--;

        if(ac_off_flood{i})
            ac_off_flood{i}--;

        if(pTemp[i][pSpecPlayer] != INVALID_PLAYER_ID)
		{
		    new targetid = pTemp[i][pSpecPlayer],
				Float: x, Float: y, Float: z, Float: a,
				mes[128];

			if(!IsPlayerLogged(targetid))
			{
			    GameTextForPlayer(i,"", 2000, 4);
				TogglePlayerSpectating(i, 0);
			}
			else
			{
				if (GetWorld(targetid) != GetWorld(i))
					SetWorld(i, GetWorld(targetid));

				if (GetInterior(targetid) != GetInterior(i))
					SetInterior(i, GetWorld(targetid));

				GetPlayerPos(targetid, x,y,z);
			    GetPlayerFacingAngle(targetid, a);

		       	new weap = GetPlayerWeapon(targetid),
		       		ip[24],
		            weapon[32],
		            ammo = (GetWeapSlot(weap) == -1)?(0):(PlayerInfo[targetid][pAmmo][GetWeapSlot(weap)]),
		            Float: thealth,
		            Float: tarmour;

				GetPlayerIp(targetid, ip, sizeof(ip));
			    GetWeaponName(weap, weapon, 32);
			    GetPlayerHealth(targetid, thealth);
			    GetPlayerArmour(targetid, tarmour);

			    format(mes, sizeof(mes), "XYZ: %.3f, %.3f, %.3f;  Unghi: %.0f;  Interior: %i;  Virtual World: %i;", x, y, z, a, GetInterior(targetid),GetWorld(targetid));
			    PlayerTextDrawSetString(i, spectate_TD[i][0], mes);
			    PlayerTextDrawShow(i, spectate_TD[i][0]);

			    format(mes, sizeof(mes), "%s[%i]; IP: %s; PING: %03i; VIATA: %.0f; ARMURA: %.0f; ARMA: %s; GLOANTE: [Server: %i -- Param: %i];",
				GetName(targetid),
				targetid,
				ip,
				GetPlayerPing(targetid),
				thealth,
				tarmour,
				weapon,
				GetPlayerAmmo(targetid),
				ammo);

			    PlayerTextDrawSetString(i, spectate_TD[i][1], mes);
			    PlayerTextDrawShow(i, spectate_TD[i][1]);
		    }
		}

        if (PlayerInfo[i][pInjured] == 1 && pTemp[i][pInjuredInvulnerable]-2 < gettime())
		{
		    if(!PlayerToPoint(2.0, i, PlayerInfo[i][pPosX], PlayerInfo[i][pPosY], PlayerInfo[i][pPosZ]))
	        	SetPlayerPosEx(i, PlayerInfo[i][pPosX], PlayerInfo[i][pPosY], PlayerInfo[i][pPosZ]);

		    static const str_damage[] = "(( Ranit de %i ori, tasteaza /damages %i pentru mai multe informatii. ))";
    		new mes_damage[sizeof(str_damage) + 4 + 4];
   			format(mes_damage, sizeof(mes_damage), str_damage, pTemp[i][pDamagesCount], i);
    		SetPlayerChatBubble(i, mes_damage, 0xFF8080FF, 10.0, 1500);

			ApplyAnimation(i, "WUZI",  "CS_Dead_Guy", 4.0, 1, 1, 1, 1, 0, 1);
		}
		else if (PlayerInfo[i][pInjured] == 2)
		{
		    if(!PlayerToPoint(2.0, i, PlayerInfo[i][pPosX], PlayerInfo[i][pPosY], PlayerInfo[i][pPosZ]))
	        	SetPlayerPosEx(i, PlayerInfo[i][pPosX], PlayerInfo[i][pPosY], PlayerInfo[i][pPosZ]);

			SetPlayerChatBubble(i, "(( ACEST JUCATOR ESTE MORT! ))", 0x9A0101, 10.0, 1500);
		    ApplyAnimation(i, "WUZI",  "CS_Dead_Guy", 4.0, 1, 1, 1, 1, 0, 1);
		}

		Fire_Check(i);

        if (GetPlayerSpecialAction(i) == SPECIAL_ACTION_USEJETPACK && !pTemp[i][pJetpack])
		{
	    	AMSG(COLOR_LIGHTRED, "(Admin Info) {FFFFFF}%s (ID: %i) a incercat sa foloseasca jetpack.", GetNameEx(i), i);
	    	SetPlayerSpecialAction(i, SPECIAL_ACTION_NONE);
		}

        if(GetPVarInt(i, #check_int))
		{
		    UpdateIntVar(i, #check_int, -1);
		    new hid = -1;
		    if(!GetPVarInt(i, #check_int) && (hid = GetNearHouseInside(i)) != -1)
		    {
		        SetPlayerPosEx(i,HouseInfo[hid][hPosX],HouseInfo[hid][hPosY],HouseInfo[hid][hPosZ]);
				SetInterior(i, HouseInfo[hid][hPosInt]);
				SetWorld(i,HouseInfo[hid][hPosVW]);
		        pTemp[i][pHouseEntered] = -1;
		        SendClientMessage(i, -1, "Timpul s-a scurs.");
		        DeletePVar(i, #check_int);
		    }
		}

        for(new w = 0; w < MAX_WEAP-1; w++)
		{
		    if(PlayerInfo[i][pWeap][w] == 0)
				continue;

		    if(GetPlayerWeapon(i) == PlayerInfo[i][pWeap][w] && IsPlayerAttachedObjectSlotUsed(i, w + 5))
	            RemovePlayerAttachedObject(i, w + 5);

			if((GetPlayerWeapon(i) == 0 || GetPlayerWeapon(i) != PlayerInfo[i][pWeap][w]) && 0 == PlayerInfo[i][pHideWeap][w] && !IsPlayerAttachedObjectSlotUsed(i, w + 5))
				SetPlayerAttachedObject(i, w + 5, inventory_items[PlayerInfo[i][pWeap][w]][itemModel], PlayerInfo[i][pWeaponBone][w], PlayerInfo[i][pWeaponX][w], PlayerInfo[i][pWeaponY][w], PlayerInfo[i][pWeaponZ][w], PlayerInfo[i][pWeaponRX][w], PlayerInfo[i][pWeaponRY][w], PlayerInfo[i][pWeaponRZ][w], 1.0, 1.0, 1.0);
		}
		//Drug
		if(pTemp[i][pDemolitionTime])
		{
			if(pTemp[i][pDemolitionTime] < gettime())
			{
		    	pTemp[i][pDemolitionTime] = gettime() + 600;
		    	new Float: phealth,
		    	    Float: minus = (PlayerInfo[i][pDependence] >= 70)?(20.0):(10.0);
		    	GetPlayerHealth(i, phealth);

				if(0 == random(5) && 0 == IsPlayerInAnyVehicle(i) && 0 == IsPlayerInjured(i))
                	OnPlayAnim(i, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0);

				if(phealth - minus > 10.0)
		    		SetPlayerHealth(i, phealth - minus);
				else
				    SetPlayerHealth(i, 10.0);
			}
 			SetPlayerWeather(i, 20);
		}

		if(PlayerInfo[i][pDemolition])
		    PlayerInfo[i][pDemolition]--;

		if(PlayerInfo[i][pDemolition] == 1 && PlayerInfo[i][pDependence] >= 40)
		{
		    PlayerInfo[i][pDemolition] = 600 + random(1200);
		    SendClientMessageEx(i, -1, "Dependenta a inceput. Vei pierde %i la fiecare 10 minute.", (PlayerInfo[i][pDependence] >= 70)?(20):(10));
			SendClientMessage(i, -1, "Trebuie sa te droghezi pentru a nu mai pierde din viata.");
		    SetPlayerWeather(i, 20);
		    pTemp[i][pDemolitionTime] = gettime();
		}

		if(pTemp[i][pDrugUse] != 0 && pTemp[i][pDrugTime] < gettime())
		{
			pTemp[i][pDrugUse] = 0;
			PlayerTextDrawHide(i, drug_effect[i]);
			SetPlayerCurrentTimeAndWeather(i);
		}
		else if((pTemp[i][pDrugUse] == INV_GANJA || pTemp[i][pDrugUse] == INV_MED_GANJA) && pTemp[i][pDrugTime] > gettime())
		{
			SetPlayerTime(i, 21, 0);
			SetPlayerWeather(i, 229);
		}
		else if(pTemp[i][pDrugUse] == INV_MET && pTemp[i][pDrugTime] > gettime())
		{
			SetPlayerTime(i, 12, 0);
			SetPlayerWeather(i, 226);
		}
		else if(pTemp[i][pDrugUse] == INV_LSD && pTemp[i][pDrugTime] > gettime() && pTemp[i][pDrugChgWeather] < gettime())
		{
		    pTemp[i][pDrugChgWeather] = gettime() + 4;
		    PlayerTextDrawBoxColor(i, drug_effect[i], drug_effect_color[random(sizeof(drug_effect_color))]);
		    PlayerTextDrawShow(i, drug_effect[i]);
		}
		else if(pTemp[i][pDrugUse] == INV_COCAINE && pTemp[i][pDrugTime] > gettime())
		{
		    new hour,
		        minute;
		    GetPlayerTime(i, hour, minute);
			if(hour > 18)
		        SetPlayerTime(i, 12, 0);
		    else
		        SetPlayerTime(i, hour + 1, 0);
      		SetPlayerWeather(i, 190);
		}
		else if(pTemp[i][pDrugUse] == INV_HEROIN && pTemp[i][pDrugTime] > gettime())
		{
		    SetPlayerWeather(i, 21);
		}
		//
        if(pTemp[i][pBoombox_house] != -1 && IsPlayerHouseInside(i, pTemp[i][pBoombox_house], 50.0) == 0)
        {
            pTemp[i][pBoombox_house] = -1;
            StopAudioStreamForPlayer(i);
        }

        if(pTemp[i][pBoombox_biz] != -1 && IsPlayerBizInside(i, pTemp[i][pBoombox_biz], 50.0) == 0)
        {
            pTemp[i][pBoombox_biz] = -1;
            StopAudioStreamForPlayer(i);
        }

        if(GetPVarInt(i, #try_engine))
		{
		    if(HoldingKey(i, KEY_SPRINT) == 0)
		    {
		        SetPVarInt(i, #try_engine, GetPVarInt(i, #try_engine)-1);
		        if(GetPVarInt(i, #try_engine) == 0)
		        {
		        	DeletePVar(i, #try_engine);
		        	GameTextForPlayer(i, "~r~Motorul este avariat!", 1000, 4);
				}
			}
		    else
		    {
		        PlaySound(i, 11200);
		        SetPVarInt(i, #try_engine, GetPVarInt(i, #try_engine)+1);
		        if(GetPVarInt(i, #try_engine) == 12)
		        {
		            DeletePVar(i, #try_engine);
		            VehicleEngine(GetPlayerVehicleID(i), true);
		            GameTextForPlayer(i, "~w~MOTOR ~g~PORNIT", 2500, 4);
		        }
		    }
		}

        if(pTemp[i][pFishTime])
		{
		    OnPlayAnim(i, "SWORD", "SWORD_IDLE", 4.1, 1, 0, 0, 1, 0);
		    pTemp[i][pFishTime]--;
		    if(pTemp[i][pFishTime] == 0)
		    {
		        StopPlayerAnims(i);
		        if(random(2) == 0)
				{
				    new randlb = randomEx(15, 30),
						rand = random(sizeof(fish_names));

					SendClientMessageEx(i, -1, "Ai prins un %s de %i kilograme.", fish_names[rand], randlb);
					if(PlayerInfo[i][pFishCount] + randlb <= 1000)
						PlayerInfo[i][pFishCount] += randlb;
					else
					    PlayerInfo[i][pFishCount] = 1000;
				}
				else
					SCM(i, -1, "Mai incearca!");
		    }
		}

        if(pTemp[i][pChatCount])
            pTemp[i][pChatCount]--;

        if(pTemp[i][pChatCount])
            pTemp[i][pCmdCount]--;

        if(GetPVarInt(i, #hide_job_message) && GetPVarInt(i, #hide_job_message) < gettime())
		{
		    PlayerTextDrawHide(i, TD_job_message[i]);
		    DeletePVar(i, #hide_job_message);
		}

		if(pTemp[i][pTracePlayer] != INVALID_PLAYER_ID)
		    TracePlayer(i);

		if(0 != IsPlayerPhoneCreated(i))
			Update_Phone(i);

		if(pTemp[i][pCallStatus] == 2 && pTemp[i][pCallLine] != INVALID_PLAYER_ID)
		{
		    pTemp[i][pCallTime]++;
            if(0 != IsPlayerPhoneCreated(i))
            {
				new mes[52];
		    	format(mes, sizeof(mes), "%s~n~%s", pTemp[i][pCallName], ConvertSecond(pTemp[i][pCallTime]));

		    	PlayerTextDrawSetString(i, TD_iphone_name[i], mes);
		    	PlayerTextDrawShow(i, TD_iphone_name[i]);
			}

			if (!GetPlayerNetwork(i))
			{
   				SendClientMessage(pTemp[i][pCallLine], -1, "> Fara semnal...");
   				SendClientMessage(i, -1, "> Fara semnal...");
		    	CancelCall(i);
			}
		}

		if(GetPVarInt(i, #vehicle_info))
		{
		    SetPVarInt(i, #vehicle_info, GetPVarInt(i, #vehicle_info) - 1);
		    if(GetPVarInt(i, #vehicle_info) == 0)
		    {
        		TextDrawHideForPlayer(i, TD_vehicle_info[0]);
	    		TextDrawHideForPlayer(i, TD_vehicle_info[1]);
				PlayerTextDrawHide(i, TD_vehicle_name[i]);
			}
		}

		if(pTemp[i][pFlashTime])
		{
		    pTemp[i][pFlashTime]--;
		    if(pTemp[i][pFlashTime] == 0)
		    {
		    	SetPlayerCurrentTimeAndWeather(i);
				StopPlayerAnims(i);
				UnFreezePlayer(i);
				SetPlayerDrunkLevel(i, 1999);
			}
		}

		if(pTemp[i][pFreezeTime])
		{
		    pTemp[i][pFreezeTime]--;
		    if(pTemp[i][pFreezeTime] == 0) UnFreezePlayer(i);
		}

		if(pTemp[i][pInjuredLegTime]) pTemp[i][pInjuredLegTime]--;
		if(pTemp[i][pInvulnerable]) pTemp[i][pInvulnerable]--;

		if(pTemp[i][pTaserTime])
		{
		    if(!PlayerToPoint(3.0, i, PlayerInfo[i][pPosX], PlayerInfo[i][pPosY], PlayerInfo[i][pPosZ]))
		        SetPlayerPosEx(i, PlayerInfo[i][pPosX], PlayerInfo[i][pPosY], PlayerInfo[i][pPosZ]);

		    ApplyAnimation(i, "SWEET", "Sweet_injuredloop", 4.0, 1, 0, 0, 1, 0);

		    pTemp[i][pTaserTime]--;
		    if(0 == pTemp[i][pTaserTime]) SendServerMessage(i, "Ai scapat de efectul pinilor."), StopPlayerAnims(i);
		}

		if(pTemp[i][pRamType] != 0 && pTemp[i][pRamTime] > 1)
		{
		    if(pTemp[i][pRamType] == 1 && (pTemp[i][pRamHouse] != -1 && 0 == IsPlayerHouseOutside(i, pTemp[i][pRamHouse], 1.5)) || (pTemp[i][pRamBiz] != -1 && 0 == IsPlayerBizOutside(i, pTemp[i][pRamBiz], 1.5)))
		    {
		        SendErrorMessage(i, "Esti prea departe de usa.");
		        pTemp[i][pRamType] = 0;
            	pTemp[i][pRamTime] = 0;
            	StopPlayerAnims(i);
		    }
		    else
	    	{
            	pTemp[i][pRamTime]--;
				format(string, sizeof(string), "~n~~n~~n~~w~Asteapta ~r~%i ~w~Secunde", pTemp[i][pRamTime]);
				GameTextForPlayer(i, string, 1000, 3);
			}
		}
		else if(pTemp[i][pRamType] == 1 && pTemp[i][pRamTime] == 1)
		{
		    pTemp[i][pRamType] = 0;
            pTemp[i][pRamTime] = 0;

            new location[MAX_ZONE_NAME];
			GetPlayer2DZone(i, location, MAX_ZONE_NAME);
			if(pTemp[i][pRamHouse] != -1 && IsPlayerHouseOutside(i, pTemp[i][pRamHouse]))
            {
                new houseid = pTemp[i][pRamHouse];
                HouseInfo[houseid][hLocked] = 0;
				GameTextForPlayer(i, "~w~Usa ~g~Descuiata", 5000, 6);
				PlaySound(i, 1145);
				StopPlayerAnims(i);

				new query[128];
				format(query, sizeof(query), "%s [MYSQL: %i | IP: %s] a spart usa (/ram) casei [H_MYSQL: %i]",
				GetName(i), PlayerInfo[i][pID], GetPlayerIP(i), HouseInfo[houseid][hID]);
			    insert_log(query, RAM_LOG, 1, i);
            }
            else if(pTemp[i][pRamBiz] != -1 && IsPlayerBizOutside(i, pTemp[i][pRamBiz]))
            {
                new bizid = pTemp[i][pRamBiz];
            	BizInfo[bizid][bizLocked] = 0;
				GameTextForPlayer(i, "~w~Usa ~g~Descuiata", 5000, 6);
				PlaySound(i, 1145);
				StopPlayerAnims(i);

				new query[128];
				format(query, sizeof(query), "%s [MYSQL: %i | IP: %s] a spart usa (/ram) afacerii [B_MYSQL: %i]",
				GetName(i), PlayerInfo[i][pID], GetPlayerIP(i), BizInfo[bizid][bizID]);
			    insert_log(query, RAM_LOG, 2, i);
            }
		}
		else if(pTemp[i][pRamType] == 3 && pTemp[i][pRamTime] == 1)
		{
		    pTemp[i][pRamType] = 0;
            pTemp[i][pRamTime] = 0;

            new location[MAX_ZONE_NAME];
			GetPlayer2DZone(i, location, MAX_ZONE_NAME);
			if(pTemp[i][pRamHouse] != -1)
            {
                new houseid = pTemp[i][pRamHouse];
                CreateExplosion(HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ], 12, 5.0);
				if(IsValidDynamicObject(pTemp[i][pRamObj]))
				{
					DestroyDynamicObject(pTemp[i][pRamObj]);
					pTemp[i][pRamObj] = INVALID_OBJECT_ID;
				}
				HouseInfo[houseid][hLocked] = 0;
				HouseInfo[houseid][hDDoor] = 2;
				Save_House(houseid);
				UpdateHouseDoor(houseid);

				new query[128];
				format(query, sizeof(query), "%s [MYSQL: %i | IP: %s] a explodat usa (/ram) casei [H_MYSQL: %i]",
				GetName(i), PlayerInfo[i][pID], GetPlayerIP(i), HouseInfo[houseid][hID]);
			    insert_log(query, RAM_LOG, 3, i);
            }
            else if(pTemp[i][pRamBiz] != -1)
            {
                new bizid = pTemp[i][pRamBiz];
            	CreateExplosion(BizInfo[bizid][bizPosX], BizInfo[bizid][bizPosY], BizInfo[bizid][bizPosZ], 12, 5.0);
                if(IsValidDynamicObject(pTemp[i][pRamObj]))
				{
					DestroyDynamicObject(pTemp[i][pRamObj]);
					pTemp[i][pRamObj] = INVALID_OBJECT_ID;
				}
				BizInfo[bizid][bizLocked] = 0;
				BizInfo[bizid][bizDDoor] = 2;
				Save_Business(bizid);
				UpdateBusinessDoor(bizid);

                new query[128];
				format(query, sizeof(query), "%s [MYSQL: %i | IP: %s] a explodat usa (/ram) afacerii [B_MYSQL: %i]",
				GetName(i), PlayerInfo[i][pID], GetPlayerIP(i), BizInfo[bizid][bizID]);
			    insert_log(query, RAM_LOG, 4, i);
            }
		}
		//
		new vehicle = GetPlayerVehicleID(i);
        GetVehicleHealth(vehicle, health);
        //Carshot && Airbreak (Vehicle)
        if(vehicle != 0)
        {
            new Float: vel_x,
				Float: vel_y,
				Float: vel_z,
				Float: pos_x,
				Float: pos_y,
				Float: pos_z;

			GetVehicleVelocity(vehicle, vel_x, vel_y, vel_z);
			GetVehiclePos(vehicle, pos_x, pos_y, pos_z);

			new spd = GetVectorSpeed(vel_x, vel_y, vel_z),
			    spd_2 = (IsAPlane(vehicle) || IsAHelicopter(vehicle))?(4):(1);

			ac_veh_pos_dif[vehicle] = GetDistanceBetweenPoints(pos_x, pos_y, pos_z, ac_last_veh_x[i], ac_last_veh_y[i], ac_last_veh_z[i]);
			if(ac_veh_pos_dif[vehicle] >= 10.0 && GetVectorSpeed(vel_x, vel_y, vel_z) < spd_2)
			{
			    if(0 == IsPlayerAFK(i) && ++ac_veh_airbreak_flood{i} > 2)
			    {
			        SendErrorMessage(i, "Ai primit kick deoarce ai folosit modificari avantajoase. (#009)");
			        AMSG(COLOR_LIGHTRED, "(Admin Info) {FFFFFF}%s (ID: %i) a primit kick pentru airbreak.", GetNameEx(i), i);
			        KickEx(i);
			        RespawnVehicle(vehicle);
			    }
			}
            ac_last_veh_x[i] = pos_x;
			ac_last_veh_y[i] = pos_y;
			ac_last_veh_z[i] = pos_z;
			//SendClientMessageEx(i, -1, "[N]: %.2f, %.2f, %.2f | [L] %.2f, %.2f, %.2f" , vel_x, vel_y, vel_z, ac_last_vel_x[i], ac_last_vel_y[i], ac_last_vel_z[i]);
			vel_x = (vel_x > ac_last_vel_x[i])?(floatsub(vel_x, ac_last_vel_x[i])):(floatsub(ac_last_vel_x[i], vel_x));
			vel_y = (vel_y > ac_last_vel_y[i])?(floatsub(vel_y, ac_last_vel_y[i])):(floatsub(ac_last_vel_y[i], vel_y));
			vel_z = (vel_z > ac_last_vel_z[i])?(floatsub(vel_z, ac_last_vel_z[i])):(floatsub(ac_last_vel_z[i], vel_z));
			new Float: dist = (IsAPlane(vehicle))?(2.0):(0.5);
			if((vel_x > dist || vel_y > dist || vel_z > dist) && ac_last_speed[i] <= spd)
			{
			    if(++ac_carshot_flood{i} > 2)
			    {
			        SendErrorMessage(i, "Ai primit kick deoarece ai folosit modificari avantajoase. (#008)");
			        AMSG(COLOR_LIGHTRED, "(Admin Info) %s (ID: %i) a primit kick pentru car hack (car shot).", GetNameEx(i), i);
			        KickEx(i);
			        RespawnVehicle(vehicle);
			    }
			}
			ac_last_speed[i] = spd;
			GetVehicleVelocity(vehicle, ac_last_vel_x[i], ac_last_vel_y[i], ac_last_vel_z[i]);
			//SendClientMessageEx(i, -1, "[???????]: %.2f, %.2f, %.2f", vel_x, vel_y, vel_z);
        }
		//Carshot && Airbreak (Vehicle)
		//Vehicle Milliage
		if(GetPlayerState(i) == PLAYER_STATE_DRIVER && VehicleInfo[vehicle][carOwnerID] != 0 && !IsPlayerAFK(i) && GetVehicleSpeed(vehicle) > 0)
		    VehicleInfo[vehicle][carMilliage] += GetVehicleSpeed(vehicle)/1.6/1609.344;
  		//Vehicle Milliage
		//Engine off
		if(GetPlayerState(i) == PLAYER_STATE_DRIVER && IsABicycle(vehicle) == 0 && VehicleInfo[vehicle][carEngineOn] && health < 390.0 && random(20) == 0)
		{
			GameTextForPlayer(i, "~w~Motor ~r~OPRIT", 2500, 4);
			SendNearbyMessage(Range_Normal, i, COLOR_PURPLE, "* Motorul este blocat. (( %s [%s] ))", VehicleNames[GetVehicleModel(vehicle)-400], VehicleInfo[vehicle][carPlate]);

			VehicleEngine(vehicle, false);
		}

		//Plant picking
		if(pTemp[i][pPlantTime] > 0)
		{
			if(pTemp[i][pPlantTime] == 1)
			{
			    pTemp[i][pPlantTime] = 0;
				CreateCrop(i);
			}
			else
			{
				pTemp[i][pPlantTime]--;

				new mes[32];
				format(mes, sizeof(mes), "~y~Se planteaza... %i", pTemp[i][pPlantTime]);
				GameTextForPlayer(i, mes, 1000, 4);
			}
		}

		//Mechanic fixing
		if(RepairTime[i] > 0 && RepairService[i] != 0)
		{
			new Float:x, Float:y, Float:z;
			GetVehiclePos(RepairToVehicle[i], x, y, z);
			if(RepairTime[i] == 1)
			{
				if(RepairService[i] == 1)
				{
					JobMessage(i, "~h~~p~MOTOR REPARAT.", 6);
					VehicleInfo[RepairToVehicle[i]][carDeath] = 0;
					if(VehicleInfo[RepairToVehicle[i]][carOwnerID] != 0)
						SetVehicleHealth(RepairToVehicle[i], MAX_HEALTH_VEHICLE + VehicleInfo[RepairToVehicle[i]][carArmour]);
					else
					    SetVehicleHealth(RepairToVehicle[i], 1000.0);
				}
				else if(RepairService[i] == 2)
				{
					JobMessage(i, "~h~~p~REPARAT CU SUCCES.", 6);
					RepairVehicleBody(RepairToVehicle[i]);
				}
				else if(RepairService[i] == 3)
				{
					JobMessage(i, "~h~~p~RESTAURAT CU SUCCES.", 6);
					VehicleInfo[RepairToVehicle[i]][carEngine] = 20.0;
				}
				else if(RepairService[i] == 4)
				{
					JobMessage(i, "~h~~p~OPERATIUNE REALIZATA CU SUCCES!.", 6);
					ChangeVehicleColor(RepairToVehicle[i], GetPVarInt(i, "color1"), GetPVarInt(i, "color2"));
					VehicleInfo[RepairToVehicle[i]][carColor1] = GetPVarInt(i, "color1");
					VehicleInfo[RepairToVehicle[i]][carColor2] = GetPVarInt(i, "color2");
					DeletePVar(i, "color1");
					DeletePVar(i, "color2");
				}

				ResetPlayerWeaponID(i, 41);
				RepairService[i] = 0;
				RepairTowTruck[i] = INVALID_VEHICLE_ID;
				RepairTime[i] = 0;
				RepairOffer[i] = INVALID_PLAYER_ID;
				RepairToVehicle[i] = INVALID_VEHICLE_ID;
			}
			else if(IsPlayerInRangeOfPoint(i, 4.2, x, y, z))
			{
				if(HoldingKey(i, KEY_FIRE) && GetPlayerState(i) == PLAYER_STATE_ONFOOT && PlayerHoldingWeapon(i, 41))
				{
					new veh = RepairTowTruck[i],
				    	mes[128];

					if(RepairService[i] == 1)
					{
						format(mes, sizeof(mes), "~h~~p~MOTORUL SE REPARA.~n~~w~AU MAI RAMAS ~b~%i ~w~COMPONENTE.", VehicleInfo[veh][carComps]);
						ShowJobMessage(i, mes);
						VehicleInfo[veh][carComps] -= 4;
					}
					if(RepairService[i] == 2)
					{
						format(mes, sizeof(mes), "~h~~p~SE REPARA.~n~~w~AU MAI RAMAS ~b~%i ~w~COMPONENTE.", VehicleInfo[veh][carComps]);
						ShowJobMessage(i, mes);
						VehicleInfo[veh][carComps] -= 5;
					}
					if(RepairService[i] == 3)
					{
						format(mes, sizeof(mes), "~h~~p~SE RESTAUREAZA.~n~~w~AU MAI RAMAS ~b~%i ~w~COMPONENTE.~n~~y~TIMP RAMAS: %i", VehicleInfo[veh][carComps], RepairTime[i]);
						ShowJobMessage(i, mes);
						VehicleInfo[veh][carComps] -= 5;
					}
					if(RepairService[i] == 5)
					{
						format(mes, sizeof(mes), "~h~~p~SE VOPSESTE.~n~~w~AU MAI RAMAS ~b~%i ~w~COMPONENTE.~n~~y~TIMP RAMAS: %i", VehicleInfo[veh][carComps], RepairTime[i]);
						ShowJobMessage(i, mes);
						VehicleInfo[veh][carComps] -= 3;
					}
					RepairTime[i]--;
				}
			}
			else
				ShowJobMessage(i, "~h~~p~TREBUIE SA FII LANGA VEHICUL.");
		}
		//Mechanic fixing
		if(GetPlayerMoney(i) > PlayerInfo[i][pCash])
			SetCash(i, PlayerInfo[i][pCash]);

		//AFK Timer
        if(pTemp[i][pDarkAFK]++ >= 600 && !CheckAdmin(i, 1) && !PlayerInfo[i][pPremium])
  		{
    		SendServerMessage(i, "Ai primit kick deoarece ai fost AFK prea mult timp.");
		    KickEx(i);
  		}
		//AFK Timer

		//Driving license exam
		if(pTemp[i][pLicenseExam] && GetPVarInt(i, #exam_second))
		{
		    UpdateIntVar(i, #exam_second, -1);
            format(string, sizeof(string), "~n~~n~~n~~n~~n~~n~~n~~n~~w~timp ramas: ~y~%i ~w~sec", GetPVarInt(i, #exam_second));
			GameTextForPlayer(i, string, 1200, 3);
		}
		//Driving license exam
		//Gas Station Refueling
		if(GetPVarInt(i, "RefuelTime") != 0)
		{
			if(GetPVarInt(i, "RefuelTime") == 1)
			{
				new toFill = 100 - VehicleInfo[vehicle][carFuel];
				UnFreezePlayer(i);
				VehicleInfo[vehicle][carFuel] += toFill;
				SendClientMessageEx(i,0x408080FF,"{408080}[Benzinarie]: {FFFFFF}Realimentarea te-a costat $%i.", GetPVarInt(i, "RefuelCost"));
				GiveCash(i, - GetPVarInt(i, "RefuelCost"));
				DeletePVar(i, "RefuelCost");
				DeletePVar(i, "RefuelTime");
			}
			else
			{
				UpdateIntVar(i, "RefuelTime", -1);
				format(string, sizeof(string), "~n~~n~~n~~n~~n~~n~~n~~w~Te rugam sa astepti... ~b~%i", GetPVarInt(i, "RefuelTime"));
				GameTextForPlayer(i, string, 1050, 3);
			}
		}
		//Repairing
		if(GetPVarInt(i, #repair_time) != 0)
		{
		    if(GetPVarInt(i, #repair_time) == 1)
			{
			    UnFreezePlayer(i);
			    DeletePVar(i, #repair_time);

				if(vehicle != 0)
					FixVehicle(vehicle);

				SCM(i, 0x408080FF, "{408080}[Pay'n'Spray]: {FFFFFF}Vehiculul a fost reparat.");
			}
			else
			{
			    if(vehicle == 0)
					DeletePVar(i, #repair_time);

			    UpdateIntVar(i, #repair_time, -1);
				format(string, sizeof(string), "~n~~n~~n~~n~~n~~n~~n~~w~Te rugam sa astepti... ~b~%i", GetPVarInt(i, #repair_time));
				GameTextForPlayer(i, string, 1000, 3);
			}
		}
		//ERROR Message refresher
		for(new a = 0; a < 3; a ++)
		{
			if(ErrorInfo[i][a][eExpire] > 1)
			{
				ErrorInfo[i][a][eExpire]--;
				if(ErrorInfo[i][a][eExpire] == 1)
				{
					ErrorInfo[i][a][eExpire] = 0;
					RefreshErrorMsg(i);
				}
			}
		}
		//ERROR Message refresher
		//------------------------------------------------------------------
		//Checking jail time
		if(PlayerInfo[i][pMutedTime] > 0)
		{
			PlayerInfo[i][pMutedTime]--;
			if(!PlayerInfo[i][pMutedTime]) SCM(i, COLOR_LIGHTRED, "Nu mai ai mute.");
		}

		if(pTemp[i][pCmdFlood] > 0)
		{
			pTemp[i][pCmdFlood]--;
			if(!pTemp[i][pCmdFlood]) SCM(i, COLOR_LIGHTRED, "Comenzile iti sunt din nou disponibile.");
		}

		if(PlayerInfo[i][pAJailTime] > 1 && PlayerInfo[i][pAJailed] == 1)
		{
			PlayerInfo[i][pAJailTime]--;
			new mes[56];
			format(mes,sizeof(mes),"~p~timp ramas: ~w~%i secunde",PlayerInfo[i][pAJailTime]);
			GameTextForPlayer(i, mes, 1200, 4);
		}
		else if(PlayerInfo[i][pAJailTime] == 1 && PlayerInfo[i][pAJailed] == 1)
		{
			PlayerInfo[i][pAJailTime] = 0;
			PlayerInfo[i][pAJailed] = 0;
			SpawnPlayer(i);
			GameTextForPlayer(i,"~g~Ai fost eliberat!",5000,1);
		}


		//Checking isolate time
		if(PlayerInfo[i][pIsolateTime] > 1) PlayerInfo[i][pIsolateTime]--;
		else if(PlayerInfo[i][pIsolateTime] == 1)
		{
		    PlayerInfo[i][pIsolateTime] = 0;
		    PutPlayerInPrison(i);
		}
		//Checking jail time
		if(PlayerInfo[i][pJailTime] > 1 && 0 == PlayerInfo[i][pIsolateTime] && 0 == PlayerInfo[i][pAJailTime]) PlayerInfo[i][pJailTime]--;
		else if(PlayerInfo[i][pJailTime] == 1)
		{
		    if(PlayerInfo[i][pJailed] == JEFF_JAIL)
		        SetPlayerPosEx(i, 2310.9348,-1353.2567,24.0192);
			else if(PlayerInfo[i][pJailed] == LSPD_JAIL)
				SetPlayerPosEx(i, 1552.4921,-1675.6072,16.1953);
			else if(PlayerInfo[i][pJailed] == PRISON_JAIL)
				SetPlayerPosEx(i, 1544.0989,-1669.2274,13.5577);
			else if(PlayerInfo[i][pJailed] == SASD_JAIL)
				SetPlayerPosEx(i, 631.0485,-571.7219,16.3359);
			SetWorld(i, 0);
			SetInterior(i, 0);

			PlayerInfo[i][pIsolateTime] = 0;
			PlayerInfo[i][pJailTime] = 0;
			PlayerInfo[i][pJailed] = 0;
			if(IsValidDynamic3DTextLabel(PrisonLabel[i]))
			{
				DestroyDynamic3DTextLabel(PrisonLabel[i]);
		        PrisonLabel[i] = Text3D:INVALID_3DTEXT_ID;
			}
			GameTextForPlayer(i,"~g~Libertate!~n~~w~Incearca sa fii un cetatean mai bun",5000,1);
		}
		//Checking jail time
		if(pTemp[i][pInjuredTime])
		{
			pTemp[i][pInjuredTime]--;
			if(0 == pTemp[i][pInjuredTime]) SCM(i, COLOR_WHITE, "Foloseste \"/acceptdeath\" pentru a accepta moartea.");
		}
		//Info TextDraw Exire
		if(infotxt_expire{i} > 0)
		{
			infotxt_expire{i}--;
			if(infotxt_expire{i} == 1)
			{
				TextDrawHideForPlayer(i, infotxt[i]);
				infotxt_expire{i} = 0;
			}
		}
		//Info TextDraw Exire

		//????? ?????????
		if(JackingEngine[i] > 1)
		{
		    if(!IsPlayerInAnyVehicle(i))
		        cmd::stop(i, "");
		    else
		    {
				JackingEngine[i]--;
				format(string, sizeof(string), "~n~~n~~n~~n~~n~~n~~n~~r~Te rugam sa astepti... ~g~%i secunde", JackingEngine[i]);
				GameTextForPlayer(i, string, 1500, 3);
			}
		}
		else if(JackingEngine[i] == 1)
		{
			GameTextForPlayer(i, "~n~~n~~n~~n~~n~~n~~n~~r~Se porneste...", 1600, 3);

            PlaySound(i, 1145);

			if(IsValidVehicle(GetPlayerVehicleID(i)))
				ToggleVehicleEngine(GetPlayerVehicleID(i), i);

			JackingEngine[i] = 0;
			UnFreezePlayer(i);
		}
		//????? ?????????

		//????? ?????? ????
		if(JackingLock[i] > 1)
		{
		    if(GetNearVehicle(i, 5.0, JackingVehicle[i]) == 0)
		        cmd::stop(i, "");
		    else
		    {
				JackingLock[i]--;
				format(string, sizeof(string), "~n~~n~~n~~n~~n~~n~~n~~r~Incuietoarea este in curs de spargere... ~g~%i secunde",JackingLock[i]);
				GameTextForPlayer(i, string, 1600, 3);
			}
		}
		else if(JackingLock[i] == 1)
		{
			GameTextForPlayer(i, "~n~~n~~n~~n~~n~~n~~n~~r~Se sparge...", 1600, 3);

            PlaySound(i, 1145);

			if(IsValidVehicle(JackingVehicle[i]))
				ToggleVehicleLock(JackingVehicle[i], false);

			JackingLock[i] = 0;
			JackingVehicle[i] = 0;
			UnFreezePlayer(i);
		}
		//????? ?????? ????
	}
	return 1;
}

stock OtherTimer()
{
	if(time_truck-- == 0)
	{
	    time_truck = 3600;
	    CheckIndustries();
	}

    if(ship_depart <= gettime() && ship_docked == 1)
	{
	    new mes[128];
	    for(new i; i != MAX_TRUCK_CARGO; i++)
	    {
	        if(TruckCargo[i][tOn] == 0 || TruckCargo[i][tType] != 2)
			    continue;

            TruckCargo[i][tStorage] = 0;
            format(mes, sizeof(mes), "[{FFFF00}%s{FFFFFF}]\nStoc: %i / %i\nPret: $%i.", truckcargo_product[TruckCargo[i][tProductID]], TruckCargo[i][tStorage], TruckCargo[i][tStorageSize], TruckCargo[i][tPrice]);
        	UpdateDynamic3DTextLabelText(TruckCargo[i][tLabel], 0xFFFFFFFF, mes);

        	Streamer_SetIntData(STREAMER_TYPE_3D_TEXT_LABEL, TruckCargo[i][tLabel], E_STREAMER_INTERIOR_ID, 1);
        	Streamer_SetIntData(STREAMER_TYPE_PICKUP, TruckCargo[i][tPickup], E_STREAMER_INTERIOR_ID, 1);
	    }
		mysql_tquery(dbHandle, "UPDATE `truck_cargo` SET `storage`=0 WHERE `type`=2");

	    ship_docked = 2;
	    ship_depart = ship_next + 2400;

	    new Float: ox,
			Float: oy,
			Float: oz;

		for(new i; i != 11; i++)
	    {
	        if(i < 8)
	            Streamer_SetIntData(STREAMER_TYPE_OBJECT, obj_lamp[i], E_STREAMER_MODEL_ID, 19124);

	        if(i < 4)
	        {
	            GetDynamicObjectPos(obj_gate[i], ox, oy, oz);
	        	MoveDynamicObject(obj_gate[i], ox - 10.0, oy, oz, 1.5);
	        }

			GetDynamicObjectPos(obj_ship[i], ox, oy, oz);
	        MoveDynamicObject(obj_ship[i], ox, oy - 600.0, oz, 3.0);
		}
	}

	if(ship_next <= gettime() && ship_docked == 0)
	{
	    ship_docked = 3;
        ship_next = ship_depart + 340;

	    new Float: ox,
			Float: oy,
			Float: oz;

		for(new i; i != 11; i++)
	    {
			GetDynamicObjectPos(obj_ship[i], ox, oy, oz);
	        MoveDynamicObject(obj_ship[i], ox, oy + 600.0, oz, 3.0);
		}
	}

    if(restart_time)
	{
	    new mes[32];
	    format(mes, sizeof(mes), "~w~Restart in: ~r~%02i", restart_time-1);
        GameTextForAll(mes, 1100, 4);

        restart_time--;
		if(restart_time == 3) SaveAllPlayers();
        else if(restart_time == 1)
		{
		    new year, month, day;
		    getdate(year, month, day);
		    printf("[GMX] Un restart a fost programat. Data: %02i/%02i/%i", day, month, year);
			SendRconCommand("gmx");
		}
	}

	foreach(new i:Vehicle)
	{
        new Float:health;
		GetVehicleHealth(i, health);
		if(_:vehicle_hp[i] != _:health)
		{
			if((vehicle_hp[i] > health) && (GetTickCount() > ignore_vehicle[i])) vehicle_hp[i] = health;
			else if(vehicle_hp[i] < health)
			{
				if(IsPlayerLogged(GetVehicleDriver(i)) != 0 && GetPlayerVehicleID(GetVehicleDriver(i)) == i)
				{
				    new targetid = GetVehicleDriver(i);
				    if(++ac_veh_health{targetid} > 2)
			    	{

				    	SendErrorMessage(targetid, "Ai primit kick deoarece ai folosit modificari avantajoase. (#005)");
				    	AMSG(COLOR_LIGHTRED, "(Admin Info) {FFFFFF}%s (ID: %i) a primit kick pentru repair hack.", GetNameEx(targetid), targetid);
						KickEx(targetid);
					}
					SetVehicleHealth(i, vehicle_hp[i]);
				}
				else
					SetVehicleHealth(i, vehicle_hp[i]);
			}
		}

		if(vehicle_hp[i] < 330.0 && IsABicycle(i) == 0)
		{
			if(VehicleInfo[i][carEngineOn])
			    VehicleEngine(i, false);

			if(VehicleInfo[i][carOwnerID] != 0 && VehicleInfo[i][carDeath] != 1)
	    		ResetVehicleStuff(i);

		    SetVehicleHealth(i, 330.0);
		}

		if(VehicleInfo[i][carTerminate])
		{
		    VehicleInfo[i][carTerminate]--;
			if(VehicleInfo[i][carTerminate] == 1 && VehicleInfo[i][carRent] != 0)
	        {
				VehicleInfo[i][carRent] = 0;
				RespawnVehicle(i);
			}
		}

        if(VehicleInfo[i][carAlarmTime])
	    {
	        VehicleInfo[i][carAlarmTime]--;
	        if(VehicleInfo[i][carAlarmTime] == 0)
	        {
	            new engine,lights,alarm,doors,bonnet,boot,objective;
				GetVehicleParamsEx(i, engine, lights, alarm, doors, bonnet, boot, objective);
				SetVehicleParamsEx(i, engine, lights, VEHICLE_PARAMS_OFF, doors, bonnet, boot, objective);
			}
		}

	    if(VehicleInfo[i][carObjectiveTime])
	    {
	        VehicleInfo[i][carObjectiveTime]--;
	        if(VehicleInfo[i][carObjectiveTime] == 0)
	        {
	            new engine,lights,alarm,doors,bonnet,boot,objective;
				GetVehicleParamsEx(i, engine, lights, alarm, doors, bonnet, boot, objective);
				SetVehicleParamsEx(i, engine, lights, alarm, doors, bonnet, boot, VEHICLE_PARAMS_OFF);
			}
		}

		if(VehicleInfo[i][carOwnerID] == 0 || IsABicycle(i) || VehicleInfo[i][carEngineOn] == 0) //???? ??? ???? ? ?????????? ? ????????? ??????????
		    continue;

		if(VehicleInfo[i][carEngineStatus] > 0)
			VehicleInfo[i][carEngineStatus]--;

		else if(VehicleInfo[i][carEngineStatus] == 0)
		{
			VehicleInfo[i][carEngine] -= 0.05;
            VehicleInfo[i][carEngineStatus] = 6000;
			if(VehicleInfo[i][carEngine] < 0.0)
			{
				VehicleInfo[i][carEngine] = 0.0;
				if(VehicleInfo[i][carEngineOn])
					VehicleEngine(i, false);
			}
		}

		if(VehicleInfo[i][carBatteryStatus] > 0)
			VehicleInfo[i][carBatteryStatus]--;

		else if(VehicleInfo[i][carBatteryStatus] == 0)
		{
			VehicleInfo[i][carBattery] -= 0.05;
			VehicleInfo[i][carBatteryStatus] = 6000;
			if(VehicleInfo[i][carBattery] < 0.0)
			{
				VehicleInfo[i][carBattery] = 0.0;
				if(VehicleInfo[i][carEngineOn])
					VehicleEngine(i, false);
			}
		}
	}

	for(new i = 0; i != MAX_FIRES; i++)
	{
	    if(FiresInfo[i][fireOn] == 0)
	        continue;

	    if(FiresInfo[i][fireTimer]-- < 1)
	        DeleteFire(i);
	}

	for(new i = 0; i != MAX_TOLLS; i++)
	{
		if(aTolls[i][E_tOpenTime] < 1)
		    continue;

		aTolls[i][E_tOpenTime]--;
		if(aTolls[i][E_tOpenTime] == 1)
			Toll_CloseToll(i);
	}

	for(new i = 0; i != MAX_CALLS_AND_ARREST; i++)
	{
	    if(CallInfo[i][callExists] == 0 || CallInfo[i][callDelete] > gettime())
			continue;

        CallInfo[i][callExists] = 0;
        CallInfo[i][callType] = 0;
	}

	for(new i = 0; i != MAX_CALLS_AND_ARREST; i++)
	{
	    if(CallInfo[i][callExists] != 0 && CallInfo[i][callDelete] < gettime())
		{
        	CallInfo[i][callExists] = 0;
        	CallInfo[i][callType] = 0;
		}

		if(ArrestInfo[i][arrestExists] != 0 && ArrestInfo[i][arrestDelete] < gettime())
		{
        	ArrestInfo[i][arrestExists] = 0;
       	 	ArrestInfo[i][arrestDelete] = 0;
		}
	}

	for(new i = 1; i != MAX_FACTIONS; i++)
	{
	    if(Factions[i][fON] == 0 || (Factions[i][fType] != FACTION_MAFIA && Factions[i][fType] != FACTION_GANG) || Factions[i][fPointTime] > gettime())
	        continue;

		if(Factions[i][fType] == FACTION_MAFIA)
        	Factions[i][fPoint] = 50;
        else
            Factions[i][fPoint] = 30;

    	Factions[i][fPointTime] = 604800 + gettime();
        set_faction_int(i, "point", Factions[i][fPoint]);
        set_faction_int(i, "point_time", Factions[i][fPointTime]);
	}
	return 1;
}

forward CheckGas();
public CheckGas()
{
	foreach(new i:Vehicle)
	{
		if(IsABicycle(i) || IsADMVCar(i) || IsADMVTaxi(i) || IsADMVHeli(i) || !VehicleInfo[i][carEngineOn])
			continue;

		VehicleInfo[i][carFuel]--;
		if(VehicleInfo[i][carFuel] == 0)
		{
			VehicleEngine(i, false);

			if(IsPlayerLogged(GetVehicleDriver(i)) && IsPlayerInVehicle(GetVehicleDriver(i), i))
				GameTextForPlayer(GetVehicleDriver(i), "fara combustibil", 5000, 3);
		}
	}
	SetTimer("CheckGas", 100000, false);
	return 1;
}

stock PayDay(i)
{
	if(0 == IsPlayerLogged(i))
		return 1;

	new oldbank = PlayerInfo[i][pBank],
	    savings,
		checks = 300,
		tax_house,
		rent_house,
		debt;
	//??????????? ??????
	if(PlayerInfo[i][pFaction] == SAN || PlayerInfo[i][pFaction] == LSPD || PlayerInfo[i][pFaction] == SASD || PlayerInfo[i][pFaction] == DOCS)
	    checks += (PlayerInfo[i][pRank] * 30);

	if(PlayerInfo[i][pFaction] == LSFD || PlayerInfo[i][pFaction] == CITY)
	    checks += 100 + (PlayerInfo[i][pRank] * 35);
    //??????????? ??????
	//??????? & ??????? ??????
	if(PlayerInfo[i][pJob] == JOB_MECHANIC)
	{
		SCM(i, COLOR_WHITE, "Ai primit $350.");
		checks += 50;
	}
	else if(PlayerInfo[i][pJob] == JOB_TAXI)
	{
		SCM(i, COLOR_WHITE, "Ai primit $350.");
		checks += 50;
	}
	//??????? & ??????? ??????
	//?????????????? ????
	if(PlayerInfo[i][pSavings] > 35000 && PlayerInfo[i][pSavings] < 100000)
	    savings = (PlayerInfo[i][pSavings]) / 100;

    PlayerInfo[i][pBank] += savings;
	//?????????????? ????
	if(PlayerInfo[i][pBank] < 0)
	{
	    debt = floatround(float(checks) * 0.8);
	    PlayerInfo[i][pBank] += debt,
		checks -= debt;
	}
	//????? ?? ??? ? ????? ?? ??????
	new houses_tax[3] =
		{20, 50, 100};

	for(new h; h != MAX_HOUSES; h++)
	{
	    if(HouseInfo[h][hID] == 0 || HouseInfo[h][hOwnerID] != PlayerInfo[i][pID])
			continue;

		tax_house += houses_tax[HouseInfo[h][hClass]];
	}

	new houseid = -1;
    if(PlayerInfo[i][pRentPrice] != 0 && PlayerInfo[i][pRentKey] != 0 && (houseid = GetHouseIDByMysql(PlayerInfo[i][pRentKey])) != -1)
	{
	    rent_house += PlayerInfo[i][pRentPrice];
		HouseInfo[houseid][hCash] += PlayerInfo[i][pRentPrice];
	}
	PlayerInfo[i][pBank] -= tax_house + rent_house;
	//????? ?? ??? ? ????? ?? ??????

	SCM(i, COLOR_WHITE, "|______DECLARATIE BANCARA______|");
	SendClientMessageEx(i, COLOR_WHITE, "Balanta veche: $%i", oldbank);
	SendClientMessageEx(i, COLOR_WHITE, "Salariu: $%i", checks);

	if(savings)
		SendClientMessageEx(i, COLOR_WHITE, "Economii: $%i, dobanda: 1", savings);

    if(rent_house)
		SendClientMessageEx(i, COLOR_WHITE, "Pentru ca stai in chirie, ai fost taxat cu $%i.", rent_house);

    if(tax_house)
		SendClientMessageEx(i, COLOR_WHITE, "Pentru ca ai o proprietate, ai fost taxat cu $%i.", tax_house);

	SCM(i, COLOR_WHITE, "|____________________________|");
	SendClientMessageEx(i, COLOR_WHITE, "Balanta noua: $%i", PlayerInfo[i][pBank]);

	new mes[128];
	format(mes, sizeof(mes), "~y~Ai primit:~n~~g~$%i",checks);
	GameTextForPlayer(i, mes, 5000, 1);

	SCM(i, COLOR_WHITE, "[INFO]: Mergi la banca si colecteaza-ti salariul folosind /paycheck.");
	if(debt)
		SCM(i, COLOR_WHITE, "[INFO]: Banca a retinut o parte din salariul tau intrucat ai o datorie.");

	PlayerInfo[i][pPayDayTime] = 0;
	PlayerInfo[i][pPayCheckMoney] += checks;
	PlayerInfo[i][pExp]++;
	PlayerInfo[i][pHours]++;
	PlayerInfo[i][pCareer]++;
	if(PlayerInfo[i][pHours] == 4)
	{
	    SCM(i, COLOR_YELLOWG, "> SMS: Suma de $4000 a fost acreditata contului tau bancar.");
	    PlayerInfo[i][pBank] += 4000;
	}
	//Checking if player has leveled up
	new expamount = (PlayerInfo[i][pLevel]+1) * LEVEL_EXP;
	if (PlayerInfo[i][pExp] >= expamount)
	{
	    PlayerInfo[i][pLevel]++;
		PlayerInfo[i][pExp] = 0;
		PlaySound(i, 1052);
		format(mes, sizeof(mes), "~g~AI URCAT UN NIVEL~n~~w~Noul Tau Nivel Este %i", PlayerInfo[i][pLevel]);
		GameTextForPlayer(i, mes, 5000, 1);
		SetPlayerScore(i, PlayerInfo[i][pLevel]);
	}
	//Checking if player has leveled up
	return 1;
}

forward OneMinuteTimer();
public OneMinuteTimer()
{
	//=============================================================================
	new tmp_hour;
	gettime(tmp_hour);
	if(tmp_hour != server_hour)
	{
	    new string[31];
	    format(string, sizeof(string), "SERVER: Ora este acum %i:00.", tmp_hour);
		SCMALL(COLOR_WHITE, string);

    	server_hour = tmp_hour;
    	SetWorldTime(server_hour);
    	if(server_hour == 5)
    	    SCMALL(COLOR_LIGHTRED, "Serverul va primi un restart in 60 de secunde."), restart_time = 60;
	}
	//==========================================================================
	foreach(Player, i)
	{
	    if(0 == IsPlayerLogged(i))
	        continue;

        PlayerInfo[i][pPayDayTime]++;
        if(PlayerInfo[i][pPayDayTime] >= 60)
            PayDay(i);
	}
	//==========================================================================
	for(new i = 0; i < MAX_PLANTS; i++)
	{
		if(CropsInfo[i][pPlanted] == 0)
		    continue;

		if((CropsInfo[i][pGrowTime] - gettime()) < -7200)
            DestroyCrop(i);
		else
		{
			static const str_size[] = "Planta - %s";
			new mes[sizeof(str_size) - 2 + 7];
			format(mes, sizeof(mes), str_size, (CropsInfo[i][pGrowTime] > gettime())?("nedezvoltata"):("dezvoltata"));
        	UpdateDynamic3DTextLabelText(CropsInfo[i][pLabel], -1, mes);
		}
	}
    //==========================================================================
    for(new i; i != MAX_FOOD_DROPS; i++)
	{
	    if(FoodDrop[i][foodDropped] == 0)
	        continue;

		if(FoodDrop[i][foodTime]-- == 0)
		{
        	FoodDrop[i][foodModel] = 0;
        	FoodDrop[i][foodDropped] = 0;

        	if(IsValidDynamicObject(FoodDrop[i][foodObject]))
            	DestroyDynamicObject(FoodDrop[i][foodObject]);
		}
	}

	SetTimer("OneMinuteTimer", 60000, false);
	return 1;
}

forward ShowTenantsAmount(playerid);
public ShowTenantsAmount(playerid)
{
    if(!cache_num_rows())
		return SendErrorMessage(playerid, "Nu ai chiriasi.");

	new name[MAX_PLAYER_NAME],
		mes[5 * (MAX_PLAYER_NAME + 3) + 1];

    for(new i; i != 5; i++)
		pTemp[playerid][pTenantListed][i] = 0;

	for(new i; i < cache_num_rows(); i++)
	{
	    if(i > 4)
			break;

	    pTemp[playerid][pTenantListed][i] = cache_get_field_content_int(i, "id");
	    cache_get_field_content(i, "name", name);
        strreplace(name, '_', ' ');

		format(mes, sizeof(mes), "%s- %s\n", mes, name);
	}
	Dialog_Show(playerid, EvictTenant, DIALOG_STYLE_LIST, "Rezidenti", mes, "Evacuare", "Inchide");
	return 1;
}

public OnPlayerEditAttachedObject(playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ)
{
	if(GetPVarInt(playerid, #edit_faction) == 1 && (response || !response))
	{
	    DeletePVar(playerid, #edit_faction);
		RemovePlayerAttachedObject(playerid, index);

        AttachInfo[playerid][index][aBone] = boneid;
		AttachInfo[playerid][index][aOffsetX] = fOffsetX;
		AttachInfo[playerid][index][aOffsetY] = fOffsetY;
		AttachInfo[playerid][index][aOffsetZ] = fOffsetZ;
		AttachInfo[playerid][index][aRotX] = fRotX;
		AttachInfo[playerid][index][aRotY] = fRotY;
		AttachInfo[playerid][index][aRotZ] = fRotZ;
		AttachInfo[playerid][index][aScaleX] = fScaleX;
		AttachInfo[playerid][index][aScaleY] = fScaleY;
		AttachInfo[playerid][index][aScaleZ] = fScaleZ;
		UpdatePlayerAttach(playerid, index, fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ, fScaleX, fScaleY, fScaleZ, boneid);

	   	AttachInfo[playerid][index][aUsed] = 1;
		SetPlayerAttachedObject(playerid, index, modelid, boneid, fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ, fScaleX, fScaleY, fScaleZ);

		SendClientMessageEx(playerid, -1, "Foloseste /clothing pentru a modifica obiectele atasate.");
		return 1;
	}
	if(GetPVarInt(playerid, #edit_weapon) != 0)
	{
	    if(response)
	    {
	    	new i = GetPVarInt(playerid, #edit_weapon) - 1;
	    	DeletePVar(playerid, #edit_weapon);

	    	PlayerInfo[playerid][pWeaponBone][i] = boneid;
			PlayerInfo[playerid][pWeaponX][i] = fOffsetX;
			PlayerInfo[playerid][pWeaponY][i] = fOffsetY;
			PlayerInfo[playerid][pWeaponZ][i] = fOffsetZ;
			PlayerInfo[playerid][pWeaponRX][i] = fRotX;
			PlayerInfo[playerid][pWeaponRY][i] = fRotY;
			PlayerInfo[playerid][pWeaponRZ][i] = fRotZ;
			RemovePlayerAttachedObject(playerid, index);

            Save_AttachWeapon(playerid, i);
			SendServerMessage(playerid, "Ai editat arma: %i.", i+1);
		}
		else
		{
		    new i = GetPVarInt(playerid, #edit_weapon) - 1;
	    	DeletePVar(playerid, #edit_weapon);

	    	RemovePlayerAttachedObject(playerid, index);

			SendServerMessage(playerid, "Ai oprit editarea armei: %i.", i+1);
		}
		return 1;
	}

	if(GetPVarInt(playerid, #edit_attach) == 1)
	{
	    DeletePVar(playerid, #edit_attach);

	    if(index < 0 || index > 4)
	        return SendErrorMessage(playerid, "A aparut o eroare in timp ce editai.");

		if(response)
		{
		    AttachInfo[playerid][index][aBone] = boneid;
			AttachInfo[playerid][index][aOffsetX] = fOffsetX;
			AttachInfo[playerid][index][aOffsetY] = fOffsetY;
			AttachInfo[playerid][index][aOffsetZ] = fOffsetZ;
			AttachInfo[playerid][index][aRotX] = fRotX;
			AttachInfo[playerid][index][aRotY] = fRotY;
			AttachInfo[playerid][index][aRotZ] = fRotZ;
			AttachInfo[playerid][index][aScaleX] = fScaleX;
			AttachInfo[playerid][index][aScaleY] = fScaleY;
			AttachInfo[playerid][index][aScaleZ] = fScaleZ;

			UpdatePlayerAttach(playerid, index, fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ, fScaleX, fScaleY, fScaleZ, boneid);

			RemovePlayerAttachedObject(playerid, index);
			SetPlayerAttachedObject(playerid, index, modelid, boneid, fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ, fScaleX, fScaleY, fScaleZ);
		}
		else
		{
			RemovePlayerAttachedObject(playerid, index);
			SetPlayerAttachedObject(playerid, index, modelid, boneid, AttachInfo[playerid][index][aOffsetX], AttachInfo[playerid][index][aOffsetY], AttachInfo[playerid][index][aOffsetZ], AttachInfo[playerid][index][aRotX], AttachInfo[playerid][index][aRotY], AttachInfo[playerid][index][aRotZ], AttachInfo[playerid][index][aScaleX], AttachInfo[playerid][index][aScaleY], AttachInfo[playerid][index][aScaleZ]);
		}
		cmd::clothing(playerid, "");
		return 1;
	}

	if(GetPVarInt(playerid, #buy_attach) != 0)
	{
	    new price = GetPVarInt(playerid, #buy_attach);
 		DeletePVar(playerid, #buy_attach);

	    if(index < 0 || index > 4)
	        return SendErrorMessage(playerid, "A aparut o eroare.");

		if(response && GetCash(playerid) >= price)
		{
			AttachInfo[playerid][index][aBone] = boneid;
			AttachInfo[playerid][index][aOffsetX] = fOffsetX;
			AttachInfo[playerid][index][aOffsetY] = fOffsetY;
			AttachInfo[playerid][index][aOffsetZ] = fOffsetZ;
			AttachInfo[playerid][index][aRotX] = fRotX;
			AttachInfo[playerid][index][aRotY] = fRotY;
			AttachInfo[playerid][index][aRotZ] = fRotZ;
			AttachInfo[playerid][index][aScaleX] = fScaleX;
			AttachInfo[playerid][index][aScaleY] = fScaleY;
			AttachInfo[playerid][index][aScaleZ] = fScaleZ;

			UpdatePlayerAttach(playerid, index, fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ, fScaleX, fScaleY, fScaleZ, boneid);

			AttachInfo[playerid][index][aUsed] = 1;

   			RemovePlayerAttachedObject(playerid, index);
   			SetPlayerAttachedObject(playerid, index, modelid, boneid, fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ, fScaleX, fScaleY, fScaleZ);

			GiveCash(playerid, -price);
			InfoMSG(playerid, "", 5);
			return 1;
		}
		else
		{
			RemovePlayerAttachFromSlot(playerid, index);
			InfoMSG(playerid, "", 5);
		}
	}
	return 1;
}

forward OnAttachInsert(playerid, slot, model, bone, name[]);
public OnAttachInsert(playerid, slot, model, bone, name[])
{
	AttachInfo[playerid][slot][aID] = cache_insert_id();
	AttachInfo[playerid][slot][aModel] = model;
	AttachInfo[playerid][slot][aBone] = bone;
	format(AttachInfo[playerid][slot][aName], 128, "%s", name);
	AttachInfo[playerid][slot][aUsed] = 1;
	return 1;
}

forward OnMusicInsert(playerid, slot);
public OnMusicInsert(playerid, slot)
{
	PlayerMusic[playerid][slot][mID] = cache_insert_id();
	return 1;
}

public OnPlayerEnterDynamicArea(playerid, areaid)
{
	if(0 == IsPlayerInAnyVehicle(playerid))
	{
		foreach(Player, i)
		{
	    	if(0 == IsPlayerLogged(i) || BoomboxInfo[i][bUsed] == 0 || areaid != BoomboxInfo[i][bArea])
	    	    continue;

        	pTemp[playerid][pBoombox] = i;
        	StopAudioStreamForPlayer(playerid);

        	if(strlen(BoomboxInfo[i][bUrl]))
				PlayAudioStreamForPlayer(playerid, BoomboxInfo[i][bUrl], BoomboxInfo[i][bPosX], BoomboxInfo[i][bPosY], BoomboxInfo[i][bPosZ], 50.0, 1);

			break;
		}
	}
	return 1;
}

public OnPlayerLeaveDynamicArea(playerid, areaid)
{
	new userid = pTemp[playerid][pBoombox];
	if(userid != INVALID_PLAYER_ID && areaid == BoomboxInfo[userid][bArea])
	{
	    pTemp[playerid][pBoombox] = INVALID_PLAYER_ID;
        StopAudioStreamForPlayer(playerid);
	    return 1;
	}
	return 1;
}

forward OnFurnitureInsert(houseid, interior, world, furnitureslot, model, price, name[], Float:x, Float:y, Float:z, category, Float:rx, Float:ry, Float:rz, texture_0, texture_1, texture_2, texture_3, texture_4);
public OnFurnitureInsert(houseid, interior, world, furnitureslot, model, price, name[], Float:x, Float:y, Float:z, category, Float:rx, Float:ry, Float:rz, texture_0, texture_1, texture_2, texture_3, texture_4)
{
	HouseFurniture[houseid][furnitureslot][fID] = cache_insert_id();
	HouseFurniture[houseid][furnitureslot][fHouseID] = houseid;
	HouseFurniture[houseid][furnitureslot][fInterior] = interior;
	HouseFurniture[houseid][furnitureslot][fVirtualWorld] = world;
	HouseFurniture[houseid][furnitureslot][fMarketPrice] = price;
	HouseFurniture[houseid][furnitureslot][fModel] = model;
	HouseFurniture[houseid][furnitureslot][fPosX] = x;
	HouseFurniture[houseid][furnitureslot][fPosY] = y;
	HouseFurniture[houseid][furnitureslot][fPosZ] = z;
	HouseFurniture[houseid][furnitureslot][fPosRX] = rx;
	HouseFurniture[houseid][furnitureslot][fPosRY] = ry;
	HouseFurniture[houseid][furnitureslot][fPosRZ] = rz;
	format(HouseFurniture[houseid][furnitureslot][fName], 64, name);
	HouseFurniture[houseid][furnitureslot][fOn] = 1;
	HouseFurniture[houseid][furnitureslot][fCategory] = category;
	HouseFurniture[houseid][furnitureslot][fTexture][0] = texture_0;
	HouseFurniture[houseid][furnitureslot][fTexture][1] = texture_1;
	HouseFurniture[houseid][furnitureslot][fTexture][2] = texture_2;
	HouseFurniture[houseid][furnitureslot][fTexture][3] = texture_3;
	HouseFurniture[houseid][furnitureslot][fTexture][4] = texture_4;

	HouseInfo[houseid][hFurniture]++;
	if(HouseFurniture[houseid][furnitureslot][fVirtualWorld] != HouseInfo[houseid][hExitVW])
		HouseInfo[houseid][hOutsideFurniture]++;
	return 1;
}

forward OnChannelInsert(playerid, channel);
public OnChannelInsert(playerid, channel)
{
	if(!IsPlayerLogged(playerid))
	    return 1;

    RadiosInfo[channel][radioOn] = 1;
	RadiosInfo[channel][radioID] = cache_insert_id();
	PlayerInfo[playerid][pOwnedChannel] = RadiosInfo[channel][radioID];
	return 1;
}

forward TalkTimer(playerid);
public TalkTimer(playerid)
{
	ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
	return 1;
}

stock SendRadioMessage(channel, color, string[])
{
	foreach(Player, i)
	{
	    if(0 == IsPlayerLogged(i) || PlayerInfo[i][pAuthed] != 1 || PlayerInfo[i][pChannel] != channel)
	        continue;

        SCM(i, color, string);
	}
	return 1;
}

stock SendSlotRadioMessage(channel, slot, color, string[])
{
	foreach(Player, i)
	{
	    if(0 == IsPlayerLogged(i) || PlayerInfo[i][pAuthed] != 1 || PlayerInfo[i][pChannel] != channel || PlayerInfo[i][pSlot] != slot)
	        continue;

        SCM(i, color, string);
	}
	return 1;
}

forward GivePlayerBizMoney(cash, ownerid);
public GivePlayerBizMoney(cash, ownerid)
{
	if(!cache_num_rows())
		return 1;

	new player_cash = cache_get_field_content_int(0, "cash") + cash;

    new query[128];
    mysql_format(dbHandle, query, sizeof(query), "UPDATE `users` SET `cash` = '%i' WHERE `id` = '%i'", player_cash, ownerid);
	mysql_tquery(dbHandle, query);
	return 1;
}

public OnPlayerClickTextDraw(playerid, Text:clickedid)
{
    if(pTemp[playerid][p3DMenu] != -1 && clickedid == Text:INVALID_TEXT_DRAW)
	{
    	Destroy3DMenu(pTemp[playerid][p3DMenu]);
		pTemp[playerid][p3DMenu] = -1;

		cmd::furniture(playerid, "");
		return 1;
	}

	if(GetPVarInt(playerid, #restaurant) == 1 && clickedid == Text:INVALID_TEXT_DRAW)
        return RestaurantMenuHide(playerid);

    if(clickedid == TD_restaurant[3])
    	return RestaurantMenuHide(playerid);

	return 1;
}
public OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid)
{
	if(playertextid == TD_iphone_keypad[playerid][9] && IsPlayerPhoneCreated(playerid) != 0 && PhoneInfo[playerid][phoneKeypad] != 0)
	{
	    if(strlen(pTemp[playerid][pCallKeypad]) < 1)
	    	return 1;

	    cmd::call(playerid, pTemp[playerid][pCallKeypad]);
		return 1;
	}

	if(playertextid == TD_iphone_keypad[playerid][22] && IsPlayerPhoneCreated(playerid) != 0 && PhoneInfo[playerid][phoneKeypad] != 0)
	{
	    if(strlen(pTemp[playerid][pCallKeypad]) < 1)
	    	return 1;

	    strdel(pTemp[playerid][pCallKeypad], strlen(pTemp[playerid][pCallKeypad])-1, 11);
 		PlayerTextDrawSetString(playerid, TD_iphone_name[playerid], pTemp[playerid][pCallKeypad]);
 		PlayerTextDrawShow(playerid, TD_iphone_name[playerid]);
		return 1;
	}

	if(playertextid == TD_iphone_setting[playerid][0] && IsPlayerPhoneCreated(playerid) != 0 && PlayerInfo[playerid][pPhoneOff] == 0)
	{
        PlayerInfo[playerid][pPhoneOff] = 1;

        Phone_Setting(playerid, 0);

        PlayerTextDrawBoxColor(playerid, TD_iphone[playerid][12], 0x000000FF);
        PlayerTextDrawShow(playerid, TD_iphone[playerid][12]);

        PlayerTextDrawHide(playerid, TD_iphone[playerid][17]);
        PlayerTextDrawHide(playerid, TD_iphone[playerid][18]);
        PlayerTextDrawHide(playerid, TD_iphone[playerid][19]);
        PlayerTextDrawHide(playerid, TD_iphone[playerid][20]);
        PlayerTextDrawHide(playerid, TD_iphone[playerid][21]);

        PlayerPlaySound(playerid, 21001, 0.0, 0.0, 0.0);
		return 1;
	}

	if(playertextid == TD_iphone[playerid][22] && PlayerInfo[playerid][pPhoneOff] == 1 && IsPlayerPhoneCreated(playerid))
	{
	    PlayerInfo[playerid][pPhoneOff] = 0;

        PlayerTextDrawBoxColor(playerid, TD_iphone[playerid][12], phone_window[PlayerInfo[playerid][pPhoneStyle]]);
        PlayerTextDrawShow(playerid, TD_iphone[playerid][12]);

        PlayerTextDrawShow(playerid, TD_iphone[playerid][17]);
        PlayerTextDrawShow(playerid, TD_iphone[playerid][18]);
        PlayerTextDrawShow(playerid, TD_iphone[playerid][19]);
        PlayerTextDrawShow(playerid, TD_iphone[playerid][20]);
        PlayerTextDrawShow(playerid, TD_iphone[playerid][21]);

        Phone_Block(playerid, 1);
        PlayerPlaySound(playerid, 21000, 0.0, 0.0, 0.0);

        new query[128];
   		mysql_format(dbHandle, query, sizeof(query), "UPDATE `sms` SET `read`='0' WHERE `to_number`=%i AND `read`='-1'", PlayerInfo[playerid][pNumber]);
		mysql_tquery(dbHandle, query);
		return 1;
	}

	if(playertextid == TD_iphone_setting[playerid][1] && IsPlayerPhoneCreated(playerid) != 0)
	{
	    PlayerInfo[playerid][pPhoneAirplane] = (PlayerInfo[playerid][pPhoneAirplane])?(0):(1);

	    if(PlayerInfo[playerid][pPhoneAirplane] == 1 && (pTemp[playerid][pEmergency] || pTemp[playerid][pCallLine] != INVALID_PLAYER_ID))
	        cmd::hangup(playerid, "");

	    if(PlayerInfo[playerid][pPhoneAirplane] == 0)
	    {
	        new query[128];
   			mysql_format(dbHandle, query, sizeof(query), "UPDATE `sms` SET `read`='0' WHERE `to_number`=%i AND `read`='-1'", PlayerInfo[playerid][pNumber]);
			mysql_tquery(dbHandle, query);
	    }

	    PlayerTextDrawSetString(playerid, TD_iphone_setting[playerid][1], (PlayerInfo[playerid][pPhoneAirplane] == 0)?("Airplane Mode: Off"):("Airplane Mode: On"));
		PlayerTextDrawShow(playerid, TD_iphone_setting[playerid][1]);
		PlayerPlaySound(playerid, 21000, 0.0, 0.0, 0.0);
		return 1;
	}
	if(playertextid == TD_iphone_setting[playerid][2] && IsPlayerPhoneCreated(playerid) != 0)
	{
	    PlayerInfo[playerid][pPhoneSound] = (PlayerInfo[playerid][pPhoneSound])?(0):(1);
	    PlayerTextDrawSetString(playerid, TD_iphone_setting[playerid][2], (PlayerInfo[playerid][pPhoneSound] == 0)?("Sound: On"):("Sound: Off"));
		PlayerTextDrawShow(playerid, TD_iphone_setting[playerid][2]);
		PlayerPlaySound(playerid, 21000, 0.0, 0.0, 0.0);
		return 1;
	}

	if(playertextid == TD_iphone_setting[playerid][8] && IsPlayerPhoneCreated(playerid) != 0)
	{
	    if(PlayerInfo[playerid][pPhoneRingtone]-- < 1)
	        PlayerInfo[playerid][pPhoneRingtone] = sizeof(phone_ringtons)-1;

		PlayerPlaySound(playerid, 0, 0.0, 0.0, 0.0);
    	PlayerPlaySound(playerid, phone_ringtons[PlayerInfo[playerid][pPhoneRingtone]], 0.0, 0.0, 0.0);

		new mes[32];
		format(mes, sizeof(mes), "sound-%i.mp3", PlayerInfo[playerid][pPhoneRingtone]+1);
		PlayerTextDrawSetString(playerid, TD_iphone_setting[playerid][10], mes);
		PlayerTextDrawShow(playerid, TD_iphone_setting[playerid][10]);
		return 1;
	}

	if(playertextid == TD_iphone_setting[playerid][9] && IsPlayerPhoneCreated(playerid) != 0)
	{
	    if(PlayerInfo[playerid][pPhoneRingtone]++ >= sizeof(phone_ringtons)-1)
	        PlayerInfo[playerid][pPhoneRingtone] = 0;

		PlayerPlaySound(playerid, 0, 0.0, 0.0, 0.0);
    	PlayerPlaySound(playerid, phone_ringtons[PlayerInfo[playerid][pPhoneRingtone]], 0.0, 0.0, 0.0);

		new mes[32];
		format(mes, sizeof(mes), "sound-%i.mp3", PlayerInfo[playerid][pPhoneRingtone]+1);
		PlayerTextDrawSetString(playerid, TD_iphone_setting[playerid][10], mes);
		PlayerTextDrawShow(playerid, TD_iphone_setting[playerid][10]);
		return 1;
	}

	if(playertextid == TD_iphone_setting[playerid][5] && IsPlayerPhoneCreated(playerid) != 0)
	{
	    if(PlayerInfo[playerid][pPhoneStyle]-- < 1)
	        PlayerInfo[playerid][pPhoneStyle] = sizeof(phone_panel)-1;

		PlayerTextDrawBoxColor(playerid, TD_iphone_setting[playerid][4], phone_panel[PlayerInfo[playerid][pPhoneStyle]]);
		PlayerTextDrawShow(playerid, TD_iphone_setting[playerid][4]);

		PlayerTextDrawBoxColor(playerid, TD_iphone[playerid][12], phone_window[PlayerInfo[playerid][pPhoneStyle]]);
		PlayerTextDrawShow(playerid, TD_iphone[playerid][12]);

		PlayerTextDrawBoxColor(playerid, TD_iphone[playerid][17], phone_panel[PlayerInfo[playerid][pPhoneStyle]]);
		PlayerTextDrawShow(playerid, TD_iphone[playerid][17]);

		PlayerTextDrawBoxColor(playerid, TD_iphone_setting[playerid][1], phone_panel[PlayerInfo[playerid][pPhoneStyle]]);
        PlayerTextDrawShow(playerid, TD_iphone_setting[playerid][1]);

        PlayerTextDrawBoxColor(playerid, TD_iphone_setting[playerid][2], phone_panel[PlayerInfo[playerid][pPhoneStyle]]);
        PlayerTextDrawShow(playerid, TD_iphone_setting[playerid][2]);

        for(new i; i != 34; i++)
        {
            if(i == 9)
                continue;

			switch(i)
			{
			    case 0..11, 23..33: PlayerTextDrawColor(playerid, TD_iphone_keypad[playerid][i], phone_panel[PlayerInfo[playerid][pPhoneStyle]]);
				default: PlayerTextDrawColor(playerid, TD_iphone_keypad[playerid][i], phone_window[PlayerInfo[playerid][pPhoneStyle]]);
			}
        }
		return 1;
	}

	if(playertextid == TD_iphone_setting[playerid][6] && IsPlayerPhoneCreated(playerid) != 0)
	{
	    if(PlayerInfo[playerid][pPhoneStyle]++ >= sizeof(phone_panel)-1)
	        PlayerInfo[playerid][pPhoneStyle] = 0;

        PlayerTextDrawBoxColor(playerid, TD_iphone_setting[playerid][4], phone_panel[PlayerInfo[playerid][pPhoneStyle]]);
		PlayerTextDrawShow(playerid, TD_iphone_setting[playerid][4]);

		PlayerTextDrawBoxColor(playerid, TD_iphone[playerid][12], phone_window[PlayerInfo[playerid][pPhoneStyle]]);
		PlayerTextDrawShow(playerid, TD_iphone[playerid][12]);

		PlayerTextDrawBoxColor(playerid, TD_iphone[playerid][17], phone_panel[PlayerInfo[playerid][pPhoneStyle]]);
		PlayerTextDrawShow(playerid, TD_iphone[playerid][17]);

		PlayerTextDrawBoxColor(playerid, TD_iphone_setting[playerid][1], phone_panel[PlayerInfo[playerid][pPhoneStyle]]);
        PlayerTextDrawShow(playerid, TD_iphone_setting[playerid][1]);

        PlayerTextDrawBoxColor(playerid, TD_iphone_setting[playerid][2], phone_panel[PlayerInfo[playerid][pPhoneStyle]]);
        PlayerTextDrawShow(playerid, TD_iphone_setting[playerid][2]);
		return 1;
	}

    if(playertextid == TD_iphone_contact[playerid][1] && IsPlayerPhoneCreated(playerid) != 0)
	{
        if(GetPVarInt(playerid, #select_sms) == 0)
	    {
	    	new mes[32];
	    	format(mes, sizeof(mes), "%i", PlayerContacts[playerid][GetPVarInt(playerid, #select_contact)][contactNumber]);
	    	cmd::call(playerid, mes);
		}
		else
		{
			new query[128];
			mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `sms` WHERE `id`=%i", GetPVarInt(playerid, #select_sms));
			mysql_tquery(dbHandle, query, "ShowSMS", "ii", playerid, GetPVarInt(playerid, #select_sms));
		}
		return 1;
	}
	if(playertextid == TD_iphone_contact[playerid][2] && IsPlayerPhoneCreated(playerid) != 0)
	{
	    if(GetPVarInt(playerid, #select_sms) == 0)
	    {
	    	new mes[128];
	    	format(mes, sizeof(mes), "[%s]", PlayerContacts[playerid][GetPVarInt(playerid, #select_contact)][contactName]);
	    	Dialog_Show(playerid, SendSMS3, DIALOG_STYLE_INPUT, mes, "Introdu mesajul:", "Trimite", "Anuleaza");
		}
		else
		{
		    new mes[32];
		    GetPVarString(playerid, #sms_number, mes, 32);
	    	Dialog_Show(playerid, SendSMS2, DIALOG_STYLE_INPUT, mes, "Introdu mesajul:", "Trimite", "Anuleaza");
		}
		return 1;
	}
	if(playertextid == TD_iphone_contact[playerid][3] && IsPlayerPhoneCreated(playerid) != 0)
	{
	    if(GetPVarInt(playerid, #select_sms) == 0)
	    {
   	 		new mes[128];
	    	format(mes, sizeof(mes), "Sterge contactul - %s (%i)", PlayerContacts[playerid][GetPVarInt(playerid, #select_contact)][contactName], PlayerContacts[playerid][GetPVarInt(playerid, #select_contact)][contactNumber]);
	    	Dialog_Show(playerid, DeleteContact, DIALOG_STYLE_MSGBOX, "[Sterge]", mes, "Da", "Nu");
		}
		else
		{
	    	Dialog_Show(playerid, DeleteSMS, DIALOG_STYLE_MSGBOX, "[Sterge]", "{ffffff}Esti sigur ca doresti sa stergi acest mesaj?", "Da", "Nu");
		}
		return 1;
	}
    if(playertextid == TD_iphone_contact[playerid][4] && IsPlayerPhoneCreated(playerid) != 0)
	{
	    if(GetPVarInt(playerid, #select_sms) == 0)
	    {
	    	Phone_Contact_Info(playerid);
	   		Phone_Contacts(playerid, 0);
	   	}
	   	else
	   	{
	   	    Phone_SMS_Info(playerid);
	   	    Phone_SMS(playerid, 0);
	   	}
		return 1;
	}

	if(IsPlayerPhoneCreated(playerid) != 0)
	{
	    for(new i; i != 3; i++)
	    {
	        if(playertextid != TD_iphone_block[playerid][i + 3] || PhoneInfo[playerid][phoneBlockSMS][i] == 0)
	            continue;

			new id = PhoneInfo[playerid][phoneBlockSMS][i];

			Phone_Block(playerid, 0);
			Phone_SMS_Info(playerid, id);
			return 1;
	    }

	    for(new i; i != 3; i++)
	    {
	        if(playertextid != TD_iphone_list[playerid][i + 13] || PhoneInfo[playerid][phoneListed][i] == -1)
	            continue;

			new query[128];
			mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `history_calls` WHERE `id` = %i", PhoneInfo[playerid][phoneListed][i]);
			mysql_tquery(dbHandle, query, "ShowHistoryInfo", "ii", playerid, PhoneInfo[playerid][phoneListed][i]);
			return 1;
	    }

	    for(new i; i != 10; i++)
	    {
	        if(playertextid != TD_iphone_keypad[playerid][i + 12])
	            continue;

			if(strlen(pTemp[playerid][pCallKeypad]) > 10)
			    return 1;

			switch(i)
			{
			    case 0: strcat(pTemp[playerid][pCallKeypad], "1", 11);
			    case 1: strcat(pTemp[playerid][pCallKeypad], "2", 11);
			    case 2: strcat(pTemp[playerid][pCallKeypad], "3", 11);
			    case 3: strcat(pTemp[playerid][pCallKeypad], "4", 11);
			    case 4: strcat(pTemp[playerid][pCallKeypad], "5", 11);
			    case 5: strcat(pTemp[playerid][pCallKeypad], "6", 11);
			    case 6: strcat(pTemp[playerid][pCallKeypad], "7", 11);
			    case 7: strcat(pTemp[playerid][pCallKeypad], "8", 11);
			    case 8: strcat(pTemp[playerid][pCallKeypad], "9", 11);
			    case 9: strcat(pTemp[playerid][pCallKeypad], "0", 11);
			}
			PlayerTextDrawSetString(playerid, TD_iphone_name[playerid], pTemp[playerid][pCallKeypad]);
	   		PlayerTextDrawShow(playerid, TD_iphone_name[playerid]);
			return 1;
	    }

	    for(new i; i != 9; i++)
	    {
	        if(playertextid != TD_iphone_list[playerid][i + 4] || PhoneInfo[playerid][phoneListed][i] == -1)
	            continue;

			if(PhoneInfo[playerid][phoneContact] == 1)
			{
            	Phone_Contacts(playerid);
            	Phone_Contact_Info(playerid, PhoneInfo[playerid][phoneListed][i]);
			}
			if(PhoneInfo[playerid][phoneSMS] == 1)
			{
            	Phone_SMS(playerid);
            	Phone_SMS_Info(playerid, PhoneInfo[playerid][phoneListed][i]);
			}
			if(PhoneInfo[playerid][phoneGPS] == 1)
			{
			    new mes[128];
				format(mes, sizeof(mes), "{ffffff}Ai ales o locatie - %s. Doresti sa o marchezi pe GPS?", gps_location[PhoneInfo[playerid][phoneListed][i]][gpsName]);
				Dialog_Show(playerid, SelectGPS, DIALOG_STYLE_MSGBOX, "[GPS]", mes, "Marcheaza", "Inchide");
				SetPVarInt(playerid, #select_gps, PhoneInfo[playerid][phoneListed][i]);
			}
			return 1;
	    }
	}
    if(playertextid == TD_iphone_list[playerid][2] && IsPlayerPhoneCreated(playerid) != 0)
	{
	    if(PhoneInfo[playerid][phoneContact] == 1)
	    {
	    	if(GetPVarInt(playerid, #contacts_list) + 1 <= 4)
		    	Phone_Contacts(playerid, GetPVarInt(playerid, #contacts_list) + 1);
		}
		if(PhoneInfo[playerid][phoneSMS] == 1)
	    {
	    	Phone_SMS(playerid, GetPVarInt(playerid, #contacts_list) + 1);
		}
		if(PhoneInfo[playerid][phoneGPS] == 1)
	    {
	    	if(GetPVarInt(playerid, #contacts_list) + 1 <= 2)
		    	Phone_GPS(playerid, GetPVarInt(playerid, #contacts_list) + 1);
		}
        if(PhoneInfo[playerid][phoneHistory] == 1)
	    {
 			Phone_History(playerid, GetPVarInt(playerid, #contacts_list) + 1);
		}
		return 1;
	}
	if(playertextid == TD_iphone_list[playerid][1] && IsPlayerPhoneCreated(playerid) != 0)
	{
	    if(PhoneInfo[playerid][phoneContact] == 1)
	    {
	    	if(GetPVarInt(playerid, #contacts_list) - 1 >= 0)
	        	Phone_Contacts(playerid, GetPVarInt(playerid, #contacts_list) - 1);
		}
		if(PhoneInfo[playerid][phoneSMS] == 1)
	    {
	        if(GetPVarInt(playerid, #contacts_list) - 1 >= 0)
	    		Phone_SMS(playerid, GetPVarInt(playerid, #contacts_list) - 1);
		}
		if(PhoneInfo[playerid][phoneGPS] == 1)
	    {
	        if(GetPVarInt(playerid, #contacts_list) - 1 >= 0)
	    		Phone_GPS(playerid, GetPVarInt(playerid, #contacts_list) - 1);
		}
		if(PhoneInfo[playerid][phoneHistory] == 1)
	    {
	        if(GetPVarInt(playerid, #contacts_list) - 1 >= 0)
	    		Phone_History(playerid, GetPVarInt(playerid, #contacts_list) - 1);
		}
		return 1;
	}
	if(playertextid == TD_iphone_list[playerid][3] && IsPlayerPhoneCreated(playerid) != 0 && PhoneInfo[playerid][phoneContact] != 0)
	{
	    Dialog_Show(playerid, AddContact, DIALOG_STYLE_INPUT, "[Adauga contact]", "Introdu numarul de telefon al contactului:", "Inainte", "Anuleaza");
	    return 1;
	}
	if(playertextid == TD_iphone_list[playerid][3] && IsPlayerPhoneCreated(playerid) != 0 && PhoneInfo[playerid][phoneSMS] != 0)
	{
	    Dialog_Show(playerid, SendSMS, DIALOG_STYLE_INPUT, "[Mesagerie]", "Introdu numarul/numele contactului:", "Inainte", "Anuleaza");
	    return 1;
	}
    if(playertextid == TD_iphone_menu[playerid][0] && IsPlayerPhoneCreated(playerid) != 0)
	{
	    Phone_Menu(playerid, 0);
	    Phone_Contacts(playerid, 0);//0 - ????????
	    return 1;
	}
    if(playertextid == TD_iphone_menu[playerid][1] && IsPlayerPhoneCreated(playerid) != 0)
	{
	    Phone_Menu(playerid, 0);
 		Phone_Setting(playerid, 1);
	    return 1;
	}
    if(playertextid == TD_iphone_menu[playerid][2] && IsPlayerPhoneCreated(playerid) != 0)
	{
	    Phone_Menu(playerid, 0);
	    Phone_SMS(playerid, 0);//0 - ????????
	    return 1;
	}
    if(playertextid == TD_iphone_menu[playerid][3] && IsPlayerPhoneCreated(playerid) != 0)
	{
	    Phone_Menu(playerid, 0);
	    Phone_History(playerid, 0);//0 - ????????
	    return 1;
	}
    if(playertextid == TD_iphone_menu[playerid][4] && IsPlayerPhoneCreated(playerid) != 0)
	{
	    cmd::selfie(playerid, "");
	    return 1;
	}
	if(playertextid == TD_iphone_menu[playerid][5] && IsPlayerPhoneCreated(playerid) != 0)
	{
	    Phone_Menu(playerid, 0);
	    Phone_GPS(playerid, 0);//0 - ????????
	    return 1;
	}
    if(playertextid == TD_iphone_menu[playerid][6] && IsPlayerPhoneCreated(playerid) != 0)
	{
	    Phone_Menu(playerid, 0);
 		Phone_Keypad(playerid, 1);
	    return 1;
	}

	if(playertextid == TD_iphone_button[playerid][4] && IsPlayerPhoneCreated(playerid) != 0)
		return cmd::pickup(playerid, "");

    if((playertextid == TD_iphone_button[playerid][0] || playertextid == TD_iphone_button[playerid][2]) && IsPlayerPhoneCreated(playerid) != 0)
		return cmd::hangup(playerid, "");

    if(playertextid == TD_iphone[playerid][22] && (PhoneInfo[playerid][phoneSetting] != 0 || PhoneInfo[playerid][phoneBlock] != 0 || PhoneInfo[playerid][phoneContact] != 0 || PhoneInfo[playerid][phoneSMS] != 0 || PhoneInfo[playerid][phoneHistory] != 0 || PhoneInfo[playerid][phoneKeypad] != 0 || PhoneInfo[playerid][phoneGPS] != 0) && IsPlayerPhoneCreated(playerid))
	{
	    Phone_Block(playerid, 0);
		Phone_Contacts(playerid);
		Phone_SMS(playerid);
		Phone_History(playerid);
		Phone_GPS(playerid);
		Phone_Setting(playerid, 0);
		Phone_Keypad(playerid, 0);
		Phone_Menu(playerid, 1);
		return 1;
	}

	for(new i; i != 4; i++)
	{
	    if(playertextid != TD_restaurant_prod[playerid][i + 4])
	        continue;

        RestaurantMenuHide(playerid);

        if(pTemp[playerid][pFoodStand] != 0 || IsPlayerAttachedObjectSlotUsed(playerid, ATTACH_HANDS))
        	return SendErrorMessage(playerid, "Mainele tale sunt ocupate.");

		new bizid;

		if ((bizid = GetNearBizInside(playerid)) == -1)
  			return SendErrorMessage(playerid, "Trebuie sa fii in interioriul afacerii.");

		if (BizInfo[bizid][bizType] != BIZ_PIZZA && BizInfo[bizid][bizType] != BIZ_CLUCKIN && BizInfo[bizid][bizType] != BIZ_BURGER && BizInfo[bizid][bizType] != BIZ_DONUT)
		    return SendErrorMessage(playerid, "Nu esti intr-un restaurant.");

		new type = BizInfo[bizid][bizType] - BIZ_PIZZA;

		if(GetCash(playerid) < BizInfo[bizid][bizProductPrice][i])
			return SendNotCash(playerid);

		if(BizInfo[bizid][bizOwnerID] != 0 && !BizInfo[bizid][bizProduct])
		    return SendErrorMessage(playerid, "Aceasta afacere nu are suficiente produse.");

        cmd::ame(playerid, "a comandat.");

        SendClientMessageEx(playerid, COLOR_WHITE, "Ai comandat {FF6347}%s{FFFFFF} si ai platit {FF6347}$%s{FFFFFF}.", name_order[type][i], FormatNumber(BizInfo[bizid][bizProductPrice][i]));
		SCM(playerid, COLOR_WHITE, "Poti pune tava pe masa folosind {FF6347}/meal place{FFFFFF} sau poti sa folosesti {FF6347}/meal throw{FFFFFF} pentru a scapa de tava.");

		GiveCash(playerid, - BizInfo[bizid][bizProductPrice][i]);

		if(BizInfo[bizid][bizOwnerID] != 0)
		{
			BizInfo[bizid][bizProduct]--;
			GiveBizCash(bizid, BizInfo[bizid][bizProductPrice][i]);
		}

		OnPlayAnim(playerid,"CARRY","crry_prtial",4.1,1,1,1,1,1);
		SetPlayerAttachedObject(playerid, ATTACH_HANDS, model_order[type][i], 5, 0.091998, 0.021999, 0.409, -104.9, 27.6, 0, 1, 1, 1);
		pTemp[playerid][pFoodStand] = model_order[type][i];

		new Float: health;
		if(GetPlayerHealth(playerid, health))
        	SetPlayerHealth(playerid, health + 30.0 + (i * 10.0));

		if(health + 30.0 + (i * 10.0) > 150.0)
			SetPlayerHealth(playerid, 150.0);

		return 1;
	}
	return 1;
}

Toll_CloseToll(tollid)
{
    SetDynamicObjectRot(L_a_TollObject[tollid], toll_gate_rot[tollid][0], -90.0, toll_gate_rot[tollid][1]);
	return 1;
}

Toll_OpenToll(tollid)
{
	aTolls[tollid][E_tOpenTime] = 7;
	SetDynamicObjectRot(L_a_TollObject[tollid], toll_gate_rot[tollid][0], 0.0, toll_gate_rot[tollid][1]);
	return 1;
}

forward OnPlantInsert(plant);
public OnPlantInsert(plant)
{
	CropsInfo[plant][pID] = cache_insert_id();
	return 1;
}

public LoadDynamicPlants()
{
    new rows = cache_num_rows(),
	    time = GetTickCount(),
		total;

	if(!rows)
	{
	    print("[Plante] Nu s-au gasit rezultate.");
	    return 1;
	}
	for (new i = 0; i < rows; i++)
	{
	    CropsInfo[total][pID] = cache_get_field_content_int(i, "id");
		cache_get_field_content(i, "planter", CropsInfo[i][pPlanter], dbHandle, 52);
		CropsInfo[i][pGrowTime] = cache_get_field_content_int(i, "growtime");
		CropsInfo[i][pX] = cache_get_field_content_float(i, "posx");
		CropsInfo[i][pY] = cache_get_field_content_float(i, "posy");
		CropsInfo[i][pZ] = cache_get_field_content_float(i, "posz");
	    CropsInfo[i][pInt] = cache_get_field_content_int(i, "interior");
	    CropsInfo[i][pVW] = cache_get_field_content_int(i, "vw");
		CropsInfo[i][pPlanted] = 1;

		CropsInfo[i][pObject] =
			CreateDynamicObject(3409, CropsInfo[i][pX], CropsInfo[i][pY], CropsInfo[i][pZ], 0.0, 0.0, 0.0, CropsInfo[i][pVW], CropsInfo[i][pInt], -1, 200.0);

		static const str_size[] = "Planta - %s";
		new mes[sizeof(str_size) - 2 + 7];
		format(mes, sizeof(mes), str_size, (CropsInfo[i][pGrowTime] > gettime())?("dezvoltata"):("nedezvoltata"));

		CropsInfo[i][pLabel] =
			CreateDynamic3DTextLabel(mes, -1, CropsInfo[i][pX], CropsInfo[i][pY], CropsInfo[i][pZ]+2.5, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, CropsInfo[i][pVW], CropsInfo[i][pInt], -1, 100.0);

		total++;
	}
	printf("[Plants] ???- %i. ???? %i. ????: %i ms.", rows, total, GetTickCount()-time);
	return 1;
}

//start dialogs.
Dialog:None(playerid, response, listitem, inputtext[])
{
	return 1;
}

Dialog:EvictTenant(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return 1;

	if(listitem < 0 || listitem > 4 || pTemp[playerid][pTenantListed][listitem] == 0)
	    return 1;

	new userid =
		GetIDByID(pTemp[playerid][pTenantListed][listitem]);
	if(IsPlayerLogged(userid))
	{
	    SendClientMessageEx(userid, COLOR_INFO, "Din cauza ca ai fost evacuat, nu mai stai in chirie la %s.", GetNameWithMask(playerid));
        SendClientMessageEx(playerid, COLOR_INFO, "%s nu iti mai este chirias de acum.", GetNameWithMask(userid));

        PlayerInfo[userid][pRentKey] = 0;
		PlayerInfo[userid][pRentPrice] = 0;
	}
	else
        SendClientMessage(playerid, COLOR_INFO, "Ai pierdut unul dintre chirias.");

    new query[128];
	mysql_format(dbHandle, query, sizeof(query), "UPDATE `users` SET `rent_key`='0',`rent_price`='0' WHERE `id`='%i'", pTemp[playerid][pTenantListed][listitem]);
	mysql_tquery(dbHandle, query);
	return 1;
}

Dialog:BuyInterior(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return 1;

	new houseid = strval(inputtext);
    if(houseid < 0 || houseid > MAX_HOUSES-1 || 0 == HouseInfo[houseid][hID])
	{
	    Dialog_Show(playerid, BuyInterior, DIALOG_STYLE_INPUT, "Schimbare interior", "{FFFFFF}Introdu ID-ul casei careia vrei sa ii schimbi interiorul:\nCasa trebuie sa iti apartina!", "Inainte", "Inchide");
		return SCM(playerid, COLOR_LIGHTRED, "Acel ID nu apartine unei case existente.");
	}
	if(HouseInfo[houseid][hOwnerID] != PlayerInfo[playerid][pID])
	{
	    Dialog_Show(playerid, BuyInterior, DIALOG_STYLE_INPUT, "Schimbare interior", "{FFFFFF}Introdu ID-ul casei careia vrei sa ii schimbi interiorul:\nCasa trebuie sa iti apartina!", "Inainte", "Inchide");
		return SCM(playerid, COLOR_LIGHTRED, "Acel ID nu apartine casei tale.");
	}

	SetPlayerBuyInterior(playerid, 1, houseid);
	return 1;
}

Dialog:BuyInteriorAccept(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return ShowMenuForPlayer(buy_interior, playerid);

	new houseid = pTemp[playerid][pInteriorHouse]-1;
    if(houseid < 0 || houseid > MAX_HOUSES-1 || 0 == HouseInfo[houseid][hID])
		return SetPlayerBuyInterior(playerid, 0);

	if(HouseInfo[houseid][hOwnerID] != PlayerInfo[playerid][pID])
	{
	    SetPlayerBuyInterior(playerid, 0);
		return SCM(playerid, COLOR_LIGHTRED, "Acel ID nu apartine casei tale.");
	}

	if(GetCash(playerid) < 750)
	{
	    ShowMenuForPlayer(buy_interior, playerid);
	    return SendNotCash(playerid);
	}

	GiveCash(playerid, -750);
	SendClientMessageEx(playerid, COLOR_GREEN, "Ai schimbat interiorul casei tale (ID: %i). Ai fost taxat cu $750.", houseid);
    SetHouseInterior(houseid, pTemp[playerid][pInteriorID]);
	SetPlayerBuyInterior(playerid, 0);

	new paycheck;
	for(new i; i < MAX_FURNITURE; i++)
	{
	    if(HouseFurniture[houseid][i][fID] == 0 || HouseFurniture[houseid][i][fOn] == 0) continue;
	    paycheck += (HouseFurniture[houseid][i][fMarketPrice] - (HouseFurniture[houseid][i][fMarketPrice] & 2))  / 2;
	    HouseFurniture[houseid][i][fID] = 0;
	    HouseFurniture[houseid][i][fOn] = 0;
	    DestroyDynamicObject(HouseFurniture[houseid][i][fObject]);
	}
    HouseInfo[houseid][hFurniture] = 0;
    HouseInfo[houseid][hOutsideFurniture] = 0;
    GiveCash(playerid, paycheck);

   	new query[128];
	mysql_format(dbHandle, query, sizeof(query), "DELETE FROM `furnitures` WHERE `houseid` = %i", HouseInfo[houseid][hID]);
	mysql_tquery(dbHandle, query);
	return 1;
}

Dialog:SellBiz(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return 1;

    new bizid;

	if ((bizid = GetNearBizOutside(playerid)) == -1)
	    return SendErrorMessage(playerid, "Nu esti in apropierea unei afaceri.");

	if(BizInfo[bizid][bizOwnerID] != PlayerInfo[playerid][pID])
	    return SendErrorMessage(playerid, "Afacerea nu iti apartine.");

	PlaySound(playerid, 1052);

	new biz_cost = BizInfo[bizid][bizPrice] / 2,
	    money = PlayerInfo[playerid][pCash],
	    cash;

	GiveCash(playerid, biz_cost);

	SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Ti-ai vandut afacerea (\"%s\") in schimbul sumei de $%i.",BizInfo[bizid][bizName], biz_cost);
	if(BizInfo[bizid][bizCash] > 0)
	{
		SendClientMessageEx(playerid,COLOR_YELLOWG,"Ai primit $%i (din seiful afacerii) intrucat ti-ai vandut afacerea.", BizInfo[bizid][bizCash]);
		GiveCash(playerid, BizInfo[bizid][bizCash]);
		cash = BizInfo[bizid][bizCash];
	}

    new mes[256];
	format(mes, sizeof(mes), "%s [MYSQL: %i | IP: %s | Bani(inainte): %i | Bani(dupa): %i] a vandut afacerea [B_MYSQL: %i] ?? -- $%i + $%i",
	GetName(playerid), PlayerInfo[playerid][pID], GetPlayerIP(playerid), money, GetCash(playerid), BizInfo[bizid][bizID], biz_cost, cash);
    insert_log(mes, PROPERTY_LOG, 2, playerid);

    Sell_Business(bizid);
	return 1;
}

// SISTEM DE TRADE DE CACAT
Dialog:DuplicateKey(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return 1;

    if(0 == IsValidVehicle(PlayerInfo[playerid][pCarKey]))
		return SCM(playerid, COLOR_LIGHTRED, "Vehiculul tau nu este spawnat.");

	if(VehicleInfo[PlayerInfo[playerid][pCarKey]][carOwnerID] != PlayerInfo[playerid][pID])
	    return 1;

    static const str_size[] = "";
	new mes[sizeof(str_size) - 2 + 1 + 32];
	format(mes, sizeof(mes), str_size, VehicleNames[GetVehicleModel(PlayerInfo[playerid][pCarKey])-400]);

    new userid;
	if(sscanf(inputtext, "u", userid))
	{
	    Dialog_Show(playerid, DuplicateKey, DIALOG_STYLE_INPUT, "Creare dublura (cheie)", mes, "Cumpara", "Anuleaza");
	    return SendErrorMessage(playerid, "Introdu ID-ul jucatorului.");
	}

	if(0 == IsPlayerLogged(userid) || userid == playerid)
	{
	    Dialog_Show(playerid, DuplicateKey, DIALOG_STYLE_INPUT, "Creare dublura (cheie)", mes, "Cumpara", "Anuleaza");
		return SendNotConnected(playerid);
	}

	if(!PlayerNearPlayer(5.0, playerid, userid))
	{
	    Dialog_Show(playerid, DuplicateKey, DIALOG_STYLE_INPUT, "Creere dublura (cheie)", mes, "Cumpara", "Anuleaza");
		return SendNotNearPlayer(playerid);
	}

	if(GetCash(playerid) < 150)
	    return SendNotCash(playerid);

	GiveCash(playerid, -150);

	SendClientMessageEx(playerid, COLOR_GREEN, "O dublura de cheie pentru %s a fost creata si data lui %s.", VehicleNames[GetVehicleModel(PlayerInfo[playerid][pCarKey])-400], GetNameEx(userid));
    SendClientMessageEx(userid, COLOR_GREEN, "%s a cumparat o dublura (cheie) pentru %s. (/dropkey - pentru a arunca dublura.)", GetNameEx(playerid), VehicleNames[GetVehicleModel(PlayerInfo[playerid][pCarKey])-400]);
	PlayerInfo[userid][pSpareKey] = VehicleInfo[PlayerInfo[playerid][pCarKey]][carID];
	return 1;
}


//Dialog:SellHouseTo(playerid, response, listitem, inputtext[])
//{
	//if(!response)
	    //return 1;

    //new houseid = GetPVarInt(playerid, #house_menu);
	//if(houseid < 0 || houseid > MAX_HOUSES-1 || HouseInfo[houseid][hOwnerID] != PlayerInfo[playerid][pID])
	  //  return 1;

  //  new userid,
		//price;

//	if(sscanf(inputtext, "ui", userid, price))
//	{
//	    Dialog_Show(playerid, SellHouseTo, DIALOG_STYLE_INPUT, "Vanzare casa", "{ffffff}??????? ????. ??????? {C3C3C3}[PartOfName/playerid] [????????? ???????]", "???????", "??????");
	 //   return SendErrorMessage(playerid, "???????????? ??????.");
//	}
//
//	if(!IsPlayerLogged(userid))
//	{
//	    Dialog_Show(playerid, SellHouseTo, DIALOG_STYLE_INPUT, "??????? ????", "{ffffff}??????? ????. ??????? {C3C3C3}[PartOfName/playerid] [????????? ???????]", "???????", "??????");
//		return SendNotConnected(playerid);
//	}

//	if(!PlayerNearPlayer(3.0, playerid, userid))
//	{
//	    Dialog_Show(playerid, SellHouseTo, DIALOG_STYLE_INPUT, "??????? ????", "{ffffff}??????? ????. ??????? {C3C3C3}[PartOfName/playerid] [????????? ???????]", "???????", "??????");
//		return SendNotNearPlayer(playerid);
//	}
//
//	if(price < 0 || price > 100000000)
//	{
	 //   Dialog_Show(playerid, SellHouseTo, DIALOG_STYLE_INPUT, "??????? ????", "{ffffff}??????? ????. ??????? {C3C3C3}[PartOfName/playerid] [????????? ???????]", "???????", "??????");
	 //   return SendErrorMessage(playerid, "??????? ?????????? ???? ???????.");
	//}

//	cmd::sellhouseto(playerid, inputtext);
	//return 1;
//}

//Dialog:SellHouse(playerid, response, listitem, inputtext[])
//{
//	if(!response)
//	    return 1;

 //   new houseid;

//	if ((houseid = GetNearHouseOutside(playerid)) == -1)
//	    return SendErrorMessage(playerid, "????? ? ???? ??? ????.");

//	if(HouseInfo[houseid][hOwnerID] != PlayerInfo[playerid][pID])
//	    return SendErrorMessage(playerid, "?????? ??? ?? ??????????? ???.");
//
 //   if(PlayerInfo[playerid][pSpawnType] == HouseInfo[houseid][hID])
	//	PlayerInfo[playerid][pSpawnType] = 0;

 //   new money = PlayerInfo[playerid][pCash],
       // cash;

	//GiveCash(playerid, HouseInfo[houseid][hPrice]/2);
	//PlaySound(playerid, 1052);
	//SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "?? ??????? ??????? ???? ??? ?? $%i.", HouseInfo[houseid][hPrice]/2);

	//if(HouseInfo[houseid][hCash] > 0)
	//{
	//	SendClientMessageEx(playerid, COLOR_YELLOWG,"????? ??????? ???? ? ????? ???????? $%i, ??????? ???? ??????? ?????.", HouseInfo[houseid][hCash]);
	//	GiveCash(playerid, HouseInfo[houseid][hCash]);
	//	cash = HouseInfo[houseid][hCash];
	//}

    //new mes[256];
	//format(mes, sizeof(mes), "%s [MYSQL: %i | IP: %s | ??????(????): %i | ??????(?????): %i] ?????? ??? [H_MYSQL: %i] ?? -- $%i + $%i",
	//GetName(playerid), PlayerInfo[playerid][pID], GetPlayerIP(playerid), money, GetCash(playerid), HouseInfo[houseid][hID], HouseInfo[houseid][hPrice]/2, cash);
   // insert_log(mes, PROPERTY_LOG, 1, playerid);

	//Sell_House(houseid);
	//return 1;
//}

Dialog:SelectIndustry(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return cmd::tpda(playerid, "");

    listitem = GetPVarInt(playerid, #select_industry);

    if(listitem < 0 || listitem > MAX_TRUCK_CARGO || TruckCargo[listitem][tOn] == 0)
		return 1;

	if(TruckCargo[listitem][tPack] == 0)
	{
	    Waypoint_Set(playerid, TruckCargo[listitem][tPosX], TruckCargo[listitem][tPosY], TruckCargo[listitem][tPosZ]);
    	PlayerPlaySound(playerid, 21001, 0.0, 0.0, 0.0);
	    return 1;
	}

	new count,
 		mes[512];

	for(new i; i != MAX_TRUCK_CARGO; i++)
 	{
		pTemp[playerid][pPDAListed][i] = -1;

		if(TruckCargo[i][tOn] == 0 || TruckCargo[i][tPack] == 0 || TruckCargo[i][tPack] != TruckCargo[listitem][tPack])
		    continue;

		pTemp[playerid][pPDAListed][count] = i;
		format(mes, sizeof(mes), "%s\n{9ACD32}- %s {808080}({FFFFFF}%s $%i {808080}/ unitate, {FFFFFF}%i {808080}/ %i)", mes, (TruckCargo[i][tType] == 3)?("Cumpara"):("Vinde"),truckcargo_product[TruckCargo[i][tProductID]], TruckCargo[i][tPrice], TruckCargo[i][tStorage], TruckCargo[i][tStorageSize]);
		count++;
	}
	Dialog_Show(playerid, SelectIndustry3, DIALOG_STYLE_LIST, TruckCargo[listitem][tName], mes, "GPS", "Anuleaza");
	return 1;
}

Dialog:SelectIndustry2(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return cmd::tpda(playerid, "");

	listitem = pTemp[playerid][pPDAListed][listitem];

    if(listitem == -1 || TruckCargo[listitem][tOn] == 0)
		return 1;

    Show_Industry(playerid, listitem, 1);
	return 1;
}

Dialog:SelectIndustry3(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return cmd::tpda(playerid, "");

    listitem = pTemp[playerid][pPDAListed][listitem];

    if(listitem < 0 || listitem > MAX_TRUCK_CARGO || TruckCargo[listitem][tOn] == 0)
		return 1;

	Waypoint_Set(playerid, TruckCargo[listitem][tPosX], TruckCargo[listitem][tPosY], TruckCargo[listitem][tPosZ]);
   	PlayerPlaySound(playerid, 21001, 0.0, 0.0, 0.0);
	return 1;
}

Dialog:PDABiz(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return cmd::tpda(playerid, "");

	if(listitem == 0)
		return ShowBizMenuPDA(playerid, GetPVarInt(playerid, #pda_list)-1);

    if(listitem == 11)
		return ShowBizMenuPDA(playerid, GetPVarInt(playerid, #pda_list)+1);

	if(pTemp[playerid][pCargoListed][listitem-1] == -1)
	    return 1;

	new bizid = pTemp[playerid][pCargoListed][listitem-1];

	if(BizInfo[bizid][bizID] == 0)
	    return 1;

	Waypoint_Set(playerid, BizInfo[bizid][bizPosX], BizInfo[bizid][bizPosY], BizInfo[bizid][bizPosZ]);
	PlayerPlaySound(playerid, 21001, 0.0, 0.0, 0.0);
	SendClientMessage(playerid, -1, "Afacerea a fost marcata pe harta.");
	return 1;
}

//SISTEM TRUCKER COMPLICAT
Dialog:PDAMenu(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return 1;

	switch(listitem)
	{
	    case 0:
	    {
			new count,
			    mes[1512];

	        for(new i; i != MAX_TRUCK_CARGO; i++)
		    {
      			pTemp[playerid][pPDAListed][i] = -1;

				if(TruckCargo[i][tOn] == 0 || TruckCargo[i][tType] == 2 || TruckCargo[i][tType] == 3 || TruckCargo[i][tGps] == 0)
				    continue;

                pTemp[playerid][pPDAListed][count] = i;
				format(mes, sizeof(mes), "%s\n%s (%s, {9ACD32}%s)", mes, TruckCargo[i][tName], truckcargo_type[TruckCargo[i][tType]], (TruckCargo[i][tLocked] == 0)?("deschis"):("inchis"));
				count++;
			}

			if(count)
				Dialog_Show(playerid, SelectIndustry2, DIALOG_STYLE_LIST, "PDA - Afaceri", mes, "Alege", "Inapoi");
			else
			    Dialog_Show(playerid, None, DIALOG_STYLE_MSGBOX, "PDA - Afaceri", "Nu s-au gasit afaceri.", "Inchide", "");
		}
	    case 1:
	    {
	        ShowBizMenuPDA(playerid, 0);
	        return 1;
	    }
	    case 2:
	    {
	        new mes[1024],
	    		str_len;

			format(mes, sizeof(mes), "{FFFFFF}????? ?????????? ? {9ACD32}???? ???-??????!\n\n{FFFFFF}??????? ? ????????? ????? {9ACD32}%s.\n\n{FFFFFF}????? ???????? ???? ???????????????.\n\n??????? ???????? ?:\t\t%s\n??????? ??????? ?:\t\t%s\n????????? ??????? ???????? ?: %s\n\n{9ACD32}???????:\n{808080}??????? ?????? ?? ???????. ?? ???????? ?????? ???? ?? San Andreas.\n\n{9ACD32}?????????:\n{808080}?????\t\t\t????\t\t? ??????? (?????? ??????){FFFFFF}",
			(ship_docked == 1)?("? ?????"):("? ????"),
			get_date("%hh:%ii:%ss", ship_arrived),
			get_date("%hh:%ii:%ss", ship_depart),
			get_date("%hh:%ii:%ss", ship_next));

			
			
			for(new i; i != MAX_TRUCK_CARGO; i++)
		    {
				if(TruckCargo[i][tOn] == 0 || TruckCargo[i][tType] != 2)
				    continue;

	            str_len = strlen(truckcargo_product[TruckCargo[i][tProductID]]);
	            format(mes, sizeof(mes), "%s\n%s%s\t\t$%i\t\t\t%i {808080}(%i){FFFFFF}", mes, truckcargo_product[TruckCargo[i][tProductID]], (str_len < 6)?("\t"):(""),
				TruckCargo[i][tPrice],
			    TruckCargo[i][tStorage],
			    TruckCargo[i][tStorageSize]);
		    }
		    Dialog_Show(playerid, None, DIALOG_STYLE_MSGBOX, "PDA - ???? ???-??????", mes, "???????", "");
	    }
	}
	return 1;
}


Dialog:FirstSpawn(playerid, response, listitem, inputtext[])
{
	if(!response)
	{
    	Dialog_Show(playerid, FirstSpawn, DIALOG_STYLE_LIST, "{8D8DFF}Alege un loc de spawn", "\
		Aeroport (Los Santos)\n\
		Gara (Unity Station)\n\
		Hotel (Jefferson)\n\
		Statie (Market)", "Alege", "");
		return 1;
	}
	PlayerInfo[playerid][pSpawnPoint] = listitem+1;
	pTemp[playerid][pLogged] = 2;

	//TogglePlayerSpectating(playerid, 0);
 	SpawnPlayer(playerid);

	SCM(playerid, -1, "[ ! ] Intrucat esti pentru prima data pe server, trebuie sa joci 4 ore, iar mai apoi...");
	SCM(playerid, -1, "[ ! ] Capitatul de $4000 iti va fi adaugat in contul bancar.");
	return 1;
}

Dialog:BuyDrink(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return 1;

	new price_drink[8] = {16, 24, 10, 4, 15, 26, 6, 23},
	    name_drink[8][8] = {"bere", "vodka", "cola", "apa", "whiskey", "coniac", "suc", "vin"};

	if(GetCash(playerid) < price_drink[listitem])
		return SendNotCash(playerid);

    new bizid = -1;
	if((bizid = GetNearBizInside(playerid)) == -1)
	    return SendErrorMessage(playerid, "Trebuie sa fii in interiorul afacerii.");

    if(BizInfo[bizid][bizType] != BIZ_BAR)
        return SendErrorMessage(playerid, "Trebuie sa fii la bar.");

    if(BizInfo[bizid][bizOwnerID] != 0 && !BizInfo[bizid][bizProduct])
    	return SendErrorMessage(playerid, "Nu exista bautura in stoc.");

	if(GivePlayerItem(playerid, INV_BEER + listitem, 1) == -1)
		return SendErrorMessage(playerid, "Nu ai loc in inventar.");

	SendClientMessageEx(playerid, COLOR_YELLOWG, "Ai cumparat %s in schimbul sumei de $%i.", name_drink[listitem], price_drink[listitem]);
	GiveCash(playerid, -price_drink[listitem]);

	if(BizInfo[bizid][bizOwnerID] != 0)
	{
		BizInfo[bizid][bizProduct]--;
		GiveBizCash(bizid, price_drink[listitem]);
	}
	return 1;
}

Dialog:BuyStandFood(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return 1;

	new price_food[4] = {PRICE_BURGER, PRICE_PIZZA, PRICE_CHICKEN, PRICE_HOTDOG},
	    name_food[4][8] = {"burger", "pizza", "pui", "hotdog"};

	if(GetCash(playerid) < price_food[listitem])
		return SendNotCash(playerid);

	if(GivePlayerItem(playerid, INV_BURGER + listitem, 1) == -1)
		return SendErrorMessage(playerid, "Nu ai loc in inventar.");

	SendClientMessageEx(playerid, COLOR_YELLOWG, "Ai cumparat %s in schimbul sumei de $%i.", name_food[listitem], price_food[listitem]);
	GiveCash(playerid, -price_food[listitem]);
	return 1;
}

Dialog:SelectGPS(playerid, response, listitem, inputtext[])
{
	listitem = GetPVarInt(playerid, #select_gps);

	if(!response)
	    return 1;

   	Waypoint_Set(playerid, gps_location[listitem][gpsX], gps_location[listitem][gpsY], gps_location[listitem][gpsZ]);
	SendClientMessageEx(playerid, COLOR_GREEN, "", gps_location[listitem][gpsName]);
	PlayerPlaySound(playerid, 21001, 0.0, 0.0, 0.0);
	return 1;
}

Dialog:DeleteSMS(playerid, response, listitem, inputtext[])
{
    if(!response)
    	return 1;

    new query[128];
	mysql_format(dbHandle, query, sizeof(query), "DELETE FROM `sms` WHERE `id` = %i", GetPVarInt(playerid, #select_sms));
	mysql_tquery(dbHandle, query);

	Phone_SMS_Info(playerid);
    Phone_SMS(playerid, 0);
	return 1;
}

Dialog:SendSMS(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return 1;

	if(strlen(inputtext) < 1 || strlen(inputtext) > 24)
 		return Dialog_Show(playerid, SendSMS, DIALOG_STYLE_INPUT, "[Mesagerie]", "Introdu numarul/numele contactului:", "Inainte", "Anuleaza");

    SetPVarString(playerid, #sms_number, inputtext);
    new mes[24];
    format(mes, sizeof(mes), "[%s]", inputtext);
	Dialog_Show(playerid, SendSMS2, DIALOG_STYLE_INPUT, mes, "Introdu mesajul:", "Trimite", "Anuleaza");
	return 1;
}

Dialog:SendSMS2(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return 1;

	if(strlen(inputtext) < 1 || strlen(inputtext) > 127)
	{
	    new mes[32];
	    GetPVarString(playerid, #sms_number, mes, 32);
	    Dialog_Show(playerid, SendSMS2, DIALOG_STYLE_INPUT, mes, "Introdu mesajul:", "Trimite", "Anuleaza");
	    return 1;
	}

	new mes[128 + 32],
	    name[32];

    GetPVarString(playerid, #sms_number, name, 32);

	format(mes, sizeof(mes), "%s %s", name, inputtext);
	cmd::sms(playerid, mes);
	return 1;
}

Dialog:SendSMS3(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return 1;

	new contact = GetPVarInt(playerid, #select_contact);

	if(contact < 0 || contact >= MAX_PLAYER_CONTACTS || PlayerContacts[playerid][contact][contactOn] == 0)
	    return 1;

	if(strlen(inputtext) < 1 || strlen(inputtext) > 127)
	{
	    new mes[128];
	    format(mes, sizeof(mes), "[%s]", PlayerContacts[playerid][contact][contactName]);
	    Dialog_Show(playerid, SendSMS3, DIALOG_STYLE_INPUT, mes, "Introdu mesajul:", "Trimite", "Anuleaza");
	    return 1;
	}

	new mes[128 + 12];
	format(mes, sizeof(mes), "%i %s", PlayerContacts[playerid][contact][contactNumber], inputtext);
	cmd::sms(playerid, mes);
	return 1;
}

Dialog:DeleteContact(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return 1;

	new contact = GetPVarInt(playerid, #select_contact);

	if(contact < 0 || contact >= MAX_PLAYER_CONTACTS || PlayerContacts[playerid][contact][contactOn] == 0)
	    return 1;

	new query[128];
	mysql_format(dbHandle, query, sizeof(query), "DELETE FROM `player_contacts` WHERE `id` = %i", PlayerContacts[playerid][contact][contactID]);
	mysql_tquery(dbHandle, query);

	mysql_format(dbHandle, query, sizeof(query), "UPDATE `sms` SET `from_name` = `from_number` WHERE `to_number` = '%i' AND `from_number`='%i'", PlayerInfo[playerid][pNumber], PlayerContacts[playerid][contact][contactNumber]);
	mysql_tquery(dbHandle, query);

    mysql_format(dbHandle, query, sizeof(query), "UPDATE `history_calls` SET `from_name` = `from_number` WHERE `to_number` = '%i' AND `from_number`='%i'", PlayerInfo[playerid][pNumber], PlayerContacts[playerid][contact][contactNumber]);
	mysql_tquery(dbHandle, query);

	SendClientMessageEx(playerid, COLOR_GREEN, "Contactul %s (%i) a fost sters cu succes.", PlayerContacts[playerid][contact][contactName], PlayerContacts[playerid][contact][contactNumber]);
	PlayerContacts[playerid][contact][contactNumber] = 0;
	PlayerContacts[playerid][contact][contactOn] = 0;
	PlayerContacts[playerid][contact][contactID] = 0;

	Phone_Contact_Info(playerid);
	Phone_Contacts(playerid, 0);

	DeletePVar(playerid, #select_contact);
	return 1;
}

Dialog:AddContact(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return 1;

	new
		number = strval(inputtext);

	if(number < 1 || number > 999999999)
	    return SendErrorMessage(playerid, "Format invalid.");

	SetPVarInt(playerid, #contact_number, number);

	new mes[128];
	format(mes, sizeof(mes), "Numar: %i.\nIntrodu numele contactului:", number);
	Dialog_Show(playerid, AddContact2, DIALOG_STYLE_INPUT, "[Adauga contact]", mes, "Adauga", "Anuleaza");
	return 1;
}

Dialog:AddContact2(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return 1;

	if(strlen(inputtext) < 1 || strlen(inputtext) > 23)
	{
	    new mes[128];
		format(mes, sizeof(mes), "Numar: %i.\nIntrodu numele contactului:", GetPVarInt(playerid, #contact_number));
		Dialog_Show(playerid, AddContact2, DIALOG_STYLE_INPUT, "[Adauga contact]", mes, "Adauga", "Anuleaza");
		return SendErrorMessage(playerid, "");
	}

	new contact = -1,
	    count;

	for(new i = 0; i != MAX_PLAYER_CONTACTS; i++)
    {
        if(PlayerContacts[playerid][i][contactOn] != 0)
            count++;

        if(PlayerContacts[playerid][i][contactOn] == 0 && contact == -1)
        	contact = i;
    }

	if(count >= GetMaxPlayerContacts(playerid) || contact == -1)
	    return SendErrorMessage(playerid, "Telefonul nu dispune de suficienta memorie.");

	PlayerContacts[playerid][contact][contactNumber] = GetPVarInt(playerid, #contact_number);
	format(PlayerContacts[playerid][contact][contactName], 32, "%s", inputtext);
	PlayerContacts[playerid][contact][contactOn] = 1;

	new query[128];
	mysql_format(dbHandle, query, sizeof(query), "UPDATE `sms` SET `from_name` = '%e' WHERE `to_number` = '%i' AND `from_number`='%i'", inputtext, PlayerInfo[playerid][pNumber], PlayerContacts[playerid][contact][contactNumber]);
	mysql_tquery(dbHandle, query);

    mysql_format(dbHandle, query, sizeof(query), "UPDATE `history_calls` SET `from_name` = '%e' WHERE `to_number` = '%i' AND `from_number`='%i'", inputtext, PlayerInfo[playerid][pNumber], PlayerContacts[playerid][contact][contactNumber]);
	mysql_tquery(dbHandle, query);

	PlacePlayerContact(playerid, contact, inputtext, GetPVarInt(playerid, #contact_number));

	Phone_Contacts(playerid, GetPVarInt(playerid, #contacts_list));
	return 1;
}

Dialog:SelectChar(playerid, response, listitem, inputtext[])
{
	if(!response)
	{
	    KickEx(playerid);
	    return 1;
	}

	if(listitem < 0 || listitem > 2)
	    return KickEx(playerid);

	if(login_char_id[playerid][listitem] == 0)
	{
		ShowCharacterMenu(playerid);
		SendErrorMessage(playerid, "Acel slot este liber.");
	    return 1;
	}

	SetPVarInt(playerid, #select_char, listitem);

	new mes[128];
	format(mes, sizeof(mes), "{ffffff}Esti sigur ca doresti sa joci cu %s?", login_char_name[playerid][listitem]);
	Dialog_Show(playerid, SelectChar2, DIALOG_STYLE_MSGBOX, "Confirmare", mes, "Da", "Nu");
	return 1;
}
Dialog:SelectChar2(playerid, response, listitem, inputtext[])
{
	if(!response)
	{
	    ShowCharacterMenu(playerid);
	    return 1;
	}

	listitem = GetPVarInt(playerid, #select_char);
    if(listitem < 0 || listitem > 2)
	    return KickEx(playerid);

	new query[200];
	format(query, sizeof(query), "SELECT users.*, accounts.admin, accounts.donate, accounts.Tester, accounts.name_changes, accounts.number_changes FROM users, accounts WHERE users.id = %i AND users.accountid = accounts.id", login_char_id[playerid][listitem]);
    mysql_tquery(dbHandle, query, "LoadCharacter", "i", playerid);
	return 1;
}

Dialog:SelectEditBone(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return cmd::clothing(playerid, "");

    new slot = GetPVarInt(playerid, #edit_slot_attach);

	if(!IsPlayerAttachedObjectSlotUsed(playerid, slot))
		return SendErrorMessage(playerid, "");

	if(GetPVarInt(playerid, #edit_attach) == 1)
		return SendErrorMessage(playerid, "Editezi un obiect deja.");

	if(listitem != 0)
	{
	    RemovePlayerAttachedObject(playerid, slot);
		SetPlayerAttachedObject(playerid, slot, AttachInfo[playerid][slot][aModel], listitem);
	}

	InfoMSG(playerid, "", 5);
	SetPVarInt(playerid, #edit_attach, 1);
	EditAttachedObject(playerid, slot);
	return 1;
}

Dialog:SelectBone(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return 1;

    new faction = PlayerInfo[playerid][pFaction];
   	if(faction != LSPD && faction != SASD && faction != DOCS && faction != LSFD && faction != CITY)
		return SCM(playerid, COLOR_LIGHTRED, "Nu faci parte din factiunea corespunzatoare.");

    new i = -1;
	if((i = GetNextToySlot(playerid)) == -1)
 		return SCM(playerid, COLOR_LIGHTRED, "Toate sloturile sunt ocupate.");

    new index = GetPVarInt(playerid, #select_attach);

	if(faction == LSFD)
	{
	    SetPlayerAttachedObject(playerid, i, attach_fd_model[index], listitem+1);
		EditAttachedObject(playerid, i);
		InsertPlayerAttach(playerid, i, attach_fd_model[index], listitem+1, attach_fd_name[index]);
		SetPVarInt(playerid, #edit_faction, 1);
	}
	else if(faction == CITY)
	{
	    SetPlayerAttachedObject(playerid, i, attach_city_model[index], listitem+1);
		EditAttachedObject(playerid, i);
		InsertPlayerAttach(playerid, i, attach_city_model[index], listitem+1, attach_city_name[index]);
		SetPVarInt(playerid, #edit_faction, 1);
	}
	else
	{
		SetPlayerAttachedObject(playerid, i, attach_police_model[index], listitem+1);
		EditAttachedObject(playerid, i);
		InsertPlayerAttach(playerid, i, attach_police_model[index], listitem+1, attach_police_name[index]);
		SetPVarInt(playerid, #edit_faction, 1);
	}
	return 1;
}

Dialog:BuyClothes(playerid, response, listitem, inputtext[])
{
    new modelid = GetPVarInt(playerid, "clothes_model");
    if(modelid < 1 || modelid > 311)
    	return 1;

	if(GetCash(playerid) < 100)
		return SCM(playerid, COLOR_GREY, "Nu ai suficienti bani! (necesari: $100)");

	if(response)
		PlayerInfo[playerid][pTog][listitem] = PlayerInfo[playerid][pSkin];

    SendServerMessage(playerid, "Ai fost taxat cu $100 in urma achizitiei.");
    SetSkin(playerid, modelid);
	GiveCash(playerid, -100);
	return 1;
}

Dialog:EditClothes(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return 1;

    if(PlayerInfo[playerid][pTog][listitem] == 0)
    {
        PlayerInfo[playerid][pTog][listitem] = PlayerInfo[playerid][pSkin];
        cmd::offclothes(playerid, "1");
        PlayerInfo[playerid][pSkin] = 0;
        return 1;
    }
    new title[32];
    format(title, 32,"Skin #%i.", PlayerInfo[playerid][pTog][listitem]);
    Dialog_Show(playerid, EditClothes2, DIALOG_STYLE_LIST, title, "- Echipeaza\n- Arunca", "Alege", "Anuleaza");
	SetPVarInt(playerid, "select_tog", listitem);
	return 1;
}

Dialog:EditClothes2(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return 1;

	new slot = GetPVarInt(playerid, "select_tog");

    if(PlayerInfo[playerid][pTog][slot] == 0)
        return 1;

	if(0 == listitem)
	{
	    new skin = PlayerInfo[playerid][pSkin];
    	SetSkin(playerid,PlayerInfo[playerid][pTog][slot]);
    	PlayerInfo[playerid][pTog][slot] = skin;
    	return 1;
	}
    PlayerInfo[playerid][pTog][slot] = 0;
    return 1;
}

Dialog:ChangeHouseSpawn(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return 1;

	new houseid = strval(inputtext);

	if(houseid < 0 || houseid > MAX_HOUSES)
	    return SendErrorMessage(playerid, "ID invalid.");

	if(HouseInfo[houseid][hID] == 0 || (HouseInfo[houseid][hOwnerID] != PlayerInfo[playerid][pID] && HouseInfo[houseid][hID] != PlayerInfo[playerid][pRentKey]))
	    return SendErrorMessage(playerid, "Casa nu iti apartine.");

    SendClientMessageEx(playerid, COLOR_YELLOWG, "De acum te vei spawna in: %s, %i.", GetHouseZone(houseid), houseid);
	PlayerInfo[playerid][pSpawnType] = HouseInfo[houseid][hID];
	return 1;
}

Dialog:StartJackingLock(playerid, response, listitem, inputtext[])
{
	new vehicle = JackingVehicle[playerid];
    JackingVehicle[playerid] = 0;
	if(!response)
		return 1;

	if(vehicle == 0 || GetNearVehicle(playerid, 3.0, vehicle) == 0)
	    return SendErrorMessage(playerid, "Trebuie sa fii langa vehicul.");

	if(!VehicleInfo[vehicle][carLocked])
		return SendErrorMessage(playerid, "Portierele sunt descuiate.");

	if(-1 == IsPlayerHasItem(playerid, INV_TOOLS))
	    return SendErrorMessage(playerid, "Nu ai cu ce sparge incuietoarea.");

    RemovePlayerItem(playerid, INV_TOOLS, 1);
	FreezePlayer(playerid);

    new mes[128];
	format(mes, sizeof(mes), "incearca sa sparga incuietoarea vehiculului %s.", VehicleNames[GetVehicleModel(vehicle)-400]);
	cmd::me(playerid, mes);

	PlaySound(playerid, 1138);
	AlarmOn(vehicle);
	JackingVehicle[playerid] = vehicle;
	JackingLock[playerid] = (VehicleInfo[vehicle][carLock]+1) * 60;
	return 1;
}

Dialog:StartJackingEngine(playerid, response, listitem, inputtext[])
{
	if(!response)
		return 1;

    new vehicle = GetPlayerVehicleID(playerid);
    if(vehicle == 0 || !IsDriver(playerid))
    	return SCM(playerid, COLOR_LIGHTRED, "Trebuie sa fii langa portiera soferului.");

	if(VehicleInfo[vehicle][carOwnerID] == 0)
    	return SendErrorMessage(playerid, "Poti sparge doar incuietoarea vehiculelor personale.");

	if(JackingEngine[playerid] != 0)
		return SCM(playerid, COLOR_INFO, "Daca doresti sa te opresti, foloseste '/stop'.");

	if(VehicleInfo[vehicle][carEngineOn])
		return SendErrorMessage(playerid, "Motorul este deja pornit.");

    if(VehicleInfo[vehicle][carFuel] == 0)
		return SCM(playerid, COLOR_LIGHTRED, "Rezervorul este gol. Vehiculul nu are combustibil.");

	if(GetPVarInt(playerid, #vehicle_upgrade_timer) > 0)
		return SCM(playerid, COLOR_LIGHTRED,"Motorul nu poate fi pornit.");

    if(-1 == IsPlayerHasItem(playerid, INV_TOOLS))
		return SendErrorMessage(playerid, "Nu ai nimic cu care sa pornesti motorul.");

    RemovePlayerItem(playerid, INV_TOOLS, 1);
	FreezePlayer(playerid);

	new mes[128];
	format(mes, sizeof(mes), "incearca sa porneasca motorul vehiculului %s.", VehicleNames[GetVehicleModel(vehicle)-400]);
	cmd::me(playerid, mes);

    PlaySound(playerid, 1138);
	AlarmOn(vehicle);
	JackingEngine[playerid] = (VehicleInfo[vehicle][carImmob]+1) * 20;
	return 1;
}

Dialog:ConfingPizza(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return 1;

    new bizid;

	if ((bizid = GetNearBizInside(playerid)) == -1)
		return SendErrorMessage(playerid, "Trebuie sa fii in interioriul afacerii.");

	if(BizInfo[bizid][bizOwnerID] != PlayerInfo[playerid][pID])
	    return SendErrorMessage(playerid, "Afacerea nu iti apartine.");

	if(listitem < 0 || listitem > 3)
	    return 1;

	new mes[128];

	new prod_name[4][32] =
	    {"Buster", "Double D-Luxe", "Full Rack", "Salad Meal"};

	format(mes, sizeof(mes), "{FFFFFF}Schimba pretul produsului #%i {AFAFAF}[%s, $%i]", listitem+1, prod_name[listitem], BizInfo[bizid][bizProductPrice][listitem]);
	Dialog_Show(playerid, ConfingPizzaEnd, DIALOG_STYLE_INPUT, "{33AA33}Configurare", mes, "Gata", "Anuleaza");
	SetPVarInt(playerid, "ConfingPizza", listitem + 1);
	return 1;
}
Dialog:ConfingPizzaEnd(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return 1;

    new bizid;

	if ((bizid = GetNearBizInside(playerid)) == -1)
		return SendErrorMessage(playerid, "Trebuie sa fii interiorul afacerii.");

	if(BizInfo[bizid][bizOwnerID] != PlayerInfo[playerid][pID])
	    return SendErrorMessage(playerid, "Afacerea nu iti apartine.");

	new money = strval(inputtext);
	listitem = GetPVarInt(playerid, "ConfingPizza");

	new prod_name[4][32] =
	    {"Buster", "Double D-Luxe", "Full Rack", "Salad Meal"};

	if(money < 5 || money > 50)
	{
	    new mes[128];
		format(mes, sizeof(mes), ""EMBED_RED"Valoarea trebuie sa fie de cel putin $5 si nu trebuie sa depaseasca $50.\n{FFFFFF}Schimba pretul produsului #%i {AFAFAF}[%s, $%i]", listitem, prod_name[listitem-1], BizInfo[bizid][bizProductPrice][listitem-1]);
		Dialog_Show(playerid, ConfingPizzaEnd, DIALOG_STYLE_INPUT, "{33AA33}Configurare", mes, "Gata", "Anuleaza");
		return 1;
	}
	BizInfo[bizid][bizProductPrice][listitem-1] = money;
	SendClientMessageEx(playerid,COLOR_WHITE,"Ai schimbat pretul produsului {FF6347}%s {FFFFFF}in {FF6347}$%i{FFFFFF}.",prod_name[listitem-1], BizInfo[bizid][bizProductPrice][listitem-1]);
	Save_Business(bizid);
	DeletePVar(playerid,"ConfingPizza");
	return 1;
}

Dialog:ConfingCluckin(playerid, response, listitem, inputtext[])
{
    if(!response)
	    return 1;

    new bizid;

	if ((bizid = GetNearBizInside(playerid)) == -1)
		return SendErrorMessage(playerid, "Trebuie sa fii in interiorul afacerii.");

	if(BizInfo[bizid][bizOwnerID] != PlayerInfo[playerid][pID])
	    return SendErrorMessage(playerid, "Afacerea nu iti apartine.");

	if(listitem < 0 || listitem > 3)
	    return 1;

	new mes[128];

	new prod_name[4][32] =
	    {"Meniu mic", "Meniu mare", "Meniu extra", "Meniu vegan"};

	format(mes, sizeof(mes), "{FFFFFF}Schimba pretul produsului #%i {AFAFAF}[%s, $%i]", listitem+1, prod_name[listitem], BizInfo[bizid][bizProductPrice][listitem]);
	Dialog_Show(playerid, ConfingCluckinEnd, DIALOG_STYLE_INPUT, "{33AA33}Configurare", mes, "Gata", "Anuleaza");
	SetPVarInt(playerid, "ConfingCluckin", listitem + 1);
	return 1;
}

Dialog:ConfingCluckinEnd(playerid, response, listitem, inputtext[])
{
    if(!response)
	    return 1;

    new bizid;

	if ((bizid = GetNearBizInside(playerid)) == -1)
		return SendErrorMessage(playerid, "Trebuie sa fii in interiorul afacerii.");

	if(BizInfo[bizid][bizOwnerID] != PlayerInfo[playerid][pID])
	    return SendErrorMessage(playerid, "Afacerea nu iti apartine.");

	new money = strval(inputtext);
	listitem = GetPVarInt(playerid, "ConfingCluckin");

	new prod_name[4][32] =
	    {"Meniu mic", "Meniu mare", "Meniu extra", "Meniu vegan"};

	if(money < 5 || money > 50)
	{
	    new mes[128];
		format(mes, sizeof(mes), ""EMBED_RED"Valoarea trebuie sa fie de cel putin $5 si nu trebuie sa depaseasca $50.\n{FFFFFF}Schimba pretul produsului #%i {AFAFAF}[%s, $%i]", listitem, prod_name[listitem-1], BizInfo[bizid][bizProductPrice][listitem-1]);
		Dialog_Show(playerid, ConfingCluckinEnd, DIALOG_STYLE_INPUT, "{33AA33}Configurare", mes, "Gata", "Anuleaza");
		return 1;
	}
	BizInfo[bizid][bizProductPrice][listitem-1] = money;
	SendClientMessageEx(playerid,COLOR_WHITE,"Ai schimbat pretul produsului {FF6347}%s {FFFFFF}in {FF6347}$%i{FFFFFF}.",prod_name[listitem-1], BizInfo[bizid][bizProductPrice][listitem-1]);
	Save_Business(bizid);
	DeletePVar(playerid,"ConfingCluckin");
	return 1;
}
Dialog:ConfingBurger(playerid, response, listitem, inputtext[])
{
    if(!response)
	    return 1;

    new bizid;

	if ((bizid = GetNearBizInside(playerid)) == -1)
		return SendErrorMessage(playerid, "Trebuie sa fii in interiorul afacerii.");

	if(BizInfo[bizid][bizOwnerID] != PlayerInfo[playerid][pID])
	    return SendErrorMessage(playerid, "Afacerea nu iti apartine.");

	if(listitem < 0 || listitem > 3)
	    return 1;

	new mes[128];

	new prod_name[4][32] =
	    {"Moo Kids Meal", "Beef Tower", "Meat Stack", "Salad Meal"};

	format(mes, sizeof(mes), "{FFFFFF}Schimba pretul produsului #%i {AFAFAF}[%s, $%i]", listitem+1, prod_name[listitem], BizInfo[bizid][bizProductPrice][listitem]);
	Dialog_Show(playerid, ConfingBurgerEnd, DIALOG_STYLE_INPUT, "{33AA33}Configurare", mes, "Gata", "Anuleaza");
	SetPVarInt(playerid, "ConfingBurger", listitem + 1);
	return 1;
}

Dialog:ConfingBurgerEnd(playerid, response, listitem, inputtext[])
{
    if(!response)
	    return 1;

    new bizid;

	if ((bizid = GetNearBizInside(playerid)) == -1)
		return SendErrorMessage(playerid, "Trebuie sa fii in interiorul afacerii.");

	if(BizInfo[bizid][bizOwnerID] != PlayerInfo[playerid][pID])
	    return SendErrorMessage(playerid, "Afacerea nu iti apartine.");

	new money = strval(inputtext);
	listitem = GetPVarInt(playerid, "ConfingBurger");

	new prod_name[4][32] =
	    {"Moo Kids Meal", "Beef Tower", "Meat Stack", "Salad Meal"};

	if(money < 5 || money > 50)
	{
	    new mes[128];
		format(mes, sizeof(mes), ""EMBED_RED"Valoarea trebuie sa fie de cel putin $5 si nu trebuie sa depaseasca $50.\n{FFFFFF}Schimba pretul produsului #%i {AFAFAF}[%s, $%i]", listitem, prod_name[listitem-1], BizInfo[bizid][bizProductPrice][listitem-1]);
		Dialog_Show(playerid, ConfingBurgerEnd, DIALOG_STYLE_INPUT, "{33AA33}Configurare", mes, "Gata", "Anuleaza");
		return 1;
	}
	BizInfo[bizid][bizProductPrice][listitem-1] = money;
	SendClientMessageEx(playerid,COLOR_WHITE,"Ai schimbart pretul produsului {FF6347}%s {FFFFFF}in {FF6347}$%i{FFFFFF}.",prod_name[listitem-1], BizInfo[bizid][bizProductPrice][listitem-1]);
	Save_Business(bizid);
	DeletePVar(playerid,"ConfingBurger");
	return 1;
}

Dialog:ConfingPonchik(playerid, response, listitem, inputtext[])
{
    if(!response)
	    return 1;

    new bizid;

	if ((bizid = GetNearBizInside(playerid)) == -1)
		return SendErrorMessage(playerid, "Trebuie sa fii in interiorul afacerii.");

	if(BizInfo[bizid][bizOwnerID] != PlayerInfo[playerid][pID])
	    return SendErrorMessage(playerid, "Afacerea nu iti apartine.");

	if(listitem < 0 || listitem > 2)
	    return 1;

	new mes[128];

	new prod_name[3][32] =
	    {"Portie mica", "Portie medie", "Portie mare"};

	format(mes, sizeof(mes), "{FFFFFF}Schimba pretul produsului #%i {AFAFAF}[%s, $%i]", listitem+1, prod_name[listitem], BizInfo[bizid][bizProductPrice][listitem]);
	Dialog_Show(playerid, ConfingPonchikEnd, DIALOG_STYLE_INPUT, "{33AA33}Configurare", mes, "Gata", "Anuleaza");
	SetPVarInt(playerid, "ConfingPonchik", listitem + 1);
	return 1;
}
Dialog:ConfingPonchikEnd(playerid, response, listitem, inputtext[])
{
    if(!response)
	    return 1;

    new bizid;

	if ((bizid = GetNearBizInside(playerid)) == -1)
		return SendErrorMessage(playerid, "Trebuie sa fii in interiorul afacerii.");

	if(BizInfo[bizid][bizOwnerID] != PlayerInfo[playerid][pID])
	    return SendErrorMessage(playerid, "Afacerea nu iti apartine.");

	new money = strval(inputtext);
	listitem = GetPVarInt(playerid, "ConfingPonchik");

	new prod_name[3][32] =
	    {"Portie mica", "Portie medie", "Portie mare"};

	if(money < 5 || money > 50)
	{
	    new mes[128];
		format(mes, sizeof(mes), ""EMBED_RED"Valoarea trebuie sa fie de cel putin $5 si nu trebuie sa depaseasca $50.\n{FFFFFF}Schimba pretul produsului #%i {AFAFAF}[%s, $%i]", listitem, prod_name[listitem-1], BizInfo[bizid][bizProductPrice][listitem-1]);
		Dialog_Show(playerid, ConfingPonchikEnd, DIALOG_STYLE_INPUT, "{33AA33}Configurare", mes, "Gata", "Anuleaza");
		return 1;
	}
	BizInfo[bizid][bizProductPrice][listitem-1] = money;
	SendClientMessageEx(playerid,COLOR_WHITE,"Ai schimbart pretul produsului {FF6347}%s {FFFFFF}in {FF6347}$%i{FFFFFF}.",prod_name[listitem-1], BizInfo[bizid][bizProductPrice][listitem-1]);
	Save_Business(bizid);
	DeletePVar(playerid,"ConfingPonchik");
	return 1;
}
Dialog:Clothing(playerid, response, listitem, inputtext[])
{
	if(!response)
		return 1;

	new string[128],
	    count;

	for(new i = 0; i < MAX_PLAYER_ATTACH; i++)
	{
	    if(AttachInfo[playerid][i][aID] == 0) continue;
		if(count == listitem)
		{
		    listitem = i;
		    break;
		}
		count++;
	}

	SetPVarInt(playerid, #edit_slot_attach, listitem);

	format(string, sizeof(string), "%s\nEditeaza obiectul\nSterge obiectul", (AttachInfo[playerid][listitem][aUsed]) ? ("Sterge obiectul") : ("Ataseaza obiectul"));
	Dialog_Show(playerid, Clothing1, DIALOG_STYLE_LIST, AttachInfo[playerid][listitem][aName], string, "Alege", "Inchide");
	return 1;
}

Dialog:Clothing1(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return 1;

    new slot = GetPVarInt(playerid, #edit_slot_attach);

	switch(listitem)
	{
		case 0:
		{
			if(IsPlayerAttachedObjectSlotUsed(playerid, slot))
			{
				InfoMSG(playerid, "", 5);
				RemovePlayerAttachedObject(playerid, slot);
				AttachInfo[playerid][slot][aUsed] = 0;

				new query[128];
				mysql_format(dbHandle, query, sizeof(query), "UPDATE `player_attach` SET `used`=0 WHERE `id` = %i", AttachInfo[playerid][slot][aID]);
				mysql_tquery(dbHandle, query);
			}
			else
			{
				InfoMSG(playerid, "", 5);
				AttachInfo[playerid][slot][aUsed] = 1;
				SetPlayerAttachedObject(playerid, slot, AttachInfo[playerid][slot][aModel], AttachInfo[playerid][slot][aBone], AttachInfo[playerid][slot][aOffsetX], AttachInfo[playerid][slot][aOffsetY], AttachInfo[playerid][slot][aOffsetZ], AttachInfo[playerid][slot][aRotX], AttachInfo[playerid][slot][aRotY], AttachInfo[playerid][slot][aRotZ], AttachInfo[playerid][slot][aScaleX], AttachInfo[playerid][slot][aScaleY], AttachInfo[playerid][slot][aScaleZ]);

                new query[128];
				mysql_format(dbHandle, query, sizeof(query), "UPDATE `player_attach` SET `used`=1 WHERE `id` = %i", AttachInfo[playerid][slot][aID]);
				mysql_tquery(dbHandle, query);
			}
			cmd::clothing(playerid, "");
		}
		case 1:
		{
			if(!IsPlayerAttachedObjectSlotUsed(playerid, slot))
				return SendErrorMessage(playerid, "");

			if(GetPVarInt(playerid, #edit_attach) == 1)
				return SendErrorMessage(playerid, "Editezi deja un obiect.");

            Dialog_Show(playerid, SelectEditBone, DIALOG_STYLE_LIST, "Partile corpului","- Nu schimba\n1: Spate\n2: Cap\n3: Brat stang\n4: Umar drept\n5: Mana stanga\n6: Mana dreapta\n7: Sold stang\n8: Coapsa dreapta\n9: Picior stang\n10: Picior drept\n11: Gamba dreapta\n12: Gamba stanga\n13: Antebrat stang\n14: Antebrat drept\n15: Clavicula stanga\n16: Clavicula dreapta\n17: Gat\n18: Maxilar","Alege","Anuleaza");
		}
		case 2:
		{
			InfoMSG(playerid, "", 5);
			RemovePlayerAttachFromSlot(playerid, slot);
		}
	}
	return 1;
}
Dialog:ShowTrace(playerid, response, listitem, inputtext[])
{
	if(pTemp[playerid][pTraceStage] < 7)
	{
		Dialog_Show(playerid, None, DIALOG_STYLE_MSGBOX, "{33AA33}Sistem de urmarire", "{B4B5B7}Sunteti deconectat de la sistemul de urmarire.", "OK", "");
		if(pTemp[playerid][pTraceGZ] != -1)
			GangZoneDestroy(pTemp[playerid][pTraceGZ]);
 		pTemp[playerid][pTraceGZ] = -1;

		pTemp[playerid][pTracePlayer] = INVALID_PLAYER_ID;
 		pTemp[playerid][pTraceStage] = 0;
	}
	return 1;
}
//==================
Dialog:ComputerStore(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return 1;

	if(listitem == 0)
	{
	    if(GetCash(playerid) < SIGNADSPRICE)
			return SendNotCash(playerid);

        if(GivePlayerItem(playerid, INV_SIGN, 1) == -1)
			return SendErrorMessage(playerid, "Nu ai loc in inventar.");

		GiveCash(playerid, - SIGNADSPRICE);

		SCM(playerid, COLOR_GRAD4, "");
		SCM(playerid, COLOR_WHITE, "HINT: /carsign, /remove_carsign");
	    return 1;
	}

	new phone_names[5][20] =
		{"negru", "albastru", "rosu", "verde", "alb"};

    if(PlayerInfo[playerid][pPhoneModel] == listitem-1)
		return SCM(playerid, COLOR_GRAD4, "Ai deja acest tip de telefon!");

	if(GetCash(playerid) < MOBILEMODELPRICE)
		return SendNotCash(playerid);

	GiveCash(playerid, - MOBILEMODELPRICE);

	if(!PlayerInfo[playerid][pNumber])
	    PlayerInfo[playerid][pNumber] = randomEx(123456, 999999);

	PlayerInfo[playerid][pPhoneModel] = listitem-1;
	SendClientMessageEx(playerid, COLOR_GRAD4, "Ai cumparat un telefon %s.", phone_names[listitem-1]);
	return 1;
}

Dialog:AdminTeles(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return 1;

	new index;

    for(new i = 0; i < MAX_INTERIORS; i++)
	{
		if(0 == AdminTeles[i][telesOn] || 3 != AdminTeles[i][telesType])
			continue;

		if(index == listitem)
		{
		    index = i;
		    break;
		}
		index++;
	}

	SetPlayerPosEx(playerid, AdminTeles[index][telesPosX], AdminTeles[index][telesPosY], AdminTeles[index][telesPosZ]);
	SetInterior(playerid, AdminTeles[index][telesInt]);
	return 1;
}

Dialog:ChangeHouseInterior(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return 1;

	new index,
		houseid = GetPVarInt(playerid, "house_change");

    if(houseid < 0 || houseid > MAX_HOUSES || 0 == HouseInfo[houseid][hID])
		return SCM(playerid, COLOR_LIGHTRED, "Acel ID nu apartine unei case existente.");

    for(new i = 0; i < MAX_INTERIORS; i++)
	{
		if(0 == AdminTeles[i][telesOn] || HouseInfo[houseid][hClass] != AdminTeles[i][telesType])
			continue;

		if(index == listitem)
		{
		    index = i;
		    break;
		}
		index++;
	}

	SetHouseInterior(houseid, index);
	SendClientMessageEx(playerid, COLOR_GREEN,"ID Casa: %i - Interior: %s", houseid,AdminTeles[index][telesMapName]);
	return 1;
}

Dialog:ChangeBizInterior(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return 1;

	new index,
		bizid = GetPVarInt(playerid, "biz_change");

    if(bizid < 0 || bizid > MAX_BIZ-1 || 0 == BizInfo[bizid][bizID])
		return SendErrorMessage(playerid,"Acel ID nu apartine unei afaceri existente.");

    for(new i = 0; i < MAX_INTERIORS; i++)
	{
		if(0 == AdminTeles[i][telesOn] || 4 != AdminTeles[i][telesType])
			continue;

		if(index == listitem)
		{
		    index = i;
		    break;
		}
		index++;
	}

	SetBizInterior(playerid, bizid, index);
	return 1;
}

Dialog:ChangeFight(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return 1;

	AMSG(COLOR_LIGHTRED, "(Admin Info) {FFFFFF}%s a schimbat stilul de lupta al lui %s in: %s.", GetAccName(playerid), GetNameEx(GetPVarInt(playerid, "ChangeFightTo")), fight_name[listitem]);

	SendErrorMessage(GetPVarInt(playerid, "ChangeFightTo"), "Stilul tau de lupta a fost schimbat in %s de catre moderatorul %s.", fight_name[listitem], GetAccName(playerid));

	SetPlayerFightingStyle(GetPVarInt(playerid, "ChangeFightTo"), fight_id[listitem]);
	PlayerInfo[GetPVarInt(playerid, "ChangeFightTo")][pFightStyle] = fight_id[listitem];
	DeletePVar(playerid, "ChangeFightTo");
	return 1;
}

Dialog:Login(playerid, response, listitem, inputtext[])
{
	if (!response)
	{
	    SendServerMessage(playerid, "Ai parasit serverul.");
  		KickEx(playerid);
	    return 1;
	}

	if(isnull(inputtext))
	{
		static const str_size[] = "{FFFFFF}Bine ai venit, {BFC0C2}%s\n{FFFFFF}Contul tau a fost gasit in baza de date, autentifica-te folosind parola.\n{FF6347}Ai 60 de secunde la dispozitie.";
	    new mes[sizeof(str_size) - 2 + MAX_PLAYER_NAME + 1];
	    format(mes, sizeof(mes), str_size, GetAccName(playerid));
		Dialog_Show(playerid, Login, DIALOG_STYLE_PASSWORD, "{ffffff}Bine ai venit pe Trw Roleplay", mes, "Autentifica-te", "Renunta");
		return 1;
	}

	new query[128 + 129],
	    buf[129];

	WP_Hash(buf, sizeof (buf), inputtext);

	mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `accounts` WHERE `id` = '%i' AND `password`='%e'", PlayerInfo[playerid][pAccID], buf);
	mysql_tquery(dbHandle, query, "LoginPlayer", "i", playerid);
	return 1;
}

Dialog:ConfirmWord(playerid, response, listitem, inputtext[])
{
	if(!response || isnull(inputtext))
	{
		Dialog_Show(playerid, ConfirmWord, DIALOG_STYLE_PASSWORD, "{FF8282}[Google Authenticator]", "{B4B5B7}Te-ai autentificat cu o adresa IP necunoscuta.\nIntrodu codul primit in Authenticator pentru a ne asigura ca tu esti proprietarul contului.", "Inainte", "");
		return 1;
	}

    if(strval(inputtext) != GoogleAuthenticatorCode(PlayerInfo[playerid][pGoogle], gettime()))
    {
        if(pTemp[playerid][pLoggedTry]++ >= 2)
		{
		    SendErrorMessage(playerid, "Ai introdus codul gresit de 3 ori.");
			KickEx(playerid);
			return 1;
		}
		SendErrorMessage(playerid, "Codul introdus este incorect.");
		Dialog_Show(playerid, ConfirmWord, DIALOG_STYLE_PASSWORD, "{FF8282}[Google Authenticator]", "{B4B5B7}Te-ai logat cu o adresa IP necunoscuta.\nFoloseste aplicatia Google Authentificator.", "Ok", "");
        return 1;
    }
    static const str_size[] = "{FFFFFF}Bine ai venit, {BFC0C2}%s\n{FFFFFF}Contul tau a fost gasit in baza de date, autentifica-te cu parola.\n{FF6347}Ai 60 de secunde la dispozitie.";
    new mes[sizeof(str_size) - 2 + MAX_PLAYER_NAME + 1];
    format(mes, sizeof(mes), str_size, GetAccName(playerid));
	Dialog_Show(playerid, Login, DIALOG_STYLE_PASSWORD, "{ffffff}Welcome to Los Santos Life", mes, "?????", "?????");
	//
	pTemp[playerid][pLoggedTime] = 0;
	pTemp[playerid][pLoggedTry] = 0;
	return 1;
}

Dialog:ChangePass(playerid, response, listitem, inputtext[])
{
	if(!response)
		return 1;

	if(isnull(inputtext) || strlen(inputtext) < 6 || strlen(inputtext) > 64)
	{
		Dialog_Show(playerid, ChangePass, DIALOG_STYLE_PASSWORD, "Schimbare parola", "Introdu vechea parola:", "Inainte", "Anuleaza");
		return 1;
	}

	new query[128 + 129],
	   	buf[129];

	WP_Hash(buf, sizeof (buf), inputtext);

	mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `accounts` WHERE `id`='%i' AND `password`='%e'", PlayerInfo[playerid][pAccID], buf);
	mysql_tquery(dbHandle, query, "OnPlayerChangePass", "i", playerid);
	return 1;
}

Dialog:ChangePass2(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return 1;

    if(strlen(inputtext) < 6 || strlen(inputtext) > 32)
    {
        Dialog_Show(playerid, ChangePass2, DIALOG_STYLE_PASSWORD, "Schimbare parola", "Introdu noua parola:", "Schimba", "Anuleaza");
		return SCM(playerid, COLOR_LIGHTRED, "Parola este prea scurta sau prea lunga! (interval permis: 6-32 caractere)");
	}

	for(new i = 0; i < strlen(inputtext); i++)
	{
		switch(inputtext[i])
		{
			case '!', '@', '#', '$','%','^','&','*','(',')','_','+','=','|','[',']','{','}','-','.','`','~','<','>','?',',','/':
			{
			    Dialog_Show(playerid, ChangePass2, DIALOG_STYLE_PASSWORD, "Schimbare parola", "Introdu noua parola:", "Schimba", "Anuleaza");
				return SCM(playerid, COLOR_LIGHTRED, "Ai folosit unul sau mai multe caractere nepermise in parola ta.");
			}
			default: continue;
		}
	}

	new query[128 + 129],
	    buf[129];

	WP_Hash(buf, sizeof (buf), inputtext);

	mysql_format(dbHandle, query, sizeof(query), "UPDATE `accounts` SET `password`='%e' WHERE `id` = '%i'", buf, PlayerInfo[playerid][pAccID]);
	mysql_tquery(dbHandle, query);

	SendClientMessageEx(playerid, COLOR_WHITE, "Noua ta parola este: %s.", inputtext);
	return 1;
}

Dialog:Teles(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return 1;

	switch(listitem)
	{
		case 0:
		{
			SetPlayerPosEx(playerid, -25.884498,-185.868988,1003.546875);
			SetInterior(playerid, 17);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}24/7 1");
			return 1;
		}
		case 1:
		{
			SetPlayerPosEx(playerid, 6.091179,-29.271898,1003.549438);
			SetInterior(playerid, 10);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}24/7 2");
			return 1;
		}
		case 2:
		{
			SetPlayerPosEx(playerid, -30.946699,-89.609596,1003.546875);
			SetInterior(playerid, 18);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}24/7 3");
			return 1;
		}
		case 3:
		{
			SetPlayerPosEx(playerid, -25.132598,-139.066986,1003.546875);
			SetInterior(playerid, 16);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}24/7 4");
			return 1;
		}
		case 4:
		{
			SetPlayerPosEx(playerid, -27.312299,-29.277599,1003.557250);
			SetInterior(playerid, 4);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}24/7 5");
			return 1;
		}
		case 5:
		{
			SetPlayerPosEx(playerid, -26.691598,-55.714897,1003.546875);
			SetInterior(playerid, 6);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}24/7 6");
			return 1;
		}
		case 6:
		{
			SetPlayerPosEx(playerid, -1827.147338,7.207417,1061.143554);
			SetInterior(playerid, 14);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}Airoport Ticket Desk");
			return 1;
		}
		case 7:
		{
			SetPlayerPosEx(playerid, -1861.936889,54.908092,1061.143554);
			SetInterior(playerid, 14);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}Airoport Baggage Reclaim");
			return 1;
		}
		case 8:
		{
			SetPlayerPosEx(playerid, 1.808619,32.384357,1199.593750);
			SetInterior(playerid, 1);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}Shamal");
			return 1;
		}
		case 9:
		{
			SetPlayerPosEx(playerid, 315.745086,984.969299,1958.919067);
			SetInterior(playerid, 9);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}Andromada");
			return 1;
		}
		case 10:
		{
			SetPlayerPosEx(playerid, 286.148986,-40.644397,1001.515625);
			SetInterior(playerid, 1);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}Ammunation 1");
			return 1;
		}
		case 11:
		{
			SetPlayerPosEx(playerid, 286.800994,-82.547599,1001.515625);
			SetInterior(playerid, 4);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}Ammunation 2");
			return 1;
		}
		case 12:
		{
			SetPlayerPosEx(playerid, 296.919982,-108.071998,1001.515625);
			SetInterior(playerid, 6);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}Ammunation 3");
			return 1;
		}
		case 13:
		{
			SetPlayerPosEx(playerid, 314.820983,-141.431991,999.601562);
			SetInterior(playerid, 7);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}Ammunation 4");
			return 1;
		}
		case 14:
		{
			SetPlayerPosEx(playerid, 316.524993,-167.706985,999.593750);
			SetInterior(playerid, 6);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}Ammunation 5");
			return 1;
		}
		case 15:
		{
			SetPlayerPosEx(playerid, 302.292877,-143.139099,1004.062500);
			SetInterior(playerid, 7);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}Ammunation Booths");
			return 1;
		}
		case 16:
		{
			SetPlayerPosEx(playerid, 298.507934,-141.647048,1004.054748);
			SetInterior(playerid, 7);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}Ammunation Range");
			return 1;
		}
		case 17:
		{
			SetPlayerPosEx(playerid, 1038.531372,0.111030,1001.284484);
			SetInterior(playerid, 3);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}Blastin Fools Hallway");
			return 1;
		}
		case 18:
		{
			SetPlayerPosEx(playerid, 444.646911,508.239044,1001.419494);
			SetInterior(playerid, 12);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}Budget Inn Motel Room");
			return 1;
		}
		case 19:
		{
			SetPlayerPosEx(playerid, 2215.454833,-1147.475585,1025.796875);
			SetInterior(playerid, 15);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}Jefferson Motel");
			return 1;
		}
		case 20:
		{
			SetPlayerPosEx(playerid, 833.269775,10.588416,1004.179687);
			SetInterior(playerid, 3);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}Off Track Betting Shop");
			return 1;
		}
		case 21:
		{
			SetPlayerPosEx(playerid, -103.559165,-24.225606,1000.718750);
			SetInterior(playerid, 3);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}Sex Shop");
			return 1;
		}
		case 22:
		{
			SetPlayerPosEx(playerid, 963.418762,2108.292480,1011.030273);
			SetInterior(playerid, 1);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}Meat Factory");
			return 1;
		}
		case 23:
		{
			SetPlayerPosEx(playerid, -2240.468505,137.060440,1035.414062);
			SetInterior(playerid, 6);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}Zero's RC Shop");
			return 1;
		}
		case 24:
		{
			SetPlayerPosEx(playerid, 663.836242,-575.605407,16.343263);
			SetInterior(playerid, 0);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat la: {FFFFFF}Dillmore Gas Station");
			return 1;
		}
		case 25:
		{
			SetPlayerPosEx(playerid, 2169.461181,1618.798339,999.976562);
			SetInterior(playerid, 1);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}Catigula's Basement");
			return 1;
		}
		case 26:
		{
			SetPlayerPosEx(playerid, 1889.953369,1017.438293,31.882812);
			SetInterior(playerid, 10);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}FDC Janitors Room");
			return 1;
		}
		case 27:
		{
			SetPlayerPosEx(playerid, -2159.122802,641.517517,1052.381713);
			SetInterior(playerid, 1);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}Woozie's Office");
			return 1;
		}
		case 28:
		{
			SetPlayerPosEx(playerid, 207.737991,-109.019996,1005.132812);
			SetInterior(playerid, 15);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}Binco");
			return 1;
		}
		case 29:
		{
			SetPlayerPosEx(playerid, 204.332992,-166.694992,1000.523437);
			SetInterior(playerid, 14);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}Didier Sachs");
			return 1;
		}
		case 30:
		{
			SetPlayerPosEx(playerid, 207.054992,-138.804992,1003.507812);
			SetInterior(playerid, 3);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}Prolaps");
			return 1;
		}
		case 31:
		{
			SetPlayerPosEx(playerid, 203.777999,-48.492397,1001.804687);
			SetInterior(playerid, 1);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}Suburban");
			return 1;
		}
		case 32:
		{
			SetPlayerPosEx(playerid, 226.293991,-7.431529,1002.210937);
			SetInterior(playerid, 5);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}Victim");
			return 1;
		}
		case 33:
		{
			SetPlayerPosEx(playerid, 161.391006,-93.159156,1001.804687);
			SetInterior(playerid, 18);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}ZIP");
			return 1;
		}
		case 34:
		{
			SetPlayerPosEx(playerid, 493.390991,-22.722799,1000.679687);
			SetInterior(playerid, 17);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}Alhambra");
			return 1;
		}
		case 35:
		{
			SetPlayerPosEx(playerid, 501.980987,-69.150199,998.757812);
			SetInterior(playerid, 11);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}Ten Green Bottles");
			return 1;
		}
		case 36:
		{
			SetPlayerPosEx(playerid, -227.027999,1401.229980,27.765625);
			SetInterior(playerid, 18);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}Lil' Probe Inn");
			return 1;
		}
		case 37:
		{
			SetPlayerPosEx(playerid, 457.304748,-88.428497,999.554687);
			SetInterior(playerid, 4);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}Jay's Dinner");
			return 1;
		}
		case 38:
		{
			SetPlayerPosEx(playerid, 454.973937,-110.104995,1000.077209);
			SetInterior(playerid, 5);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}Gant Bridge Dinner");
			return 1;
		}
		case 39:
		{
			SetPlayerPosEx(playerid, 435.271331,-80.958938,999.554687);
			SetInterior(playerid, 4);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}Secret Valley Dinner");
			return 1;
		}
		case 40:
		{
			SetPlayerPosEx(playerid, 452.489990,-18.179698,1001.132812);
			SetInterior(playerid, 1);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}World of Coq");
			return 1;
		}
		case 41:
		{
			SetPlayerPosEx(playerid, 681.557861,-455.680053,-25.609874);
			SetInterior(playerid, 1);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}Welcome Pump");
			return 1;
		}
		case 42:
		{
			SetPlayerPosEx(playerid, 375.962463,-65.816848,1001.507812);
			SetInterior(playerid, 10);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}Burger Shot");
			return 1;
		}
		case 43:
		{
			SetPlayerPosEx(playerid, 369.579528,-4.487294,1001.858886);
			SetInterior(playerid, 9);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}Clucking' Bell");
			return 1;
		}
		case 44:
		{
			SetPlayerPosEx(playerid, 373.825653,-117.270904,1001.499511);
			SetInterior(playerid, 5);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}Well Stacked Pizza");
			return 1;
		}
		case 45:
		{
			SetPlayerPosEx(playerid, 381.169189,-188.803024,1000.632812);
			SetInterior(playerid, 17);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}Jimmy's Sticky Ring");
			return 1;
		}
		case 46:
		{
			SetPlayerPosEx(playerid, 244.411987,305.032989,999.148437);
			SetInterior(playerid, 1);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}Denise Room");
			return 1;
		}
		case 47:
		{
			SetPlayerPosEx(playerid, 271.884979,306.631988,999.148437);
			SetInterior(playerid, 2);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}Katie Room");
			return 1;
		}
		case 48:
		{
			SetPlayerPosEx(playerid, 291.282989,310.031982,999.148437);
			SetInterior(playerid, 3);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}Helena Room");
			return 1;
		}
		case 49:
		{
			SetPlayerPosEx(playerid, 302.180999,300.722991,999.148437);
			SetInterior(playerid, 4);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}Michelle Room");
			return 1;
		}
		case 50:
		{
			SetPlayerPosEx(playerid, 322.197998,302.497985,999.148437);
			SetInterior(playerid, 5);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}Barbara Room");
			return 1;
		}
		case 51:
		{
			SetPlayerPosEx(playerid, 346.870025,309.259033,999.155700);
			SetInterior(playerid, 6);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}Millie Room");
			return 1;
		}
		case 52:
		{
			SetPlayerPosEx(playerid, -959.564392,1848.576782,9.000000);
			SetInterior(playerid, 17);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}Sherman Dam");
			return 1;
		}
		case 53:
		{
			SetPlayerPosEx(playerid, 384.808624,173.804992,1008.382812);
			SetInterior(playerid, 3);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}Planning Dept.");
			return 1;
		}
		case 54:
		{
			SetPlayerPosEx(playerid, 223.431976,1872.400268,13.734375);
			SetInterior(playerid, 0);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}Area 51");
			return 1;
		}
		case 55:
		{
			SetPlayerPosEx(playerid, 772.111999,-3.898649,1000.728820);
			SetInterior(playerid, 5);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}LS Gym");
			return 1;
		}
		case 56:
		{
			SetPlayerPosEx(playerid, 774.213989,-48.924297,1000.585937);
			SetInterior(playerid, 6);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}SF Gym");
			return 1;
		}
		case 57:
		{
			SetPlayerPosEx(playerid, 773.579956,-77.096694,1000.655029);
			SetInterior(playerid, 7);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}LV Gym");
			return 1;
		}
		case 58:
		{
			SetPlayerPosEx(playerid, 1527.229980,-11.574499,1002.097106);
			SetInterior(playerid, 3);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}B Dup's House");
			return 1;
		}
		case 59:
		{
			SetPlayerPosEx(playerid, 1523.509887,-47.821197,1002.130981);
			SetInterior(playerid, 2);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}B Dup's Crack Pad");
			return 1;
		}
		case 60:
		{
			SetPlayerPosEx(playerid, 2496.049804,-1695.238159,1014.742187);
			SetInterior(playerid, 3);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}CJ's House");
			return 1;
		}
		case 61:
		{
			SetPlayerPosEx(playerid, 1267.663208,-781.323242,1091.906250);
			SetInterior(playerid, 5);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}Madd Dogg's Mansion");
			return 1;
		}
		case 62:
		{
			SetPlayerPosEx(playerid, 513.882507,-11.269994,1001.565307);
			SetInterior(playerid, 3);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}OG Loc's House");
			return 1;
		}
		case 63:
		{
			SetPlayerPosEx(playerid, 2454.717041,-1700.871582,1013.515197);
			SetInterior(playerid, 2);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}Ryder's House");
			return 1;
		}
		case 64:
		{
			SetPlayerPosEx(playerid, 2527.654052,-1679.388305,1015.498596);
			SetInterior(playerid, 1);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}Sweet's House");
			return 1;
		}
		case 65:
		{
			SetPlayerPosEx(playerid, 2543.462646,-1308.379882,1026.728393);
			SetInterior(playerid, 2);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}Crack Factory");
			return 1;
		}
		case 66:
		{
			SetPlayerPosEx(playerid, 1212.019897,-28.663099,1000.953125);
			SetInterior(playerid, 3);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}Big Spread Ranch");
			return 1;
		}
		case 67:
		{
			SetPlayerPosEx(playerid, 761.412963,1440.191650,1102.703125);
			SetInterior(playerid, 6);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}Fanny Batters");
			return 1;
		}
		case 68:
		{
			SetPlayerPosEx(playerid, 1204.809936,-11.586799,1000.921875);
			SetInterior(playerid, 2);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}Strip Club");
			return 1;
		}
		case 69:
		{
			SetPlayerPosEx(playerid, 1204.809936,13.897239,1000.921875);
			SetInterior(playerid, 2);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}Strip Club Private Room");
			return 1;
		}
		case 70:
		{
			SetPlayerPosEx(playerid, 942.171997,-16.542755,1000.929687);
			SetInterior(playerid, 3);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}Unnamed Brothel");
			return 1;
		}
		case 71:
		{
			SetPlayerPosEx(playerid, 964.106994,-53.205497,1001.124572);
			SetInterior(playerid, 3);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}Tiger Skin Brothel");
			return 1;
		}
		case 72:
		{
			SetPlayerPosEx(playerid, -2640.762939,1406.682006,906.460937);
			SetInterior(playerid, 3);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}Pleasure Domes");
			return 1;
		}
		case 73:
		{
			SetPlayerPosEx(playerid, -729.276000,503.086944,1371.971801);
			SetInterior(playerid, 1);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}Liberty City Outside");
			return 1;
		}
		case 74:
		{
			SetPlayerPosEx(playerid, -794.806396,497.738037,1376.195312);
			SetInterior(playerid, 1);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}Liberty City Inside");
			return 1;
		}
		case 75:
		{
			SetPlayerPosEx(playerid, 	2350.339843,-1181.649902,1027.976562);
			SetInterior(playerid, 5);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}Gang House");
			return 1;
		}
		case 76:
		{
			SetPlayerPosEx(playerid, 2807.619873,-1171.899902,1025.570312);
			SetInterior(playerid, 8);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}Colonel Furhberger's House");
			return 1;
		}
		case 77:
		{
			SetPlayerPosEx(playerid, 318.564971,1118.209960,1083.882812);
			SetInterior(playerid, 5);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}Crack Den");
			return 1;
		}
		case 78:
		{
			SetPlayerPosEx(playerid, 1412.639892,-1.787510,1000.924377);
			SetInterior(playerid, 1);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}Warehouse 1");
			return 1;
		}
		case 79:
		{
			SetPlayerPosEx(playerid, 1302.519897,-1.787510,1001.028259);
			SetInterior(playerid, 18);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}Warehouse 2");
			return 1;
		}
		case 80:
		{
			SetPlayerPosEx(playerid, 2522.000000,-1673.383911,14.866223);
			SetInterior(playerid, 0);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}Sweet's Garage");
			return 1;
		}
		case 81:
		{
			SetPlayerPosEx(playerid, -221.059051,1408.984008,27.773437);
			SetInterior(playerid, 18);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}Lil' Probe Inn Toilet");
			return 1;
		}
		case 82:
		{
			SetPlayerPosEx(playerid, 2324.419921,-1145.568359,1050.710083);
			SetInterior(playerid, 12);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}Unused Safe House");
			return 1;
		}
		case 83:
		{
			SetPlayerPosEx(playerid, -975.975708,1060.983032,1345.671875);
			SetInterior(playerid, 10);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}RC Battlefield");
			return 1;
		}
		case 84:
		{
			SetPlayerPosEx(playerid, 411.625976,-21.433298,1001.804687);
			SetInterior(playerid, 2);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}Barber 1");
			return 1;
		}
		case 85:
		{
			SetPlayerPosEx(playerid, 418.652984,-82.639793,1001.804687);
			SetInterior(playerid, 3);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}Barber 2");
			return 1;
		}
		case 86:
		{
			SetPlayerPosEx(playerid, 412.021972,-52.649898,1001.898437);
			SetInterior(playerid, 12);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}Barber 3");
			return 1;
		}
		case 87:
		{
			SetPlayerPosEx(playerid, -204.439987,-26.453998,1002.273437);
			SetInterior(playerid, 16);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}Tatoo Parlour 1");
			return 1;
		}
		case 88:
		{
			SetPlayerPosEx(playerid, -204.439987,-8.469599,1002.273437);
			SetInterior(playerid, 17);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}Tatoo Parlour 2");
			return 1;
		}
		case 89:
		{
			SetPlayerPosEx(playerid, -204.439987,-43.652496,1002.273437);
			SetInterior(playerid, 3);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}Tatoo Parlour 3");
			return 1;
		}
		case 90:
		{
			SetPlayerPosEx(playerid, 246.783996,63.900199,1003.640625);
			SetInterior(playerid, 6);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}LS Police HQ");
			return 1;
		}
		case 91:
		{
			SetPlayerPosEx(playerid, 246.375991,109.245994,1003.218750);
			SetInterior(playerid, 10);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}SF police HQ");
			return 1;
		}
		case 92:
		{
			SetPlayerPosEx(playerid, 288.745971,169.350997,1007.171875);
			SetInterior(playerid, 3);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}LV police HQ");
			return 1;
		}
		case 93:
		{
			SetPlayerPosEx(playerid, -2029.798339,-106.675910,1035.171875);
			SetInterior(playerid, 3);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}Car School");
			return 1;
		}
		case 94:
		{
			SetPlayerPosEx(playerid, -1398.065307,-217.028900,1051.115844);
			SetInterior(playerid, 7);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}8-Track");
			return 1;
		}
		case 95:
		{
			SetPlayerPosEx(playerid, -1398.103515,937.631164,1036.479125);
			SetInterior(playerid, 15);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}Bloodbowl");
			return 1;
		}
		case 96:
		{
			SetPlayerPosEx(playerid, -1444.645507,-664.526000,1053.572998);
			SetInterior(playerid, 4);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}Dirt Track");
			return 1;
		}
		case 97:
		{
			SetPlayerPosEx(playerid, -1465.268676,1557.868286,1052.531250);
			SetInterior(playerid, 14);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}Kickstart");
			return 1;
		}
		case 98:
		{
			SetPlayerPosEx(playerid, -1401.829956,107.051300,1032.273437);
			SetInterior(playerid, 1);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}Vice Stadium");
			return 1;
		}
		case 99:
		{
			SetPlayerPosEx(playerid, -1790.378295,1436.949829,7.187500);
			SetInterior(playerid, 0);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}SF Garage");
			return 1;
		}
		case 100:
		{
			SetPlayerPosEx(playerid, 1643.839843,-1514.819580,13.566620);
			SetInterior(playerid, 0);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}LS Garage");
			return 1;
		}
		case 101:
		{
			SetPlayerPosEx(playerid, -1685.636474,1035.476196,45.210937);
			SetInterior(playerid, 0);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}SF Bomb Shop");
			return 1;
		}
		case 102:
		{
			SetPlayerPosEx(playerid, 76.632553,-301.156829,1.578125);
			SetInterior(playerid, 0);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}Blueberry Warehouse");
			return 1;
		}
		case 103:
		{
			SetPlayerPosEx(playerid, 1059.895996,2081.685791,10.820312);
			SetInterior(playerid, 0);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}LV Warehouse 1");
			return 1;
		}
		case 104:
		{
			SetPlayerPosEx(playerid, 1059.180175,2148.938720,10.820312);
			SetInterior(playerid, 0);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}LV Warehouse 2");
			return 1;
		}
		case 105:
		{
			SetPlayerPosEx(playerid, 2131.507812,1600.818481,1008.359375);
			SetInterior(playerid, 1);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}Catigula's Hidden Room");
			return 1;
		}
		case 106:
		{
			SetPlayerPosEx(playerid, 2315.952880,-1.618174,26.742187);
			SetInterior(playerid, 0);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}Bank");
			return 1;
		}
		case 107:
		{
			SetPlayerPosEx(playerid, 2319.714843,-14.838361,26.749565);
			SetInterior(playerid, 0);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}Bank - Behind Desk");
			return 1;
		}
		case 108:
		{
			SetPlayerPosEx(playerid, 1710.433715,-1669.379272,20.225049);
			SetInterior(playerid, 18);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}LS Atruim");
			return 1;
		}
		case 109:
		{
			SetPlayerPosEx(playerid, 1494.325195,1304.942871,1093.289062);
			SetInterior(playerid, 3);
			SendClientMessage(playerid, COLOR_GREY, "[TELEPORT] Ai fost teleportat in: {FFFFFF}Bike School");
			return 1;
		}
	}
	return 1;
}

Dialog:ScrapVehicleFaction(playerid, response, listitem, inputtext[])
{
	if(!response)
		return 1;

    if(PlayerInfo[playerid][pFaction] == 0)
    	return SendErrorMessage(playerid, "Nu faci parte dintr-o factiune.");

	if(Factions[PlayerInfo[playerid][pFaction]][fType] != FACTION_LEGAL)
		return SCM(playerid, COLOR_LIGHTRED, "Nu faci parte din factiunea potrivita.");

	new veh = PlayerInfo[playerid][pCarKey];
	if(!IsValidVehicle(veh))
		return SCM(playerid, COLOR_LIGHTRED, "Vehiculul nu este spawnat.");

	if(!IsPlayerInVehicle(playerid, veh))
		return SCM(playerid, COLOR_LIGHTRED, "Vehiculul nu iti apartine.");

	if(IsADonateModel(GetVehicleModel(veh)))
		return SCM(playerid, COLOR_LIGHTRED, "Nu poti face asta cu un vehicul de donator.");

	if(VehicleInfo[veh][carComponent][5] != 0)
	    return SendErrorMessage(playerid, "Inlatura nitro-ul inainte de a face asta.");

    VehicleInfo[veh][carOwnerID] = 0;
    VehicleInfo[veh][carFaction] = PlayerInfo[playerid][pFaction];
    StopCarBoomBox(veh);

	new query[128];
    mysql_format(dbHandle, query, sizeof(query), "UPDATE `cars` SET `owner_id`=0, `faction`=%i WHERE `id`=%i", PlayerInfo[playerid][pFaction], VehicleInfo[veh][carID]);
    PlayerInfo[playerid][pCarKey] = 0;
    VehicleInfo[veh][carOwnerPlayer] = INVALID_PLAYER_ID;
    DeleteVehicleTickets(veh);

	SendServerMessage(playerid, "Vehiculul tau %s apartine acum factiunii %s.", VehicleNames[VehicleInfo[veh][carModel]-400], Factions[PlayerInfo[playerid][pFaction]][fName]);
	return 1;
}

Dialog:ScrapSell(playerid, response, listitem, inputtext[])
{
	if(!response)
		return 1;

	new veh = PlayerInfo[playerid][pCarKey],
		string1[128],
		mes[32];

	if(IsABicycle(veh))
		format(mes, sizeof(mes), "{33CCFF}%s", VehicleNames[VehicleInfo[veh][carModel]-400]);
	else
	{
		if(VehicleInfo[veh][carRegistered])
			format(mes, sizeof(mes), "%s[%s]", VehicleNames[VehicleInfo[veh][carModel]-400], VehicleInfo[veh][carPlate]);
		else
			format(mes, sizeof(mes), "%s", VehicleNames[VehicleInfo[veh][carModel]-400]);
	}
	format(string1, sizeof(string1), "{B4B5B7}Esti sigur ca doresti sa vinzi acest vehicul pentru $%i?", GetVehiclePrice(VehicleInfo[veh][carModel])/2);
	Dialog_Show(playerid, ScrapVehicle, DIALOG_STYLE_MSGBOX, mes, string1, "Da", "Nu");
	return 1;
}

Dialog:ScrapVehicle(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new veh = PlayerInfo[playerid][pCarKey];

        SendClientMessageEx(playerid, COLOR_GREEN, "Ai vandut vehiculul \"%s\" si ai primit $%i.", VehicleNames[VehicleInfo[veh][carModel]-400], GetVehiclePrice(VehicleInfo[veh][carModel])/2);

		new money = PlayerInfo[playerid][pCash];
		GiveCash(playerid,  GetVehiclePrice(VehicleInfo[veh][carModel])/2);

        new query[256];
		format(query, sizeof(query), "%s [MYSQL: %i | IP: %s | bani(inainte): %i | bani(dupa): %i] a vandut vehiculul %s(Model: %i), a primit -- $%i",
		GetName(playerid), PlayerInfo[playerid][pID], GetPlayerIP(playerid), money, GetCash(playerid), VehicleNames[VehicleInfo[veh][carModel]-400], VehicleInfo[veh][carModel], GetVehiclePrice(VehicleInfo[veh][carModel])/2);
	    insert_log(query, VEHICLE_LOG, 3, playerid);

		DeleteVehicleTickets(veh);
		mysql_format(dbHandle, query, sizeof(query), "DELETE FROM `cars` WHERE `id` = %i", VehicleInfo[veh][carID]);
		mysql_tquery(dbHandle, query);

		PlayerInfo[playerid][pCarKey] = 0;
		VehicleInfo[veh][carOwnerPlayer] = INVALID_PLAYER_ID;
		DestroyVehicle(veh);
	}
	return 1;
}

Dialog:BuyingVehicleList(playerid, response, listitem, inputtext[])
{
	if(response)
		ShowBuyingVehicleDetails(playerid);
	else
	{
	    new registerveh = price_reg[GetPVarInt(playerid, "BuyingVehicleRegister")],
			alarmveh = price_alarm[GetPVarInt(playerid, "BuyingVehicleAlarm")],
			lockveh = price_lock[GetPVarInt(playerid, "BuyingVehicleLock")],
			immobveh = price_immob[GetPVarInt(playerid, "BuyingVehicleImmob")],
			insuranceveh = GetInsurancePrice(GetPVarInt(playerid, "BuyingVehicleModel")) * GetPVarInt(playerid, "BuyingVehicleInsurance"),
			xmradioveh = price_radio[GetPVarInt(playerid, "BuyingVehicleRadio")],
			gpsveh = price_gps[GetPVarInt(playerid, "BuyingVehicleGps")];

    	new mes[56];
		format(mes, sizeof(mes), "{bab9ba}%s - {35B835}$%i", VehicleNames[GetPVarInt(playerid, "BuyingVehicleModel")-400], GetVehiclePrice(GetPVarInt(playerid, "BuyingVehicleModel"))+registerveh+alarmveh+lockveh+immobveh+insuranceveh+xmradioveh+gpsveh);

		Dialog_Show(playerid, BuyingVehicleDone, DIALOG_STYLE_MSGBOX, mes, "{B4B5B7}Esti sigur ca doresti sa achizitionezi acest vehicul?", "Cumpara", "Anuleaza");
	}
	return 1;
}

Dialog:BuyingVehicleDone(playerid, response, listitem, inputtext[])
{
	if(!response) return 1;

	new query[128];
   	mysql_format(dbHandle, query, sizeof(query), "SELECT `id` FROM `cars` WHERE `owner` = '%i'", PlayerInfo[playerid][pID]);
	mysql_tquery(dbHandle, query, "BuyVehicleForPlayer", "i", playerid);
	return 1;
}
Dialog:BuyingVehicleDetails(playerid, response, listitem, inputtext[])
{
	new registerveh = price_reg[GetPVarInt(playerid, "BuyingVehicleRegister")],
		alarmveh = price_alarm[GetPVarInt(playerid, "BuyingVehicleAlarm")],
		lockveh = price_lock[GetPVarInt(playerid, "BuyingVehicleLock")],
		immobveh = price_immob[GetPVarInt(playerid, "BuyingVehicleImmob")],
		insuranceveh = GetInsurancePrice(GetPVarInt(playerid, "BuyingVehicleModel")) * GetPVarInt(playerid, "BuyingVehicleInsurance"),
		xmradioveh = price_radio[GetPVarInt(playerid, "BuyingVehicleRadio")],
		gpsveh = price_gps[GetPVarInt(playerid, "BuyingVehicleGps")];

	new registeruse[50],
		lockuse[100],
		alarmuse[250],
		immobuse[260],
		insuranceuse[260],
		xmradiouse[50],
		gpsuse[50];

	if(GetPVarInt(playerid, "BuyingVehicleRegister") == 1)
		format(registeruse, sizeof(registeruse), "{ffffff}Inregistrare vehicul: \t{4a90f0}$%i\n", registerveh);

	if(GetPVarInt(playerid, "BuyingVehicleAlarm") == 1)
		format(alarmuse, sizeof(alarmuse), "{ffffff}Alarma: {bab9ba}1 nivel {4a90f0}$%i\n{4a90f0}+{ffffff}Alerta alarma\n", alarmveh);

	else if(GetPVarInt(playerid, "BuyingVehicleAlarm") == 2)
		format(alarmuse, sizeof(alarmuse), "{ffffff}Semnalizare: \t{bab9ba}2 nivele {4a90f0}$%i\n{4a90f0}+{ffffff}Alerta alarma\n{4a90f0}+{ffffff}Alertare autoritati\n", alarmveh);

	else if(GetPVarInt(playerid, "BuyingVehicleAlarm") == 3)
		format(alarmuse, sizeof(alarmuse), "{ffffff}Semnalizare: \t{bab9ba}3 nivele {4a90f0}$%i\n{4a90f0}+{ffffff}Alerta alarma\n{4a90f0}+{ffffff}Alertare autoritati\n{4a90f0}+{ffffff}Alerta prin SMS\n", alarmveh);

	else if(GetPVarInt(playerid, "BuyingVehicleAlarm") == 4)
		format(alarmuse, sizeof(alarmuse), "{ffffff}Semnalizare: \t{bab9ba}4 nivele {4a90f0}$%i\n{4a90f0}+{ffffff}Alerta alarma\n{4a90f0}+{ffffff}Alertare autoritati\n{4a90f0}+{ffffff}Alerta prin SMS\n", alarmveh);

	if(GetPVarInt(playerid, "BuyingVehicleLock") > 0)
		format(lockuse, sizeof(lockuse), "{ffffff}Incuietoare: \t{bab9ba}%i nivel(e) {e2bd63}$%i\n{4a90f0}+{ffffff}%i secunde necesare pt. spargere\n", GetPVarInt(playerid, "BuyingVehicleLock"), lockveh, 60 + (GetPVarInt(playerid, "BuyingVehicleLock") * 60));

	if(GetPVarInt(playerid, "BuyingVehicleImmob") > 0)
		format(immobuse, sizeof(immobuse), "{ffffff}Imobilizare: \t{bab9ba}%i nivel(e) {4a90f0}$%i\n{4a90f0}+{ffffff}ajuta la prevenirea spargerii\n", GetPVarInt(playerid, "BuyingVehicleImmob"), immobveh);

 	if(GetPVarInt(playerid, "BuyingVehicleInsurance") == 1)
		format(insuranceuse, sizeof(insuranceuse), "{ffffff}Asigurare: \t{bab9ba}1 nivel {4a90f0}$%i\n{4a90f0}+{ffffff}vehiculul va fi mereu respawnat cu durabilitate maxima\n", insuranceveh);

	else if(GetPVarInt(playerid, "BuyingVehicleInsurance") == 2)
		format(insuranceuse, sizeof(insuranceuse), "{ffffff}Asigurare: \t{bab9ba}2 nivele {4a90f0}$%i\n{4a90f0}+{ffffff}vehiculul va fi mereu respawnat cu durabilitate maxima\n{4a90f0}+{ffffff}vehiculul va fi reabilitat fara daune\n", insuranceveh);

	else if(GetPVarInt(playerid, "BuyingVehicleInsurance") == 3)
		format(insuranceuse, sizeof(insuranceuse), "{ffffff}Asigurare: \t{bab9ba}3 nivele {4a90f0}$%i\n{4a90f0}+{ffffff}vehiculul va fi mereu respawnat cu durabilitate maxima\n{4a90f0}+{ffffff}vehiculul va fi reabilitat fara daune.\n{4a90f0}+{ffffff}tuningul si radioul se salveaza\n", insuranceveh);


	if(GetPVarInt(playerid, "BuyingVehicleRadio") == 1)
		format(xmradiouse, sizeof(xmradiouse), "{ffffff}Radio: \t{4a90f0}$%i\n", xmradioveh);

	if(GetPVarInt(playerid, "BuyingVehicleGps") == 1)
		format(gpsuse, sizeof(gpsuse), "{ffffff}GPS: \t{4a90f0}$%i\n", gpsveh);


	new mes[56];
	format(mes, sizeof(mes), "{bab9ba}%s - {35B835}$%i", VehicleNames[GetPVarInt(playerid, "BuyingVehicleModel")-400], GetVehiclePrice(GetPVarInt(playerid, "BuyingVehicleModel"))+registerveh+alarmveh+lockveh+immobveh+insuranceveh+xmradioveh+gpsveh);
	if(!response)
	{
	    new string[1024];
		format(string, sizeof(string), "{ffffff}Pret: \t{4a90f0}$%i\n%s%s%s%s%s%s%s{ffffff}.", GetVehiclePrice(GetPVarInt(playerid, "BuyingVehicleModel")), lockuse, alarmuse, immobuse, insuranceuse, registeruse, xmradiouse, gpsuse);
		Dialog_Show(playerid, BuyingVehicleList, DIALOG_STYLE_MSGBOX, mes, string, "Editare", "Cumpara");
	    return 1;
	}

	new string[301];
	switch(listitem)
	{
		case 0:
		{
				if(GetPVarInt(playerid, "BuyingVehicleRegister") == 0)
					format(string, sizeof(string), "{eaf133}>> {ffffff}Vehicul neinregistrat\nPret inregistrare - $%i", price_reg[1]);

				else if(GetPVarInt(playerid, "BuyingVehicleRegister") == 1)
					format(string, sizeof(string), "{ffffff}Vehicul neinregistrat\n{eaf133}>> {ffffff}Pret inregistrare - $%i", price_reg[1]);

				Dialog_Show(playerid, BuyVehDetReg, DIALOG_STYLE_LIST, mes, string, "Gata", "<<");
		}
		case 1:
		{
				if(GetPVarInt(playerid, "BuyingVehicleAlarm") == 0)
					format(string, sizeof(string), "{4a90f0}>> {ffffff}Alarma neinstalata\n1 nivel - $%i\ndoua nivele - $%i\n3 nivele - $%i\n4 nivele - $%i", price_alarm[1], price_alarm[2], price_alarm[3], price_alarm[4]);

				else if(GetPVarInt(playerid, "BuyingVehicleAlarm") == 1)
					format(string, sizeof(string), "Alarma neinstalata\n{4a90f0}>> {ffffff}1 nivel - $%i\ndoua nivele - $%i\n3 nivele - $%i\n4 nivele - $%i", price_alarm[1], price_alarm[2], price_alarm[3], price_alarm[4]);

				else if(GetPVarInt(playerid, "BuyingVehicleAlarm") == 2)
					format(string, sizeof(string), "Alarma neinstalata\n1 nivel - $%i\n{4a90f0}>> {ffffff}doua nivele - $%i\n3 nivele - $%i\n4 nivele - $%i", price_alarm[1], price_alarm[2], price_alarm[3], price_alarm[4]);

				else if(GetPVarInt(playerid, "BuyingVehicleAlarm") == 3)
					format(string, sizeof(string), "Alarma neinstalata\n1 nivel - $%i\ndoua nivele - $%i\n{4a90f0}>> {ffffff}3 nivele - $%i\n4 nivele - $%i", price_alarm[1], price_alarm[2], price_alarm[3], price_alarm[4]);

				else if(GetPVarInt(playerid, "BuyingVehicleAlarm") == 4)
					format(string, sizeof(string), "Alarma neinstalata\n1 nivel - $%i\ndoua nivele - $%i\n3 nivele - $%i\n{4a90f0}>> {ffffff}4 nivele - $%i", price_alarm[1], price_alarm[2], price_alarm[3], price_alarm[4]);

				Dialog_Show(playerid, BuyVehDetAlarm, DIALOG_STYLE_LIST, mes, string, "Gata", "<<");
		}
		case 2:
		{
				if(GetPVarInt(playerid, "BuyingVehicleLock") == 0)
					format(string, sizeof(string), "{4a90f0}>> {ffffff}Incuietoare neinstalata\n1 nivele - $%i\ndoua nivele - $%i\n3 nivele - $%i\n4 nivele - $%i\n5 nivele - $%i", price_lock[1], price_lock[2], price_lock[3], price_lock[4], price_lock[5]);

				else if(GetPVarInt(playerid, "BuyingVehicleLock") == 1)
					format(string, sizeof(string), "Incuietoare neinstalata\n{4a90f0}>> {ffffff}1 nivel - $%i\ndoua nivele - $%i\n3 nivele - $%i\n4 nivele - $%i\n5 nivele - $%i", price_lock[1], price_lock[2], price_lock[3], price_lock[4], price_lock[5]);

				else if(GetPVarInt(playerid, "BuyingVehicleLock") == 2)
					format(string, sizeof(string), "Incuietoare neinstalata\n1 nivel - $%i\n{4a90f0}>> {ffffff}doua nivele - $%i\n3 nivele - $%i\n4 nivele - $%i\n5 nivele - $%i", price_lock[1], price_lock[2], price_lock[3], price_lock[4], price_lock[5]);

				else if(GetPVarInt(playerid, "BuyingVehicleLock") == 3)
					format(string, sizeof(string), "Incuietoare neinstalata\n1 nivel - $%i\ndoua nivele - $%i\n{4a90f0}>> {ffffff}3 nivele - $%i\n4 nivele - $%i\n5 nivele - $%i", price_lock[1], price_lock[2], price_lock[3], price_lock[4], price_lock[5]);

				else if(GetPVarInt(playerid, "BuyingVehicleLock") == 4)
					format(string, sizeof(string), "Incuietoare neinstalata\n1 nivel - $%i\ndoua nivele - $%i\n3 nivele - $%i\n{4a90f0}>> {ffffff}4 nivele - $%i\n5 nivele - $%i", price_lock[1], price_lock[2], price_lock[3], price_lock[4], price_lock[5]);

				else if(GetPVarInt(playerid, "BuyingVehicleLock") == 5)
				format(string, sizeof(string), "Incuietoare neinstalata\n1 nivel - $%i\ndoua nivele - $%i\n3 nivele - $%i\n4 nivele - $%i\n{4a90f0}>> {ffffff}5 nivele - $%i", price_lock[1], price_lock[2], price_lock[3], price_lock[4], price_lock[5]);

				Dialog_Show(playerid, BuyVehDetLock, DIALOG_STYLE_LIST, mes, string, "Gata", "<<");
		}
		case 3:
		{
				if(GetPVarInt(playerid, "BuyingVehicleImmob") == 0)
					format(string, sizeof(string), "{4a90f0}>> {ffffff}Imobilizator neinstalat\n1 nivel - $%i\ndoua nivele - $%i\n3 nivele - $%i\n4 nivele - $%i", price_immob[1], price_immob[2], price_immob[3], price_immob[4]);

				else if(GetPVarInt(playerid, "BuyingVehicleImmob") == 1)
					format(string, sizeof(string), "Imobilizator neinstalat\n{4a90f0}>> {ffffff}1 nivel - $%i\ndoua nivele - $%i\n3 nivele - $%i\n4 nivele - $%i", price_immob[1], price_immob[2], price_immob[3], price_immob[4]);

				else if(GetPVarInt(playerid, "BuyingVehicleImmob") == 2)
					format(string, sizeof(string), "Imobilizator neinstalat\n1 nivel - $%i\n{4a90f0}>> {ffffff}doua nivele - $%i\n3 nivele - $%i\n4 nivele - $%i", price_immob[1], price_immob[2], price_immob[3], price_immob[4]);

				else if(GetPVarInt(playerid, "BuyingVehicleImmob") == 3)

					format(string, sizeof(string), "Imobilizator neinstalat\n1 nivel - $%i\ndoua nivele - $%i\n{4a90f0}>> {ffffff}3 nivele - $%i\n4 nivele - $%i", price_immob[1], price_immob[2], price_immob[3], price_immob[4]);

				else if(GetPVarInt(playerid, "BuyingVehicleImmob") == 4)

					format(string, sizeof(string), "Imobilizator neinstalat\n1 nivel - $%i\ndoua nivele - $%i\n3 nivele - $%i\n{4a90f0}>> {ffffff}4 nivele - $%i");

				Dialog_Show(playerid, BuyVehDetImmob, DIALOG_STYLE_LIST, mes, string, "Gata", "<<");
		}
		case 4:
		{
			    new amount = GetInsurancePrice(GetPVarInt(playerid, "BuyingVehicleModel"));
				if(GetPVarInt(playerid, "BuyingVehicleInsurance") == 0)
					format(string, sizeof(string), "{4a90f0}>> {ffffff}Vehicul neasigurat\n1 nivel - $%i\ndoua nivele - $%i\n3 nivele - $%i", amount * 1, amount * 2, amount * 3);

				else if(GetPVarInt(playerid, "BuyingVehicleInsurance") == 1)
					format(string, sizeof(string), "Vehicul neasigurat\n{4a90f0}>> {ffffff}1 nivel - $%i\ndoua nivele - $%i\n3 nivele - $%i", amount * 1, amount * 2, amount * 3);

				else if(GetPVarInt(playerid, "BuyingVehicleInsurance") == 2)
					format(string, sizeof(string), "Vehicul neasigurat\n1 nivel - $%i\n{4a90f0}>> {ffffff}doua nivele - $%i\n3 nivele - $%i", amount * 1, amount * 2, amount * 3);

				else if(GetPVarInt(playerid, "BuyingVehicleInsurance") == 3)
					format(string, sizeof(string), "Vehicul neasigurat\n1 nivel - $%i\ndoua nivele - $%i\n{4a90f0}>> {ffffff}3nivele - $%i", amount * 1, amount * 2, amount * 3);

				Dialog_Show(playerid, BuyVehDetInsur, DIALOG_STYLE_LIST, mes, string, "Gata", "<<");
		}
		case 5:
		{
				if(GetPVarInt(playerid, "BuyingVehicleRadio") == 0)
					format(string, sizeof(string), "{4a90f0}>> {ffffff}Fara radio\nRadio - $%i", price_radio[1]);

				else if(GetPVarInt(playerid, "BuyingVehicleRadio") == 1)
					format(string, sizeof(string), "Fara radio\n{4a90f0}>> {ffffff}Radio - $%i", price_radio[1]);

				Dialog_Show(playerid, BuyVehDetRadio, DIALOG_STYLE_LIST, mes, string, "Gata", "<<");
		}
		case 6:
		{
				if(GetPVarInt(playerid, "BuyingVehicleGps") == 0)
					format(string, sizeof(string), "{4a90f0}>> {ffffff}Fara GPS\nGPS - $%i", price_gps[1]);

				else if(GetPVarInt(playerid, "BuyingVehicleGps") == 1)
					format(string, sizeof(string), "Fara GPS\n{4a90f0}>> {ffffff}GPS - $%i", price_gps[1]);

				Dialog_Show(playerid, BuyVehDetGPS, DIALOG_STYLE_LIST, mes, string, "Gata", "<<");
		}
	}
	return 1;
}

Dialog:BuyVehDetGPS(playerid, response, listitem, inputtext[])
{
	if(response)
		SetPVarInt(playerid, "BuyingVehicleGps", listitem);

	ShowBuyingVehicleDetails(playerid);
	return 1;
}

Dialog:BuyVehDetRadio(playerid, response, listitem, inputtext[])
{
	if(response)
		SetPVarInt(playerid, "BuyingVehicleRadio", listitem);

	ShowBuyingVehicleDetails(playerid);
	return 1;
}

Dialog:BuyVehDetInsur(playerid, response, listitem, inputtext[])
{
	if(response)
		SetPVarInt(playerid, "BuyingVehicleInsurance", listitem);

	ShowBuyingVehicleDetails(playerid);
	return 1;
}

Dialog:BuyVehDetImmob(playerid, response, listitem, inputtext[])
{
	if(response)
		SetPVarInt(playerid, "BuyingVehicleImmob", listitem);

	ShowBuyingVehicleDetails(playerid);
	return 1;
}

Dialog:BuyVehDetLock(playerid, response, listitem, inputtext[])
{
	if(response)
		SetPVarInt(playerid, "BuyingVehicleLock", listitem);

	ShowBuyingVehicleDetails(playerid);
	return 1;
}

Dialog:BuyVehDetAlarm(playerid, response, listitem, inputtext[])
{
	if(response)
		SetPVarInt(playerid, "BuyingVehicleAlarm", listitem);

	ShowBuyingVehicleDetails(playerid);
	return 1;
}

Dialog:BuyVehDetReg(playerid, response, listitem, inputtext[])
{
	if(response)
		SetPVarInt(playerid, "BuyingVehicleRegister", listitem);

	ShowBuyingVehicleDetails(playerid);
	return 1;
}

Dialog:HatsDialog(playerid, response, listitem, inputtext[])
{
    if(!response)
		return 1;

	new i = -1;
	if((i = GetNextToySlot(playerid)) == -1)
 		return SCM(playerid, COLOR_LIGHTRED, "Toate sloturile sunt ocupate.");

    if(GetCash(playerid) < HatsInfo[listitem][toyPrice])
		return SendNotCash(playerid);

	SetPlayerAttachedObject(playerid, i, HatsInfo[listitem][toyModel], HatsInfo[listitem][toyBone],
	HatsInfo[listitem][toyOffestX], HatsInfo[listitem][toyOffestY], HatsInfo[listitem][toyOffestZ],
	HatsInfo[listitem][toyRotX], HatsInfo[listitem][toyRotY], HatsInfo[listitem][toyRotZ],
	HatsInfo[listitem][toyScaleX], HatsInfo[listitem][toyScaleY], HatsInfo[listitem][toyScaleZ]);
    EditAttachedObject(playerid, i);

	SetPVarInt(playerid, #buy_attach, HatsInfo[listitem][toyPrice]);
	InsertPlayerAttach(playerid, i, HatsInfo[listitem][toyModel], HatsInfo[listitem][toyBone], HatsInfo[listitem][toyName]);
	return 1;
}

Dialog:GlassesDialog(playerid, response, listitem, inputtext[])
{
	if(!response)
		return 1;

	new i = -1;
	if((i = GetNextToySlot(playerid)) == -1)
 		return SCM(playerid, COLOR_LIGHTRED, "Toate sloturile sunt ocupate.");

    if(GetCash(playerid) < GlassesInfo[listitem][toyPrice])
		return SendNotCash(playerid);

	SetPlayerAttachedObject(playerid, i, GlassesInfo[listitem][toyModel], GlassesInfo[listitem][toyBone],
	GlassesInfo[listitem][toyOffestX], GlassesInfo[listitem][toyOffestY], GlassesInfo[listitem][toyOffestZ],
	GlassesInfo[listitem][toyRotX], GlassesInfo[listitem][toyRotY], GlassesInfo[listitem][toyRotZ],
	GlassesInfo[listitem][toyScaleX], GlassesInfo[listitem][toyScaleY], GlassesInfo[listitem][toyScaleZ]);
    EditAttachedObject(playerid, i);

	SetPVarInt(playerid, #buy_attach, GlassesInfo[listitem][toyPrice]);
	InsertPlayerAttach(playerid, i, GlassesInfo[listitem][toyModel], GlassesInfo[listitem][toyBone], GlassesInfo[listitem][toyName]);
	return 1;
}

Dialog:BandanasDialog(playerid, response, listitem, inputtext[])
{
	if(!response)
		return 1;

	new i = -1;
	if((i = GetNextToySlot(playerid)) == -1)
 		return SCM(playerid, COLOR_LIGHTRED, "Toate sloturile sunt ocupate.");

    if(GetCash(playerid) < BandanasInfo[listitem][toyPrice])
		return SendNotCash(playerid);

	SetPlayerAttachedObject(playerid, i, BandanasInfo[listitem][toyModel], BandanasInfo[listitem][toyBone],
	BandanasInfo[listitem][toyOffestX], BandanasInfo[listitem][toyOffestY], BandanasInfo[listitem][toyOffestZ],
	BandanasInfo[listitem][toyRotX], BandanasInfo[listitem][toyRotY], BandanasInfo[listitem][toyRotZ],
	BandanasInfo[listitem][toyScaleX], BandanasInfo[listitem][toyScaleY], BandanasInfo[listitem][toyScaleZ]);
    EditAttachedObject(playerid, i);

	SetPVarInt(playerid, #buy_attach, BandanasInfo[listitem][toyPrice]);
	InsertPlayerAttach(playerid, i, BandanasInfo[listitem][toyModel], BandanasInfo[listitem][toyBone], BandanasInfo[listitem][toyName]);
	return 1;
}
Dialog:HeadphonesDialog(playerid, response, listitem, inputtext[])
{
	if(!response)
		return 1;

	new i = -1;
	if((i = GetNextToySlot(playerid)) == -1)
 		return SCM(playerid, COLOR_LIGHTRED, "Toate sloturile sunt ocupate.");

    if(GetCash(playerid) < HeadphonesInfo[listitem][toyPrice])
		return SendNotCash(playerid);

	SetPlayerAttachedObject(playerid, i, HeadphonesInfo[listitem][toyModel], HeadphonesInfo[listitem][toyBone],
	HeadphonesInfo[listitem][toyOffestX], HeadphonesInfo[listitem][toyOffestY], HeadphonesInfo[listitem][toyOffestZ],
	HeadphonesInfo[listitem][toyRotX], HeadphonesInfo[listitem][toyRotY], HeadphonesInfo[listitem][toyRotZ],
	HeadphonesInfo[listitem][toyScaleX], HeadphonesInfo[listitem][toyScaleY], HeadphonesInfo[listitem][toyScaleZ]);
    EditAttachedObject(playerid, i);

	SetPVarInt(playerid, #buy_attach, HeadphonesInfo[listitem][toyPrice]);
	InsertPlayerAttach(playerid, i, HeadphonesInfo[listitem][toyModel], HeadphonesInfo[listitem][toyBone], HeadphonesInfo[listitem][toyName]);
	return 1;
}

Dialog:SportsDialog(playerid, response, listitem, inputtext[])
{
	if(!response)
		return 1;

	new i = -1;
	if((i = GetNextToySlot(playerid)) == -1)
 		return SCM(playerid, COLOR_LIGHTRED, "Toate sloturile sunt ocupate.");

    if(GetCash(playerid) < SportsInfo[listitem][toyPrice])
		return SendNotCash(playerid);

    if(SportsInfo[listitem][toyModel] == 19878)
	{
	    if(GivePlayerItem(playerid, 77, 1) == -1)
	    	return SendErrorMessage(playerid, "Nu ai loc in inventar.");

		SCM(playerid, COLOR_LIGHTRED, "Skateboard-ul ti-a fost adaugat in inventar.");
		return 1;
	}
	SetPlayerAttachedObject(playerid, i, SportsInfo[listitem][toyModel], SportsInfo[listitem][toyBone],
	SportsInfo[listitem][toyOffestX], SportsInfo[listitem][toyOffestY], SportsInfo[listitem][toyOffestZ],
	SportsInfo[listitem][toyRotX], SportsInfo[listitem][toyRotY], SportsInfo[listitem][toyRotZ],
	SportsInfo[listitem][toyScaleX], SportsInfo[listitem][toyScaleY], SportsInfo[listitem][toyScaleZ]);
    EditAttachedObject(playerid, i);

	SetPVarInt(playerid, #buy_attach, SportsInfo[listitem][toyPrice]);
	InsertPlayerAttach(playerid, i, SportsInfo[listitem][toyModel], SportsInfo[listitem][toyBone], SportsInfo[listitem][toyName]);
	return 1;
}


Dialog:ClockDialog(playerid, response, listitem, inputtext[])
{
	if(!response)
		return 1;

	new i = -1;
	if((i = GetNextToySlot(playerid)) == -1)
 		return SCM(playerid, COLOR_LIGHTRED, "Toate sloturile sunt ocupate.");

    if(GetCash(playerid) < ClockInfo[listitem][toyPrice])
		return SendNotCash(playerid);

	SetPlayerAttachedObject(playerid, i, ClockInfo[listitem][toyModel], ClockInfo[listitem][toyBone],
	ClockInfo[listitem][toyOffestX], ClockInfo[listitem][toyOffestY], ClockInfo[listitem][toyOffestZ],
	ClockInfo[listitem][toyRotX], ClockInfo[listitem][toyRotY], ClockInfo[listitem][toyRotZ],
	ClockInfo[listitem][toyScaleX], ClockInfo[listitem][toyScaleY], ClockInfo[listitem][toyScaleZ]);
    EditAttachedObject(playerid, i);

	SetPVarInt(playerid, #buy_attach, ClockInfo[listitem][toyPrice]);
	InsertPlayerAttach(playerid, i, ClockInfo[listitem][toyModel], ClockInfo[listitem][toyBone], ClockInfo[listitem][toyName]);
	return 1;
}


Dialog:BarberDialog(playerid, response, listitem, inputtext[])
{
	if(!response)
		return 1;

	new i = -1;
	if((i = GetNextToySlot(playerid)) == -1)
 		return SCM(playerid, COLOR_LIGHTRED, "Toate sloturile sunt ocupate.");

    if(GetCash(playerid) < BarberShop[listitem][toyPrice])
		return SendNotCash(playerid);

	SetPlayerAttachedObject(playerid, i, BarberShop[listitem][toyModel], BarberShop[listitem][toyBone],
	BarberShop[listitem][toyOffestX], BarberShop[listitem][toyOffestY], BarberShop[listitem][toyOffestZ],
	BarberShop[listitem][toyRotX], BarberShop[listitem][toyRotY], BarberShop[listitem][toyRotZ],
	BarberShop[listitem][toyScaleX], BarberShop[listitem][toyScaleY], BarberShop[listitem][toyScaleZ]);
    EditAttachedObject(playerid, i);

	SetPVarInt(playerid, #buy_attach, BarberShop[listitem][toyPrice]);
	InsertPlayerAttach(playerid, i, BarberShop[listitem][toyModel], BarberShop[listitem][toyBone], BarberShop[listitem][toyName]);
	return 1;
}

Dialog:HardwareStore(playerid, response, listitem, inputtext[])
{
	if(!response)
		return 1;

    if(GetCash(playerid) < HardwareStore[listitem][toyPrice])
		return SendNotCash(playerid);

	if(listitem == 14)
	{
	    if(0 == IsValidVehicle(PlayerInfo[playerid][pCarKey]))
     		return SCM(playerid, COLOR_LIGHTRED, "Vehiculul tau nu este spawnat.");

		static const str_size[] = "{ffffff}Creeaza o dublura la cheie pentru %s.";
		new mes[sizeof(str_size) - 2 + 1 + 32];
		format(mes, sizeof(mes), str_size, VehicleNames[GetVehicleModel(PlayerInfo[playerid][pCarKey])-400]);
	    Dialog_Show(playerid, DuplicateKey, DIALOG_STYLE_INPUT, "Creare dublura (cheie)", mes, "Cumpara", "Anuleaza");
	    return 1;
	}

    new i = -1;
	if((i = GetNextToySlot(playerid)) == -1)
 		return SCM(playerid, COLOR_LIGHTRED, "Toate sloturile sunt ocupate.");

	SetPlayerAttachedObject(playerid, i, HardwareStore[listitem][toyModel], HardwareStore[listitem][toyBone],
	HardwareStore[listitem][toyOffestX], HardwareStore[listitem][toyOffestY], HardwareStore[listitem][toyOffestZ],
	HardwareStore[listitem][toyRotX], HardwareStore[listitem][toyRotY], HardwareStore[listitem][toyRotZ],
	HardwareStore[listitem][toyScaleX], HardwareStore[listitem][toyScaleY], HardwareStore[listitem][toyScaleZ]);
    EditAttachedObject(playerid, i);

	SetPVarInt(playerid, #buy_attach, HardwareStore[listitem][toyPrice]);
	InsertPlayerAttach(playerid, i, HardwareStore[listitem][toyModel], HardwareStore[listitem][toyBone], HardwareStore[listitem][toyName]);
	return 1;
}

Dialog:GuitarsDialog(playerid, response, listitem, inputtext[])
{
	if(!response)
		return 1;

	if(listitem == 3)
	{
		if(GetCash(playerid) < GuitarsInfo[listitem][toyPrice])
			return SendNotCash(playerid);

		if(GivePlayerItem(playerid, INV_BOOMBOX, 1) == -1)
		    return SendErrorMessage(playerid, "Nu ai loc in inventar.");

		GiveCash(playerid, -GuitarsInfo[listitem][toyPrice]);
		SendClientMessageEx(playerid, COLOR_WHITE, "Ai cumparat un casetofon (-$%i). (????????? ? ?????????)", GuitarsInfo[listitem][toyPrice]);
	}
	else
	{
	    new i = -1;
		if((i = GetNextToySlot(playerid)) == -1)
 			return SCM(playerid, COLOR_LIGHTRED, "Toate sloturile sunt ocupate.");

    	if(GetCash(playerid) < GuitarsInfo[listitem][toyPrice])
			return SendNotCash(playerid);

		SetPlayerAttachedObject(playerid, i, GuitarsInfo[listitem][toyModel], 1, 0.0, -0.145, 0.0, 14.8, 85.1, -19.2, 1.0, 1.0, 1.0);
        EditAttachedObject(playerid, i);

		SetPVarInt(playerid, #buy_attach, GuitarsInfo[listitem][toyPrice]);
		InsertPlayerAttach(playerid, i, GuitarsInfo[listitem][toyModel], 1, GuitarsInfo[listitem][toyName]);
	}
	return 1;
}

Dialog:ClothesCategory(playerid, response, listitem, inputtext[])
{
	new str[1024];
	if(!response)
	    return 1;

	switch(listitem)
	{
		case 0:
		{
			for(new x;x<sizeof(HatsInfo);x++)
				format(str, sizeof(str), "%s%s - $%i\n", str, HatsInfo[x][toyName], HatsInfo[x][toyPrice]);

			Dialog_Show(playerid, HatsDialog, DIALOG_STYLE_LIST, "Produse", str, "Alege", "Inchide");
		}
		case 1:
		{
			for(new x;x<sizeof(GlassesInfo);x++)
				format(str, sizeof(str), "%s%s - $%i\n", str, GlassesInfo[x][toyName], GlassesInfo[x][toyPrice]);

			Dialog_Show(playerid, GlassesDialog, DIALOG_STYLE_LIST, "Produse", str, "Alege", "Inchide");
		}
		case 2:
		{
			for(new x;x<sizeof(BandanasInfo);x++)
				format(str, sizeof(str), "%s%s - $%i\n", str, BandanasInfo[x][toyName], BandanasInfo[x][toyPrice]);

			Dialog_Show(playerid, BandanasDialog, DIALOG_STYLE_LIST, "Produse", str, "Alege", "Inchide");
		}
		case 3:
		{
			for(new x;x<sizeof(HeadphonesInfo);x++)
				format(str, sizeof(str), "%s%s - $%i\n", str, HeadphonesInfo[x][toyName], HeadphonesInfo[x][toyPrice]);

			Dialog_Show(playerid, HeadphonesDialog, DIALOG_STYLE_LIST, "Produse", str, "Alege", "Inchide");
		}
	}
	return 1;
}

Dialog:SelectClass(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return 1;

	switch(listitem)
	{
		case 0: ShowAclass(playerid);
		case 1: ShowBclass(playerid);
		case 2: ShowCclass(playerid);
		case 3: ShowSport(playerid);
		case 4: ShowOffRoad(playerid);
		case 5: ShowMotoBike(playerid);
		case 6: ShowIndustrial(playerid);
		case 7: ShowOther(playerid);
	}
	return 1;
}

Dialog:RadioStations(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return 1;

	if(listitem == 4)
	{
	    new vehicle = GetPlayerVehicleID(playerid),
        	id;

	    if(IsDriver(playerid))
		{
			if(VehicleInfo[vehicle][carRadio] == 0)
				return SCM(playerid, COLOR_LIGHTRED, "Acest vehicul nu are radio.");

			if(VehicleInfo[vehicle][carRadioOn] != 0)
			{
				StopCarBoomBox(vehicle);
				SCM(playerid, -1, "Ai oprit radioul.");
			}
			return 1;
		}

		if ((id = GetNearHouseInside(playerid)) != -1 && HouseInfo[id][hOwnerID] == PlayerInfo[playerid][pID])
		{
		    if(HouseInfo[id][hRadio] == 0)
				return SCM(playerid, COLOR_LIGHTRED, "Casa nu are radio.");

			if(HouseInfo[id][hRadioOn] != 0)
			{
				StopHouseBoomBox(id);
	            SCM(playerid, -1, "Ai oprit radioul.");
			}
		    return 1;
		}
		else if ((id = GetNearBizInside(playerid)) != -1 && BizInfo[id][bizOwnerID] == PlayerInfo[playerid][pID])
		{
		    if(BizInfo[id][bizRadio] == 0)
				return SCM(playerid, COLOR_LIGHTRED, "Afacerea nu are radio.");

			if(BizInfo[id][bizRadioOn] != 0)
			{
			    StopBusinessBoomBox(id);
			    SCM(playerid, -1, "Ai oprit radioul.");
			}
		    return 1;
		}
	    return 1;
	}

	if(listitem == 3)
	    return ShowMusicList(playerid);

	new str[15 * 32];
	for(new i; i != 15; i++)
	{
	    format(str, sizeof(str), "%s %s\n", str, RADIO_STATIONS[listitem][i][boomboxName]);
	}

	SetPVarInt(playerid, #select_radio, listitem+1);
    Dialog_Show(playerid, RadioURL, DIALOG_STYLE_LIST, "Posturi radio", str, "Alege", "Inchide");
	return 1;
}

Dialog:RadioURL(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return 1;

	new radio = GetPVarInt(playerid, #select_radio)-1;
	ChangeUrlBoombox(playerid, RADIO_STATIONS[radio][listitem][boomboxUrl]);
	return 1;
}


// ASTA E CV MUZICA PE AICI DAR E SISTEM DEZACTIVAT DE CATRE RUS
/*Dialog:MusicList(playerid, response, listitem, inputtext[])
{
	if(!response)
		return 1;

    SetPVarInt(playerid, #edit_music, listitem);

    if(PlayerMusic[playerid][listitem][mID] == 0)
		Dialog_Show(playerid, AddMusic, DIALOG_STYLE_INPUT, "?????????? ???????????", "{FFFFFF}??????? ???????? ???????????.\n\n?????? ??????????? ????????: ?-?, A-Z, 0-9, \"-\", \"[\", \"]\", \"(\", \")\". ???????????? ?????????? ???????? 64.", "?????", "?????");
	else
		Dialog_Show(playerid, MyMusic, DIALOG_STYLE_LIST, PlayerMusic[playerid][listitem][mName], "???????? ??????\n??????? ??????", "???????", "?????");
	return 1;
}

Dialog:MyMusic(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return ShowBoomboxMenu(playerid);

	new music =
		GetPVarInt(playerid, #edit_music);

	if(listitem == 0)
	{
	    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "?? ????????? ?????????? - %s.", PlayerMusic[playerid][music][mName]);
	    ChangeUrlBoombox(playerid, PlayerMusic[playerid][music][mUrl]);
	    return 1;
	}

	SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "??????????? \"%s\" ???????.", PlayerMusic[playerid][music][mName]);

	new query[128];
	mysql_format(dbHandle, query, sizeof(query), "DELETE FROM `player_music` WHERE `id` = %i", PlayerMusic[playerid][music][mID]);
	mysql_tquery(dbHandle, query);

	PlayerMusic[playerid][music][mID] = 0;
	PlayerMusic[playerid][music][mName] = EOS;
	PlayerMusic[playerid][music][mUrl] = EOS;

	ShowMusicList(playerid);
	return 1;
}

Dialog:AddMusic(playerid, response, listitem, inputtext[])
{
	if(!response)
		return ShowMusicList(playerid);

	if(isnull(inputtext) || strlen(inputtext) >= 64)
		return Dialog_Show(playerid, AddMusic, DIALOG_STYLE_INPUT, "?????????? ???????????", "{FFFFFF}??????? ???????? ???????????.\n\n?????? ??????????? ????????: ?-?, A-Z, 0-9, \"-\", \"[\", \"]\", \"(\", \")\". ???????????? ?????????? ???????? 64.", "?????", "??????");

	for(new i = 0; i < strlen(inputtext); i++)
	{
		switch(inputtext[i])
		{
			case '!', '@', '#', '$','%','^','&','*','_','+','=','|','{','}','.','`','~','<','>','?',',','/':
			{
				Dialog_Show(playerid, AddMusic, DIALOG_STYLE_INPUT, "?????????? ???????????", "{FFFFFF}??????? ???????? ???????????.\n\n?????? ??????????? ????????: ?-?, A-Z, 0-9, \"-\", \"[\", \"]\", \"(\", \")\". ???????????? ?????????? ???????? 64.", "?????", "?????");
				return 1;
			}
			default:
				continue;
		}
	}

	SetPVarString(playerid, #music_add, inputtext);
	Dialog_Show(playerid, AddMusic1, DIALOG_STYLE_INPUT, "?????????? ???????????", "{FFFFFF}??????? ?????? ?? ???????????.\n?????????? ? ???, ??? ???????? ???? ??????????? ?? ?????? ???????? ?? ??????:\nforum.ls-life.ru ? ??????? \"????????? ????????????\".", "????????", "?????");
	return 1;
}

Dialog:AddMusic1(playerid, response, listitem, inputtext[])
{
	if(!response)
		return ShowMusicList(playerid);

	if(isnull(inputtext) || strlen(inputtext) >= 128)
	{
		Dialog_Show(playerid, AddMusic1, DIALOG_STYLE_INPUT, "?????????? ???????????", "??????? ?????? ?? ???????????.\n?????????? ? ???, ??? ???????? ???? ??????????? ?? ?????? ???????? ?? ??????:\nforum.ls-life.ru ? ??????? \"????????? ????????????\".", "????????", "?????");
		return 1;
	}

	new music = GetPVarInt(playerid, #edit_music);

	if(music < 0 || music >= MAX_PLAYER_MUSIC || PlayerMusic[playerid][music][mID] != 0)
	    return SendErrorMessage(playerid, "?????? ?????? ?????.");

	GetPVarString(playerid, #music_add, PlayerMusic[playerid][music][mName], 64);
	DeletePVar(playerid, #music_add);
	format(PlayerMusic[playerid][music][mUrl], 128, inputtext);

	OnPlayerAddMusic(playerid, music, PlayerMusic[playerid][music][mName], PlayerMusic[playerid][music][mUrl]);

	ShowMusicList(playerid);
	return 1;
}*/

Dialog:HandleSellFurnitures(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return cmd::furniture(playerid, "");

    if(pTemp[playerid][pHouseFurniture] == -1 || (IsPlayerHouseOutside(playerid, pTemp[playerid][pHouseFurniture], 5.0) == 0 && 0 == IsPlayerHouseInside(playerid, pTemp[playerid][pHouseFurniture])))
    	return 1;

	new houseid = pTemp[playerid][pHouseFurniture];
	if(HouseInfo[houseid][hOwnerID] != PlayerInfo[playerid][pID] && pTemp[playerid][pBuildHouse] != HouseInfo[houseid][hID])
	    return SendErrorMessage(playerid, "Nu poti modifica mobilierul din aceasta locuinta.");

    if(GetPVarInt(playerid, "buy_furniture"))
        return SendErrorMessage(playerid, "Actiunea este deja in progres.");

	new paycheck;
	for(new i; i < MAX_FURNITURE; i++)
	{
	    if(HouseFurniture[houseid][i][fID] == 0 || HouseFurniture[houseid][i][fOn] == 0) continue;
	    paycheck += (HouseFurniture[houseid][i][fMarketPrice] - (HouseFurniture[houseid][i][fMarketPrice] & 2))  / 2;
	    HouseFurniture[houseid][i][fID] = 0;
	    HouseFurniture[houseid][i][fOn] = 0;
	    DestroyDynamicObject(HouseFurniture[houseid][i][fObject]);
	}
    HouseInfo[houseid][hFurniture] = 0;
    HouseInfo[houseid][hOutsideFurniture] = 0;

   	new query[128];
	mysql_format(dbHandle, query, sizeof(query), "DELETE FROM `furnitures` WHERE `houseid` = %i", HouseInfo[houseid][hID]);
	mysql_tquery(dbHandle, query);

	SendServerMessage(playerid, "Ai vandut mobilierul din locuinta si ai primit 50%c din costul acestuia ({00FF22}${FFFF00}%i{FFFFFF}).", '%', paycheck);
	GiveCash(playerid, paycheck);
	return 1;
}

Dialog:HandleSellFurniture(playerid, response, listitem, inputtext[])
{
    if(!response)
    	return ShowEditFurniture(playerid);

    if(pTemp[playerid][pHouseFurniture] == -1 || (IsPlayerHouseOutside(playerid, pTemp[playerid][pHouseFurniture], 5.0) == 0 && 0 == IsPlayerHouseInside(playerid, pTemp[playerid][pHouseFurniture])))
    	return 1;

	new houseid = pTemp[playerid][pHouseFurniture];
	if(HouseInfo[houseid][hOwnerID] != PlayerInfo[playerid][pID] && pTemp[playerid][pBuildHouse] != HouseInfo[houseid][hID])
	    return SendErrorMessage(playerid, "Nu poti modifica mobilierul din aceasta locuinta.");

	new slot = GetPVarInt(playerid, "chose_slot"),
	    sellprice = (HouseFurniture[houseid][slot][fMarketPrice] - (HouseFurniture[houseid][slot][fMarketPrice] & 2))  / 2;

	if(0 == HouseFurniture[houseid][slot][fOn])
	    return SendErrorMessage(playerid, "");

	SendServerMessage(playerid, "Ai vandut \"%s\" si ai primit 50%c din costul total ({00FF22}${FFFF00}%s{FFFFFF}).", HouseFurniture[houseid][slot][fName], '%', FormatNumber(sellprice));

    if(GetPVarInt(playerid, "buy_furniture") == 0)
		GiveCash(playerid, sellprice);

	OnPlayerSellFurniture(houseid, slot);
	return 1;
}

Dialog:FurnitureCategories(playerid, response, listitem, inputtext[])
{
	if(!response)
		return cmd::furniture(playerid, "");

	if(listitem == 28 && IsPlayerHouseOutside(playerid, pTemp[playerid][pHouseFurniture], 5.0) == 0)
	    return SendErrorMessage(playerid, "Trebuie sa fii in afara locuintei.");

    else if(listitem != 28 && IsPlayerHouseInside(playerid, pTemp[playerid][pHouseFurniture]) == 0)
	    return SendErrorMessage(playerid, "Trebuie sa fii in interioriul locuintei.");

	new objects = furniture_objects[listitem];
	new object_names[153],
	    object_amounts[153];

	SetPVarInt(playerid, "category_furniture", listitem);

	for(new i; i < objects; i++)
	{
	    object_names[i] = furniture_list[listitem][i][frModel];
	    object_amounts[i] = furniture_list[listitem][i][frPrice];
	}
    ShowModelSelectionMenu(playerid, "_", MODEL_SELECTION_FURNITURE, object_names, objects, 0.0, 0.0, 0.0, 1.0, -1, true, object_amounts, "$");
 	return 1;
}

Dialog:CategoryEditFurniture(playerid, response, listitem, inputtext[])
{
	if(!response)
		return cmd::furniture(playerid, "");

    if(pTemp[playerid][pHouseFurniture] == -1 || (IsPlayerHouseOutside(playerid, pTemp[playerid][pHouseFurniture], 5.0) == 0 && 0 == IsPlayerHouseInside(playerid, pTemp[playerid][pHouseFurniture])))
    	return 1;

	new houseid = pTemp[playerid][pHouseFurniture],
		furnitures = GetHouseFurnitures(houseid);

	if(furnitures == 0)
 		return SendErrorMessage(playerid, "Nu exista mobilier cumparat.");

	if(0 == listitem)
	{
	    SelectObject(playerid);
     	SendServerMessage(playerid, "Alege un obiect de mobilier apasand click.");
	    return 1;
	}

    ShowFurnitureList(playerid);
	return 1;
}

Dialog:FurnitureList(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return cmd::furniture(playerid, "");

    if(pTemp[playerid][pHouseFurniture] == -1 || (IsPlayerHouseOutside(playerid, pTemp[playerid][pHouseFurniture], 5.0) == 0 && 0 == IsPlayerHouseInside(playerid, pTemp[playerid][pHouseFurniture])))
    	return 1;

	new houseid = pTemp[playerid][pHouseFurniture],
	    count,
	    list = GetPVarInt(playerid, #furniture_list);

	if(listitem == 0 && list != 0)
		return ShowFurnitureList(playerid, list-1);

	if((listitem == 35 && list == 0) || (listitem == 36 && list != 0))
	    return ShowFurnitureList(playerid, GetPVarInt(playerid, #furniture_list)+1);

    if(list != 0)
		listitem -= 1;

	#if !defined MAX_FURNITURE_LIST
	    #define MAX_FURNITURE_LIST 35
	#endif

	new start_itter =
		MAX_FURNITURE_LIST * list;

    for(new i; i < MAX_FURNITURE; i++)
	{
	    if(HouseFurniture[houseid][i][fOn] == 0 || !IsValidDynamicObject(HouseFurniture[houseid][i][fObject]))
			continue;

		if(count == listitem + start_itter)
		{
		    count = i;
		    break;
		}
		count++;
	}

    if(HouseFurniture[houseid][count][fVirtualWorld] != GetWorld(playerid) || HouseFurniture[houseid][count][fInterior] != GetInterior(playerid))
		return SendErrorMessage(playerid, "Este posibil ca acest obiect sa fie in afara locuintei.");

	SetPVarInt(playerid, "chose_slot", count);
 	Dialog_Show(playerid, EditFurniture, DIALOG_STYLE_LIST, HouseFurniture[houseid][count][fName], "Informatii\nSchimba pozitia\nEditeaza textura\nVinde\nSchimba numele\nCreeaza o copie", "Alege", "Inapoi");
	return 1;
}

Dialog:HandleEditTexture(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return ShowEditFurniture(playerid);

    if(pTemp[playerid][pHouseFurniture] == -1 || (IsPlayerHouseOutside(playerid, pTemp[playerid][pHouseFurniture], 5.0) == 0 && 0 == IsPlayerHouseInside(playerid, pTemp[playerid][pHouseFurniture])))
    	return 1;

	new houseid = pTemp[playerid][pHouseFurniture],
	    slot = GetPVarInt(playerid, "chose_slot");

	if(listitem < 5)
	{
		new title[32];
		format(title, 32, "???????? {00FF22}(%i)", listitem+1);
 		Dialog_Show(playerid, HandleEditTexture2, DIALOG_STYLE_LIST, title, "Schimba textura\nSterge textura", "Alege", "Inapoi");
        SetPVarInt(playerid, "chose_texture", listitem);
		return 1;
	}
 	SendServerMessage(playerid, "Au fost sterse: %s obiecte.", HouseFurniture[houseid][slot][fName]);
  	for(new i; i < 5; i++)
	{
	    if(HouseFurniture[houseid][slot][fTexture][i] == -1)
	        continue;
		HouseFurniture[houseid][slot][fTexture][i] = -1;
        SetDynamicObjectMaterial(HouseFurniture[houseid][slot][fObject], i, -1, "none", "none", 0);
	}

	mysql_tquery(dbHandle, "UPDATE `furnitures` SET `texture_0`=-1,`texture_1`=-1,`texture_2`=-1,`texture_3`=-1,`texture_4`=-1 WHERE `id`='%i'", HouseFurniture[houseid][slot][fID]);
	return 1;
}

Dialog:HandleEditTexture2(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return ShowEditFurniture(playerid);

    if(pTemp[playerid][pHouseFurniture] == -1 || (IsPlayerHouseOutside(playerid, pTemp[playerid][pHouseFurniture], 5.0) == 0 && 0 == IsPlayerHouseInside(playerid, pTemp[playerid][pHouseFurniture])))
    	return 1;

	new houseid = pTemp[playerid][pHouseFurniture],
	    slot = GetPVarInt(playerid, "chose_slot"),
	    texture = GetPVarInt(playerid, "chose_texture");

	switch(listitem)
	{
	    case 0:
		{
		    new Float:x,
				Float:y,
				Float:z,
				Float:facing,
				Float:distance = 3.0;

		    GetPlayerPos(playerid, x, y, z);
		    GetPlayerFacingAngle(playerid, facing);

		  	x += (distance * floatsin(-facing, degrees));
		    y += (distance * floatcos(-facing, degrees));

            InfoMSG(playerid, "\
	 		\" ~y~Y ~w~\" AND \" ~y~N ~w~\" KEY TO SELECT TEXTURE.~n~\
            \" ~y~H ~w~\" KEY TO CHANGE MATERIAL SLOT.~n~\
            \" ~y~SPACE ~w~\" KEY TO CHANGE TEXTURE.~n~\
            \" ~y~ENTER ~w~\" KEY TO EXIT TEXTURE MENU.~n~", 20);

			pTemp[playerid][p3DMenu] = Create3DMenu(playerid, x, y, z, facing, 16);
		    Select3DMenu(playerid, pTemp[playerid][p3DMenu]);
			return 1;
		}
		case 1:
	    {
	        if(HouseFurniture[houseid][slot][fTexture][texture] == -1)
	            return SendErrorMessage(playerid, "Aceasta textura nu este utilizata.");

            SendServerMessage(playerid, "Textura cu ID %i si obiectul: %s a fost eliminata.", texture+1, HouseFurniture[houseid][slot][fName]);

            new query[128];
			mysql_format(dbHandle, query, sizeof(query), "UPDATE `furnitures` SET `texture_%i` = -1 WHERE `id` = %i", texture, HouseFurniture[houseid][slot][fID]);
			mysql_tquery(dbHandle, query);

            HouseFurniture[houseid][slot][fTexture][texture] = -1;
        	SetDynamicObjectMaterial(HouseFurniture[houseid][slot][fObject], texture, -1, "none", "none", 0);
	        return 1;
	    }
	}
	return 1;
}

Dialog:InformationFurniture(playerid, response, listitem, inputtext[])
{
    ShowEditFurniture(playerid);
	return 1;
}

Dialog:EditFurniture(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return cmd::furniture(playerid, "");

    if(pTemp[playerid][pHouseFurniture] == -1 || (IsPlayerHouseOutside(playerid, pTemp[playerid][pHouseFurniture], 5.0) == 0 && 0 == IsPlayerHouseInside(playerid, pTemp[playerid][pHouseFurniture])))
    	return 1;

	new houseid = pTemp[playerid][pHouseFurniture],
	    slot = GetPVarInt(playerid, "chose_slot");

    if(HouseFurniture[houseid][slot][fVirtualWorld] != GetWorld(playerid) || HouseFurniture[houseid][slot][fInterior] != GetInterior(playerid))
		return SendErrorMessage(playerid, "Obiectul este in afara casei. Iesi din casa pentru a putea edita acel obiect.");

	switch(listitem)
	{
	    case 0:
	    {
	        new mes[156];
			format(mes, sizeof(mes), "{ffffff}Categorie: {FFFF00}%s\n{ffffff}Titlu: {FFFF00}%s\n{ffffff}Pret: {00FF22}${FFFF00}%s",
			furniture_title[HouseFurniture[houseid][slot][fCategory]],
			HouseFurniture[houseid][slot][fName],
			FormatNumber(HouseFurniture[houseid][slot][fMarketPrice]));

			Dialog_Show(playerid, InformationFurniture, DIALOG_STYLE_MSGBOX, "Informatii", mes, "Inapoi", "");
	        return 1;
	    }
	    case 1:
	    {
            InfoMSG(playerid, "HOLD \" ~y~SPACE ~w~\" AND PRESS YOUR \" ~y~MMB ~w~\" KEY TO MOVE YOUR FURNITURE ITEM BACK TO YOU.", 5);
	        SetPVarInt(playerid, "edit_furniture", 1);
			EditDynamicObject(playerid, HouseFurniture[houseid][slot][fObject]);
			//SendServerMessage(playerid, "?? ???????????? ???????: %s.", HouseFurniture[houseid][slot][fName]);
	        return 1;
	    }
	    case 2:
	    {
	        new str_tex[200],
				tex_name[5][32] = {"GOL", "GOL", "GOL", "GOL", "GOL"};

			for(new i; i != 5; i++) if(HouseFurniture[houseid][slot][fTexture][i] != -1) format(tex_name[i], 32, "%s", GetTextureName(HouseFurniture[houseid][slot][fTexture][i]));
			format(str_tex, sizeof(str_tex), "Textura 1: %s\nTextura 2: %s\nTextura 3: %s\nTextura 4: %s\nTextura 5: %s\nElimina texturile",
			tex_name[0], tex_name[1], tex_name[2], tex_name[3], tex_name[4]);

	        Dialog_Show(playerid, HandleEditTexture, DIALOG_STYLE_LIST, "Repozitioneaza textura", str_tex, "Selecteaza", "Inapoi");
			return 1;
	    }
	    case 3:
	    {
            new mes[256],
                sellprice = (HouseFurniture[houseid][slot][fMarketPrice] - (HouseFurniture[houseid][slot][fMarketPrice] & 2))  / 2;

			format(mes, sizeof(mes), "{ffffff}Categorie: {FFFF00}%s\n{ffffff}Titlu: {FFFF00}%s\n{ffffff}Pret: {00FF22}${FFFF00}%s\n{ffffff}Vei primi la vanzare: {00FF22}${FFFF00}%s",
            furniture_title[HouseFurniture[houseid][slot][fCategory]],
			HouseFurniture[houseid][slot][fName],
			FormatNumber(HouseFurniture[houseid][slot][fMarketPrice]),
			FormatNumber(sellprice));

			Dialog_Show(playerid, HandleSellFurniture, DIALOG_STYLE_MSGBOX, "Vinde", mes, "Vinde", "Inapoi");
	        return 1;
	    }
		case 4:
		{
		    Dialog_Show(playerid, FurnitureRename, DIALOG_STYLE_INPUT, HouseFurniture[houseid][slot][fName], "\t\t{ffffff}??????? ????? ???????? ?????? ??????:\t\t\n\t\t- ??????????? ?????????? ???????? 1.\t\t\n\t\t- ???????????? ?????????? ???????? 32.\t\t", "????????", "?????");
			return 1;
		}
		case 5:
		{
		    new mes[156];
			format(mes, sizeof(mes), "{ffffff}Categorie: {FFFF00}%s\n{ffffff}Titlu: {FFFF00}%s\n{ffffff}Pret: {00FF22}${FFFF00}%s",
			furniture_title[HouseFurniture[houseid][slot][fCategory]],
			HouseFurniture[houseid][slot][fName],
			FormatNumber(HouseFurniture[houseid][slot][fMarketPrice]));

		    Dialog_Show(playerid, CopyFurniture, DIALOG_STYLE_MSGBOX, "Creeaza o copie", mes, "Cumpara", "Inapoi");
		}
	}
	return 1;
}

Dialog:FurnitureRename(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return 1;

    if(pTemp[playerid][pHouseFurniture] == -1 || (IsPlayerHouseOutside(playerid, pTemp[playerid][pHouseFurniture], 5.0) == 0 && 0 == IsPlayerHouseInside(playerid, pTemp[playerid][pHouseFurniture])))
    	return 1;

	new houseid = pTemp[playerid][pHouseFurniture],
	    slot = GetPVarInt(playerid, "chose_slot");

	if(strlen(inputtext) < 1 || strlen(inputtext) > 32)
	{
	    Dialog_Show(playerid, FurnitureRename, DIALOG_STYLE_INPUT, HouseFurniture[houseid][slot][fName], "\t\t{ffffff}??????? ????? ???????? ?????? ??????:\t\t\n\t\t\t - ??????????? ?????????? ???????? 1.\t\t\n\t\t\t - ???????????? ?????????? ???????? 32.\t\t", "????????", "?????");
		return SendErrorMessage(playerid, "Titlul trebuie sa contina intre 1 si 32 de caractere!");
	}
	SendServerMessage(playerid, "Ai schimbat numele obiectului: {FFFF00}%s{ffffff} in: {FFFF00}%s.", HouseFurniture[houseid][slot][fName], inputtext);
    format(HouseFurniture[houseid][slot][fName], 32, "%s", inputtext);

	new query[128];
	mysql_format(dbHandle, query, sizeof(query), "UPDATE `furnitures` SET `name` = '%e' WHERE `id` = %i", HouseFurniture[houseid][slot][fName], HouseFurniture[houseid][slot][fID]);
	mysql_tquery(dbHandle, query);
	return 1;
}

Dialog:BuyFurniture(playerid, response, listitem, inputtext[])
{
	if(!response)
	{
	    listitem = GetPVarInt(playerid, "category_furniture");

        new objects = furniture_objects[listitem];
		new object_names[153],
		    object_amounts[153];

		for(new i; i < objects; i++)
		{
		    object_names[i] = furniture_list[listitem][i][frModel];
		    object_amounts[i] = furniture_list[listitem][i][frPrice];
		}
    	ShowModelSelectionMenu(playerid, "_", MODEL_SELECTION_FURNITURE, object_names, objects, 0.0, 0.0, 0.0, 1.0, -1, true, object_amounts, "$");
	    return 1;
	}

    if(pTemp[playerid][pHouseFurniture] == -1)
        return 1;

    new houseid = pTemp[playerid][pHouseFurniture],
		index = GetPVarInt(playerid, "furniture_index");

    listitem = GetPVarInt(playerid, "category_furniture");

    if(GetCash(playerid) < furniture_list[listitem][index][frPrice])
		return SendNotCash(playerid);

    if(listitem == 28 && IsPlayerHouseOutside(playerid, houseid, 5.0) == 0)
	    return SendErrorMessage(playerid, "Trebuie sa fi in afara casei pentru a cumpara mobila.");

    else if(listitem != 28 && IsPlayerHouseInside(playerid, houseid) == 0)
	    return SendErrorMessage(playerid, "Pentru a cumpara acest tip de mobila trebuie sa te aflii in casa!");

    if(GetHouseFurnitures(houseid) >= GetMaxPlayerFurniture(playerid))
		return SCM(playerid, COLOR_YELLOWG, "Ai achizitionat deja numarul maxim de obiecte!");

    if(listitem == 28 && GetHouseOutsideFurnitures(houseid) > 9)
    	return SCM(playerid, COLOR_YELLOWG, "In afara casei poti pune doar 10 obiecte!");

    new i = -1;
	for(new a; a < MAX_FURNITURE; a++)
	{
	    if(HouseFurniture[houseid][a][fOn] != 0)
	    	continue;

     	i = a;
		break;
	}

	if(i == -1)
		return 1;

	SetPVarInt(playerid, "buy_furniture", 1);
	SetPVarInt(playerid, "edit_furniture", 1);
	SetPVarInt(playerid, "chose_slot", i);

	new Float:x,
		Float:y,
		Float:z;
    GetXYInFrontOfPlayer(playerid, x, y, z, 3.0);

    InfoMSG(playerid, "\
		HOLD \" ~y~SPACE ~w~\" AND PRESS YOUR \" ~y~MMB ~w~\" KEY TO MOVE YOUR FURNITURE ITEM BACK TO YOU.~n~\
		PRESS YOUR \" ~r~ESC ~w~\" KEY TO RETURN THE ITEM IF YOU ARE NOT PLEASED.", 5);

	HouseFurniture[houseid][i][fObject] =
		CreateDynamicObject(furniture_list[listitem][index][frModel], x, y, z-1.0, 0.0, 0.0, 0.0, GetWorld(playerid), GetInterior(playerid));
	EditDynamicObject(playerid, HouseFurniture[houseid][i][fObject]);

//    GiveCash(playerid, -furniture_list[listitem][index][frPrice]);//qqq
	OnPlayerBuyFurniture(houseid, GetInterior(playerid), GetWorld(playerid), i, furniture_list[listitem][index][frModel], furniture_list[listitem][index][frPrice], furniture_list[listitem][index][frName], x, y, z, listitem);
	return 1;
}

Dialog:CopyFurniture(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return ShowEditFurniture(playerid);

    if(pTemp[playerid][pHouseFurniture] == -1 || (IsPlayerHouseOutside(playerid, pTemp[playerid][pHouseFurniture], 5.0) == 0 && 0 == IsPlayerHouseInside(playerid, pTemp[playerid][pHouseFurniture])))
    	return 1;

    new houseid = pTemp[playerid][pHouseFurniture],
		slot = GetPVarInt(playerid, "chose_slot");

    if(GetCash(playerid) < HouseFurniture[houseid][slot][fMarketPrice])
		return SendNotCash(playerid);

	if(GetHouseFurnitures(houseid) >= GetMaxPlayerFurniture(playerid))
		return SCM(playerid, COLOR_YELLOWG, "Ai atins deja numarul maxim de obiecte!");

    if(HouseFurniture[houseid][slot][fCategory] == 28 && GetHouseOutsideFurnitures(houseid) > 9)
    	return SCM(playerid, COLOR_YELLOWG, "In afara casei poti pune doar 10 obiecte!");

	new i = -1;
	for(new a; a < MAX_FURNITURE; a++)
	{
	    if(HouseFurniture[houseid][a][fOn] != 0)
	        continue;

   		i = a;
		break;
	}

	if(i == -1)
		return 1;

	SetPVarInt(playerid, "buy_furniture", 2);
	SetPVarInt(playerid, "edit_furniture", 1);
	SetPVarInt(playerid, "chose_slot", i);

    InfoMSG(playerid, "\
		HOLD \" ~y~SPACE ~w~\" AND PRESS YOUR \" ~y~MMB ~w~\" KEY TO MOVE YOUR FURNITURE ITEM BACK TO YOU.~n~\
		PRESS YOUR \" ~r~ESC ~w~\" KEY TO RETURN THE ITEM IF YOU ARE NOT PLEASED.", 5);

	HouseFurniture[houseid][i][fObject] =
		CreateDynamicObject(HouseFurniture[houseid][slot][fModel], HouseFurniture[houseid][slot][fPosX], HouseFurniture[houseid][slot][fPosY], HouseFurniture[houseid][slot][fPosZ], HouseFurniture[houseid][slot][fPosRX], HouseFurniture[houseid][slot][fPosRY], HouseFurniture[houseid][slot][fPosRZ], HouseFurniture[houseid][slot][fVirtualWorld], HouseFurniture[houseid][slot][fInterior]);

	new tid;
    for(new b; b != 5; b++)
	{
	    HouseFurniture[houseid][i][fTexture][b] = -1;
 		if(HouseFurniture[houseid][slot][fTexture][b] == -1)
   			continue;

		tid = HouseFurniture[houseid][slot][fTexture][b];
		HouseFurniture[houseid][i][fTexture][b] = tid;
		SetDynamicObjectMaterial(HouseFurniture[houseid][i][fObject], b, ObjectTextures[tid][TModel], ObjectTextures[tid][TXDName], ObjectTextures[tid][TextureName], ObjectTextures[tid][MaterialColor]);
	}
	EditDynamicObject(playerid, HouseFurniture[houseid][i][fObject]);

    GiveCash(playerid, -HouseFurniture[houseid][slot][fMarketPrice]);
	OnPlayerBuyFurniture(houseid, HouseFurniture[houseid][slot][fInterior], HouseFurniture[houseid][slot][fVirtualWorld], i, HouseFurniture[houseid][slot][fModel], HouseFurniture[houseid][slot][fMarketPrice], HouseFurniture[houseid][slot][fName], HouseFurniture[houseid][slot][fPosX], HouseFurniture[houseid][slot][fPosY], HouseFurniture[houseid][slot][fPosZ],
 	HouseFurniture[houseid][slot][fCategory], HouseFurniture[houseid][slot][fPosRX], HouseFurniture[houseid][slot][fPosRY], HouseFurniture[houseid][slot][fPosRZ], HouseFurniture[houseid][i][fTexture][0], HouseFurniture[houseid][i][fTexture][1], HouseFurniture[houseid][i][fTexture][2], HouseFurniture[houseid][i][fTexture][3], HouseFurniture[houseid][i][fTexture][4]);
	return 1;
}

Dialog:FurnitureDialog(playerid, response, listitem, inputtext[])
{
	if(!response)
	{
	    pTemp[playerid][pHouseFurniture] = -1;
	    return 1;
	}
	switch(listitem)
	{
	    case 0:
	    {
			new str[549] = "1. Canapele\n2. Paturi\n3. Fotolii, Scaune\n4. Mese\n5. Mese mici\n6. Obiecte luminoase: Lampi\n7. Echipament de club\n8. Vestiare\n9. Mobila pentru bucatarie\n10. Produse\n11. Gunoi\n12. Haine\n13. Pahare, Sticle\n14. Usi dinamice\n15. Decor interior\n16. Arme\n17. Electronice\n18. Baie\n";
	        strcat(str, "19. Tablouri\n20. Plante\n21. Perete\n22. Perete lung\n23. Intrare\n24. Geam\n25. Pahare2\n26. Narrow wall\n27. Perete3\n28. Columns\n29. Obiecte exterioare");
	        Dialog_Show(playerid, FurnitureCategories, DIALOG_STYLE_LIST, "?????? ????????:", str, "???????", "??????");
			return 1;
	    }
	    case 1:
		{
		    Dialog_Show(playerid, CategoryEditFurniture, DIALOG_STYLE_LIST, "Editarea mobilei:", "Editeaza cu mouse-ul\nLista mobila", "Selecteaza", "Inapoi");
		}
		case 2:
		{
            if(GetHouseFurnitures(pTemp[playerid][pHouseFurniture]) == 0)
 				return SendErrorMessage(playerid, "Casa nu are mobila cumparata!");

			Dialog_Show(playerid, HandleSellFurnitures, DIALOG_STYLE_MSGBOX, "Vinde toata mobila:", "{ffffff}Esti sigur ca vrei sa vinzi toata mobila?", "Vinde", "Anuleaza");
		}
	}
	return 1;
}

Dialog:ModDialog(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return 1;

	new vehicle = GetPlayerVehicleID(playerid);
	if(0 == IsPlayerInAnyVehicle(playerid) || VehicleInfo[vehicle][carOwnerID] == 0)
		return 1;

   	if(ModShop_Nearest(playerid) == -1)
  		return 1;

	if(listitem == 8)
	{
	    if(IsABicycle(vehicle) || IsABiker(vehicle) || IsATaxi(vehicle))
			return SCM(playerid, COLOR_LIGHTRED, "Aceasta functie nu este disponibila pentru biciclete, taxiuri si motociclete");

	    if(IsVehicleUpgradeCompatible(GetVehicleModel(vehicle), 1008) != 1 && IsVehicleUpgradeCompatible(GetVehicleModel(vehicle), 1009) != 1 && IsVehicleUpgradeCompatible(GetVehicleModel(vehicle), 1010) != 1)
		{
		    ShowModMenu(playerid);
			return SendErrorMessage(playerid, "Nu poti adauga nitro pe acest vehicul!");
		}

        Dialog_Show(playerid, NitroDialog, DIALOG_STYLE_TABLIST, "{33AA33}Tuning vehicul", "Nitro x2\t$4.500\nNitro x5\t$9.000\nNitro x10\t$15000", "Alege", "Inapoi");
		return 1;
	}
	else if(listitem == 9)
	{
	    if(IsVehiclePaintJob(GetVehicleModel(vehicle)) == 0)
	    	return SendErrorMessage(playerid, "Nu poti pune un paintjob pe acest vehicul.");

		new mes[128];
		for(new i; i != IsVehiclePaintJob(GetVehicleModel(vehicle)); i++)
		{
			format(mes, sizeof(mes), "%s\nPaintjob %i", mes, i+1);
	    }

	    Dialog_Show(playerid, PaintjobDialog, DIALOG_STYLE_LIST, "{33AA33}Pret: $3.000", mes, "Alege", "Inapoi");
	    return 1;
	}
	else if(listitem == 10)
	{
	    new colors[256];
     	for(new i; i != 256; i++)
      		colors[i] = i;

		ShowColorSelectionMenu(playerid, MODEL_SELECTION_COLOR, colors, sizeof(colors));
	    SetPVarInt(playerid, #veh_color1, -1);
	    SetPVarInt(playerid, #veh_color_type, 2);
	    return 1;
	}
	else if(listitem == 11)
	{
	    if(IsABicycle(vehicle) || IsABiker(vehicle) || IsATaxi(vehicle))
			return SCM(playerid, COLOR_LIGHTRED, "Aceasta functie nu este disponibila pentru biciclete, taxiuri si motociclete.");

	    if(VehicleInfo[vehicle][carComponent][CARMODTYPE_HYDRAULICS] != 0)
		{
		    ShowModMenu(playerid);
			return SCM(playerid, COLOR_LIGHTRED, "Ai deja hidraulice instalate.");
		}
	    Dialog_Show(playerid, HydralicConfrim, DIALOG_STYLE_MSGBOX, "{33AA33}Tuning vehicul", "{FFFFFF}Esti sigur ca doresti sa achizitionezi hidraulice in schimbul sumei de $8.000?", "Da", "Inapoi");
		return 1;
	}
	else if(listitem == 12)
	{
	    if(IsABicycle(vehicle) || IsABiker(vehicle) || IsATaxi(vehicle))
			return SCM(playerid, COLOR_LIGHTRED, "Aceasta functie nu este disponibila pentru biciclete, taxiuri si motociclete.");

		if(VehicleInfo[vehicle][carRadio] == 1)
		{
		    ShowModMenu(playerid);
			return SCM(playerid, COLOR_LIGHTRED, "Ai deja radio instalat.");
		}

		Dialog_Show(playerid, RadioConfrim, DIALOG_STYLE_MSGBOX, "{33AA33}Tuning vehicul", "{FFFFFF}Esti sigur ca doresti sa achizitionezi radio in schimbul sumei de $400?", "Da", "Inapoi");
	    return 1;
	}
	else if(listitem == 13)
	{
		if(VehicleInfo[vehicle][carGps] == 1)
		{
		    ShowModMenu(playerid);
			return SCM(playerid, COLOR_LIGHTRED, "Ai deja GPS instalat.");
		}

		Dialog_Show(playerid, GPSConfrim, DIALOG_STYLE_MSGBOX, "{33AA33}Tuning vehicul", "{FFFFFF}Esti sigur ca doresti sa achizitionezi GPS-ul in schimbul sumei de $1.500?", "Da", "Inapoi");
	    return 1;
	}
	else if(listitem == 14)
	{
		new cost = GetVehiclePrice(GetVehicleModel(vehicle)) / 100 * 10;
		if(cost < 1)
		    return 1;

		if(GetCash(playerid) < cost)
		return SendErrorMessage(playerid, "Costul schimbarii motorului este de $%i.", cost);

		StartVehicleUpgrade(playerid, vehicle, 9, cost);
		return 1;
	}
	else if(listitem == 15)
	{
		new cost = GetVehiclePrice(GetVehicleModel(vehicle)) / 100 * 5;
		if(cost < 1)
		    return 1;

		if(GetCash(playerid) < cost)
		return SendErrorMessage(playerid, "Costul schimbarii bateriei este de $%i.", cost);

		StartVehicleUpgrade(playerid, vehicle, 11, cost);
		return 1;
	}
	else if(listitem == 16)
	{
		Dialog_Show(playerid, ChangeLock, DIALOG_STYLE_MSGBOX, "{33AA33}Schimbare incuietoare", "{FFFFFF}Esti sigur ca vrei sa schimbi incuietoarea pentru suma de $300?\nDublurile create cheilor vor deveni invalide.", "Da", "Inapoi");
	    return 1;
	}
	else if(listitem == 17)
	{
	    static const str_size[] =
			"1. Incuietoare\t[%i ]\n2. Semnalizare\t[nivel %i]\n3. Imobilizare\t[nivel %i]\n4. Asigurare\t[nivel %i]\n5. Armura\t[%.0f HP]";

		new mes[sizeof(str_size) - 18 + 1 + 48];
  		format(mes, sizeof(mes), str_size,
    		VehicleInfo[vehicle][carLock],
      		VehicleInfo[vehicle][carAlarm],
        	VehicleInfo[vehicle][carImmob],
        	VehicleInfo[vehicle][carInsurance],
	        VehicleInfo[vehicle][carArmour]
		);
  		Dialog_Show(playerid, VehUpgrade, DIALOG_STYLE_TABLIST, "Imbunatatiri", mes, "Alege", "Inapoi");
		return 1;
	}
	else if(listitem == 18)
	{
	    if(IsABicycle(vehicle) || IsABiker(vehicle) || IsATaxi(vehicle))
			return SCM(playerid, COLOR_LIGHTRED, "Aceasta functie nu este disponibila pentru biciclete, taxiuri si motociclete.");

		new mes[512] = "{AFAFAF}Inlatura{FFFFFF} rotile\n\
		{AFAFAF}Inlatura{FFFFFF} spoiler\n\
		{AFAFAF}Inlatura{FFFFFF} admisia aerului\n\
		{AFAFAF}Inlatura{FFFFFF} acoperis\n\
		{AFAFAF}Inlatura{FFFFFF} side skirts\n\
		{AFAFAF}Inlatura{FFFFFF} toba de esapament\n\
		{AFAFAF}Inlatura{FFFFFF} front bumper\n";

	    strcat(mes, "{AFAFAF}Inlatura{FFFFFF} rear bumper\n\
		{AFAFAF}Inlatura{FFFFFF} nitro\n\
		{AFAFAF}Inlatura{FFFFFF} paintjob\n\
		{AFAFAF}Inlatura{FFFFFF} hiradulice\n\
		{AFAFAF}Inlatura{FFFFFF} radio");

	    Dialog_Show(playerid, DeleteTuning, DIALOG_STYLE_LIST, "{33AA33}Inlatura tuning", mes, "Alege", "Inapoi");
	    return 1;
	}

	ShowComponentMenu(playerid, vehicle, listitem);
	return 1;
}
Dialog:ModDialogBike(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return 1;

	new vehicle = GetPlayerVehicleID(playerid);
	if(0 == IsPlayerInAnyVehicle(playerid) || VehicleInfo[vehicle][carOwnerID] == 0)
		return 1;

   	if(ModShop_Nearest(playerid) == -1)
  		return 1;

	if(listitem == 0)
	{
	    new colors[256];
     	for(new i; i != 256; i++)
      		colors[i] = i;

		ShowColorSelectionMenu(playerid, MODEL_SELECTION_COLOR, colors, sizeof(colors));
	    SetPVarInt(playerid, #veh_color1, -1);
	    SetPVarInt(playerid, #veh_color_type, 1);
	    return 1;
	}
	return 1;
}
Dialog:BuyVehArmour(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return ShowModMenu(playerid);

    new vehicle = GetPlayerVehicleID(playerid);
	if(0 == IsPlayerInAnyVehicle(playerid) || VehicleInfo[vehicle][carOwnerID] == 0)
		return 1;

   	if(ModShop_Nearest(playerid) == -1)
  		return 1;

	new amount = strval(inputtext);
    if(amount < 10 || amount > 250)
	{
	    Dialog_Show(playerid, BuyVehArmour, DIALOG_STYLE_INPUT, "Achizitoneaza armura", "{ffffff}Introdu nivelul de armura (de la 10 la 250), pe care vrei sa il cumperi [o unitate costa $10]:", "Cumpara", "Inapoi");
	    return SendErrorMessage(playerid, "Valoare invalida.");
	}

    if(VehicleInfo[vehicle][carArmour] + amount > 250.0)
	{
	    Dialog_Show(playerid, BuyVehArmour, DIALOG_STYLE_INPUT, "Achizitoneaza armura", "{ffffff}Introdu nivelul de armura (de la 10 la 250), pe care vrei sa il cumperi [o unitate costa $10]:", "Cumpara", "Inapoi");
	    return SendErrorMessage(playerid, "Poti cumpara doar %.0f armura.", 250.0 - VehicleInfo[vehicle][carArmour]);
	}

    if(VehicleInfo[vehicle][carAttach3DtextUse] != 0)
		return SCM(playerid, COLOR_LIGHTRED, "Asteapta, operatiunea este in curs.");

	if(GetCash(playerid) < amount * 10)
	{
	    Dialog_Show(playerid, BuyVehArmour, DIALOG_STYLE_INPUT, "Achizitoneaza armura", "{ffffff}Introdu nivelul de armura (de la 10 la 250), pe care vrei sa il cumperi [o unitate costa $10]:", "Cumpara", "Inapoi");
 		return SendClientMessageEx(playerid,COLOR_LIGHTRED,"Pretul armurii este de $%i.", amount * 10);
	}
	StartVehicleUpgrade(playerid, vehicle, 6, 10 * amount, amount);
	FreezePlayer(playerid);
	return 1;
}

Dialog:BuyVehInsurance(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return ShowModMenu(playerid);

    new vehicle = GetPlayerVehicleID(playerid);
	if(0 == IsPlayerInAnyVehicle(playerid) || VehicleInfo[vehicle][carOwnerID] == 0)
		return 1;

   	if(ModShop_Nearest(playerid) == -1)
  		return 1;

    new cost = GetInsurancePrice(GetVehicleModel(vehicle));
    if(!cost)
    	return SendErrorMessage(playerid, "Asigurarea nu este valabila pentru acest vehicul.");

    if(!VehicleInfo[vehicle][carRegistered])
		return SCM(playerid, COLOR_LIGHTRED, "Acest vehicul nu este inmatriculat.");

	if(VehicleInfo[vehicle][carAttach3DtextUse] != 0)
		return SCM(playerid, COLOR_LIGHTRED, "Asteapta, operatiunea este in progres.");

	new level = strval(inputtext);
	if(level < 1 || level > 3)
		return SCM(playerid, COLOR_LIGHTRED, "Nivelul de asigurare nu poate fi mai mic decat 1 si mai mare decat 3.");

	if(VehicleInfo[vehicle][carInsurance] >= level)
		return SendClientMessageEx(playerid,COLOR_LIGHTRED,"Ai deja un nivel de asigurare (%i).", level);

	if(GetCash(playerid) < cost * level)
		return SendNotCash(playerid);

	StartVehicleUpgrade(playerid, vehicle, 5, cost * level, level);
	return 1;
}

Dialog:VehUpgrade(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return ShowModMenu(playerid);

    new vehicle = GetPlayerVehicleID(playerid);
	if(0 == IsPlayerInAnyVehicle(playerid) || VehicleInfo[vehicle][carOwnerID] == 0)
		return 1;

   	if(ModShop_Nearest(playerid) == -1)
  		return 1;

    if(listitem == 3)
	{
	    new cost = GetInsurancePrice(GetVehicleModel(vehicle));
	    if(!cost)
	        return SendErrorMessage(playerid, "Asigurarea nu este valabila pentru acest vehicul.");

	    new mes[590] = "{ffffff}Nivel 1 - $%i\n\
	    {4a90f0}+{ffffff}Vehiculul va fi respawnat cu HP-ul maxim.\n\n\
	    {ffffff}Nivel 2 - $%i\n\
	    {4a90f0}+{ffffff}Vehiculul va fi respawnat cu HP-ul maxim.\n\
		{4a90f0}+{ffffff}Vehiculul va fi respawnat fara damage.\n\n\
		{ffffff}Nivel 3 - $%i\n";

	    strcat(mes, "{4a90f0}+{ffffff}Vehiculul va fi respawnat cu HP-ul maxim.\n\
		{4a90f0}+{ffffff}Vehiculul va fi respawnat fara damage.\n\
		{4a90f0}+{ffffff}Se salveaza tuningul si radio-ul.\n\nIntrodu nivelul de asigurare pe care vrei sa-l achizitionezi in tabelul de mai jos:");

	    format(mes, sizeof(mes), mes, cost * 1, cost * 2, cost * 3);
	    Dialog_Show(playerid, BuyVehInsurance, DIALOG_STYLE_INPUT, "Cumpara asigurare", mes, "Cumpara", "Inapoi");
	    return 1;
	}
	else if(listitem == 4)
	{
	    Dialog_Show(playerid, BuyVehArmour, DIALOG_STYLE_INPUT, "Achizitoneaza armura", "{ffffff}Introdu nivelul de armura (de la 10 la 250), pe care vrei sa il cumperi [o unitate costa $10]:", "Cumpara", "Inapoi");
	    return 1;
	}
	new alarm_mes[][] =
	{
	    {"{4a90f0}+{ffffff}Alerta alarma."},
	    {"{4a90f0}+{ffffff}Alerta alarma.\n{4a90f0}+{ffffff}Alertare autoritati."},
	    {"{4a90f0}+{ffffff}Alerta alarma.\n{4a90f0}+{ffffff}Alertare autoritati.\n{4a90f0}+{ffffff}Alertare proprietar prin SMS."},
	    {"{4a90f0}+{ffffff}Alerta alarma.\n{4a90f0}+{ffffff}Alertare autoritati.\n{4a90f0}+{ffffff}Alertare proprietar prin SMS + facturare."}
	};
	new mes[256];
	switch(listitem)
	{
	    case 0:
		{
		    if(VehicleInfo[vehicle][carLock] >= sizeof(price_mod_lock))
				return SendErrorMessage(playerid, "Incuietoarea a atins nivelul maxim.");
			format(mes, sizeof(mes), "{ffffff}Doresti sa avansezi incuietoarea la nivelul %i in schimbul sumei de $%i?\n{4a90f0}+{ffffff}%i.", VehicleInfo[vehicle][carLock]+1, price_mod_lock[VehicleInfo[vehicle][carLock]], 60 + ((VehicleInfo[vehicle][carLock]+1) * 60));
		}
		case 1:
		{
		    if(VehicleInfo[vehicle][carAlarm] >= sizeof(price_mod_alarm))
				return SendErrorMessage(playerid, "Alarma a atins nivelul maxim.");
			format(mes, sizeof(mes), "{ffffff}Doresti sa avansezi alarma la nivelul %i in schimbul sumei de $%i?\n%s", VehicleInfo[vehicle][carAlarm]+1, price_mod_alarm[VehicleInfo[vehicle][carAlarm]], alarm_mes[VehicleInfo[vehicle][carAlarm]]);
		}
		case 2:
		{
		    if(VehicleInfo[vehicle][carImmob] >= sizeof(price_mod_immob))
				return SendErrorMessage(playerid, "Imobilizarea a atins nivelul maxim.");
			format(mes, sizeof(mes), "{ffffff}Doresti sa avansezi imobilizarea la nivelul %i in schimbul sumei de $%i?\n{4a90f0}+{ffffff}suport aditional.", VehicleInfo[vehicle][carImmob]+1, price_mod_immob[VehicleInfo[vehicle][carImmob]]);
		}
	}
	SetPVarInt(playerid, #upgrade_veh, listitem);
	Dialog_Show(playerid, BuyVehUpgrade2, DIALOG_STYLE_MSGBOX, "Cumpara upgrade", mes, "Cumpara", "Inapoi");
 	return 1;
}

Dialog:BuyVehUpgrade2(playerid, response, listitem, inputtext[])
{
    if(!response)
	    return ShowModMenu(playerid);

    new vehicle = GetPlayerVehicleID(playerid);
	if(0 == IsPlayerInAnyVehicle(playerid) || VehicleInfo[vehicle][carOwnerID] == 0)
		return 1;

   	if(ModShop_Nearest(playerid) == -1)
  		return 1;

    listitem = GetPVarInt(playerid, #upgrade_veh);
    switch(listitem)
    {
        case 0: StartVehicleUpgrade(playerid, vehicle, 2, price_mod_lock[VehicleInfo[vehicle][carLock]], VehicleInfo[vehicle][carLock]+1);
        case 1: StartVehicleUpgrade(playerid, vehicle, 3, price_mod_alarm[VehicleInfo[vehicle][carAlarm]], VehicleInfo[vehicle][carAlarm]+1);
        case 2: StartVehicleUpgrade(playerid, vehicle, 4, price_mod_immob[VehicleInfo[vehicle][carImmob]], VehicleInfo[vehicle][carImmob]+1);
    }
	return 1;
}

Dialog:SelectModDialog(playerid, response, listitem, inputtext[])
{
    new vehicle = GetPlayerVehicleID(playerid);
    new comptype = GetPVarInt(playerid, #component_type),
        compid = -1;

    if(0 == IsPlayerInAnyVehicle(playerid) || VehicleInfo[vehicle][carOwnerID] == 0)
		return 1;

    if(!response)
        return ShowModMenu(playerid);

   	if(ModShop_Nearest(playerid) == -1)
  		return 1;

    for(new i; i != max_vehicle_components[comptype]; i++)
	{
		if(vehicle_component[comptype][i][compID] == 0 || IsVehicleUpgradeCompatible(GetVehicleModel(vehicle), vehicle_component[comptype][i][compID]) != 1)
			continue;

		compid++;
		if(listitem == compid)
		{
			compid = i;
			break;
		}
   	}

   	new modelid = vehicle_component[comptype][compid][compID];
   	if(GetVehicleComponentType(modelid) == -1 || IsVehicleUpgradeCompatible(GetVehicleModel(vehicle), modelid) != 1)
	{
		ShowModMenu(playerid);
		return SendErrorMessage(playerid, "Acest obiect nu incape in vehicul.");
	}

	if(comptype == -1 || compid == -1)
	    return SendErrorMessage(playerid, "Eroare, contacteaza administratorii!");

    new mes[128];
    format(mes, sizeof(mes), "{FFFFFF}Esti sigur ca doresti sa pui %s pentru $%i?", GetComponentName(modelid), vehicle_component[comptype][compid][compPrice]);

    Dialog_Show(playerid, ModConfrim, DIALOG_STYLE_MSGBOX, "{33AA33}Tuning vehicul", mes, "Da", "Inapoi");
    SetPVarInt(playerid, #component_model, modelid);
    SetPVarInt(playerid, #component_type, comptype);

    AddVehicleComponent(vehicle, modelid);
	return 1;
}

Dialog:DeleteTuning(playerid, response, listitem, inputtext)
{
    if(!response)
	    return ShowModMenu(playerid);

    new vehicle = GetPlayerVehicleID(playerid);

	if(0 == IsPlayerInAnyVehicle(playerid) || VehicleInfo[vehicle][carOwnerID] == 0)
		return 1;

   	if(ModShop_Nearest(playerid) == -1)
  		return 1;

	if(listitem == 9 && VehicleInfo[vehicle][carPaintJob] == 3)
	{
	    ShowModMenu(playerid);
	    return SendErrorMessage(playerid, "Nu ai un paintjob.");
	}

    if(listitem == 11 && VehicleInfo[vehicle][carRadio] == 0)
    {
	    ShowModMenu(playerid);
	    return SendErrorMessage(playerid, "Nu ai un radio instalat.");
	}

  	new comp_type[11] =
	  	{CARMODTYPE_WHEELS, CARMODTYPE_SPOILER, CARMODTYPE_HOOD, CARMODTYPE_ROOF, CARMODTYPE_SIDESKIRT, CARMODTYPE_EXHAUST, CARMODTYPE_FRONT_BUMPER, CARMODTYPE_REAR_BUMPER, CARMODTYPE_NITRO, 0, CARMODTYPE_HYDRAULICS};

	if(listitem != 9 && listitem != 11 && VehicleInfo[vehicle][carComponent][comp_type[listitem]] == 0)
	{
	    ShowModMenu(playerid);
	    return SendErrorMessage(playerid, "Nu ai aceasta componenta instalata.");
	}

	new comp_name[12][32] =
		{"Roti", "Spoiler", "Air Intake","Roof","Side skirts","Toba de esapament","Front bumper","Rear bumper","Nitro","Paintjob","Hidraulice","Radio"};

	new mes[128];
	format(mes, sizeof(mes), "{FFFFFF}Esti sigur ca vrei sa inlaturi %s?", comp_name[listitem]);
	Dialog_Show(playerid, DeleteTuningConfrim, DIALOG_STYLE_MSGBOX, "{33AA33}Inlatura tuning", mes, "Da", "Inapoi");
    SetPVarInt(playerid, #select_deltun, listitem);
	return 1;
}

Dialog:DeleteTuningConfrim(playerid, response, listitem, inputtext)
{
    if(!response)
	    return ShowModMenu(playerid);

    listitem = GetPVarInt(playerid, #select_deltun);

    new vehicle = GetPlayerVehicleID(playerid);

	if(0 == IsPlayerInAnyVehicle(playerid) || VehicleInfo[vehicle][carOwnerID] == 0)
		return 1;

   	if(ModShop_Nearest(playerid) == -1)
  		return 1;

	if(listitem == 9 && VehicleInfo[vehicle][carPaintJob] == 3)
	{
	    ShowModMenu(playerid);
	    return SendErrorMessage(playerid, "Nu ai un paintjob.");
	}

    if(listitem == 11 && VehicleInfo[vehicle][carRadio] == 0)
    {
	    ShowModMenu(playerid);
	    return SendErrorMessage(playerid, "Nu ai un radio instalat.");
	}

  	new comp_type[11] =
	  	{CARMODTYPE_WHEELS, CARMODTYPE_SPOILER, CARMODTYPE_HOOD, CARMODTYPE_ROOF, CARMODTYPE_SIDESKIRT, CARMODTYPE_EXHAUST, CARMODTYPE_FRONT_BUMPER, CARMODTYPE_REAR_BUMPER, CARMODTYPE_NITRO, 0, CARMODTYPE_HYDRAULICS};

	if(listitem != 9 && listitem != 11 && VehicleInfo[vehicle][carComponent][comp_type[listitem]] == 0)
	{
	    ShowModMenu(playerid);
	    return SendErrorMessage(playerid, "Nu ai instalat aceasta componenta.");
	}

    if(listitem == 9)
	{
	    VehicleInfo[vehicle][carPaintJob] = 3;
	    ChangeVehiclePaintjob(vehicle, 3);
	}
    else if(listitem == 11)
        VehicleInfo[vehicle][carRadio] = 0;
	else
	{
	    RemoveVehicleComponent(vehicle, VehicleInfo[vehicle][carComponent][comp_type[listitem]]);
	    VehicleInfo[vehicle][carComponent][comp_type[listitem]] = 0;
	}

	new comp_name[12][32] =
		{"rotile", "spoiler", "air intake","roof","side skirts","toba de esapament","front bumper","rear bumper","nitro","paintjob","hidraulice","radio"};

	SendClientMessageEx(playerid, COLOR_GREEN, "Ai inlaturat %s.", comp_name[listitem]);
	return 1;
}

Dialog:HydralicConfrim(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return ShowModMenu(playerid);

	new modshop = -1,
		vehicle = GetPlayerVehicleID(playerid);

	if(0 == IsPlayerInAnyVehicle(playerid) || VehicleInfo[vehicle][carOwnerID] == 0)
		return 1;

   	if((modshop = ModShop_Nearest(playerid)) == -1)
  		return 1;

	if(GetCash(playerid) < 8000)
	{
	   	ShowModMenu(playerid);
		return SendNotCash(playerid);
	}

	if(IsVehicleUpgradeCompatible(GetVehicleModel(vehicle), 1087) != 1)
	{
	    ShowModMenu(playerid);
	    return SendErrorMessage(playerid, "Nu poti pune hidraulice pe acest vehicul.");
	}

    if(BizInfo[modshop][bizOwnerID] != 0 && !BizInfo[modshop][bizProduct])
        return SendErrorMessage(playerid, "Inchis.");

	GiveCash(playerid, -8000);
    SetVehicleComponent(vehicle, 1087, GetVehicleComponentType(1087));
	SendClientMessageEx(playerid, COLOR_GREEN, "Ai achizitionat hidraulice in schimbul sumei de $8.000.");

	if(BizInfo[modshop][bizOwnerID] != 0)
	{
		BizInfo[modshop][bizProduct]--;
		GiveBizCash(modshop, 8000 / 100 * 80);
	}
	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	return 1;
}

Dialog:RadioConfrim(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return ShowModMenu(playerid);

	new modshop = -1,
		vehicle = GetPlayerVehicleID(playerid);

	if(0 == IsPlayerInAnyVehicle(playerid) || VehicleInfo[vehicle][carOwnerID] == 0)
		return 1;

   	if((modshop = ModShop_Nearest(playerid)) == -1)
  		return 1;

	if(VehicleInfo[vehicle][carRadio] == 1)
	{
	    ShowModMenu(playerid);
		return SCM(playerid, COLOR_LIGHTRED, "Ai deja radio instalat.");
	}

	if(GetCash(playerid) < 400)
	{
	    ShowModMenu(playerid);
		return SendNotCash(playerid);
	}

	GiveCash(playerid, -400);
	VehicleInfo[vehicle][carRadio] = 1;

	SendClientMessageEx(playerid, COLOR_GREEN, "Ai achizitionat radio in schimbul sumei de $400. Foloseste comanda /setstation pentru a alege postul de radio.");
    GiveBizCash(modshop, 400);
	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	return 1;
}

Dialog:GPSConfrim(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return ShowModMenu(playerid);

	new modshop = -1,
		vehicle = GetPlayerVehicleID(playerid);

	if(0 == IsPlayerInAnyVehicle(playerid) || VehicleInfo[vehicle][carOwnerID] == 0)
		return 1;

   	if((modshop = ModShop_Nearest(playerid)) == -1)
  		return 1;

	if(VehicleInfo[vehicle][carGps] == 1)
	{
	    ShowModMenu(playerid);
		return SCM(playerid, COLOR_LIGHTRED, "Ai deja GPS instalat.");
	}

	if(GetCash(playerid) < 1500)
	{
	    ShowModMenu(playerid);
		return SendNotCash(playerid);
	}

	GiveCash(playerid, -1500);
	VehicleInfo[vehicle][carGps] = 1;

	SendClientMessageEx(playerid, COLOR_GREEN, "Ai cumparat GPS in schimbul sumei de $1.500. Foloseste /v find pentru a iti localiza vehiculul.");
    GiveBizCash(modshop, 500);
	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	return 1;
}

Dialog:ChangeLock(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return ShowModMenu(playerid);

	new modshop = -1,
		vehicle = GetPlayerVehicleID(playerid);

	if(0 == IsPlayerInAnyVehicle(playerid) || VehicleInfo[vehicle][carOwnerID] != PlayerInfo[playerid][pID])
		return SendErrorMessage(playerid, "Trebuie sa te aflii in vehiculul personal.");

   	if((modshop = ModShop_Nearest(playerid)) == -1)
  		return 1;

	if(VehicleInfo[vehicle][carGps] == 1)
	{
	    ShowModMenu(playerid);
		return SCM(playerid, COLOR_LIGHTRED, "Ai deja GPS instalat.");
	}

	if(GetCash(playerid) < 300)
	{
	    ShowModMenu(playerid);
		return SendNotCash(playerid);
	}

	GiveCash(playerid, -300);
	foreach(Player, i)
	{
		if(0 == IsPlayerLogged(i) || PlayerInfo[i][pSpareKey] != VehicleInfo[vehicle][carID])
			continue;

        PlayerInfo[i][pSpareKey] = 0;
	}

	new query[128];
    mysql_format(dbHandle, query, sizeof(query), "UPDATE `users` SET `sparekey`='0' WHERE `sparekey`=%i", VehicleInfo[vehicle][carID]);
	mysql_tquery(dbHandle, query);

	SendClientMessageEx(playerid, COLOR_GREEN, "Ai schimbat incuietoarea in schimbul sumei de $300.");
    GiveBizCash(modshop, 300);
	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	return 1;
}

Dialog:ModConfrim(playerid, response, listitem, inputtext[])
{
   	new modshop = -1,
    	vehicle = GetPlayerVehicleID(playerid);

    new modelid = GetPVarInt(playerid, #component_model);
    RemoveVehicleComponent(vehicle, modelid);
    LoadComp(vehicle);

   	if(!response)
    	return ShowComponentMenu(playerid, vehicle, GetPVarInt(playerid, #component_type));

	if(0 == IsPlayerInAnyVehicle(playerid) || VehicleInfo[vehicle][carOwnerID] == 0)
		return 1;

	if((modshop = ModShop_Nearest(playerid)) == -1)
 		return 1;

	if(GetVehicleComponentType(modelid) == -1 || IsVehicleUpgradeCompatible(GetVehicleModel(vehicle), modelid) != 1)
	{
 		ShowModMenu(playerid);
   		return SendErrorMessage(playerid, "Aceasta componenta nu este compatibila vehiculului tau.");
	}

	new compid = -1,
		comptype = -1;

	for(new i; i != sizeof(vehicle_component); i++)
	{
	    for(new a; a != max_vehicle_components[i]; a++)
		{
	    	if(vehicle_component[i][a][compID] != modelid)
	        	continue;

			comptype = i;
			compid = a;
			break;
		}
		if(comptype != -1 && compid != -1)
		    break;
	}

	if(comptype == -1 || compid == -1)
	    return SendErrorMessage(playerid, "Eroare, contacteaza un moderator.");

	if(GetCash(playerid) < vehicle_component[comptype][compid][compPrice])
	{
	    ShowModMenu(playerid);
	    return SendErrorMessage(playerid, "Nu ai destui bani. Pretul este de: $%i.", vehicle_component[comptype][compid][compPrice]);
	}

	if(HasComponent(vehicle, modelid))
 	{
  		ShowModMenu(playerid);
		return SCM(playerid, COLOR_LIGHTRED, "Ai deja aceasta componenta.");
	}

    if(BizInfo[modshop][bizOwnerID] != 0 && !BizInfo[modshop][bizProduct])
        return SendErrorMessage(playerid, "Inchis.");

	GiveCash(playerid, -vehicle_component[comptype][compid][compPrice]);

	if(BizInfo[modshop][bizOwnerID] != 0)
	{
		BizInfo[modshop][bizProduct]--;
		GiveBizCash(modshop, vehicle_component[comptype][compid][compPrice] / 100 * 80);
	}

	SendClientMessageEx(playerid, COLOR_GREEN, "Ai cumparat \"%s\" pentru $%i.", GetComponentName(modelid), vehicle_component[comptype][compid][compPrice]);
	SetVehicleComponent(vehicle, modelid, GetVehicleComponentType(modelid));
	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	return 1;
}

Dialog:PaintjobDialog(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return ShowModMenu(playerid);

	new vehicle = GetPlayerVehicleID(playerid);

	if(0 == IsPlayerInAnyVehicle(playerid) || VehicleInfo[vehicle][carOwnerID] == 0)
		return 1;

    if(IsVehiclePaintJob(GetVehicleModel(vehicle)) < listitem+1)
        return 1;

   	if(ModShop_Nearest(playerid) == -1)
  		return 1;

    if(VehicleInfo[vehicle][carPaintJob] == listitem)
    {
        ShowModMenu(playerid);
		return SCM(playerid, COLOR_LIGHTRED, "Ai deja un paintjob.");
	}

	new mes[128];
	format(mes, sizeof(mes), "{FFFFFF}Esti sigur ca doresti sa achizitionezi acest paintjob %i pentru $3.000?", listitem+1);
	Dialog_Show(playerid, PaintjobConfrim, DIALOG_STYLE_MSGBOX, "{33AA33}Tuning vehicul", mes, "Da", "Inapoi");
    SetPVarInt(playerid, #select_paintjob, listitem);

	ChangeVehiclePaintjob(vehicle, listitem);
	return 1;
}

Dialog:PaintjobConfrim(playerid, response, listitem, inputtext[])
{
    listitem = GetPVarInt(playerid, #select_paintjob);

	new modshop = -1,
		vehicle = GetPlayerVehicleID(playerid);

    ChangeVehiclePaintjob(vehicle, VehicleInfo[vehicle][carPaintJob]);

    if(!response)
	    return ShowModMenu(playerid);

	if(0 == IsPlayerInAnyVehicle(playerid) || VehicleInfo[vehicle][carOwnerID] == 0)
		return 1;

   	if((modshop = ModShop_Nearest(playerid)) == -1)
  		return 1;

	if(IsVehiclePaintJob(GetVehicleModel(vehicle)) == 0)
	    return SendErrorMessage(playerid, "Paintjob-urile nu sunt valabile pentru acest vehicul.");

	if(VehicleInfo[vehicle][carPaintJob] == listitem)
    {
        ShowModMenu(playerid);
		return SCM(playerid, COLOR_LIGHTRED, "Ai deja instalat acest paintjob.");
	}
	if(GetCash(playerid) < 3000)
	{
	    ShowModMenu(playerid);
		return SendNotCash(playerid);
	}

	if(BizInfo[modshop][bizOwnerID] != 0 &&!BizInfo[modshop][bizProduct])
        return SendErrorMessage(playerid, "Inchis.");

	GiveCash(playerid, -3000);
	VehicleInfo[vehicle][carPaintJob] = listitem;
	ChangeVehiclePaintjob(vehicle, listitem);
	Save_Car(vehicle);

	SendClientMessageEx(playerid, COLOR_GREEN, "Ai achizitionat paintjob-ul %i pentru $3.000.", listitem+1);

    if(BizInfo[modshop][bizOwnerID] != 0)
    {
		BizInfo[modshop][bizProduct]--;
		GiveBizCash(modshop, 3000 / 100 * 80);
	}
	PlayerPlaySound(playerid, 1134, 0.0, 0.0, 0.0);
	return 1;
}

Dialog:NitroDialog(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return ShowModMenu(playerid);

	new vehicle = GetPlayerVehicleID(playerid);

	if(0 == IsPlayerInAnyVehicle(playerid) || VehicleInfo[vehicle][carOwnerID] == 0)
		return 1;

   	if(ModShop_Nearest(playerid) == -1)
  		return 1;

	new nitro_id[3] =
	    {1009, 1008, 1010},
	    nitro_price[3] =
	    {4500, 9000, 15000};

    if(HasComponent(vehicle, nitro_id[listitem]))
    {
        ShowModMenu(playerid);
		return SCM(playerid, COLOR_LIGHTRED, "Ai deja nitro instalat.");
	}

	new mes[128];
	format(mes, sizeof(mes), "{FFFFFF}Esti sigur ca vrei sa instalezi nitro x%i pentru $%i?", (listitem == 0)?(2):((listitem == 1)?(5):(10)), nitro_price[listitem]);
	Dialog_Show(playerid, NitroConfrim, DIALOG_STYLE_MSGBOX, "{33AA33}Tuneaza vehicul", mes, "Da", "Inapoi");
    SetPVarInt(playerid, #select_nitro, listitem);
	return 1;
}

Dialog:NitroConfrim(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return ShowModMenu(playerid);

    listitem = GetPVarInt(playerid, #select_nitro);

	new modshop = -1,
		vehicle = GetPlayerVehicleID(playerid);

	if(0 == IsPlayerInAnyVehicle(playerid) || VehicleInfo[vehicle][carOwnerID] == 0)
		return 1;

   	if((modshop = ModShop_Nearest(playerid)) == -1)
  		return 1;

	new nitro_id[3] =
	    {1009, 1008, 1010},
	    nitro_price[3] =
	    {15000, 15500, 16000};

    if(HasComponent(vehicle, nitro_id[listitem]))
    {
        ShowModMenu(playerid);
		return SCM(playerid, COLOR_LIGHTRED, "Ai deja instalat nitro.");
	}

    if(IsVehicleUpgradeCompatible(GetVehicleModel(vehicle), nitro_id[listitem]) != 1)
    {
        ShowModMenu(playerid);
    	return SendErrorMessage(playerid, "Nu poti achizitiona nitro pe acest vehicul.");
	}

	if(GetCash(playerid) < nitro_price[listitem])
	{
	    ShowModMenu(playerid);
		return SendNotCash(playerid);
	}

	if(PlayerInfo[playerid][pPremium] < 2)
	    return SendErrorMessage(playerid,  "Doar jucatorii cu donator silver+ pot achizitiona nitro. (TREBUIE SCOASA)");

    if(BizInfo[modshop][bizOwnerID] != 0 && !BizInfo[modshop][bizProduct])
    	return SendErrorMessage(playerid, "Inchis.");

	GiveCash(playerid, -nitro_price[listitem]);
	SetVehicleComponent(vehicle, nitro_id[listitem], CARMODTYPE_NITRO);

	SendClientMessageEx(playerid, COLOR_GREEN, "Ai cumparat nitro x%i pentru $%i.", (listitem == 0)?(2):((listitem == 1)?(5):(10)), nitro_price[listitem]);

    if(BizInfo[modshop][bizOwnerID] != 0)
    {
		BizInfo[modshop][bizProduct]--;
		GiveBizCash(modshop, nitro_price[listitem] / 100 * 80);
	}
	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	return 1;
}

Dialog:StoreDialog(playerid, response, listitem, inputtext[])
{
	if(!response)
		return 1;

	new bizid = GetNearBizInside(playerid);
	if(bizid == -1)
	    return 1;

    if(BizInfo[bizid][bizOwnerID] != 0 && !BizInfo[bizid][bizProduct])
    	return SendErrorMessage(playerid, "STOC EPUIZAT");

	new item_price[] =
		{100, 200, 50, 5, 20, 10, 200, 5, 30, 500};

    if(GetCash(playerid) < item_price[listitem])
		return SendNotCash(playerid);

	switch(listitem)
	{
		case 0:
		{
			PlayerInfo[playerid][pNumber] = randomEx(123456, 999999);
			SendClientMessageEx(playerid, COLOR_WHITE, "Ai cumparat un telefon si o cartela SIM pentru $%i. Numarul tau de telefon este: %i.", item_price[listitem], PlayerInfo[playerid][pNumber]);
		}
		case 1:
		{
			if(GivePlayerItem(playerid, INV_RADIO, 1) == -1)
			    return SendErrorMessage(playerid, "Nu ai loc in inventar.");
			SendClientMessageEx(playerid, COLOR_WHITE, "Ai cumparat o statie radio pentru $%i.", item_price[listitem]);
			SCM(playerid, COLOR_GREY, "Foloseste \"/radiohelp\" pentru mai multe informatii.");
		}
		case 2:
		{
			if(PlayerInfo[playerid][pLevel] < 2)
			    return SendErrorMessage(playerid, "Ai nevoie de cel putin nivel 2 pentru a cumpara o masca.");
            if(GivePlayerItem(playerid, INV_MASK, 1) == -1)
			    return SendErrorMessage(playerid, "Nu ai loc in inventar.");
			SendClientMessageEx(playerid, COLOR_WHITE, "Ai cumparat o masca pentru $%i.", item_price[listitem]);
			SCM(playerid, COLOR_GREY, "Foloseste \"/mask\" pentru a o echipa.");
		}
		case 3:
		{
            if(GivePlayerItem(playerid, INV_LIGHTER, 1) == -1)
			    return SendErrorMessage(playerid, "Nu ai loc in inventar.");
			SendClientMessageEx(playerid, COLOR_WHITE, "Ai cumparat o bricheta pentru $%i.", item_price[listitem]);
		}
		case 4:
		{
            if(GivePlayerItem(playerid, INV_CIGAR, 20) == -1)
			    return SendErrorMessage(playerid, "Nu ai loc in inventar.");
			SendClientMessageEx(playerid, COLOR_WHITE, "Ai cumparat un pachet de tigari pentru $%i.", item_price[listitem]);
		}
		case 5:
		{
            if(GivePlayerItem(playerid, INV_DICE, 1) == -1)
			    return SendErrorMessage(playerid, "Nu ai loc in inventar.");
			SendClientMessageEx(playerid, COLOR_WHITE, "Ai cumparat un zar pentru $%i.", item_price[listitem]);
			SCM(playerid, COLOR_GREY, "Foloseste comanda \"/dice\" pentru a da cu zarul.");
		}
		case 6:
		{
			if(GivePlayerItem(playerid, INV_GASCAN, 1) == -1)
			    return SendErrorMessage(playerid, "Nu ai loc in inventar.");
			SendClientMessageEx(playerid, COLOR_WHITE, "Ai cumparat o canistra pentru $%i.", item_price[listitem]);
		}
		case 7:
		{
            if(GivePlayerItem(playerid, INV_PEN, 1) == -1)
			    return SendErrorMessage(playerid, "Nu ai loc in inventar.");
			SendClientMessageEx(playerid, COLOR_WHITE, "Ai cumparat un stilou si un carnet de notite pentru $%i.", item_price[listitem]);
			SCM(playerid, COLOR_GREY, "Foloseste comanda \"/note\" pentru a nota in carnet.");
		}
		case 8:
		{
            if(GivePlayerItem(playerid, INV_CARDS, 1) == -1)
			    return SendErrorMessage(playerid, "Nu ai loc in inventar.");
			SendClientMessageEx(playerid, COLOR_WHITE, "Ai cumparat un pachet de carti pentru $%i.", item_price[listitem]);
			SCM(playerid, COLOR_GREY, "Foloseste comanda \"/givecard\" pentru a incepe jocul de carti.");
		}
		case 9:
		{
			ac_GivePlayerWeapon(playerid, 43, 200);
			SendClientMessageEx(playerid, COLOR_WHITE, "Ai cumparat o camera de fotografiat pentru $%i.", item_price[listitem]);
		}
	}

	if(BizInfo[bizid][bizOwnerID] != 0)
 	{
 		BizInfo[bizid][bizProduct]--;
		GiveBizCash(bizid, item_price[listitem]);
	}
	GiveCash(playerid, -item_price[listitem]);
	return 1;
}

Dialog:PharmacyDialog(playerid, response, listitem, inputtext[])
{
	if(!response)
		return 1;

	new bizid = GetNearBizInside(playerid);
	if(bizid == -1)
	    return 1;

	new item_price[] =
		{500, 200};

    if(GetCash(playerid) < item_price[listitem])
		return SendNotCash(playerid);

	switch(listitem)
	{
		case 0:
		{
		    if(PlayerInfo[playerid][pPrescribe] < gettime())
			    return SendErrorMessage(playerid, "Nu ai o reteta prescrisa!");

		    if(PlayerInfo[playerid][pGanjaTime] > gettime())
		        return SendErrorMessage(playerid, "Vei obtine marijuana medicinala in: %s.", ConvertSecond(PlayerInfo[playerid][pGanjaTime] - gettime()));

			if(GivePlayerItem(playerid, INV_MED_GANJA, 2) == -1)
			    return SendErrorMessage(playerid, "Nu ai loc in inventar!.");

			PlayerInfo[playerid][pGanjaTime] = gettime() + 86400;
			SendClientMessageEx(playerid, COLOR_WHITE, "Ai cumparat marijuana medicinala pentru $%i. (adaugata in inventar)", item_price[listitem]);
		}
		case 1:
		{
		    if(IsPlayerHasItem(playerid, INV_HEAL) != -1)
		        return SendErrorMessage(playerid, "Ai deja o trusa de prim ajutor.");

            if(GivePlayerItem(playerid, INV_HEAL, 1) == -1)
			    return SendErrorMessage(playerid, "Nu ai loc in inventar!.");

			SendClientMessageEx(playerid, COLOR_WHITE, "Ai cumparat o trusa de prim ajutor pentru $%i. (adaugata in inventar)", item_price[listitem]);
		}
	}

	if(BizInfo[bizid][bizOwnerID] != 0)
 	{
 		BizInfo[bizid][bizProduct]--;
		GiveBizCash(bizid, item_price[listitem]);
	}
	GiveCash(playerid, -item_price[listitem]);
	return 1;
}

ALTX:inventory("/inv");
CMD:inventory(playerid, params[])
{
    if(IsPlayerInjured(playerid) != 0 || pTemp[playerid][pTaserTime] || pTemp[playerid][pCuffed])
		return SCM(playerid, COLOR_GREY, "Nu poti folosi inventarul in acest moment.");

	new mes[MAX_INVENTORY * 32] = "{ffffff}Obiect\t{ffffff}Valoare";
	for(new i; i != MAX_INVENTORY; i++)
	{
	    if(PlayerInfo[playerid][pInv][i] == 0)
			format(mes, sizeof(mes), "%s\n{C3C3C3}Slot liber\t", mes);
		else
			format(mes, sizeof(mes), "%s\n%s\t%i", mes, inventory_items[PlayerInfo[playerid][pInv][i]][itemName], PlayerInfo[playerid][pInvAmount][i]);
	}

    DeletePVar(playerid, #inventory_house);
    DeletePVar(playerid, #inventory_vehicle);

	Dialog_Show(playerid, Inventory, DIALOG_STYLE_TABLIST_HEADERS, "Inventar", mes, "Alege", "Inchide");
 	return 1;
}

Dialog:Inventory(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return 1;

	if(PlayerInfo[playerid][pInv][listitem] == 0)
	    return cmd::inventory(playerid, "");

	new title[56],
	    mes[256] = "Foloseste obiect\nTransfera obiect\nArunca un obiect\nDistruge un obiect";

    new houseid = -1;
	if((houseid = GetNearHouseInside(playerid)) != -1 && PlayerToPoint(0.5, playerid,HouseInfo[houseid][hCheckPosX], HouseInfo[houseid][hCheckPosY], HouseInfo[houseid][hCheckPosZ]))
	{
	    SetPVarInt(playerid, #inventory_house, houseid+1);
 		format(mes, sizeof(mes), "%s\n{ffff00}Pune in casa (ID: %i)", mes, houseid);
	}

	new vehicle;
	if(GetPVarInt(playerid, #inventory_house) == 0 && (vehicle = GetNearVehicle(playerid, 5.0)) != 0 && VehicleInfo[vehicle][carTrunkLock] != 0)
	{
	    SetPVarInt(playerid, #inventory_vehicle, vehicle);
		format(mes, sizeof(mes), "%s\n{ffff00}Pune in %s (ID: %i)", mes, VehicleNames[GetVehicleModel(vehicle)-400], vehicle);
	}

	SetPVarInt(playerid, #inventory_choose, listitem);
	format(title, sizeof(title), "Inventar - %s", inventory_items[PlayerInfo[playerid][pInv][listitem]][itemName]);
    Dialog_Show(playerid, InventoryChoose, DIALOG_STYLE_LIST, title, mes, "Alege", "Inapoi");
	return 1;
}

Dialog:InventoryChoose(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return cmd::inventory(playerid, "");

	new slot = GetPVarInt(playerid, #inventory_choose);

	if(slot < 0 || slot > MAX_INVENTORY-1 || PlayerInfo[playerid][pInv][slot] == 0)
	    return cmd::inventory(playerid, "");

	switch(listitem)
	{
	    case 0: CallLocalFunction("OnPlayerUseItem", "ii", playerid, slot);
		case 1: Dialog_Show(playerid, GiveItem, DIALOG_STYLE_INPUT, "Transfera obiect", "{ffffff}Introdu numele/ID-ul jucatorului cu care vrei sa incepi transferul:", "Inainte", "Inapoi");
		case 2:
		{
			if(ItemDrop_Drop(playerid, PlayerInfo[playerid][pInv][slot], PlayerInfo[playerid][pInvAmount][slot]) == -1)
				return SendErrorMessage(playerid, "Ai atins numarul maxim de obiecte care pot fi aruncate.");

    		SendClientMessageEx(playerid,COLOR_GREEN,"Ai aruncat %s, cantitate: %i, /pickupitem pentru a lua inapoi.", inventory_items[PlayerInfo[playerid][pInv][slot]][itemName], PlayerInfo[playerid][pInvAmount][slot]);
			PlayerInfo[playerid][pInv][slot] = 0;
            PlayerInfo[playerid][pInvAmount][slot] = 0;
		}
		case 3:
		{
			new mes[128];
			format(mes, sizeof(mes), "{ffffff}Esti sigur ca doresti sa distrugi obiectul - %s?", inventory_items[PlayerInfo[playerid][pInv][slot]][itemName]);
   			Dialog_Show(playerid, DeleteItem, DIALOG_STYLE_MSGBOX, "Distruge obiect", mes, "Da", "Inchide");
		}
		case 4:
		{
		    new mes[128];

		    if(GetPVarInt(playerid, #inventory_house) != 0)
				format(mes, sizeof(mes), "{ffffff}Obiect: %s (cantitate: %i)\n\nintrodu cantitatea pe care vrei sa o depozitezi in casa:", inventory_items[PlayerInfo[playerid][pInv][slot]][itemName], PlayerInfo[playerid][pInvAmount][slot]);
   			else if(GetPVarInt(playerid, #inventory_vehicle) != 0)
   			    format(mes, sizeof(mes), "{ffffff}Obiect: %s (cantitate: %i)\n\nintrodu cantitatea pe care vrei sa o depozitezi in portbagaj :", inventory_items[PlayerInfo[playerid][pInv][slot]][itemName], PlayerInfo[playerid][pInvAmount][slot]);
			else
				return SendErrorMessage(playerid, "Eroare inventar, reincearca.");

			Dialog_Show(playerid, PutItemInProperty, DIALOG_STYLE_INPUT, "Introdu subiectul", mes, "Introdu", "Inchide");
		}
	}
	return 1;
}

Dialog:PutItemInProperty(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return cmd::inventory(playerid, "");

    new slot = GetPVarInt(playerid, #inventory_choose),
        houseid = GetPVarInt(playerid, #inventory_house)-1,
        vehicle = GetPVarInt(playerid, #inventory_vehicle),
        item = PlayerInfo[playerid][pInv][slot];

	if(slot < 0 || slot > MAX_INVENTORY-1 || PlayerInfo[playerid][pInv][slot] == 0)
	    return cmd::inventory(playerid, "");

    if(strval(inputtext) < 1 || PlayerInfo[playerid][pInvAmount][slot] < strval(inputtext))
    	return SendErrorMessage(playerid, "Nu detii acea cantitate.");

    if(vehicle > 0 && GetNearVehicle(playerid, 5.0, vehicle) != 0)
	{
	    if(IsADontTrunk(vehicle) || IsAPlane(vehicle) || IsABiker(vehicle) || IsAHelicopter(vehicle) || IsABoat(vehicle) || IsABicycle(vehicle))
			return SCM(playerid, COLOR_LIGHTRED, "Acest vehicul nu are portbagaj.");

        if(VehicleInfo[vehicle][carTrunkLock] == 0)
			    return SCM(playerid, COLOR_LIGHTRED, "Portbagajul vehiculului este inchis.");

		if(VehicleInfo[vehicle][carFaction] && VehicleInfo[vehicle][carFaction] != PlayerInfo[playerid][pFaction])
		    return SendErrorMessage(playerid, "Ai acces la portbagajul vehiculelor din factiuni oficiale.");

        if(PlayerInfo[playerid][pOnDuty] && VehicleInfo[vehicle][carOwnerID] != 0)
				return SCM(playerid, COLOR_LIGHTRED,"Nu poti pune arme intr-o masina cand esti On-Duty!");

        new i = GetNextVehicleTrunkSlot(vehicle);
		if(i == -1)
 			return SendErrorMessage(playerid, "Nu este spatiu in vehicul.");

		VehicleInfo[vehicle][carInv][i] = PlayerInfo[playerid][pInv][slot];
		VehicleInfo[vehicle][carInvAmount][i] = strval(inputtext);

        PlayerInfo[playerid][pInvAmount][slot] -= strval(inputtext);
        if(PlayerInfo[playerid][pInvAmount][slot] < 1)
            PlayerInfo[playerid][pInv][slot] = 0;

		SendClientMessageEx(playerid, COLOR_YELLOW, "Ai pus %s in %s.", inventory_items[item][itemName], VehicleNames[GetVehicleModel(vehicle)-400]);

 		new mes[128];
		format(mes, sizeof(mes), "pune %s in %s %s.", inventory_items[item][itemName], (VehicleInfo[vehicle][carFaction])?("?????????"):("????????"), VehicleNames[GetVehicleModel(vehicle)-400]);
		cmd::ame(playerid, mes);

		Save_CarInventory(vehicle);
		cmd::inventory(playerid, "");
		return 1;
	}

	if(houseid >= 0 && houseid < MAX_HOUSES && IsPlayerHouseInside(playerid, houseid) != 0)
	{
		if(!PlayerToPoint(0.5, playerid,HouseInfo[houseid][hCheckPosX], HouseInfo[houseid][hCheckPosY], HouseInfo[houseid][hCheckPosZ]))
		    return SCM(playerid, COLOR_LIGHTRED, "Trebuie sa fii langa seif.");

        new i = GetNextHouseTrunkSlot(houseid);
		if(i == -1)
 			return SendErrorMessage(playerid, "Nu este loc in casa!");

		SendClientMessageEx(playerid, COLOR_GREEN, "Ai pus %s in seiful casei.", inventory_items[item][itemName]);

		HouseInfo[houseid][hInv][i] = PlayerInfo[playerid][pInv][slot];
		HouseInfo[houseid][hInvAmount][i] = strval(inputtext);

		PlayerInfo[playerid][pInvAmount][slot] -= strval(inputtext);
        if(PlayerInfo[playerid][pInvAmount][slot] < 1)
            PlayerInfo[playerid][pInv][slot] = 0;

		new mes[128];
		format(mes, sizeof(mes), "pune %s in inventarul casei.", inventory_items[item][itemName]);
		cmd::ame(playerid, mes);

		Save_HouseInventory(houseid);
		cmd::inventory(playerid, "");
		return 1;
	}

	return 1;
}

Dialog:DeleteItem(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return cmd::inventory(playerid, "");

    new slot = GetPVarInt(playerid, #inventory_choose);

	if(slot < 0 || slot > MAX_INVENTORY-1 || PlayerInfo[playerid][pInv][slot] == 0)
	    return cmd::inventory(playerid, "");

	SendLocalMessage(Range_Normal, playerid, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5, "** (( %s a sters obiectul %s din inventarul sau. ))", GetNameWithMask(playerid), inventory_items[PlayerInfo[playerid][pInv][slot]][itemName]);

    PlayerInfo[playerid][pInv][slot] = 0;
	PlayerInfo[playerid][pInvAmount][slot] = 0;
	return 1;
}

Dialog:GiveItem(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return cmd::inventory(playerid, "");

    new slot = GetPVarInt(playerid, #inventory_choose);

	if(slot < 0 || slot > MAX_INVENTORY-1 || PlayerInfo[playerid][pInv][slot] == 0)
	    return cmd::inventory(playerid, "");

	new userid;

    if(sscanf(inputtext, "u", userid))
		return Dialog_Show(playerid, GiveItem, DIALOG_STYLE_INPUT, "Transfera obiect", "{ffffff}Introdu numele/ID-ul jucatorului pentru a porni transferul:", "Inainte", "Inapoi");

    if(!IsPlayerLogged(userid))
		return SendNotConnected(playerid);

	if(!PlayerNearPlayer(3.0, playerid, userid))
		return SendNotNearPlayer(playerid);

	if(playerid == userid)
	    return SendErrorMessage(playerid, "Nu poti trece!");

	if(inventory_items[PlayerInfo[playerid][pInv][slot]][itemSplit] == 0)
	{
	    if(GivePlayerItem(userid, PlayerInfo[playerid][pInv][slot], PlayerInfo[playerid][pInvAmount][slot]) == -1)
			return SendErrorMessage(playerid, "Jucatorul nu are loc in inventar.");

	    new str[128];
		format(str, sizeof(str), "a pierdut \"%s\" si transmite %s.", inventory_items[PlayerInfo[playerid][pInv][slot]][itemName], GetNameWithMask(userid));
		cmd::ame(playerid, str);

		SendClientMessageEx(userid, -1, "%s ti-a trimis \"%s\" (adaugat in inventar).", GetNameWithMask(playerid), inventory_items[PlayerInfo[playerid][pInv][slot]][itemName]);

	    PlayerInfo[playerid][pInvAmount][slot] = 0;
	    PlayerInfo[playerid][pInv][slot] = 0;
	    return 1;
	}

	SetPVarInt(playerid, #give_item, userid);

	new mes[256];
	format(mes, sizeof(mes), "{ffffff}Obiect: %s (cantitate: %i)\n\nIntrodu cantitatea pe care doresti sa o transferi jucatorului %s:", inventory_items[PlayerInfo[playerid][pInv][slot]][itemName], PlayerInfo[playerid][pInvAmount][slot], GetNameWithMask(userid));
	Dialog_Show(playerid, GiveQuantity, DIALOG_STYLE_INPUT, "Transfera obiect", mes, "Transfera", "Inchide");
	return 1;
}

Dialog:GiveQuantity(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return cmd::inventory(playerid, "");

    new slot = GetPVarInt(playerid, #inventory_choose),
        userid = GetPVarInt(playerid, #give_item);

	if(slot < 0 || slot > MAX_INVENTORY-1 || PlayerInfo[playerid][pInv][slot] == 0)
	    return cmd::inventory(playerid, "");

    if(strval(inputtext) < 1 || PlayerInfo[playerid][pInvAmount][slot] < strval(inputtext))
    {
        SendErrorMessage(playerid, "Nu ai acea cantitate!");
        new mes[256];
		format(mes, sizeof(mes), "{ffffff}Obiect: %s (cantitate: %i)\n\nIntrodu cantitatea pe care doresti sa o transferi jucatorului %s:", inventory_items[PlayerInfo[playerid][pInv][slot]][itemName], PlayerInfo[playerid][pInvAmount][slot], GetNameWithMask(userid));
		Dialog_Show(playerid, GiveQuantity, DIALOG_STYLE_INPUT, "Transfera obiect", mes, "Transfera", "Inchide");
		return 1;
	}

    if(!IsPlayerLogged(userid))
		return SendNotConnected(playerid);

	if(!PlayerNearPlayer(3.0, playerid, userid))
		return SendNotNearPlayer(playerid);

    if(playerid == userid)
	    return SendErrorMessage(playerid, "Nu poti trece!");

    if(GivePlayerItem(userid, PlayerInfo[playerid][pInv][slot], strval(inputtext)) == -1)
		return SendErrorMessage(playerid, "Jucatorul nu are destul spatiu in inventar!");

    new str[128];
	format(str, sizeof(str), "a dat \"%s\" si a primit  %s.", inventory_items[PlayerInfo[playerid][pInv][slot]][itemName], GetNameWithMask(userid));
	cmd::ame(playerid, str);

	SendClientMessageEx(userid, -1, "%s ti-a trimis \"%s\" (adaugat/a in inventar).", GetNameWithMask(playerid), inventory_items[PlayerInfo[playerid][pInv][slot]][itemName]);

    new query[128];
    format(query, sizeof(query), "%s [MYSQL: %i | IP: %s] a transmis %s (cantitate: %i) la jucatorul %s [MYSQL: %i | IP: %s]",
	GetName(playerid), PlayerInfo[playerid][pID], GetPlayerIP(playerid), inventory_items[PlayerInfo[playerid][pInv][slot]][itemName], strval(inputtext),
	GetName(userid), PlayerInfo[userid][pID], GetPlayerIP(userid));
	insert_log(query, ITEM_LOG, 3, playerid);

    PlayerInfo[playerid][pInvAmount][slot] -= strval(inputtext);
    if(PlayerInfo[playerid][pInvAmount][slot] < 1)
        PlayerInfo[playerid][pInv][slot] = 0;

	return 1;
}

Dialog:ShowVehicleFines(playerid, response, listitem, inputtext[])
{
    if(!response)
	    return 1;

	if(listitem < 0 || listitem >= MAX_CAR_TICKETS || pTemp[playerid][pTicketListed][listitem] == -1)
	    return 1;

	new vehicle = GetPVarInt(playerid, #tickets_show);
	if(0 == IsValidVehicle(vehicle))
	    return 1;

	listitem = pTemp[playerid][pTicketListed][listitem];
    if(vTickets[vehicle][listitem][tID] == 0)
        return SendErrorMessage(playerid, "Amenda nu a fost gasita.");

    static const str_size[] = "{a9c4e4}Amendat: {7E98B6}%s [%s]\n{a9c4e4}Pret: {7E98B6}$%i\n{a9c4e4}Data: {7E98B6}%s";
	new mes[sizeof(str_size) - 10 + 1 + (MAX_PLAYER_NAME * 2) + 5 + 24];
    format(mes, sizeof(mes), str_size,
	    vTickets[vehicle][listitem][tOfficer], GetInitials(Factions[vTickets[vehicle][listitem][tFaction]][fName]),
	    vTickets[vehicle][listitem][tAmount],
	    vTickets[vehicle][listitem][tDate]
	);
	Dialog_Show(playerid, None, DIALOG_STYLE_MSGBOX, "{F5DEB3}Informatii amenda", mes, "Inchide", "");
	return 1;
}

Dialog:VehicleFines(playerid, response, listitem, inputtext[])
{
	if(!response)
		return 1;

    if(!IsPlayerInAnyVehicle(playerid))
		return SendNotInVehicle(playerid);

	new vehicle = GetPlayerVehicleID(playerid);

	if(VehicleInfo[vehicle][carOwnerID] != PlayerInfo[playerid][pID])
		return SCM(playerid, COLOR_LIGHTRED, "Nu esti proprietarul vehiculului.");

    if(listitem < 0 || listitem >= MAX_CAR_TICKETS || pTemp[playerid][pTicketListed][listitem] == -1)
	    return 1;

	listitem = pTemp[playerid][pTicketListed][listitem];
	SetPVarInt(playerid, #select_ticket, listitem);
    if(vTickets[vehicle][listitem][tID] == 0)
        return SendErrorMessage(playerid, "Amenda nu a fost gasita.");

    static const str_size[] = "{a9c4e4}Amendat: {7E98B6}%s [%s]\n{a9c4e4}Pret: {7E98B6}$%i\n{a9c4e4}Data: {7E98B6}%s";
	new mes[sizeof(str_size) - 10 + 1 + (MAX_PLAYER_NAME * 2) + 5 + 24];
    format(mes, sizeof(mes), str_size,
	    vTickets[vehicle][listitem][tOfficer], GetInitials(Factions[vTickets[vehicle][listitem][tFaction]][fName]),
	    vTickets[vehicle][listitem][tAmount],
	    vTickets[vehicle][listitem][tDate]
	);
	Dialog_Show(playerid, VehicleFinesTake, DIALOG_STYLE_MSGBOX, "{F5DEB3}Informatii amenda", mes, "Primeste", "Inchide");
	return 1;
}

Dialog:VehicleFinesTake(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return 1;

	new id = -1;
	for(new i; i != MAX_PLAYER_TICKETS; i++)
	{
		if(pTickets[playerid][i][tID] != 0)
		    continue;

		id = i;
		break;
	}

	if(id == -1)
	    return SCM(playerid, COLOR_LIGHTRED, "Ai prea multe amenzi! Plateste-le!");

    listitem = GetPVarInt(playerid, #select_ticket);
	DeletePVar(playerid, #select_ticket);

    new vehicle = GetPlayerVehicleID(playerid);
	if(vehicle == 0)
		return SendNotInVehicle(playerid);

	if(VehicleInfo[vehicle][carOwnerID] != PlayerInfo[playerid][pID])
		return SCM(playerid, COLOR_LIGHTRED, "Nu esti proprietarul acestui vehicul.");

	SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Ai platit una dintre amenzile inscrise pe vehiculul tau: \"%.11s...\", Suma platia: $%i.", vTickets[vehicle][listitem][tReason], vTickets[vehicle][listitem][tAmount]);
	cmd::ame(playerid, "?????? ????? ?? ?????? ????????????? ????????.");

	new query[128];
	mysql_format(dbHandle, query, sizeof(query), "UPDATE `tickets` SET `userid`='%i',`vehicle`=0 WHERE `id`='%i'", PlayerInfo[playerid][pID], vTickets[vehicle][listitem][tID]);
	mysql_tquery(dbHandle, query);

	pTickets[playerid][id][tID] = vTickets[vehicle][listitem][tID];
    pTickets[playerid][id][tAmount] = vTickets[vehicle][listitem][tAmount];
    pTickets[playerid][id][tFaction] = vTickets[vehicle][listitem][tFaction];
    format(pTickets[playerid][id][tOfficer], MAX_PLAYER_NAME, "%s", vTickets[vehicle][listitem][tOfficer]);
    format(pTickets[playerid][id][tReason], 64, "%s", vTickets[vehicle][listitem][tReason]);
    format(pTickets[playerid][id][tDate], 24, "%s", vTickets[vehicle][listitem][tDate]);
    //
    vTickets[vehicle][listitem][tID] = 0;
	vTickets[vehicle][listitem][tOfficer] = EOS;
	vTickets[vehicle][listitem][tReason] = EOS;
	vTickets[vehicle][listitem][tDate] = EOS;
  	vTickets[vehicle][listitem][tFaction] = 0;
  	vTickets[vehicle][listitem][tAmount] = 0;
	return 1;
}

Dialog:PlayerFines(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return 1;

	if(listitem < 0 || listitem >= MAX_PLAYER_TICKETS || pTemp[playerid][pTicketListed][listitem] == -1)
	    return 1;

	listitem = pTemp[playerid][pTicketListed][listitem];
	SetPVarInt(playerid, #select_ticket, listitem);

    if(pTickets[playerid][listitem][tID] == 0)
        return SendErrorMessage(playerid, "Amenda nu a fost gasita!");

	static const str_size[] = "{a9c4e4}Intrusul: {7E98B6}%s\n{a9c4e4}Amendat: {7E98B6}%s [%s]\n{a9c4e4}Pret: {7E98B6}$%i\n{a9c4e4}Data: {7E98B6}%s";
	new mes[sizeof(str_size) - 10 + 1 + (MAX_PLAYER_NAME * 2) + 5 + 24];
    format(mes, sizeof(mes), str_size,
	    GetNameEx(playerid),
	    pTickets[playerid][listitem][tOfficer], GetInitials(Factions[pTickets[playerid][listitem][tFaction]][fName]),
	    pTickets[playerid][listitem][tAmount],
	    pTickets[playerid][listitem][tDate]
	);
	Dialog_Show(playerid, PlayerFinesPay, DIALOG_STYLE_MSGBOX, "{F5DEB3}Informatii amenda", mes, "Plateste", "Inchide");
	return 1;
}

Dialog:PlayerFinesPay(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return 1;

    if(0 == Bank_Nearest(playerid))
		return SCM(playerid, COLOR_LIGHTRED, "Pentru a plati o amenda trebuie sa fi in banca.");

	listitem = GetPVarInt(playerid, #select_ticket);
	DeletePVar(playerid, #select_ticket);

	if(pTickets[playerid][listitem][tID] == 0)
        return SendErrorMessage(playerid, "Amenda nu a fost gasita!");

	if(GetCash(playerid) < pTickets[playerid][listitem][tAmount])
		return SendErrorMessage(playerid, "Pentru a plati amenda ai nevoie de $%i.", pTickets[playerid][listitem][tAmount]);

	SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Ai platit o amenda: \"%.11s...\", in valoare de $%i.", pTickets[playerid][listitem][tReason], pTickets[playerid][listitem][tAmount]);
    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Ai %i amenzi neplatite .", CountPlayerTickets(playerid)-1);
	GiveCash(playerid, -pTickets[playerid][listitem][tAmount]);

	new query[128];
	mysql_format(dbHandle, query, sizeof(query), "DELETE FROM `tickets` WHERE `id`='%i'", pTickets[playerid][listitem][tID]);
	mysql_tquery(dbHandle, query);
	//
	pTickets[playerid][listitem][tReason] = EOS;
	pTickets[playerid][listitem][tOfficer] = EOS;
	pTickets[playerid][listitem][tAmount] = 0;
	pTickets[playerid][listitem][tFaction] = 0;
    pTickets[playerid][listitem][tID] = 0;
	return 1;
}

Dialog:PlayerFinesShow(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return 1;

	if(listitem < 0 || listitem >= MAX_PLAYER_TICKETS || pTemp[playerid][pTicketListed][listitem] == -1)
	    return 1;

	new userid = GetPVarInt(playerid, #tickets_show);
	if(0 == IsPlayerLogged(userid))
	    return 1;

	listitem = pTemp[playerid][pTicketListed][listitem];
    if(pTickets[userid][listitem][tID] == 0)
        return SendErrorMessage(playerid, "Amenda nu a fost gasita.");

    static const str_size[] = "{a9c4e4}Intrusul: {7E98B6}%s\n{a9c4e4}Amendat: {7E98B6}%s [%s]\n{a9c4e4}Suma: {7E98B6}$%i\n{a9c4e4}Data: {7E98B6}%s";
	new mes[sizeof(str_size) - 10 + 1 + (MAX_PLAYER_NAME * 2) + 5 + 24];
    format(mes, sizeof(mes), str_size,
	    GetNameEx(userid),
	    pTickets[userid][listitem][tOfficer], GetInitials(Factions[pTickets[userid][listitem][tFaction]][fName]),
	    pTickets[userid][listitem][tAmount],
	    pTickets[userid][listitem][tDate]
	);
	Dialog_Show(playerid, None, DIALOG_STYLE_MSGBOX, "{F5DEB3}Informatii amenda", mes, "Inchide", "");
	return 1;
}

Dialog:MainMDC(playerid, response, listitem, inputtext[])
{
	if(!response)
		return 1;

	switch(listitem)
	{
		case 0:
			Dialog_Show(playerid, MDCSearch, DIALOG_STYLE_INPUT, "{8D8DFF}Police Database - Cauta dupa nume", "{B4B5B7}CAUTA DUPA NUME\n\nIntrodu numele:\n\nInput form:Nume_Prenume (( sau id-ul jucatorului ))", "Input", "Inapoi");
		case 1:
			Dialog_Show(playerid, MDCRecord, DIALOG_STYLE_INPUT, "{8D8DFF}Police Database - Punere sub acuzare", "{B4B5B7}Prezentarea acuzatiilor\n\nIntrodu numele:\n\nInput form:Nume_Prenume (( sau id-ul jucatorului ))", "Input", "Inapoi");
		case 2:
			Dialog_Show(playerid, MDCAddWarn, DIALOG_STYLE_INPUT, "{8D8DFF}Police Database - Alerta Licenta", "{B4B5B7}Adauga puncte penalizare\n\nIntdou numele:\n\n(( First Name/ ID jucator ))", "Input", "Inapoi");
		case 3:
			Dialog_Show(playerid, MDCVehicle, DIALOG_STYLE_INPUT, "{8D8DFF}Police Database - Cautare vehicul", "{B4B5B7}Cauta informatii despre vehicul\n\nIntrodu numarul de inmatriculare:\n\n(( Vehicle Number ))", "Input", "Inchide");
		case 4:
		    Get_Calls(playerid);
		case 5:
		{
			new string[MAX_CALLS_AND_ARREST * 32],
			    count;

			for(new i = 0; i != MAX_CALLS_AND_ARREST; i++)
			{
				if(ArrestInfo[i][arrestExists] == 0)
				    continue;

				format(string, sizeof(string), "%s\n%i. %s", string, count+1, GetNameEx(ArrestInfo[i][arrestSuspect]));
			}
			Dialog_Show(playerid, MDCLastArrest, DIALOG_STYLE_LIST, "{8D8DFF}Police Database - Arestari recente", string, "Alege", "Inapoi");
		}
		case 6:
		{
		    new string[1024],
		        count;

		    for(new i = 0; i != MAX_PATROL; i++)
		    {
				if(PatrolInfo[GetPatrolID(playerid)][i][patrulExists] == 0)
				    continue;

				format(string, sizeof(string), "%s\n{8c8cfe}%s:{FFFFFF}  ", string, PatrolInfo[GetPatrolID(playerid)][i][patrulName]);

				if(IsPlayerLogged(PatrolInfo[GetPatrolID(playerid)][i][patrulOfficer][0]))
					format(string, sizeof(string), "%s%s  ", string, GetNameEx(PatrolInfo[GetPatrolID(playerid)][i][patrulOfficer][0]));

                if(IsPlayerLogged(PatrolInfo[GetPatrolID(playerid)][i][patrulOfficer][1]))
					format(string, sizeof(string), "%s%s  ", string, GetNameEx(PatrolInfo[GetPatrolID(playerid)][i][patrulOfficer][1]));

				count++;
			}

			if(count == 0)
			    return SendErrorMessage(playerid, "Nu au fost gasite patrule active.");

			Dialog_Show(playerid, None, DIALOG_STYLE_LIST, "{8D8DFF}Police Database - Patrule active", string, "Inchide", "");
		}
		case 7: ShowWeaponLicense(playerid, 0);
	}
	return 1;
}

Dialog:MDCLastArrest(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return 1;

	new count;
    for(new i = 0; i != MAX_CALLS_AND_ARREST; i++)
	{
		if(ArrestInfo[i][arrestExists] == 0)
		    continue;

		if(count == listitem)
		{
            new string[500];
			format(string, sizeof(string), "{B4B5B7}Informatii arest\n\nDurata arestului: %s\nArestat: %s\nArest facut de: %s\nData: %s", ConvertSecond(ArrestInfo[i][arrestTime]), ArrestInfo[i][arrestSuspect], ArrestInfo[i][arrestOfficer], ArrestInfo[i][arrestDate]);
			Dialog_Show(playerid, None, DIALOG_STYLE_MSGBOX, "{8D8DFF}Police Database - Informatii arest", string, "-", "");
		    return 1;
		}
		count++;
	}

	SendErrorMessage(playerid, "Eroare la arest.");
	return 1;
}

Dialog:MDCWeapon(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return cmd::mdc(playerid, "");

	if(listitem == 0)
	{
	    if(GetPVarInt(playerid, #weapon_list) < 1)
	        ShowWeaponLicense(playerid, 0);
		else
        	ShowWeaponLicense(playerid, GetPVarInt(playerid, #weapon_list)-1);
	    return 1;
	}
    else if(listitem == 1)
	{
	    ShowWeaponLicense(playerid, GetPVarInt(playerid, #weapon_list)+1);
	    return 1;
	}

	listitem -= 2;
	if(pTemp[playerid][pWeaponListed][listitem] == 0)
	    return SendErrorMessage(playerid, "The request failed.");

	new query[128];
	mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `users` WHERE `id`='%i'", pTemp[playerid][pWeaponListed][listitem]);
	mysql_tquery(dbHandle, query, "ShowWeaponLicensePlayer", "i", playerid);
	for(new i; i != 30; i++)
		pTemp[playerid][pWeaponListed][i] = 0;
	return 1;
}

Dialog:MDCCall(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return 1;

    if(PlayerInfo[playerid][pFaction] != LSPD && PlayerInfo[playerid][pFaction] != SASD && PlayerInfo[playerid][pFaction] != LSFD)
	    return 1;

	new mes[512],
	    count,
		type = (PlayerInfo[playerid][pFaction] == LSFD)?(2):(1);

    for(new i = 0; i != MAX_CALLS_AND_ARREST; i++)
	{
	    if(CallInfo[i][callExists] == 0 || CallInfo[i][callType] != type)
			continue;

		if(listitem == count)
		{
		   	format(mes, sizeof(mes), "{B4B5B7}911-Informatii apel - #%i\n\nApel de la: %s\nNumar de telefon: %i\nSituatie: %s\nLocatie: %s\nData: %s\nApel raspuns in %i secunde(-?)", i+1, CallInfo[i][callName], CallInfo[i][callPhone], CallInfo[i][callText], CallInfo[i][callLocation], CallInfo[i][callDate], CallInfo[i][callAccept]);
			Dialog_Show(playerid, MDCCall2, DIALOG_STYLE_MSGBOX, "{8D8DFF}Police Database - Informatii apel", mes, "Optiuni", "Inapoi");
			SetPVarInt(playerid, #last_call, i);
		    return 1;
		}
		count++;
	}
	return 1;
}

Dialog:MDCCall2(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return 1;

    Dialog_Show(playerid, MDCCallRespond, DIALOG_STYLE_LIST, "{8D8DFF}Police Database - Informatii apel", "- Accepta apelul\n- Revoca apelul", "Alege", "Inapoi");
	return 1;
}

Dialog:MDCCallRespond(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return 1;

    if(PlayerInfo[playerid][pFaction] != LSPD && PlayerInfo[playerid][pFaction] != SASD && PlayerInfo[playerid][pFaction] != LSFD)
	    return 1;

	new type = (PlayerInfo[playerid][pFaction] == LSFD)?(2):(1);
	new id = GetPVarInt(playerid, #last_call);

    if(CallInfo[id][callExists] == 0 || CallInfo[id][callType] != type)
        return 1;

	foreach(Player, i)
	{
 		if(!IsPlayerLogged(i) || (PlayerInfo[i][pSettings] & togFaction))
			continue;

		if(type == 1 && PlayerInfo[i][pFaction] != LSPD && PlayerInfo[i][pFaction] != SASD)
		    continue;

		if(type == 2 && PlayerInfo[i][pFaction] != LSFD)
		    continue;

        if(listitem == 0)
		{
		    if(pTemp[playerid][pPatrol])
		        SendClientMessageEx(i, COLOR_LSPD, "* [%s] %s %s [%s] a preluat un apel la 911. #%i.", GetInitials(Factions[PlayerInfo[playerid][pFaction]][fName]), GetRankName(playerid), GetNameEx(playerid), PatrolInfo[GetPatrolID(playerid)][pTemp[playerid][pPatrol]-1][patrulName], id+1);
			else
				SendClientMessageEx(i, COLOR_LSPD, "* [%s] %s %s a preluat un apel la 911. #%i.", GetInitials(Factions[PlayerInfo[playerid][pFaction]][fName]), GetRankName(playerid), GetNameEx(playerid), id+1);
		}
		else
		{
		    SendClientMessageEx(i, COLOR_LSPD, "* [%s] %s %s a revocat un apel la 911. #%i.", GetInitials(Factions[PlayerInfo[playerid][pFaction]][fName]), GetRankName(playerid), GetNameEx(playerid), id+1);
		}
	}
	if(listitem == 0)
	{
	    Waypoint_Set(playerid, CallInfo[id][callPosX],CallInfo[id][callPosY],CallInfo[id][callPosZ], 3.0);
	    CallInfo[id][callAccept]++;
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_GREEN, "Apelul (%i) a fost revocat.", id+1);
	    CallInfo[id][callExists] = 0;
 		CallInfo[id][callType] = 0;
		CallInfo[id][callAccept] = 0;
	}
	return 1;
}

Dialog:MDCSearch(playerid, response, listitem, inputtext[])
{
	if(!response)
		return 1;

    new userid;
	if(sscanf(inputtext, "u", userid))
		return Dialog_Show(playerid, MDCSearch, DIALOG_STYLE_INPUT, "{8D8DFF}Police Database - Cauta dupa nume", "{B4B5B7}CAUTA DUPA NUME\n\nIntrodu numele:\n\nInput Form ((sau id-ul jucatorului))", "Input", "Inchide");

	if(!IsPlayerLogged(userid))
		return Dialog_Show(playerid, MDCSearch, DIALOG_STYLE_INPUT, "{8D8DFF}Police Database - Cauta dupa nume", "{B4B5B7}CAUTA DUPA NUME\n\nIntrodu numele:\n\nInput Form ((sau id-ul jucatorului))\n"EMBED_RED"Aceasta persoana nu este in baza de date.", "Input", "Inchide");

	new query[128];
	mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `criminalrecords` WHERE `userid` = '%i'", PlayerInfo[userid][pID]);
	mysql_tquery(dbHandle, query, "PersonInfo", "ii", playerid, userid);
	return 1;
}

forward PersonInfo(playerid, userid);
public PersonInfo(playerid, userid)
{
	new str[128],
		mdc[1024] = "{B4B5B7}REZULTATELE CAUTARII\n\n";

	format(str, sizeof(str), "Nume: %s, Data nasterii: %s\n", GetNameEx(userid),PlayerInfo[userid][pBirthdate]);
	strcat(mdc, str);
	format(str, sizeof(str), "Numar de telefon: %i\n",PlayerInfo[userid][pNumber]);
	strcat(mdc, str);
	format(str, sizeof(str), "Amenzi: %i\n", CountPlayerTickets(userid));
	strcat(mdc, str);

	switch(PlayerInfo[userid][pCarLic])
	{
	    case 0: strcat(mdc, "Licenta de condus: Nu\n");
	    case 1: strcat(mdc, "Licenta de condus: Da\n");
	}
	format(str, sizeof(str), "Puncte de penalizare: %i\n\n",PlayerInfo[userid][pDriveWarns]);
	strcat(mdc, str);
	switch(PlayerInfo[userid][pWepLic])
	{
	    case 0: strcat(mdc, "Licenta de port arma: Nu\n");
	    case 1: strcat(mdc, "Licenta de port arma: Da\n");
	}
	format(str, sizeof(str), "Avertismente: %i\n\n",PlayerInfo[userid][pWepWarns]);
	strcat(mdc, str);
	switch(PlayerInfo[userid][pFlyLic])
	{
	    case 0: strcat(mdc, "Licenta de aviatie: Nu\n");
	    case 1: strcat(mdc, "Licenta de aviatie: Da\n");
	}
	switch(PlayerInfo[userid][pTaxiLic])
	{
	    case 0: strcat(mdc, "Licenta de taximetrist: Nu\n\n");
	    case 1: strcat(mdc, "Licenta de taximetrist: Da\n\n");
	}

	new count;

	for(new i; i < MAX_HOUSES; i++)
	{
	    if(HouseInfo[i][hID] == 0 || HouseInfo[i][hOwnerID] != PlayerInfo[userid][pID])
	        continue;

		format(str, sizeof(str), "Adresa rezidentiala: %s, %03d\n\n", GetHouseZone(i), i);
		strcat(mdc, str);
		count++;
		if(count > 4) break;
	}

	if(0 == count)
        strcat(mdc, "Adresa rezidentiala nu a putut fi gasita.\n\n\n");

	count = 0;

	foreach(new i:Vehicle)
	{
	    if(VehicleInfo[i][carOwnerID] != PlayerInfo[userid][pID])
	        continue;

        format(str, sizeof(str), "Vehicul: %s\nCasa: %s\n\n", VehicleNames[VehicleInfo[i][carModel]-400], VehicleInfo[i][carPlate]);
		strcat(mdc, str);

		if(count > 5)
			break;
	}

	strcat(mdc, "Cazier:\n");
	format(str, sizeof(str), "Arestari: %i\n", PlayerInfo[userid][pArrested]);
	strcat(mdc, str);

    if(PlayerInfo[playerid][pJailed] == PRISON_JAIL)
	{
		format(str, sizeof(str), "Inchis: %s%i\n\n",(PlayerInfo[userid][pIsolateTime] != 0)?("B"):("A"), PlayerInfo[userid][pPrisoned]+100);
		strcat(mdc, str);
	}

	format(str, sizeof(str), "%s\n\n", (cache_num_rows() > 0)?("URMARIT"):("NEURMARIT"));
	strcat(mdc, str);

	for(new i; i < cache_num_rows(); i++)
	{
        cache_get_field_content(i, "charge", str);
        strcat(mdc, str);
        strcat(mdc, "\n");
	}
	Dialog_Show(playerid, None, DIALOG_STYLE_MSGBOX, "{8D8DFF}Police MDC", mdc, "-", "");
	return 1;
}

Dialog:MDCRecord(playerid, response, listitem, inputtext[])
{
	if(!response)
		return 1;

	if(sscanf(inputtext, "u", pTemp[playerid][pMDCPlayer]))
		return Dialog_Show(playerid, MDCRecord, DIALOG_STYLE_INPUT, "{8D8DFF}Police Database - Punere sub acuzare", "{B4B5B7}Prezentarea acuzatiilor\n\nIntrodu numele:\n\nInput form: Nume_Prenume (( sau id-ul jucatorului ))", "Input", "Inapoi");

	if(!IsPlayerLogged(pTemp[playerid][pMDCPlayer]))
		return Dialog_Show(playerid, MDCRecord, DIALOG_STYLE_INPUT, "{8D8DFF}Police Database - Punere sub acuzare", "{B4B5B7}Prezentarea acuzatiilor\n\nIntrodu numele:\n\nInput form: Nume_Prenume (( sau id-ul jucatorului ))\n"EMBED_RED"Aceasta persoana nu este in baza de date!", "Input", "Inapoi");

	new mes[256];
	format(mes, sizeof(mes), "{B4B5B7}Prezentarea acuzatiilor\n\nAcuzat pentru: %s\n\n(( Crima ))", GetNameEx(pTemp[playerid][pMDCPlayer]));
	Dialog_Show(playerid, MDCRecord2, DIALOG_STYLE_INPUT, "{8D8DFF}Police Database - Punere sub acuzare", mes, "Input", "Inchide");
	return 1;
}

Dialog:MDCRecord2(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return 1;

    if(!IsPlayerLogged(pTemp[playerid][pMDCPlayer]))
	    return 1;

	if(strlen(inputtext) < 1 || strlen(inputtext) > 127)
	{
	    new mes[256];
		format(mes, sizeof(mes), "{B4B5B7}Prezentarea acuzatiilor\n\nAcuzat pentru: %s\n\n(( Crima ))", GetNameEx(pTemp[playerid][pMDCPlayer]));
		Dialog_Show(playerid, MDCRecord2, DIALOG_STYLE_INPUT, "{8D8DFF}Police Database - Punere sub acuzare", mes, "Input", "Inchide");
		return 1;
	}

    AddCriminalRecord(pTemp[playerid][pMDCPlayer], inputtext, playerid);
    SendFactionMessage(LSPD, COLOR_LSPDNEW, "[WANTED] Acuzat: %s, Procuror: %s Crima: %s.", GetNameEx(pTemp[playerid][pMDCPlayer]), GetNameEx(playerid), inputtext);
	SendFactionMessage(SASD, COLOR_LSPDNEW, "[WANTED] Acuzat: %s, Procuror: %s Crima: %s.", GetNameEx(pTemp[playerid][pMDCPlayer]), GetNameEx(playerid), inputtext);
	SCM(playerid, COLOR_WHITE, "Acuzare adaugata cu succes in cazier!");
	pTemp[playerid][pMDCPlayer] = INVALID_PLAYER_ID;
	return 1;
}

Dialog:MDCAddWarn(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return 1;

	new userid;

    if(sscanf(inputtext, "u", userid))
        return Dialog_Show(playerid, MDCAddWarn, DIALOG_STYLE_INPUT, "{8D8DFF}Police Database - Alerta licenta", "{B4B5B7}Adauga puncte penalizare\n\nIntrodu numele:\n\n(( Nume sau ID jucator ))\n"EMBED_RED"Aceasta persoana nu este in baza de date", "Input", "Inchide");

	if(!IsPlayerLogged(userid))
		return Dialog_Show(playerid, MDCAddWarn, DIALOG_STYLE_INPUT, "{8D8DFF}Police Database - Alerta licenta", "{B4B5B7}Adauga puncte penalizare\n\nIntrodu numele:\n\n(( Nume sau ID jucator ))\n"EMBED_RED"Aceasta persoana nu este in baza de date.", "Input", "Inchide");

    if(PlayerInfo[userid][pCarLic] == 0)
        return Dialog_Show(playerid, MDCAddWarn, DIALOG_STYLE_INPUT, "{8D8DFF}Police Database - Aleta licenta", "{B4B5B7}Adauga puncte penalizare\n\nIntrodu numele:\n\n(( Nume sau ID jucator ))\n"EMBED_RED"Aceasta persoana nu are licenta de condus.", "Input", "Inchide");

	new mes[128];
	format(mes, sizeof(mes), "a scris un avertisment pe licenta de condus a lui %s.", GetNameEx(userid));
	cmd::me(playerid, mes);
	SendClientMessageEx(playerid, COLOR_WHITE, "** Ai adaugat un avertisment pe licenta de condus a lui %s.", GetName(userid));

	PlayerInfo[userid][pDriveWarns]++;

	if(PlayerInfo[userid][pDriveWarns] >= 3)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "** Licenta lui %s a acumulat 3 avertismente, aceasta i-a fost revocata.", GetNameEx(userid));
		PlayerInfo[userid][pDriveWarns] = 0;
		PlayerInfo[userid][pCarLic] = 0;
	}
	return 1;
}

Dialog:MDCVehicle(playerid, response, listitem, inputtext[])
{
	if(!response)
		return 1;

	if(!strlen(inputtext) || strlen(inputtext) > 23)
	    return Dialog_Show(playerid, MDCVehicle, DIALOG_STYLE_INPUT, "{8D8DFF}Police Database - Cautare vehicul", "{B4B5B7}Cauta informatii despre vehicul\n\nIntrodu numarul de inmatriculare:\n\n(( Vehicle Number ))", "Input", "Inapoi");

	new query[156];
	mysql_format(dbHandle, query, sizeof(query), "SELECT *, (SELECT `name` FROM `users` WHERE id =cars.owner) as ownername FROM `cars` WHERE `plate` = '%e' AND `registered`=1", inputtext);
	mysql_tquery(dbHandle, query, "OnCheckNumber", "d", playerid);
	return 1;
}

Dialog:SendPM(playerid, response, listitem, inputtext[])
{
	if(!response)
		return 1;

	new userid = GetPVarInt(playerid, #pm_to),
	    text[128];

	GetPVarString(playerid, #pm_text, text, 128);
	SendPMToPlayer(playerid, userid, text);
	return 1;
}

Dialog:LSPDArmoury(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return cmd::duty(playerid, "");

    if(0 == IsPlayerAtUniform(playerid) && 0 == IsPlayerAtSecondUniform(playerid))
		return SCM(playerid, COLOR_LIGHTRED, "Nu esti in vestiar!");

	if(listitem == 0)
	    return Dialog_Show(playerid, LSPDGUN, DIALOG_STYLE_LIST, "{8D8DFF}Arme", "Tonfa\nSpray cu piper\nDesert Eagle\nMP5\nShotgun\n?4\nSniper Rifle\nGrenada fumigena\nCamera de fotografiat\nIa tot echipamentul", "Alege", "Inchide");

	if(PlayerInfo[playerid][pSwat] == 0 && !isLeader(playerid))
		return SCM(playerid, COLOR_LIGHTRED, "Nu faci parte din echipa S.W.A.T!");

	if(0 == PlayerInfo[playerid][pSwatDuty])
	{
		PlayerInfo[playerid][pSwatDuty] = 1;
		SetPlayerArmour(playerid, 150);

 		PlayerInfo[playerid][pChar] = (PlayerInfo[playerid][pFaction] == SASD)?(287):(285);
		SetPlayerSkin(playerid, PlayerInfo[playerid][pChar]);

        SetPlayerColor(playerid, RemoveAlpha(Factions[PlayerInfo[playerid][pFaction]][fColor]));
		SendFactionMessage(LSPD, COLOR_LSPDNEW, "** HQ: %s %s s-a echipat(S.W.A.T) **",GetRankName(playerid), GetNameEx(playerid));
		return 1;
	}
	PlayerInfo[playerid][pSwatDuty] = 0;
	SetPlayerArmour(playerid,100);
	PlayerInfo[playerid][pChar] = 0;
	SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);

	SendFactionMessage(LSPD, COLOR_LSPDNEW, "** HQ: %s %s a fost deautorizat(S.W.A.T) **",GetRankName(playerid), GetNameEx(playerid));
	return 1;
}

Dialog:CITYGUN(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return cmd::duty(playerid, "");

    if(PlayerInfo[playerid][pFaction] != CITY)
        return 1;

    if(!PlayerInfo[playerid][pOnDuty])
		return SCM(playerid, COLOR_LIGHTRED, "Trebuie sa fi On-Duty (/duty).");

	if(0 == IsPlayerAtUniform(playerid) && 0 == IsPlayerAtSecondUniform(playerid))
		return SCM(playerid, COLOR_LIGHTRED, "Nu esti in vestiar!");

	switch(listitem)
	{
		case 0 : ac_GivePlayerWeapon(playerid, 24, 100);
		case 1 : ac_GivePlayerWeapon(playerid, 29, 700);
		case 2 : ac_GivePlayerWeapon(playerid, 31, 500);
		case 3: ac_ResetPlayerWeapons(playerid);
	}
	Dialog_Show(playerid, CITYGUN, DIALOG_STYLE_LIST, "{8D8DFF}Arme", "Desert Eagle\nMP5\n?4\nIa tot echipamentul", "Alege", "Inchide");
 	return 1;
}

Dialog:LSPDGUN(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return cmd::duty(playerid, "");

    if(PlayerInfo[playerid][pFaction] != LSPD && PlayerInfo[playerid][pFaction] != SASD)
        return 1;

    if(!PlayerInfo[playerid][pOnDuty])
		return SCM(playerid, COLOR_LIGHTRED, "Trebuie sa fi On-Duty (/duty).");

    if(0 == IsPlayerAtUniform(playerid) && 0 == IsPlayerAtSecondUniform(playerid))
		return SCM(playerid, COLOR_LIGHTRED, "Nu esti in vestiar!");

	switch(listitem)
	{
		case 0 : ac_GivePlayerWeapon(playerid, 3, 1);
		case 1 : ac_GivePlayerWeapon(playerid, 41, 2500);
		case 2 : ac_GivePlayerWeapon(playerid, 24, 100);
		case 3 : ac_GivePlayerWeapon(playerid, 29, 700);
		case 4 : ac_GivePlayerWeapon(playerid, 25, 100);
		case 5 : ac_GivePlayerWeapon(playerid, 31, 500);
		case 6 : ac_GivePlayerWeapon(playerid, 34, 150);
		case 7 : ac_GivePlayerWeapon(playerid, 17, 5);
		case 8: ac_GivePlayerWeapon(playerid, 43, 50);
		case 9: ac_ResetPlayerWeapons(playerid);
	}
	Dialog_Show(playerid, LSPDGUN, DIALOG_STYLE_LIST, "{8D8DFF}Arme", "Tonfa\nSpray cu piper\nDesert Eagle\nMP5\nShotgun\n?4\nSniper Rifle\nGrenada fumigena\nCamera de fotografiat\nIa tot echipamentul", "Alege", "Inchide");
	return 1;
}

Dialog:DOCSGUN(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return cmd::duty(playerid, "");

    if(PlayerInfo[playerid][pFaction] != DOCS)
        return 1;

    if(!PlayerInfo[playerid][pOnDuty])
		return SCM(playerid, COLOR_LIGHTRED, "Trebuie sa fi On-Duty (/duty).");

    if(0 == IsPlayerAtUniform(playerid) && 0 == IsPlayerAtSecondUniform(playerid))
   		return SendErrorMessage(playerid, "Nu esti in vestiar!");

	switch(listitem)
	{
		case 0 : ac_GivePlayerWeapon(playerid, 3, 1);
		case 1 : ac_GivePlayerWeapon(playerid, 41, 2500);
		case 2 : ac_GivePlayerWeapon(playerid, 24, 100);
		case 3 : ac_GivePlayerWeapon(playerid, 25, 100);
		case 4 : ac_GivePlayerWeapon(playerid, 34, 150);
		case 5 : ac_GivePlayerWeapon(playerid, 17, 5);
		case 6: ac_GivePlayerWeapon(playerid, 43, 50);
		case 7: ac_ResetPlayerWeapons(playerid);
	}
	Dialog_Show(playerid, DOCSGUN, DIALOG_STYLE_LIST, "{8D8DFF}Arme", "Tonfa\nSpray cu piper\nDesert Eagle\nShotgun\nSniper Rifle\nGrenada fumigena\nCamera de fotografiat\nIa tot echipamentul", "Alege", "Inchide");
 	return 1;
}

Dialog:FDArmoury(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return cmd::duty(playerid, "");

    if(PlayerInfo[playerid][pFaction] != LSFD)
        return 1;

    if(!PlayerInfo[playerid][pOnDuty])
		return SCM(playerid, COLOR_LIGHTRED, "Trebuie sa fi On-Duty (/duty).");

    if(0 == IsPlayerAtUniform(playerid) && 0 == IsPlayerAtSecondUniform(playerid))
		return SCM(playerid, COLOR_LIGHTRED, "Nu esti in vestiar!");

	switch(listitem)
	{
		case 0 : ac_GivePlayerWeapon(playerid, 9, 1);
		case 1 : ac_GivePlayerWeapon(playerid, 42, 9999);
		case 2: ac_ResetPlayerWeapons(playerid);
	}
	Dialog_Show(playerid, FDArmoury, DIALOG_STYLE_LIST, "{8D8DFF}Echipament", "Drujba\nExtinctor\nIa tot echipamentul", "Alege", "Inchide");
 	return 1;
}
/* =================== PlayerCommands =================== */
CMD:changeplate(playerid, params[])
{
	if(PlayerInfo[playerid][pNumberChanges] < 1)
	    return SendErrorMessage(playerid, "??? ????? ????????? ?????, ?????????? ?????????? ?????? ??????????. (/donate)");

	new vehicleid = GetPlayerVehicleID(playerid);
	if(!IsValidVehicle(PlayerInfo[playerid][pCarKey]))
		return SCM(playerid, COLOR_LIGHTRED, "???? ???????????? ???????? ?? ??????????.");

	if(vehicleid == 0)
		return SendNotInVehicle(playerid);

	if(VehicleInfo[vehicleid][carOwnerID] != PlayerInfo[playerid][pID])
		return SCM(playerid, COLOR_LIGHTRED, "?? ?? ????????? ?????????? ????? ????????????? ????????.");

	Dialog_Show(playerid, ChangeNumberplate, DIALOG_STYLE_INPUT, "???? ?????? ?????", "??????? ????? ???????? ???? ?????? ??????????:", "???????", "??????");
	return 1;
}


Dialog:ChangeNumberplate(playerid, response, listitem, inputtext[])
{
	if(!response)
		return 1;

	if(strlen(inputtext) < 3 || strlen(inputtext) > 11)
	    return SendErrorMessage(playerid, "?????????? ???????? ? ???????? ?????: 3 - 11.");

    new query[128];
	mysql_format(dbHandle, query, sizeof(query), "SELECT `plate` FROM `cars` WHERE `plate` = '%e'", inputtext);
	mysql_tquery(dbHandle, query, "DonateSetPlate", "is", playerid, inputtext);
    return 1;
}

forward DonateSetPlate(playerid, plate[]);
public DonateSetPlate(playerid, plate[])
{
	if(cache_num_rows())
	    return SendErrorMessage(playerid, "???????? ???? ??? ???????????? ?????? ???????????? ?????????.");

    if(PlayerInfo[playerid][pNumberChanges] < 1)
	    return SendErrorMessage(playerid, "??? ????? ????????? ?????, ?????????? ?????????? ?????? ??????????. (/donate)");

	new vehicleid = GetPlayerVehicleID(playerid);
	if(!IsValidVehicle(PlayerInfo[playerid][pCarKey]))
		return SCM(playerid, COLOR_LIGHTRED, "???? ???????????? ???????? ?? ??????????.");

	if(vehicleid == 0)
		return SendNotInVehicle(playerid);

	if(VehicleInfo[vehicleid][carOwnerID] != PlayerInfo[playerid][pID])
		return SCM(playerid, COLOR_LIGHTRED, "?? ?? ????????? ?????????? ????? ????????????? ????????.");

    DeleteVehicleTickets(vehicleid);
    format(VehicleInfo[vehicleid][carPlate], 24, "%s", plate);
	SetVehicleNumberPlate(vehicleid, VehicleInfo[vehicleid][carPlate]);
	RespawnVehicle(vehicleid, 1);
	Save_Car(vehicleid);

	SendClientMessageEx(playerid, COLOR_WHITE, "?? ???????? %s ???????? ????. ????? ?????: %s", VehicleNames[GetVehicleModel(vehicleid)-400], plate);
	SendClientMessageEx(playerid, COLOR_WHITE, "?????? ?? ????????? ????????.");

    PlayerInfo[playerid][pNumberChanges]--;
    new query[128];
	mysql_format(dbHandle, query, sizeof(query), "UPDATE `accounts` SET `number_changes`='%i' WHERE `id` = '%i'", PlayerInfo[playerid][pNumberChanges], PlayerInfo[playerid][pAccID]);
	mysql_tquery(dbHandle, query);
	return 1;
}

CMD:changenick(playerid, params[])
{
	if(PlayerInfo[playerid][pNameChanges] < 1)
	    return SendErrorMessage(playerid, "??? ?????? ?????? ?? ????? ?????, ?????????? ?????????? ?????? ??????????. (/donate)");

	if(strlen(pTemp[playerid][pChangeNick]))
	{
	    pTemp[playerid][pChangeNick] = EOS;
	    return SendErrorMessage(playerid, "?? ???????? ?????? ?? ????? ????????.");
	}

	Dialog_Show(playerid, ChangeNick, DIALOG_STYLE_INPUT, "???? ?????? ?????", "??????? ????? ??????? (???_??????):", "?????", "??????");
	return 1;
}

Dialog:ChangeNick(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return 1;

    if(0 == IsValidPlayerName(inputtext))
        return SendErrorMessage(playerid, "???????? ?????? ????????.");

	if(strlen(inputtext) < 4 || strlen(inputtext) > 24)
	    return SendErrorMessage(playerid, "?????????? ???????? ? ????????: 4 - 24.");

	format(pTemp[playerid][pChangeNick], MAX_PLAYER_NAME, inputtext);
	SendClientMessageEx(playerid, -1, "?? ?????? ?????? ?? ????? ???????? - %s", inputtext);
	AMSG(COLOR_YELLOWG, "AdmCmd: %s (ID: %i) ????? ?????? ?? ????? ???????? - %s. (/acceptname - ????? ???????????)", GetNameEx(playerid), playerid, inputtext);
	return 1;
}

CMD:changepass(playerid, params[])
{
	Dialog_Show(playerid, ChangePass, DIALOG_STYLE_PASSWORD, "???? ????????? ??????????", "??????? ??????????? ?????? ??? ?????:", "?????", "??????");
	return 1;
}

CMD:techhelp(playerid, params[])
{
	new mes[512] = "{FFFFFF}";
	strcat(mes, "/changepass - ???????? ??????.\n");
	strcat(mes, "/stats - ?????????? ?????????.\n");
	strcat(mes, "/(pr)operty - ????????? ?????????.\n");
	strcat(mes, "/id - ????? ??????.\n");
	strcat(mes, "/isafk - ?????? ????? ??? ??????.\n");
    strcat(mes, "/mm - ???? ??????.\n");
    strcat(mes, "/setspawn - ???????? ????? ??????.\n");
    strcat(mes, "/askq - ?????? ?????? ?????????????.\n");
    strcat(mes, "/report - ?????? ?????? ?? ??????.\n");
    strcat(mes, "/request - ????????? ???-?????? ? ?????????????.\n");
    strcat(mes, "/charity - ????? ??????.\n");
    strcat(mes, "/admins - ?????? ??????????????? ? ????.\n");
    strcat(mes, "/testers - ?????? ???????? ????.\n");
    strcat(mes, "/tog - ????????? ?????????.");
    Dialog_Show(playerid, CmdServer2, DIALOG_STYLE_MSGBOX, "??????????? ???????", mes, "?????", "???????");
	return 1;
}
CMD:mainhelp(playerid, params[])
{
	new mes[1256] = "{FFFFFF}";
    strcat(mes, "/pay - ???????? ??????.\n");
    strcat(mes, "/time - ?????? ?????.\n");
    strcat(mes, "/fill - ????????? ????????? ?? ???.\n");
    strcat(mes, "/buyfood - ?????? ??? ? ??????.\n");
    strcat(mes, "/(inv)entory - ?????????.\n");
    strcat(mes, "/clothing - ??????????.\n");
    strcat(mes, "/offclothes - ????? ??????\n");
    strcat(mes, "/buy - ????????? ???? ???????.\n");
    strcat(mes, "/licenses - ???????? ID ?????.\n");
    strcat(mes, "/coin - ??????? ???????.\n");
    strcat(mes, "/dice - ??????? ?????.\n");
    strcat(mes, "/(d)rop(gun) - ????????? ??????.\n");
    strcat(mes, "/(p)ickup(item) - ??????? ??????/???????.\n");
    strcat(mes, "/buygun - ?????? ?????? ? ?????????/?? ?????? ?????.\n");
    strcat(mes, "/place - ???????? ?????? ? ?????????/???.\n");
    strcat(mes, "/takegun - ????? ?????? ?? ??????????/????.\n");
    strcat(mes, "/check - ??????????? ????????? ??????????/????.\n");
    strcat(mes, "/greet - ?????????? ?????? ????.\n");
    strcat(mes, "/ad - ????????? ??????????.\n");
    strcat(mes, "/cad - ?????????? ????????.\n");
    strcat(mes, "/mask - ??????/????? ?????.\n");
    strcat(mes, "/buyclothes - ?????? ??????.\n");
    strcat(mes, "/dropkey - ???????? ???????? ??????.\n");
    strcat(mes, "/(d)rop(money) - ???????? ?????? ?? ?????.\n");
    strcat(mes, "/frisk - ?????????? ????? ??????.\n");
    strcat(mes, "/coh - ?????????? ?????? ? ????.\n");
    strcat(mes, "/stop - ?????????? ????????.\n");
    strcat(mes, "(/v)ehicle - ???? ??????????.\n");
    strcat(mes, "/setstyle - ???????? ????? ??????, HUD, ????? ???, ????????.\n");
    strcat(mes, "/animlist - ?????? ????????.\n");
    strcat(mes, "/removecp - ??????? GPS ?????.\n");
    strcat(mes, "/fines - ???????????? ??????.\n");
    strcat(mes, "/vfines - ???????????? ?????? ??????????.");
    strcat(mes, "/note - ???????.");
    Dialog_Show(playerid, CmdServer2, DIALOG_STYLE_MSGBOX, "????? ???????", mes, "?????", "???????");
	return 1;
}

CMD:chathelp(playerid, params[])
{
    new mes[512] = "{FFFFFF}";
	strcat(mes, "/ame - ???????? (??? ???????)\n");
	strcat(mes, "/me - ???????? (? ???)\n");
	strcat(mes, "/do - ???????? ?? ???????? ????, ???????? ????-????.\n");
	strcat(mes, "(/l)ocal - ????????? ???.\n");
	strcat(mes, "(/s)hout - ???????.\n");
	strcat(mes, "/low - ???????? ???????.\n");
	strcat(mes, "(/w)hisper - ???????? ??????? ????????????? ??????.\n");
	strcat(mes, "/b - ????????? ??? ???.\n");
	strcat(mes, "/ooc - ?????????? ??? ???.\n");
	strcat(mes, "/pm - ????????? ?????? ?????????.");
	Dialog_Show(playerid, CmdServer2, DIALOG_STYLE_MSGBOX, "??????? ????", mes, "?????", "???????");
	return 1;
}

CMD:radiohelp(playerid, params[])
{
    new mes[512] = "{FFFFFF}?????????: ?? ?????? ?????????? ????? ? 24-7!\n\n";
	strcat(mes, "/r - ???????? ?? ?????.\n");
	strcat(mes, "/rr - ???????? ?? ????? ? ????.\n");
	strcat(mes, "/(rl)ow - ???????? ? ????? ????-???????.\n");
	strcat(mes, "/(rrl)ow - ???????? ? ????? ????-??????? ? ????.\n");
	strcat(mes, "/auth - ?????????????? ?? ?????? ??????????.\n");
	strcat(mes, "/setchannel - ??????? ????? ?????.\n");
	strcat(mes, "/setslot - ??????? ???? ?????.\n");
	strcat(mes, "/leavechannel - ???????? ??????????.\n");
	strcat(mes, "/sellchannel - ??????? ??????????. (50% ????????)\n");
	strcat(mes, "/newauth - ??????? ?????? ?? ??????.\n");
	strcat(mes, "/kickoffradio - ??????? ? ??????.\n");
	strcat(mes, "/radiomembers - ????????? ??????????.");
	Dialog_Show(playerid, CmdServer2, DIALOG_STYLE_MSGBOX, "??????? ?????", mes, "?????", "???????");
	return 1;
}

CMD:fishhelp(playerid, params[])
{
	new mes[256] = "{FFFFFF}?????????: ?? ?????? ????????? ?? ????? 300 ?????? ????.\n\n";
	strcat(mes, "/myfish - ?????????? ???-?? ????????? ????.\n");
	strcat(mes, "/unloadfish - ??????? ???? ?? ??????.\n");
	strcat(mes, "/fish - ???????? ??????.\n");
	strcat(mes, "/stopfish - ?????????? ???????.\n");
	strcat(mes, "/fishzone - ???????? ????? ?????.");
	Dialog_Show(playerid, CmdServer2, DIALOG_STYLE_MSGBOX, "??????? ???????", mes, "?????", "???????");
	return 1;
}

CMD:bankhelp(playerid, params[])
{
	new mes[256] = "{FFFFFF}";
	strcat(mes, "/atm - ??????? ???? ?????????.\n");
	strcat(mes, "/balance - ????????? ?????? ??????????? ?????.\n");
	strcat(mes, "/withdraw - ????? ?????? ? ??????????? ?????.\n");
	strcat(mes, "/deposit - ???????? ?????? ?? ????.\n");
	strcat(mes, "/transfer - ????????? ????? ????? ?? ?????? ????.\n");
	strcat(mes, "/paycheck - ??????? ?????? ? ???????.\n");
	strcat(mes, "/savings - ???????? ?????? ?? ?????????????? ????.\n");
	strcat(mes, "/fines - ???????? ??????.");
	Dialog_Show(playerid, CmdServer2, DIALOG_STYLE_MSGBOX, "??????? ?????", mes, "?????", "???????");
	return 1;
}

CMD:cellhelp(playerid, params[])
{
    new mes[654] = "{FFFFFF}?????????: ?? ?????? ?????????? ??????? ? 24-7.\n\n";
	strcat(mes, "/phone - ????????/?????? ????????? ????????.\n");
	strcat(mes, "/pc - ???????? ?????? ????.\n");
	strcat(mes, "/call - ????????? ?? ????????? ?????.\n");
	strcat(mes, "/loudspeaker - ????????/????????? ??????? ?????.\n");
	strcat(mes, "/low - ???? ???????? ? ??????.\n");
	strcat(mes, "/(p)ickup - ????? ??????. (???????? ?? ??????)\n");
	strcat(mes, "/(h)angup - ???????? ??????. (?????????? ?????)\n");
	strcat(mes, "/sms - ???????? ???.\n");
	strcat(mes, "/togphone - ????????/????????? ???????.\n");
	strcat(mes, "/dropcell - ???????? ???????.\n");
	strcat(mes, "/showcontact - ???????? ???????????? ??????? ??????.\n");
	strcat(mes, "/showcontacts - ???????? ??? ???????? ??????? ??????.");
	Dialog_Show(playerid, CmdServer2, DIALOG_STYLE_MSGBOX, "??????? ????????", mes, "?????", "???????");
	return 1;
}

CMD:househelp(playerid, params[])
{
    new mes[654] = "{FFFFFF}";
	strcat(mes, "/hmenu - ???? ????.\n");
	strcat(mes, "/lock - ???????/??????? ???.\n");
	strcat(mes, "/rentroom - ????? ??? ? ??????.\n");
	strcat(mes, "/tenants - ?????? ????.\n");
	strcat(mes, "/furniture - ?????????? ???????.\n");
	strcat(mes, "/grantbuild - ????/??????? ??????????? ?????????? ??????????? ?????? ??????.\n");
	strcat(mes, "/clothes - ???? ????.\n");
	strcat(mes, "/houseupgrade - ??????? ????.\n");
	strcat(mes, "/trunkspot - ???????? ????? ???????.\n");
	strcat(mes, "/check - ?????????? ?????????? ???????.\n");
	strcat(mes, "/place - ???????? ?????? ? ??????.\n");
	strcat(mes, "/takegun - ????? ?????? ?? ???????.\n");
	strcat(mes, "/housewithdraw - ????? ?????? ?? ?????.\n");
	strcat(mes, "/housedeposit - ???????? ?????? ? ????.\n");
	strcat(mes, "/sellhouse - ??????? ??? ??????????? (50% ?? ?????????)\n");
	strcat(mes, "/sellhouseto - ??????? ??? ??????");
	Dialog_Show(playerid, CmdServer2, DIALOG_STYLE_MSGBOX, "??????? ????", mes, "?????", "???????");
	return 1;
}

CMD:bizhelp(playerid, params[])
{
	new mes[556] = "{FFFFFF}";
	strcat(mes, "/buybiz - ?????????? ??????.\n");
	strcat(mes, "/sellbiz - ??????? ??????.\n");
	strcat(mes, "/bizupgrade - ??????? ???????.\n");
	strcat(mes, "/bizinfo - ?????????? ? ???????.\n");
	strcat(mes, "/lock - ???????/??????? ??????.\n");
	strcat(mes, "/bizfee - ?????????? ???? ?? ???? ??????. (???? ???, ????????? ???????)\n");
	strcat(mes, "/bizname - ???????? ???????? ???????.\n");
	strcat(mes, "/biztext - ???????? ????? ????? ? ??????.\n");
	strcat(mes, "/bizwithdraw - ????? ?????? ?? ????? ???????.\n");
	strcat(mes, "/bizdeposit - ????????? ?????? ?? ???? ???????.\n");
	strcat(mes, "/buyprod - ???????? ????? ? ??????.\n");
	strcat(mes, "/hire - ?????????? ?????? ???????? ? ???????.\n");
	strcat(mes, "/fire - ??????? ??????, ??????? ???????? ? ???????.");
	Dialog_Show(playerid, CmdServer2, DIALOG_STYLE_MSGBOX, "??????? ???????", mes, "?????", "???????");
	return 1;
}

CMD:factionhelp(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] == 0)
		return SCM(playerid, -1, "?? ?????? ???????? ?? ???????.");

	SCM(playerid, COLOR_GREEN,"|___________________ ??????? ??????? ___________________|");

	if(isLeader(playerid))
	{
		if(Factions[PlayerInfo[playerid][pFaction]][fType] == FACTION_GANG || Factions[PlayerInfo[playerid][pFaction]][fType] == FACTION_MAFIA)
			SCM(playerid, COLOR_YELLOWG,"??????? ??????: /invite /uninvite /giverank /fchat /ranks /towcars /editspawn /editrankname /factionjob");
		else
		    SCM(playerid, COLOR_YELLOWG,"??????? ??????: /invite /uninvite /giverank /fchat /ranks /towcars /editspawn /editrankname /changebadges");
	}

	if(PlayerInfo[playerid][pFaction] == LSPD || PlayerInfo[playerid][pFaction] == SASD)
	{
		SCM(playerid, COLOR_WHITE, "[POLICE] /cuff /uncuff (/m)egaphone /meg /frisk /mdc /(gov)ernment /showbadge");
		SCM(playerid, COLOR_WHITE, "[POLICE] (/r)adio /rlow /bort /(b)ort(l)ist /arrest /detain /revoke /apb /prison /toll");
		SCM(playerid, COLOR_WHITE, "[POLICE] /(c)reate(s)pike /(r)emove(s)pike /(r)emove(a)ll(s)pikes /cctv /exitcctv /ptow /impound");
		SCM(playerid, COLOR_WHITE, "[POLICE] /authswat /siren /checkplate /ram /trace /pull");
		SCM(playerid, COLOR_WHITE, "[POLICE] /setplate /fine /(v)ehicle(fine) /checkfines /checkvfines");
		SCM(playerid, COLOR_WHITE, "[POLICE] /carfix /flist /zond /flashbang /(r)ubber(b)ullets /taser /(f)action(a)ttach /patrol /color");
	}
    else if(PlayerInfo[playerid][pFaction] == CITY)
	{
		SCM(playerid, COLOR_WHITE,"[CITY] /flist /(d)epartments /(f)action /showbadge /(r)adio /rlow /(m)egaphone /(gov)ernment");
		SCM(playerid, COLOR_WHITE,"[CITY] /bort /(b)ort(l)ist /cuff /uncuff /siren");
	}
	else if(PlayerInfo[playerid][pFaction] == LSFD)
	{
		SCM(playerid, COLOR_WHITE,"[LSFD] /flist (/d)epartments (/f)action /showbadge (/r)adio /rlow /bort /(b)ort(l)ist");
		SCM(playerid, COLOR_WHITE,"[LSFD] /heal /pull /operation /hpc /siren (/m)egaphone (/gov)ernment /prescribe /therapy /(f)action(a)ttach");
	}
	else if(PlayerInfo[playerid][pFaction] == DOCS)
	{
		SCM(playerid, COLOR_WHITE,"[DOC] /flist /(d)epartments /(f)action /showbadge /(r)adio /rlow  /(m)egaphone /(gov)ernment");
		SCM(playerid, COLOR_WHITE,"[DOC] /siren /detain /bort /(b)ort(l)ist /cuff /uncuff /frisk /taser /(r)ubber(b)ullets /prisonlist /prison /free /isolate");
	}
	else if(PlayerInfo[playerid][pFaction] == SAN)
	{
		SCM(playerid, COLOR_WHITE,"[SAN] /flist /(f)action /news /exitnews /interview /exitinterview");
	}
	return 1;
}

CMD:help(playerid, params[])
{
    Dialog_Show(playerid, CmdServer, DIALOG_STYLE_LIST, "Comenzi server", "1. Comenzi tehnice\n2.Comenzi generale\n3.Comenzi de chat\n4.Comenzi de factiune\n5. Comenzi de acasa\n6. Comenzi de afaceri\n7. Comenzi bancare\n8. Comenzi telefonice\n9. Comenzi de lucru\n10. Echipe de pescuit", "Select", "Cancel");
	/*SCM(playerid, COLOR_GRAD2,"{C3C3C3}[???????]: {C3C3C3}/changepass /stats /property /id");
	SCM(playerid, COLOR_GRAD2,"{C3C3C3}[text]: {C3C3C3}/mm /pay /time /engine /fill /isafk /buyfood /setspawn /(inv)entory");
	SCM(playerid, COLOR_GRAD2,"{C3C3C3}[text]: {C3C3C3}/clothing /offclohtes /buy /licenses /askq /coin /dice /admins /testers /(d)rop(gun) /(p)ickup(item) /buygun");
	SCM(playerid, COLOR_GRAD2,"{C3C3C3}[text]: {C3C3C3}/place /takegun /check /charity /report /greet /ad /cad /mask /buyclothes /dropkey /(d)rop(money)");
	SCM(playerid, COLOR_GRAD2,"{C3C3C3}[text]: {C3C3C3}/frisk /coh /stop (/v)ehicle /setstyle /animlist /removecp /fines /vehiclefines");
	SCM(playerid, COLOR_GRAD2,"{C3C3C3}[??????]: {C3C3C3}/chathelp /notehelp /fishhelp /bankhelp /cellhelp /househelp /bizhelp /radiohelp /factionhelp /garagehelp /tog /jobhelp");
	SCM(playerid, COLOR_GRAD2,"{C3C3C3}[????]: {C3C3C3}/ame /me /do (/l)ocal (/s)hout /b /low (/w)hisper /ooc /pm");
	SCM(playerid, COLOR_GRAD2,"{C3C3C3}[???/????]: {C3C3C3}/blockpm /blocklist /togpm /togooc /togjoin /togads /toggov /tognews /togf /toghud /togadmcmds /togafk /togname");

	if(PlayerInfo[playerid][pTester] > 0)
		SCM(playerid, COLOR_WHITE, "{C3C3C3}[TESTER]: /testerhelp");*/
	return 1;
}

CMD:donate(playerid, params[])
{
    Dialog_Show(playerid, DonateMenu, DIALOG_STYLE_LIST, "??????????", "1. ???????\n\
	2. ??????????\n\
	{6EA3FF}WWW.LS-LIFE.RU", "???????", "??????");
	return 1;
}

Dialog:DonateMenu(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return 1;

	switch(listitem)
	{
	    case 0:
	    {
			new title[32];
			format(title, sizeof(title), "??? ????: {9ACD32}%i ???.", PlayerInfo[playerid][pDonate]);

	        Dialog_Show(playerid, DonateBuy, DIALOG_STYLE_TABLIST, title, "??????? \"BRONZE\"\t{9ACD32}[150 ??????]\n\
	        ??????? \"SILVER\"\t{9ACD32}[250 ??????]\n\
	        ??????? \"GOLD\"\t{9ACD32}[350 ??????]\n\
	        ????? ????????\t{9ACD32}[80 ??????]\n\
	        ????? ?????? ????????\t{9ACD32}[100 ??????]\n\
	        ????? ????????????? ??????\t{9ACD32}[70 ??????]", "???????", "?????");
	    }
	    case 1:
	    {
	        new mes[256];
	        format(mes, sizeof(mes), "{ffffff}?? ????? ????? {9ACD32}%i {FFFFFF}????? ??????.\n??????????? ??????? ???: %i ???. (/changenick)\n??????????? ??????? ????? ??????????: %i ???. (/changeplate)", PlayerInfo[playerid][pDonate], PlayerInfo[playerid][pNameChanges], PlayerInfo[playerid][pNumberChanges]);

	        new premium_info[4][8] =
				{"???????", "BRONZE", "SILVER", "GOLD"};

			if(PlayerInfo[playerid][pPremium])
			{
				new Float:days = float(PlayerInfo[playerid][pPremiumTime] - gettime()) / 86400.0;
			    format(mes, sizeof(mes), "%s\n?? ?????? ??????? ??????? {9ACD32}%s{FFFFFF}. ???????? {9ACD32}%i{FFFFFF} ???(-??) ?????????????.",mes, premium_info[PlayerInfo[playerid][pPremium]], floatround(days));
			}
			Dialog_Show(playerid, DonateCancel, DIALOG_STYLE_MSGBOX, "??????????", mes, "?????", "");
	    }
		case 2: return cmd::donate(playerid, "");

	}
	return 1;
}

Dialog:DonateBuy(playerid, response, listitem, inputtext[])
{
	if(!response)
		return cmd::donate(playerid, "");

	switch(listitem)
	{
		case 0: Dialog_Show(playerid, BuyPremium, DIALOG_STYLE_MSGBOX, "???????", bronze_str, "??????", "?????");
		case 1: Dialog_Show(playerid, BuyPremium, DIALOG_STYLE_MSGBOX, "???????", silver_str, "??????", "?????");
		case 2: Dialog_Show(playerid, BuyPremium, DIALOG_STYLE_MSGBOX, "???????", gold_str, "??????", "?????");
		case 3: Dialog_Show(playerid, BuyName, DIALOG_STYLE_MSGBOX, "????? ????????", "{FFFFFF}?? ??????? ?????????? ?????????????? ????? ????? ?????????: 80 ??????.", "??????", "?????");
        case 4: Dialog_Show(playerid, BuyNumber, DIALOG_STYLE_INPUT, "????? ?????? ????????", "{FFFFFF}??????? ??? ????? ?????, ??????????? ?????????? ???????? - 4. ?????????: 100 ??????.", "??????", "?????");
        case 5: Dialog_Show(playerid, BuyNumberplate, DIALOG_STYLE_MSGBOX, "????? ?????? ??????????", "{FFFFFF}?? ??????? ?????????? ?????????????? ????? ????????????? ??????? ?????????: 70 ??????.", "??????", "?????");
	}
	SetPVarInt(playerid, #premium_buy, listitem+1);
	return 1;
}

Dialog:BuyName(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return cmd::donate(playerid, "");

	#define PRICE_CHANGE_NAME (80)

	if(PlayerInfo[playerid][pDonate] < PRICE_CHANGE_NAME)
	    return SendErrorMessage(playerid, "?? ????? ????? ???????????? ????? ??????.");

	SendClientMessageEx(playerid, COLOR_INFO, "?? ????????? ??????????? ??????? ??? ?? %i ??????.", PRICE_CHANGE_NAME);
	SendClientMessage(playerid, COLOR_INFO, "??????????? ??????? ?????????? ??? ?? ?????????.");

	PlayerInfo[playerid][pDonate] -= PRICE_CHANGE_NAME;
	PlayerInfo[playerid][pNameChanges]++;

	new query[128];
	mysql_format(dbHandle, query, sizeof(query), "UPDATE `accounts` SET `donate`='%i',`name_changes`='%i' WHERE `id` = '%i'", PlayerInfo[playerid][pDonate], PlayerInfo[playerid][pNameChanges], PlayerInfo[playerid][pAccID]);
	mysql_tquery(dbHandle, query);

	format(query, sizeof(query), "%s [MYSQL: %i | IP: %s] ????? ????? ????",
	GetName(playerid), PlayerInfo[playerid][pID], GetPlayerIP(playerid));
 	insert_log(query, DONATE_LOG, 1, playerid);
	return 1;
}

Dialog:BuyNumberplate(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return cmd::donate(playerid, "");

	#define PRICE_CHANGE_NUMBERPLATE (70)

	if(PlayerInfo[playerid][pDonate] < PRICE_CHANGE_NUMBERPLATE)
	    return SendErrorMessage(playerid, "?? ????? ????? ???????????? ????? ??????.");

	SendClientMessageEx(playerid, COLOR_INFO, "?? ????????? ??????????? ??????? ???????? ???? ?????????? ?? %i ??????.", PRICE_CHANGE_NUMBERPLATE);
	SendClientMessage(playerid, COLOR_INFO, "??????????? ??????? ?????????? ??? ?? ?????????.");

	PlayerInfo[playerid][pDonate] -= PRICE_CHANGE_NUMBERPLATE;
	PlayerInfo[playerid][pNumberChanges]++;

	new query[128];
	mysql_format(dbHandle, query, sizeof(query), "UPDATE `accounts` SET `donate`='%i',`number_changes`='%i' WHERE `id` = '%i'", PlayerInfo[playerid][pDonate], PlayerInfo[playerid][pNumberChanges], PlayerInfo[playerid][pAccID]);
	mysql_tquery(dbHandle, query);

	format(query, sizeof(query), "%s [MYSQL: %i | IP: %s] ????? ????? ????????? ?????",
	GetName(playerid), PlayerInfo[playerid][pID], GetPlayerIP(playerid));
 	insert_log(query, DONATE_LOG, 3, playerid);
	return 1;
}

Dialog:BuyNumber(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return cmd::donate(playerid, "");

	if(strlen(inputtext) < 4 || strval(inputtext) < 1000)
	    return Dialog_Show(playerid, BuyNumber, DIALOG_STYLE_MSGBOX, "????? ?????? ????????", "??????? ??? ????? ?????, ??????????? ?????????? ???????? - 4. ?????????: 100 ??????.", "??????", "?????");

	new query[128];
	mysql_format(dbHandle, query, sizeof(query), "SELECT `number` FROM `users` WHERE `number` = '%i'", strval(inputtext));
	mysql_tquery(dbHandle, query, "OnPlayerBuyDonateNumber", "ii", playerid, strval(inputtext));
	return 1;
}

forward OnPlayerBuyDonateNumber(playerid, number);
public OnPlayerBuyDonateNumber(playerid, number)
{
	if(cache_num_rows())
	{
	    Dialog_Show(playerid, BuyNumber, DIALOG_STYLE_MSGBOX, "????? ?????? ????????", "??????? ??? ????? ?????, ??????????? ?????????? ???????? - 4. ?????????: 100 ??????.", "??????", "?????");
	    return SendErrorMessage(playerid, "?????? ????? ??? ???????????? ???-??.");
	}

	#define PRICE_CHANGE_NUMBER (100)

	if(PlayerInfo[playerid][pDonate] < PRICE_CHANGE_NUMBER)
	    return SendErrorMessage(playerid, "?? ????? ????? ???????????? ????? ??????.");

	SendClientMessageEx(playerid, COLOR_INFO, "?? ????????? ????? (%i) ?? %i ??????.", number, PRICE_CHANGE_NUMBER);
	SendClientMessage(playerid, COLOR_INFO, "??????????? ??????? ?????????? ??? ?? ?????????.");

	PlayerInfo[playerid][pDonate] -= PRICE_CHANGE_NUMBERPLATE;
	PlayerInfo[playerid][pNumber] = number;

	new query[128];
	mysql_format(dbHandle, query, sizeof(query), "UPDATE `accounts` SET `donate`='%i' WHERE `id` = '%i'", PlayerInfo[playerid][pDonate], PlayerInfo[playerid][pAccID]);
	mysql_tquery(dbHandle, query);

    mysql_format(dbHandle, query, sizeof(query), "UPDATE `users` SET `number`='%i' WHERE `id` = '%i'", number, PlayerInfo[playerid][pID]);
	mysql_tquery(dbHandle, query);


	format(query, sizeof(query), "%s [MYSQL: %i | IP: %s] ????? ????? ???????? - %i",
	GetName(playerid), PlayerInfo[playerid][pID], GetPlayerIP(playerid), number);
 	insert_log(query, DONATE_LOG, 4, playerid);
	return 1;
}

Dialog:BuyPremium(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return cmd::donate(playerid, "");

	if(PlayerInfo[playerid][pPremium])
 		return SendErrorMessage(playerid, "??? ??????? ????????, ????????? ??? ?????????.");

	listitem = GetPVarInt(playerid, #premium_buy)-1;

	if(listitem < 0 || listitem > 2)
	    return 1;

	new price_premium[3] =
		{150, 250, 350},
		premium_name_changes[3] =
		{2, 3, 5},
		premium_number_changes[3] =
		{3, 5, 7};

	new premium_info[3][8] =
		{"BRONZE", "SILVER", "GOLD"};

	if(PlayerInfo[playerid][pDonate] < price_premium[listitem])
	    return SendErrorMessage(playerid, "?? ????? ????? ???????????? ????? ??????.");

	SendClientMessageEx(playerid, COLOR_INFO, "?? ????????? ??????? %s ?? 30 ???? ?? %i ??????.", premium_info[listitem], price_premium[listitem]);
	SendClientMessage(playerid, COLOR_INFO, "??????????? ??????? ?????????? ??? ?? ?????????.");

	PlayerInfo[playerid][pDonate] -= price_premium[listitem];
	PlayerInfo[playerid][pNameChanges] += premium_name_changes[listitem];
	PlayerInfo[playerid][pNumberChanges] += premium_number_changes[listitem];
	PlayerInfo[playerid][pPremium] = listitem + 1;
    PlayerInfo[playerid][pPremiumTime] = gettime() + 30 * 86400;

	new query[128];
	mysql_format(dbHandle, query, sizeof(query), "UPDATE `accounts` SET `donate`='%i',`name_changes`='%i',`number_changes`='%i' WHERE `id` = '%i'", PlayerInfo[playerid][pDonate], PlayerInfo[playerid][pNameChanges], PlayerInfo[playerid][pNumberChanges], PlayerInfo[playerid][pAccID]);
	mysql_tquery(dbHandle, query);

	mysql_format(dbHandle, query, sizeof(query), "UPDATE `users` SET `vip`='%i',`vip_time`='%i' WHERE `id` = '%i'", PlayerInfo[playerid][pPremium], PlayerInfo[playerid][pPremiumTime], PlayerInfo[playerid][pID]);
	mysql_tquery(dbHandle, query);

	format(query, sizeof(query), "%s [MYSQL: %i | IP: %s] ????? ??????? %s",
	GetName(playerid), PlayerInfo[playerid][pID], GetPlayerIP(playerid), premium_info[listitem]);
 	insert_log(query, DONATE_LOG, 2, playerid);
	return 1;
}

Dialog:DonateCancel(playerid, response, listitem, inputtext[])
{
	cmd::donate(playerid, "");
	return 1;
}
/*ALTX:sb("/seatbelt");
CMD:seatbelt(playerid, params[]) {
 	if(centurapusa = -1) {
	new mes[128];
	format(mes, sizeof(mes), "si-a pus centura.");
	cmd::ame(playerid, mes);
	centurapusa = 1;
	else if(centurapusa = 1) {
		new mes[128];
		format(mes, sizeof(mes), "si-a scos centura");
		cmd::ame(playerid, mes);
		centurapusa = -1;
		}
	}
	return 1;
}*/
ALTX:sb("/seatbelt");
CMD:seatbelt(playerid, params[])
	{
	    if(IsPlayerConnected(playerid))
		{
	        if(IsPlayerInAnyVehicle(playerid) == 1)
			{
	            if(Seatbelt[playerid] == 0)
				{
					Seatbelt[playerid] = 1;
   					new mes[128];
					format(mes, sizeof(mes), "isi pune centura de siguranta.");
					cmd::ame(playerid, mes);
	                return 1;
	            }
	            else
				{
	                Seatbelt[playerid] = 0;
					new mes[128];
					format(mes, sizeof(mes), "isi da jos centura de siguranta.");
					cmd::ame(playerid, mes);
	                return 1;
	            }
	        }
	        else
			{
	            SendClientMessage(playerid, COLOR_GREY, "Nu esti intr-o masina.");
	            return 1;
	        }
	    }
	    return 1;
	}
CMD:checkseatbelt(playerid, params[])
	{
	    new string[256];
 		new Float:x, Float:y, Float:z;
       	if(PlayerToPoint(6.0, playerid, x, y, z) && Seatbelt[playerid] == 1) {
	                format(string, sizeof(string), "%s are centura pusa.", playerid);
	                SendClientMessage(playerid, COLOR_WHITE, string);
	                return 1;
	            }
    	   	else if(PlayerToPoint(6.0, playerid, x, y, z) && Seatbelt[playerid] == 0) {
        		format(string, sizeof(string), "%s nu are centura pusa.", playerid);
   				SendClientMessage(playerid, COLOR_WHITE, string);
       			return 1;
	            }
          return 1;
	}

CMD:flush(playerid, params[]) {
	ClearChatbox(playerid, 100);
	return 1;
}

ALTX:mm("/menu");
CMD:mm(playerid, params[])
{
	Dialog_Show(playerid, MainMenu, DIALOG_STYLE_LIST, "Meniu", "1. Inventar\n\
	2. Statisticile caracterului\n\
	3. Creeaza un report (/report)\n\
	4. Adreseaza o intrebare (/askq)\n\
	5. Ajutor pentru comenzile serveruluin\n\
	6. Setari\n\
	7. Doneaza\n\
	{6EA3FF}WWW.TRW-RP.RO", "Selecteaza", "Cancel");
	return 1;
}

Dialog:MainMenu(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return 1;

	switch(listitem)
	{
		case 0: cmd::inventory(playerid, "");
		case 1: cmd::stats(playerid, "");
		case 2: Dialog_Show(playerid, MakeReport, DIALOG_STYLE_INPUT, "?????? ?? ??????", "{FFFFFF}??????? ID ?????? ? ?????????? ?????? ? ???? ????:", "??????", "??????");
		case 3: Dialog_Show(playerid, MakeHelp, DIALOG_STYLE_INPUT, "?????? ?????????????", "{FFFFFF}??????? ????? ?????? ??????? ? ???? ????:", "??????", "??????");
		case 4: cmd::help(playerid, "");
		case 5: ShowSettings(playerid);
		case 6: cmd::donate(playerid, "");
		case 7: return cmd::mm(playerid, "");
	}
	return 1;
}

Dialog:MakeReport(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return cmd::mm(playerid, "");

    if(!strlen(inputtext))
        return Dialog_Show(playerid, MakeReport, DIALOG_STYLE_INPUT, "?????? ?? ??????", "{FFFFFF}??????? ID ?????? ? ?????????? ?????? ? ???? ????:", "??????", "??????");

	cmd::report(playerid, inputtext);
	return 1;
}

Dialog:CmdServer2(playerid, response, listitem, inputtext[])
{
	if(response)
 		cmd::help(playerid, "");

	return 1;
}

Dialog:CmdServer(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return 1;

	switch(listitem)
	{
	    case 0: cmd::techhelp(playerid, "");
	    case 1: cmd::mainhelp(playerid, "");
	    case 2: cmd::chathelp(playerid, "");
	    case 3: cmd::factionhelp(playerid, "");
	    case 4: cmd::househelp(playerid, "");
	    case 5: cmd::bizhelp(playerid, "");
	    case 6: cmd::bankhelp(playerid, "");
	    case 7: cmd::cellhelp(playerid, "");
	    case 8: cmd::jobhelp(playerid, "");
		case 9: cmd::fishhelp(playerid, "");
	}
	return 1;
}

Dialog:MakeHelp(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return cmd::mm(playerid, "");

	if(!strlen(inputtext))
	    return Dialog_Show(playerid, MakeHelp, DIALOG_STYLE_INPUT, "?????? ?????????????", "{FFFFFF}??????? ????? ?????? ??????? ? ???? ????:", "??????", "??????");

	cmd::askq(playerid, inputtext);
	return 1;
}

stock ShowSettings(playerid)
{
	new text[128],
	    string[1024];

	switch(PlayerInfo[playerid][pWalk])//0
	{
	    case 0: format(text, sizeof(text), "????? ?????? (/walk)\t[?????????]\n");
		default: format(text, sizeof(text), "????? ?????? (/walk)\t[%i]\n", PlayerInfo[playerid][pWalk]);
	}
	strcat(string, text);

	switch(PlayerInfo[playerid][pTalk])//1
	{
	    case 0: format(text, sizeof(text), "????? ?????????\t[?????????]\n");
		default: format(text, sizeof(text), "????? ?????????\t[%i]\n", PlayerInfo[playerid][pTalk]);
	}
	strcat(string, text);

    format(text, sizeof(text), "????? ???\t[%s]\n", GetFightStyleName(playerid));//2
	strcat(string, text);

	format(text, sizeof(text), "????? HUD\t[%i]\n", PlayerInfo[playerid][pHud]);//3
	strcat(string, text);

	switch(PlayerInfo[playerid][pSpawnType])//4
	{
	    case 0: format(text, sizeof(text), "????? ??????\t[???????]\n");
		case -1: format(text, sizeof(text), "????? ??????\t[???????]\n");
		default: format(text, sizeof(text), "????? ??????\t[??? #%i]\n", PlayerInfo[playerid][pSpawnType]);
	}
	strcat(string, text);

	switch(PlayerInfo[playerid][pSettings] & togOOC)//5
	{
	    case 0: text = "OOC ???\t[???????]\n";
		default: text = "OOC ???\t[????????]\n";
	}
	strcat(string, text);

	switch(PlayerInfo[playerid][pSettings] & togName)//6
	{
	    case 0: text = "???? ???????\t[???????]\n";
		default: text = "???? ???????\t[?????????]\n";
	}
	strcat(string, text);

    switch(PlayerInfo[playerid][pSettings] & togAdv)//7
	{
	    case 0: text = "??????? ? ???\t[???????]\n";
		default: text = "??????? ? ???\t[?????????]\n";
	}
	strcat(string, text);

	switch(PlayerInfo[playerid][pSettings] & togJoin)//8
	{
	    case 0: text = "?????????? ? ????? / ?????? ???????\t[???????]\n";
		default: text = "?????????? ? ????? / ?????? ???????\t[?????????]\n";
	}
	strcat(string, text);

	switch(PlayerInfo[playerid][pSettings] & togGov)//9
	{
	    case 0: text = "?????????? ????????????? (/gov)\t[???????]\n";
		default: text = "?????????? ????????????? (/gov)\t[?????????]\n";
	}
	strcat(string, text);

	switch(PlayerInfo[playerid][pSettings] & togPM)//10
	{
	    case 0: text = "?????? ?????????\t[???????]\n";
		default: text = "?????? ?????????\t[?????????]\n";
	}
	strcat(string, text);

	switch(PlayerInfo[playerid][pSettings] & togAdmCmds)//11
	{
	    case 0: text = "?????-??????????\t[???????]\n";
		default: text = "?????-??????????\t[?????????]\n";
	}
	strcat(string, text);

	switch(PlayerInfo[playerid][pSettings] & togNews)//12
	{
	    case 0: text = "??????? ? ???\t[???????]\n";
		default: text = "??????? ? ???\t[?????????]\n";
	}
	strcat(string, text);

    switch(PlayerInfo[playerid][pSettings] & togAFK)//13
	{
	    case 0: text = "????? ??????? ???????????? ? AFK\t[???????]\n";
		default: text = "????? ??????? ???????????? ? AFK\t[?????????]\n";
	}
	strcat(string, text);

	switch(PlayerInfo[playerid][pSettings] & togHUD)//14
	{
	    case 0: text = "????? HUD'a\t[???????]\n";
		default: text = "????? HUD'a\t[?????????]\n";
	}
	strcat(string, text);

	switch(PlayerInfo[playerid][pSettings] & togFaction)//15
	{
	    case 0: text = "??????????? ???\t[???????]\n";
		default: text = "??????????? ???\t[????????]\n";
	}
	strcat(string, text);

	switch(PlayerInfo[playerid][pSettings] & togEnter)//16
	{
	    case 0: text = "????/????? ? ??????? ??????? F\t[???????]\n";
		default: text = "????/????? ? ??????? ??????? F\t[????????]\n";
	}
	strcat(string, text);

	switch(CompareStrings(PlayerInfo[playerid][pGoogle], "!"))//17
	{
	    case 0: text = "Google Authenticator\t[???????]\n";
		default: text = "Google Authenticator\t[????????]\n";
	}
	strcat(string, text);

	strcat(string, "??????? ??????");//18

	Dialog_Show(playerid, MainSettings, DIALOG_STYLE_TABLIST, "?????????", string, "???????", "?????");
	return 1;
}

Dialog:MainSettings(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return cmd::mm(playerid, "");

	if(0 == IsPlayerLogged(playerid))
	    return 1;

	switch(listitem)
	{
	    case 0: Dialog_Show(playerid, ChangeWalk, DIALOG_STYLE_LIST, "????? ?????? (/walk)", "?????????\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17", "???????", "?????");
		case 1: Dialog_Show(playerid, ChangeTalk, DIALOG_STYLE_LIST, "????? ?????????", "?????????\n1\n2\n3\n4\n5\n6\n7\n8\n9", "???????", "?????");
		case 2: Dialog_Show(playerid, ChangeFightstyle, DIALOG_STYLE_LIST, "????? ???", "???????\nBoxing\nKungfu\nKneehead\nGrabkick", "???????", "?????");
        case 3: Dialog_Show(playerid, ChangeHud, DIALOG_STYLE_LIST, "????? HUD", "????? 1\n????? 2\n????? 3\n????? 4", "???????", "?????");
		case 4: Dialog_Show(playerid, ChangeSpawn, DIALOG_STYLE_LIST, "????? ??????", "??????? ?????\n???\n???????\n????????? ?????", "???????", "?????");
		case 5: cmd::togooc(playerid, "");
		case 6: cmd::togname(playerid, "");
		case 7: cmd::togads(playerid, "");
		case 8: cmd::togjoin(playerid, "");
		case 9: cmd::toggov(playerid, "");
		case 10: cmd::togpm(playerid, "");
		case 11: cmd::togadm(playerid, "");
		case 12: cmd::tognews(playerid, "");
		case 13: cmd::togafk(playerid, "");
		case 14: cmd::toghud(playerid, "");
		case 15: cmd::togf(playerid, "");
        case 16: cmd::togenter(playerid, "");
		case 17:
		{
		    if(0 == CompareStrings(PlayerInfo[playerid][pGoogle], "!"))
		    {
		        format(PlayerInfo[playerid][pGoogle], 17, "!");
		        new query[128];
				mysql_format(dbHandle, query, sizeof(query), "UPDATE `accounts` SET `google_auth`='%s' WHERE `id` = '%i'", PlayerInfo[playerid][pGoogle], PlayerInfo[playerid][pAccID]);
				mysql_tquery(dbHandle, query);
		        SendClientMessage(playerid, COLOR_GREEN, "??????????? ?????????????? ????? Google Authenticator ?????????.");
		    }
		    else
		    {
		        new __letters[32][] =
					{"A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y","Z","2", "3", "4", "5", "6", "7"};

                pTemp[playerid][pGoogle] = EOS;
                for(new i; i < 17; i++)
					strcat(pTemp[playerid][pGoogle], __letters[random(sizeof(__letters))], 17);

				static const str_size[] = "{FFFFFF}??? ????????? ????: {FF6347}%s. {FFFFFF}??????? ??? ? ?????????? Google Authenticator ? ?????????.\n{FF6347}????????! ?? ? ???? ?????? ?? ????????? ?????? ????????? ????.\n\n{ffffff}??? ?????????????, ??????? ??? ?? Google Authenticator ? ????? ????:";
				new mes[sizeof(str_size) - 2 + 1 + 17];
				format(mes, sizeof(mes), str_size, pTemp[playerid][pGoogle]);
				Dialog_Show(playerid, AcceptGoogle, DIALOG_STYLE_INPUT, "?????????????", mes, "???????????", "??????");
		    }
		}
		case 18: cmd::changepass(playerid, "");
	}

	if(listitem >= 5 && listitem <= 16)
	    ShowSettings(playerid);

	return 1;
}

Dialog:AcceptGoogle(playerid, response, listitem, inputtext[])
{
    if(0 == IsPlayerLogged(playerid))
	    return 1;

	if(!response)
	    return ShowSettings(playerid);

    if(strval(inputtext) != GoogleAuthenticatorCode(pTemp[playerid][pGoogle], gettime()))
    {
        SendErrorMessage(playerid, "???????? ???, ????????? ???????.");
        return ShowSettings(playerid);
    }
    format(PlayerInfo[playerid][pGoogle], 17, pTemp[playerid][pGoogle]);
    new query[128];
	mysql_format(dbHandle, query, sizeof(query), "UPDATE `accounts` SET `google_auth`='%s' WHERE `id` = '%i'", PlayerInfo[playerid][pGoogle], PlayerInfo[playerid][pAccID]);
	mysql_tquery(dbHandle, query);
	SendClientMessage(playerid, COLOR_GREEN, "??????????? ?????????????? ????? Google Authenticator ??????? ??????????.");
	return 1;
}

Dialog:ChangeWalk(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return ShowSettings(playerid);

	new str[5];
	format(str, sizeof(str), "1 %i", listitem);
	cmd::setstyle(playerid, str);
	ShowSettings(playerid);
	return 1;
}

Dialog:ChangeTalk(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return ShowSettings(playerid);

	new str[5];
	format(str, sizeof(str), "2 %i", listitem);
	cmd::setstyle(playerid, str);
	ShowSettings(playerid);
	return 1;
}

Dialog:ChangeFightstyle(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return ShowSettings(playerid);

	new str[5];
	format(str, sizeof(str), "3 %i", listitem+1);
	cmd::setstyle(playerid, str);
	ShowSettings(playerid);
	return 1;
}

Dialog:ChangeHud(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return ShowSettings(playerid);

	new str[5];
	format(str, sizeof(str), "4 %i", listitem+1);
	cmd::setstyle(playerid, str);
	ShowSettings(playerid);
	return 1;
}

Dialog:ChangeSpawn(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return ShowSettings(playerid);

	new str[2];
	format(str, sizeof(str), "%i", listitem);
	cmd::setspawn(playerid, str);

	if(listitem > 1)
		ShowSettings(playerid);

	return 1;
}

CMD:stats(playerid, params[])
{
	ShowStats(playerid, playerid);
	return 1;
}

ALTX:property("/pr");
CMD:property(playerid, params[])
{
	ShowProperty(playerid, playerid);
	return 1;
}

CMD:charity(playerid, params[])
{
	new amount;
	if(sscanf(params,"d",amount))
		return SendSyntaxMessage(playerid, "/charity [text]");

	if(amount > GetCash(playerid) || amount <= 0)
 		return SendNotCash(playerid);

	PlaySound(playerid, 1052);

	SendClientMessageEx(playerid, COLOR_GREY,"?? ????? $%i.", amount);
	AMSG(COLOR_LIGHTRED, "[????????] %s ???? (/charity) $%i.", GetNameEx(playerid), amount);

	new money = PlayerInfo[playerid][pCash];
	GiveCash(playerid, -amount);

	new mes[256];
	format(mes, sizeof(mes), "%s [MYSQL: %i | IP: %s | ??????(????): %i | ??????(?????): %i] ???? (/charity) -- $%i",
	GetName(playerid), PlayerInfo[playerid][pID], GetPlayerIP(playerid), money, GetCash(playerid), amount);
    insert_log(mes, MONEY_LOG, 5, playerid);
	return 1;
}

ALTX:removecp("/rcp");
CMD:removecp(playerid, params[])
{
	SCM(playerid, COLOR_LIGHTRED, "??? ????????? ??????? ? ?????.");
	DisableWaypoint(playerid);
	return 1;
}

ALTX:shout("/s");
CMD:shout(playerid, params[])
{
	if(IsPlayerInjured(playerid) == 2)
		return SCM(playerid, COLOR_GREY, "?? ?? ?????? ??????? ? ?????? ??????.");

    if(PlayerInfo[playerid][pMutedTime] > 0)
		return SCM(playerid, COLOR_LIGHTRED, "??? ????????? ??? ???????????? ????????.");

	if(isnull(params))
		return SendSyntaxMessage(playerid, "/(s)hout [text]");

	if(strlen(params) > MAXLEN)
	{
		new pos = MAXLEN;
		if(pos < MAXLEN-1) pos = MAXLEN;
		SendLocalMessage(Range_Long, playerid, COLOR_WHITE, COLOR_WHITE, COLOR_WHITE, COLOR_FADE1, COLOR_FADE2, "%s ??????: %.*s ...", GetNameWithMask(playerid), pos, params);
		SendLocalMessage(Range_Long, playerid, COLOR_WHITE, COLOR_WHITE, COLOR_WHITE, COLOR_FADE1, COLOR_FADE2, "... %s", params[pos]);
	}
	else
		SendLocalMessage(Range_Long, playerid, COLOR_WHITE, COLOR_WHITE, COLOR_WHITE, COLOR_FADE1, COLOR_FADE2, "%s ??????: %s", GetNameWithMask(playerid), params);

	return 1;
}

CMD:knock(playerid, params[])
{
	if(IsPlayerInjured(playerid) == 2)
		return SCM(playerid, COLOR_GREY, "?? ?? ?????? ????????? ? ????? ? ?????? ??????.");

	for(new i = 0; i < MAX_HOUSES; i++)
	{
	    if(HouseInfo[i][hID] == 0 || 0 == IsPlayerHouseOutside(playerid, i, 2.0)) continue;

        cmd::me(playerid, "?????? ? ????? ????.");
		foreach(Player, p)
		{
		    if(0 == IsPlayerHouseInside(p, i)) continue;
  			SendClientMessageEx(p, COLOR_PURPLE, "* [text] ????! ????! ????! (( %s ))", GetNameWithMask(playerid));
		}
		return 1;
	}

	for(new i = 0; i < MAX_BIZ; i++)
	{
	    if(BizInfo[i][bizID] == 0 || 0 == IsPlayerBizOutside(playerid, i, 2.0)) continue;

	    cmd::me(playerid, "?????? ? ????? ???????.");
		foreach(Player, p)
		{
		    if(0 == IsPlayerBizInside(p, i)) continue;
			SendClientMessageEx(p, COLOR_PURPLE, "* [text] ????! ????! ????! (( %s ))", GetNameWithMask(playerid));
		}
		return 1;
	}
	return 1;
}

ALTX:dshout("/ds");
CMD:dshout(playerid, params[])
{
	if(IsPlayerInjured(playerid) == 2)
		return SCM(playerid, COLOR_GREY, "?? ?? ?????? ??????? ? ?????? ??????.");

	new text[128];
	if(sscanf(params,"s[128]",text))
		return SendSyntaxMessage(playerid, "(/ds)hout [text]");

	for(new i = 0; i < MAX_HOUSES; i++)
	{
	    if(HouseInfo[i][hID] == 0) continue;

		if(0 != IsPlayerHouseOutside(playerid, i, 2.0))
		{
		    SendNearbyMessage(Range_Long, playerid, COLOR_WHITE, "* %s ?????? (? ?????): %s", GetNameWithMask(playerid), text);
   			foreach(Player, p)
			{
				if(0 == IsPlayerHouseInside(p, i))
					continue;

				SendClientMessageEx(p, COLOR_WHITE, "* %s ?????? (? ?????): %s", GetNameWithMask(playerid), text);
			}
			return 1;
		}
		else if(0 != IsPlayerHouseInside(playerid, i, 3.0))
		{
		    SendNearbyMessage(Range_Long, playerid, COLOR_WHITE, "* %s ?????? (?? ????): %s", GetNameWithMask(playerid), text);
			foreach(Player, p)
			{
				if(0 == IsPlayerHouseOutside(p, i, 6.0))
					continue;

				SendClientMessageEx(p, COLOR_WHITE, "* %s ?????? (?? ????): %s", GetNameWithMask(playerid), text);
			}
			return 1;
		}
	}
	for(new i = 0; i < MAX_APART; i++)
	{
	    if(ApartInfo[i][aApartOn] == 0) continue;

		if(0 != IsPlayerApartmentOutside(playerid, i, 2.0))
		{
			SendNearbyMessage(Range_Long, playerid, COLOR_WHITE, "* %s ?????? (? ?????): %s", GetNameWithMask(playerid), text);
   			foreach(Player, p)
			{
				if(0 == IsPlayerApartmentInside(p, i))
					continue;

				SendClientMessageEx(p, COLOR_WHITE, "* %s ?????? (? ?????): %s", GetNameWithMask(playerid), text);
			}
			return 1;
		}
		else if(0 != IsPlayerApartmentInside(playerid, i, 3.0))
		{
			SendNearbyMessage(Range_Long, playerid, COLOR_WHITE, "* %s ?????? (?? ?????? ?????????): %s", GetNameWithMask(playerid), text);
			foreach(Player, p)
			{
				if(0 == IsPlayerApartmentOutside(p, i, 6.0))
					continue;

				SendClientMessageEx(p, COLOR_WHITE, "* %s ?????? (?? ?????? ?????????): %s", GetNameWithMask(playerid), text);
			}
			return 1;
		}
	}
	for(new i = 0; i < MAX_BIZ; i++)
	{
	    if(BizInfo[i][bizID] == 0) continue;

		if(0 != IsPlayerBizOutside(playerid, i, 2.0))
		{
			SendNearbyMessage(Range_Long, playerid, COLOR_WHITE, "* %s ?????? (? ?????): %s", GetNameWithMask(playerid), text);
   			foreach(Player, p)
			{
				if(0 == IsPlayerBizInside(p, i))
					continue;

				SendClientMessageEx(p, COLOR_WHITE, "* %s ?????? (? ?????): %s", GetNameWithMask(playerid), text);
			}
			return 1;
		}
		else if(0 != IsPlayerBizInside(playerid, i, 3.0))
		{
			SendNearbyMessage(Range_Long, playerid, COLOR_WHITE, "* %s ?????? (?? ???????): %s", GetNameWithMask(playerid), text);
			foreach(Player, p)
			{
				if(0 == IsPlayerBizOutside(p, i, 6.0))
					continue;

				SendClientMessageEx(p, COLOR_WHITE, "* %s ?????? (?? ???????): %s", GetNameWithMask(playerid), text);
			}
			return 1;
		}
	}
	return 1;
}
CMD:ddo(playerid, params[])
{
	new text[128];
	if(sscanf(params,"s[128]",text)) return SendSyntaxMessage(playerid, "/ddo [????? /do]");
	for(new i = 0; i < MAX_HOUSES; i++)
	{
		if(HouseInfo[i][hID] == 0) continue;

		if(0 != IsPlayerHouseOutside(playerid, i, 2.0))
		{
		    SendNearbyMessage(Range_Long, playerid, COLOR_PURPLE, "[text] * %s (( %s ))", text,GetNameWithMask(playerid));
			foreach(Player, p)
			{
				if(0 == IsPlayerHouseInside(p, i)) continue;
				SendClientMessageEx(p, COLOR_PURPLE, "[text] * %s (( %s ))", text,GetNameWithMask(playerid));
			}
			return 1;
		}
		else if(0 != IsPlayerHouseInside(playerid, i, 3.0))
		{
			SendNearbyMessage(Range_Long, playerid, COLOR_PURPLE, "[text] * %s (( %s ))", text,GetNameWithMask(playerid));
			foreach(Player, p)
			{
				if(0 == IsPlayerHouseOutside(p, i, 6.0)) continue;
				SendClientMessageEx(p, COLOR_PURPLE, "[text] * %s (( %s ))", text,GetNameWithMask(playerid));
			}
			return 1;
		}
	}

	for(new i = 0; i < MAX_APART; i++)
	{
		if(ApartInfo[i][aApartOn] == 0) continue;

		if(0 != IsPlayerApartmentOutside(playerid, i, 2.0))
		{
			SendNearbyMessage(Range_Long, playerid, COLOR_PURPLE, "[text] * %s (( %s ))", text,GetNameWithMask(playerid));
			foreach(Player, p)
			{
				if(0 == IsPlayerApartmentInside(p, i)) continue;
				SendClientMessageEx(p, COLOR_PURPLE, "[text] * %s (( %s ))", text,GetNameWithMask(playerid));
			}
			return 1;
		}
		else if(0 != IsPlayerApartmentInside(playerid, i, 3.0))
		{
			SendNearbyMessage(Range_Long, playerid, COLOR_PURPLE, "[text] * %s (( %s ))", text,GetNameWithMask(playerid));
			foreach(Player, p)
			{
				if(0 == IsPlayerApartmentOutside(p, i, 6.0)) continue;
				SendClientMessageEx(p, COLOR_PURPLE, "[text] * %s (( %s ))", text,GetNameWithMask(playerid));
			}
			return 1;
		}
	}

	for(new i = 0; i < MAX_BIZ; i++)
	{
		if(BizInfo[i][bizID] == 0) continue;

		if(0 != IsPlayerBizOutside(playerid, i, 2.0))
		{
			SendNearbyMessage(Range_Long, playerid, COLOR_PURPLE, "[text] * %s (( %s ))", text,GetNameWithMask(playerid));
			foreach(Player, p)
			{
				if(0 == IsPlayerBizInside(p, i)) continue;
				SendClientMessageEx(p, COLOR_PURPLE, "[text] * %s (( %s ))", text,GetNameWithMask(playerid));
			}
			return 1;
		}
		else if(0 != IsPlayerBizInside(playerid, i, 3.0))
		{
			SendNearbyMessage(Range_Long, playerid, COLOR_PURPLE, "[text] * %s (( %s ))", text,GetNameWithMask(playerid));
			foreach(Player, p)
			{
				if(0 == IsPlayerBizOutside(p, i, 6.0)) continue;
				SendClientMessageEx(p, COLOR_PURPLE, "[text] * %s (( %s ))", text,GetNameWithMask(playerid));
			}
			return 1;
		}
	}
	return 1;
}


CMD:licenseexam(playerid, params[])
{
	new vehicle = GetPlayerVehicleID(playerid);
	if(!IsADMVCar(vehicle) && !IsADMVHeli(vehicle) && !IsADMVTaxi(vehicle))
		return SCM(playerid, COLOR_WHITE, "?? ?????? ?????????? ? ?????????? DMV.");

	if(!IsDriver(playerid))
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???? ?? ????? ????????????? ????????.");

    if(pTemp[playerid][pLicenseExam] != 0)
    	return SCM(playerid, COLOR_WHITE, "?? ??? ?????? ???? ?? ?????????.");

	if(IsADMVCar(vehicle))
	{
        if(PlayerInfo[playerid][pCarLic] != 0)
            return SendErrorMessage(playerid, "? ??? ??? ???? ???????????? ?????????????.");

		if(GetCash(playerid) < CARLIC_PRICE)
			return SendNotCash(playerid);

		VehicleEngine(vehicle, true);
		SCM(playerid, COLOR_WHITE, "?? ?????? ??????? ?? ????????? ???????? ??? ?????????? ???????????.");
		SCM(playerid, COLOR_WHITE, "? ??? ???? 3 ?????? ?? ???????????, ? ????????? ?????? ?? ????????? ???????.");

		pTemp[playerid][pLicenseExam] = 1;
		SetPVarInt(playerid, #exam_second, 180);
		TogglePlayerDynamicRaceCP(playerid, license_exam_cp[0], true);

		GiveCash(playerid, -CARLIC_PRICE);
		new bizid = LicenseOffice_Nearest(playerid);
		if(bizid != -1)
		    GiveBizCash(bizid, CARLIC_PRICE);
	}
	else if(IsADMVHeli(vehicle))
	{
	    if(PlayerInfo[playerid][pFlyLic] != 0)
            return SendErrorMessage(playerid, "? ??? ??? ???? ???????? ??? ?????????? ????????? ???????????.");

		if(GetCash(playerid) < FLYLIC_PRICE)
			return SendNotCash(playerid);

		VehicleEngine(vehicle, true);
		SCM(playerid, COLOR_WHITE, "?? ?????? ??????? ?? ????????? ???????? ??? ?????????? ????????? ???????????.");
		SCM(playerid, COLOR_GREEN, "[1]: ?? ????? ?????? ?????????? ?????? ?? ??????.");
		SCM(playerid, COLOR_GREEN, "[2]: ?????????? ???????? ????????? ????????? ? ?? ??????????.");

		pTemp[playerid][pLicenseExam] = 2;
		SetPVarInt(playerid, #exam_second, 180);
		TogglePlayerDynamicRaceCP(playerid, fly_exam_cp[0], true);
		GiveCash(playerid, -FLYLIC_PRICE);
	}
	else if(IsADMVTaxi(vehicle))
	{
	    if(PlayerInfo[playerid][pCarLic] == 0)
            return SendErrorMessage(playerid, "??? ????????? ???????? ???????? ? ??? ?????? ???? ???????????? ?????????????.");

        if(PlayerInfo[playerid][pTaxiLic] != 0)
            return SendErrorMessage(playerid, "? ??? ??? ???? ???????? ????????.");

		if(GetCash(playerid) < TAXILIC_PRICE)
			return SendNotCash(playerid);

		VehicleEngine(vehicle, true);
		SCM(playerid, COLOR_WHITE, "?? ?????? ??????? ?? ????????? ???????? ????????.");
		SCM(playerid, COLOR_WHITE, "? ??? ???? 3 ?????? ?? ???????????, ? ????????? ?????? ?? ????????? ???????.");

		pTemp[playerid][pLicenseExam] = 3;
		SetPVarInt(playerid, #exam_second, 180);
		TogglePlayerDynamicRaceCP(playerid, license_exam_cp[0], true);

		GiveCash(playerid, -TAXILIC_PRICE);
		new bizid = LicenseOffice_Nearest(playerid);
		if(bizid != -1)
		    GiveBizCash(bizid, TAXILIC_PRICE);
	}
	return 1;
}

CMD:showcontacts(playerid, params[])
{
    if(PlayerInfo[playerid][pNumber] == 0)
		return SendErrorMessage(playerid, "? ??? ??? ????????.");

    if(PlayerInfo[playerid][pPhoneOff] != 0)
        return SendErrorMessage(playerid, "??????? ????????.");

	new userid;
	if(sscanf(params,"u", userid)) return SendSyntaxMessage(playerid, "/showcontacts [playerid/PartOfName]");

	if(!IsPlayerLogged(userid))
		return SendNotConnected(playerid);

	if(!PlayerNearPlayer(3.0, playerid, userid))
		return SendNotNearPlayer(playerid);

	new count;
	for(new i = 0; i < MAX_PLAYER_CONTACTS; i++)
	{
		if(PlayerContacts[playerid][i][contactOn] == 0)
		    continue;

		count++;
		break;
	}

	if(count == 0)
	    return SendErrorMessage(playerid, "? ??? ??? ?????????.");


	SendClientMessageEx(userid, COLOR_HELPS, "%s ???????(-?) ??? ?????? ????? ????????? ?? ????????.", GetNameWithMask(playerid));
   	SendClientMessageEx(playerid, COLOR_HELPS, "?? ???????? %s ?????? ????? ????????? ?? ????????. ", GetNameWithMask(userid));

	count = 0;
	for(new i = 0; i < MAX_PLAYER_CONTACTS; i++)
	{
		if(PlayerContacts[playerid][i][contactOn] == 0)
		    continue;

		count++;
		SendClientMessageEx(userid, COLOR_GRAD2, "%i. %s - ????? ????????: %i", count, PlayerContacts[playerid][i][contactName], PlayerContacts[playerid][i][contactNumber]);
	}

    new mes[128];
	format(mes, sizeof(mes), "%s ?????????? ???????? ?? ???????? %s", GetNameWithMask(playerid), GetNameWithMask(userid));
	SetPlayerChatBubble(playerid, mes, COLOR_PURPLE, 15.0, 3000);
	return 1;
}

CMD:showcontact(playerid, params[])
{
    if(PlayerInfo[playerid][pNumber] == 0)
		return SendErrorMessage(playerid, "? ??? ??? ????????.");

    if(PlayerInfo[playerid][pPhoneOff] != 0)
        return SendErrorMessage(playerid, "??????? ????????.");

    new userid,
        contact[32];

	if(sscanf(params,"us[32]", userid, contact)) return SendSyntaxMessage(playerid, "/showcontacts [playerid/PartOfName] [???????]");

	if(!IsPlayerLogged(userid))
		return SendNotConnected(playerid);

	if(!PlayerNearPlayer(3.0, playerid, userid))
		return SendNotNearPlayer(playerid);

	new count = -1;
	for(new i = 0; i < MAX_PLAYER_CONTACTS; i++)
	{
		if(PlayerContacts[playerid][i][contactOn] == 0 || !CompareStrings(contact, PlayerContacts[playerid][i][contactName]))
		    continue;

		count = i;

        SendClientMessageEx(userid, COLOR_HELPS, "%s ???????(-?) ??? ??????? %s ?? ????????.", GetNameWithMask(playerid), PlayerContacts[playerid][i][contactName]);
   		SendClientMessageEx(playerid, COLOR_HELPS, "?? ???????? %s ??????? %s ?? ?????? ????????.", GetNameWithMask(userid), PlayerContacts[playerid][i][contactName]);

		SendClientMessageEx(userid, COLOR_GRAD2, "1. %s - ????? ????????: %i", PlayerContacts[playerid][i][contactName], PlayerContacts[playerid][i][contactNumber]);

        new mes[128];
		format(mes, sizeof(mes), "%s ?????????? ??????? ?? ???????? %s", GetNameWithMask(playerid), GetNameWithMask(userid));
		SetPlayerChatBubble(playerid, mes, COLOR_PURPLE, 15.0, 3000);
		break;
	}

	if(count == -1)
	    return SendErrorMessage(playerid, "?????? ??????? ?? ??????.");

	return 1;
}
CMD:fill(playerid, params[])
{
	new vehicle = GetPlayerVehicleID(playerid);

	if(!IsDriver(playerid))
		return SendNotInVehicle(playerid);

    new bizid = -1,
        Float: radius = (IsABoat(vehicle))?(20.0):(10.0);

    for(new i; i != MAX_BIZ; i++)
	{
	    if(BizInfo[i][bizID] == 0 || BizInfo[i][bizType] != BIZ_GAS_STATION)
			continue;

	    if (IsPlayerInRangeOfPoint(playerid, radius, BizInfo[i][bizPosX], BizInfo[i][bizPosY], BizInfo[i][bizPosZ]) && GetWorld(playerid) == BizInfo[i][bizPosVW] && GetInterior(playerid) == BizInfo[i][bizPosInt])
		{
		    bizid = i;
		    break;
		}
	}

    if (bizid == -1)
   		return SendErrorMessage(playerid, "????? ? ???? ??? ??????????? ???????.");

	if(VehicleInfo[vehicle][carEngineOn])
		return SCM(playerid, COLOR_LIGHTRED, "????????? ?????????, ?????? ??? ?????? ????????????.");

	if(BizInfo[bizid][bizLocked] == 1)
		return GameTextForPlayer(playerid, "~r~Locked", 5000, 1);

	if(GetCash(playerid) < BizInfo[bizid][bizEntrance])
		return SendClientMessageEx(playerid,COLOR_LIGHTRED,"??? ???????? ????? $%i.", BizInfo[bizid][bizEntrance]);

    if(BizInfo[bizid][bizOwnerID] != 0 && !BizInfo[bizid][bizProduct])
    	return SendErrorMessage(playerid, "?? ???????? ???????????? ???????.");

	if(VehicleInfo[vehicle][carFuel] >= 80)
		return SCM(playerid, COLOR_LIGHTRED, "? ???? ?????????? ?????? ???? ????? 80%% ???????.");

	if(GetPVarInt(playerid, "RefuelTime"))
		return SCM(playerid, COLOR_LIGHTRED, "?? ??? ?????????????...");

    if(BizInfo[bizid][bizOwnerID] != 0)
    {
    	BizInfo[bizid][bizProduct]--;
		GiveBizCash(bizid, BizInfo[bizid][bizEntrance]);
	}

	FreezePlayer(playerid);
	SetPVarInt(playerid, "RefuelCost", BizInfo[bizid][bizEntrance]);
	SetPVarInt(playerid, "RefuelTime", 15);
	return 1;
}

CMD:lock(playerid, params[])
{
    if(IsPlayerInjured(playerid) != 0 || pTemp[playerid][pTaserTime] || pTemp[playerid][pCuffed])
		return SCM(playerid, COLOR_GREY, "?? ?? ?????? ???????????? ?????? ??????? ????? ??????.");

	for(new i = 0; i < MAX_BIZ; i++)
	{
	    if(BizInfo[i][bizID] == 0 || (IsPlayerBizOutside(playerid, i, 2.0) == 0 && IsPlayerBizInside(playerid, i, 2.0) == 0))
			continue;

        if(BizInfo[i][bizOwnerID] != PlayerInfo[playerid][pID] && PlayerInfo[playerid][pWorkOn] != BizInfo[i][bizID])
		    return GameTextForPlayer(playerid, "~r~You Dont Have A Key", 5000, 6);

		if(BizInfo[i][bizDDoor] > 0)
			return SCM(playerid, COLOR_LIGHTRED, "????? ???????.");

        if(BizInfo[i][bizLocked] == 1)
		{
			BizInfo[i][bizLocked] = 0;
			GameTextForPlayer(playerid, "~w~Bussiness ~g~Unlocked", 5000, 6);
			PlaySound(playerid, 1145);
			return 1;
		}
		if(BizInfo[i][bizLocked] == 0)
		{
			BizInfo[i][bizLocked] = 1;
			GameTextForPlayer(playerid, "~w~Bussiness ~r~Locked", 5000, 6);
			PlaySound(playerid, 1145);
			return 1;
		}
	}

	new id = GarageNearestOutside(playerid);

	if (-1 != id || (id = GarageNearestInside(playerid)) != -1)
	{
		if (GarageInfo[id][garageOwner] != 1)
		    return GameTextForPlayer(playerid, "~r~You Dont Have A Key", 5000, 6);

		GarageInfo[id][garageLocked] = GarageInfo[id][garageLocked]?0:1;

		if (GarageInfo[id][garageLocked]) GameTextForPlayer(playerid, "~w~garage ~r~locked", 3000, 4);
		else GameTextForPlayer(playerid, "~w~garage ~g~unlocked", 3000, 4);

		new query[60];
		mysql_format(dbHandle, query, sizeof(query), "UPDATE `garage` SET `locked`='%i' WHERE `id`='%i'", 1, GarageInfo[id][garageLocked], GarageInfo[id][garageID]);
		mysql_tquery(dbHandle, query);
		return 1;
	}

	for(new i = 0; i != MAX_ENTRANCE; i++)
	{
	    if(EntranceInfo[i][eFaction] == 0 || EntranceInfo[i][entranceOn] == 0 || (IsPlayerEntranceOutside(playerid, i) == 0 && IsPlayerEntranceInside(playerid, i) == 0))
			continue;

        if(PlayerInfo[playerid][pFaction] != EntranceInfo[i][eFaction])
            return GameTextForPlayer(playerid, "~r~You Dont Have A Key", 5000, 6);

        EntranceInfo[i][eLocked] = (EntranceInfo[i][eLocked])?(0):(1);
        PlaySound(playerid, 1145);

        if(EntranceInfo[i][eLocked])
            GameTextForPlayer(playerid, "~w~Door ~r~Locked", 5000, 6);
		else
		    GameTextForPlayer(playerid, "~w~Door ~g~Unlocked", 5000, 6);

		break;
	}

	new houseid;
	if((houseid = GetNearHouseInside(playerid)) != -1 && (HouseInfo[houseid][hOwnerID] == PlayerInfo[playerid][pID] || HouseInfo[houseid][hID] == PlayerInfo[playerid][pRentKey]))
	{
	    for(new i = 0; i < MAX_FURNITURE; i++)
		{
			if(!IsPlayerInRangeOfPoint(playerid, 2.0, HouseFurniture[houseid][i][fPosX], HouseFurniture[houseid][i][fPosY], HouseFurniture[houseid][i][fPosZ]) || 0 == HouseFurniture[houseid][i][fOn] || !isHouseDoor(HouseFurniture[houseid][i][fModel]))
   				continue;

			if(HouseFurniture[houseid][i][fOpened] == 1)
				return SCM(playerid, COLOR_GREY, "??????? ???????? ?????.");

			if(HouseFurniture[houseid][i][fLocked] == 0)
			{
				SCM(playerid, COLOR_WHITE, "????? {FFFF00}???????.");
				HouseFurniture[houseid][i][fLocked] = 1;
				return 1;
			}
			else
			{
				SCM(playerid, COLOR_WHITE, "????? {FFFF00}???????.");
				HouseFurniture[houseid][i][fLocked] = 0;
				return 1;
			}
		}
	}

	for(new i = 0; i < MAX_HOUSES; i++)
	{
	    if(HouseInfo[i][hID] == 0 || (IsPlayerHouseOutside(playerid, i, 1.0) == 0 && IsPlayerHouseInside(playerid, i, 2.0) == 0))
			continue;

		if(HouseInfo[i][hDDoor] > 0)
			return SCM(playerid, COLOR_LIGHTRED, "????? ???????.");

		if(HouseInfo[i][hOwnerID] != PlayerInfo[playerid][pID] && HouseInfo[i][hID] != PlayerInfo[playerid][pRentKey])
		    return GameTextForPlayer(playerid, "~r~You Dont Have A Key", 5000, 6);

        if(HouseInfo[i][hLocked] == 1)
		{
			HouseInfo[i][hLocked] = 0;
			GameTextForPlayer(playerid, "~w~Door ~g~Unlocked", 5000, 6);
			PlaySound(playerid, 1145);
			return 1;
		}
		if(HouseInfo[i][hLocked] == 0)
		{
			HouseInfo[i][hLocked] = 1;
			GameTextForPlayer(playerid, "~w~Door ~r~Locked", 5000, 6);
			PlaySound(playerid, 1145);
			return 1;
		}
	}
	return 1;
}

ALTX:engine("/en");
CMD:engine(playerid, params[])
{
	new vehicle = GetPlayerVehicleID(playerid);
	if(!IsDriver(playerid))
		return 1;

	if(IsADMVCar(vehicle) || IsADMVHeli(vehicle) || IsABicycle(vehicle))
		return SCM(playerid, COLOR_LIGHTRED, "Nu ai cum sa pornesti masinile publice, elicopterele si bicicletele.");

	if(VehicleInfo[vehicle][carFuel] == 0)
		return SCM(playerid, COLOR_LIGHTRED, "Masina nu mai are benzina.");

	if(GetPVarInt(playerid, #vehicle_upgrade_timer) || GetPVarInt(playerid, #repair_time))
		return SCM(playerid, COLOR_LIGHTRED,"Momentan masina se repara si nu o poti pornii.");

    if(VehicleInfo[vehicle][carOwnerID] != 0 && VehicleInfo[vehicle][carEngine] <= 0.0)
		return SCM(playerid,COLOR_LIGHTRED,"Motorul vehiculului este foarte avariat, suna un mecanic.");

    if(VehicleInfo[vehicle][carOwnerID] != 0 && VehicleInfo[vehicle][carBattery] <= 0.0)
		return SCM(playerid,COLOR_LIGHTRED,"Bateria masinii nu mai are putere, suna un mecanic.");

	if(IsRentCar(vehicle) && pTemp[playerid][pRentveh] != vehicle)
	    return SendErrorMessage(playerid, "Nu ai inchiriat masina.");

	if(VehicleInfo[vehicle][carFaction] != 0 && VehicleInfo[vehicle][carFaction] != PlayerInfo[playerid][pFaction])
	    return 1;

	if(VehicleInfo[vehicle][carOwnerID] != 0 && (PlayerInfo[playerid][pCarKey] != vehicle && PlayerInfo[playerid][pSpareKey] != VehicleInfo[vehicle][carID]))
	    return SendErrorMessage(playerid, "Nu ai cheile vehiculului.");

	ToggleVehicleEngine(vehicle, playerid);
	return 1;
}


CMD:isafk(playerid, params[])
{
	new id;
	if(sscanf(params,"u",id))
		return SendSyntaxMessage(playerid, "/isafk [playerid/PartOfName]");

	if(!IsPlayerLogged(id))
		return SendNotConnected(playerid);

	if(IsPlayerAFK(id))
		SendClientMessageEx(playerid, COLOR_LIGHTRED, "????? %s - ID[%i] ? ??? %i ??????.", GetNameEx(id), id, pTemp[id][pDarkAFK]-2);
	else
	    SendClientMessageEx(playerid, COLOR_LIGHTRED, "????? %s - ID[%i] ?? ? ???.", GetNameEx(id), id);
	return 1;
}

CMD:id(playerid, params[])
{
	if(isnull(params))
		return SendSyntaxMessage(playerid, "/id [playerid/PartOfName]");

	if(isNumeric(params))
	{
	    new userid = strval(params);
	    if(0 == IsPlayerLogged(userid))
			return SCM(playerid, -1, "????? ?? ??? ???????????.");

	    SendClientMessageEx(playerid, COLOR_GREY, "[ID: %i] %s (UCP: %s)", userid, GetNameEx(userid), GetAccName(userid));
	    return 1;
	}

	new count;
	foreach(Player, i)
	{
	    if(0 == IsPlayerLogged(i) || strfind(GetName(i), params, true) == -1)
	        continue;

        SendClientMessageEx(playerid, COLOR_GREY, "[ID: %i] %s (UCP: %s)", i, GetNameEx(i), GetAccName(i));
        count = 1;
	}

	if(!count)
		SCM(playerid, -1, "????? ?? ??? ???????????.");
	return 1;
}
CMD:ame(playerid, params[])
{
	if(IsPlayerInjured(playerid) == 2)
		return SCM(playerid, COLOR_GREY, "?? ?? ?????? ????????? ?????-???? ???????? ? ?????? ??????.");

	if(isnull(params))
		return SendSyntaxMessage(playerid, "/ame [action]");

	new mes[128];
	format(mes, sizeof(mes), "* %s %s", GetNameWithMask(playerid), params);
	SetPlayerChatBubble(playerid, mes, COLOR_PURPLE, 20.0, 10000);

	if(strlen(params) > MAXLEN)
	{
		new pos = MAXLEN;
		if(pos < MAXLEN-1) pos = MAXLEN;
		SendClientMessageEx(playerid, COLOR_PURPLE, "> %s %.*s ...", GetNameWithMask(playerid), pos, params);
		SendClientMessageEx(playerid, COLOR_PURPLE, "... %s", params[pos]);
	}
	else
  		SendClientMessageEx(playerid, COLOR_PURPLE, "> %s %s", GetNameWithMask(playerid), params);
	return 1;
}

ALTX:local("/l");
CMD:local(playerid, params[])
{
    if(IsPlayerInjured(playerid) == 2)
		return SCM(playerid, COLOR_GREY, "?? ?? ?????? ???????? ? ?????? ??????.");

	if(isnull(params))
		return SendSyntaxMessage(playerid, "/local [text]");

	if(PlayerInfo[playerid][pMutedTime] > 0)
		return SCM(playerid, COLOR_LIGHTRED, "??? ????????? ??? ???????????? ????????.");

	if(strlen(params) > MAXLEN)
	{
		new pos = MAXLEN;
		if(pos < MAXLEN-1) pos = MAXLEN;
		SendLocalMessage(Range_Normal, playerid, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5, "%s ???????: %.*s ...", GetNameWithMask(playerid), pos, params);
		SendLocalMessage(Range_Normal, playerid, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5, "%s ???????: ... %s", GetNameWithMask(playerid), params[pos]);
	}
	else
		SendLocalMessage(Range_Normal, playerid, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5, "%s ???????: %s", GetNameWithMask(playerid), params);

	return 1;
}

CMD:me(playerid, params[])
{
	if(IsPlayerInjured(playerid) == 2)
		return SCM(playerid, COLOR_GREY, "?? ?? ?????? ????????? ?????-???? ???????? ? ?????? ??????.");

	if(isnull(params))
		return SendSyntaxMessage(playerid, "/me [????????]");

	if(strlen(params) > MAXLEN)
	{
		new pos = MAXLEN;
		if(pos < MAXLEN-1) pos = MAXLEN;

		SendNearbyMessage(Range_Normal, playerid, COLOR_PURPLE, "* %s %.*s ...", GetNameWithMask(playerid), pos, params);
		SendNearbyMessage(Range_Normal, playerid, COLOR_PURPLE, "* ... %s", params[pos], GetNameWithMask(playerid));
	}
	else
		SendNearbyMessage(Range_Normal, playerid, COLOR_PURPLE, "* %s %s", GetNameWithMask(playerid), params);
	return 1;
}


CMD:aame(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_1))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	if(isnull(params))
		return SendSyntaxMessage(playerid, "/aame [????????]");

	if(strlen(params) > MAXLEN)
	{
		new pos = MAXLEN;
		if(pos < MAXLEN-1) pos = MAXLEN;

		SendNearbyMessage(50.0, playerid, COLOR_PURPLE, "* %.*s ...", pos, params);
		SendNearbyMessage(50.0, playerid, COLOR_PURPLE, "* ... %s", params[pos], GetNameWithMask(playerid));
	}
	else
		SendNearbyMessage(50.0, playerid, COLOR_PURPLE, "* %s", params);
	return 1;
}

CMD:do(playerid, params[])
{
	if(isnull(params))
		return SendSyntaxMessage(playerid, "/do [????????]");

	if(strlen(params) > MAXLEN)
	{
		new pos = MAXLEN;
		if(pos < MAXLEN-1) pos = MAXLEN;
		SendNearbyMessage(Range_Normal, playerid, COLOR_PURPLE, "* %.*s ...", pos, params, GetNameWithMask(playerid));
		SendNearbyMessage(Range_Normal, playerid, COLOR_PURPLE, "* ... %s (( %s ))", params[pos], GetNameWithMask(playerid));
	}
	else
		SendNearbyMessage(Range_Normal, playerid, COLOR_PURPLE, "* %s (( %s ))", params, GetNameWithMask(playerid));
	return 1;
}

CMD:b(playerid,params[])
{
	if(isnull(params)) return SendSyntaxMessage(playerid, "/b [??? ???]");

	if(PlayerInfo[playerid][pMutedTime] > 0)
		return SCM(playerid, COLOR_LIGHTRED, "??? ????????? ??? ???????????? ????????.");

	new mes[128];
	if(strlen(params) > MAXLEN)
	{
		new pos = MAXLEN;
		if(pos < MAXLEN-1) pos = MAXLEN;
		if(maskOn{playerid}) format(mes, sizeof(mes), "(( %s: %.*s ... ))", GetNameWithMask(playerid), pos, params);
		else if(IsAdminDuty(playerid)) format(mes, sizeof(mes), "(( [%i] {FF9A00}%s{AFAFAF}: %.*s ... ))", playerid, GetAccName(playerid), pos, params);
		else format(mes, sizeof(mes), "(( [%i] %s: %.*s ... ))", playerid, GetName(playerid), pos, params);
		ProxDetectorOutOfCharacter(20.0, playerid, mes, COLOR_GREY);

		if(maskOn{playerid}) format(mes, sizeof(mes), "(( ... %s ))", params[pos]);
		else if(IsAdminDuty(playerid)) format(mes, sizeof(mes), "(( ... %s ))", params[pos]);
		else format(mes, sizeof(mes), "(( ... %s ))", params[pos]);
		ProxDetectorOutOfCharacter(20.0, playerid, mes, COLOR_GREY);
	}
	else
	{
		if(maskOn{playerid}) format(mes, sizeof(mes), "(( %s: %s ))", GetNameWithMask(playerid), params);
		else if(IsAdminDuty(playerid)) format(mes, sizeof(mes), "(( [%i] {FF9A00}%s{AFAFAF}: %s ))", playerid, GetAccName(playerid), params);
		else format(mes, sizeof(mes), "(( [%i] %s: %s ))", playerid, GetName(playerid), params);
		ProxDetectorOutOfCharacter(20.0, playerid, mes, COLOR_GREY);
	}
	return 1;
}

CMD:low(playerid,params[])
{
    if(IsPlayerInjured(playerid) == 2)
		return SCM(playerid, COLOR_GREY, "?? ?? ?????? ???????? ? ?????? ??????.");

	if(isnull(params))
		return SendSyntaxMessage(playerid, "/low [text]");

	if(PlayerInfo[playerid][pMutedTime] > 0)
		return SCM(playerid, COLOR_LIGHTRED, "??? ????????? ??? ???????????? ????????.");


    if(IsPlayerInAnyVehicle(playerid) && !IsADontWindow(GetPlayerVehicleID(playerid)) && 0 != IsWindowsClose(GetPlayerVehicleID(playerid)))
        return SendErrorMessage(playerid, "??????????? ??????? ???, ??? ????? ?? ???????.");

	if(strlen(params) > MAXLEN)
 	{
  		if(pTemp[playerid][pCallLine] != INVALID_PLAYER_ID && pTemp[playerid][pCallStatus] == 2)
    	{
			SendLocalMessage(Range_Short, playerid, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5, "%s ??????? (??????? - ????): %.*s ...", GetNameWithMask(playerid), MAXLEN, params);
			SendClientMessageEx(pTemp[playerid][pCallLine], COLOR_YELLOWG, "%s ??????? (??????? - ????): %.*s ...", GetNameWithMask(playerid), MAXLEN, params);

			SendLocalMessage(Range_Short, playerid, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5, "... %s", params[MAXLEN]);
			SendClientMessageEx(pTemp[playerid][pCallLine], COLOR_YELLOWG, "... %s", params[MAXLEN]);
   		}
     	else
      	{
			SendLocalMessage(Range_Short, playerid,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5, "%s ??????? (????): %.*s ...", GetNameWithMask(playerid), MAXLEN, params);
			SendLocalMessage(Range_Short, playerid,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5, "... %s", params[MAXLEN]);
		}
	}
	else
	{
	    if(pTemp[playerid][pCallLine] != INVALID_PLAYER_ID && pTemp[playerid][pCallStatus] == 2)
     	{
			SendLocalMessage(Range_Short, playerid, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5, "%s ??????? (??????? - ????): %s", GetNameWithMask(playerid), params);
            SendClientMessageEx(pTemp[playerid][pCallLine], COLOR_YELLOWG, "%s ??????? (??????? - ????): %s", GetNameWithMask(playerid), params);
	   	}
     	else
			SendLocalMessage(Range_Short, playerid, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5, "%s ??????? (????): %s", GetNameWithMask(playerid), params);
	}
	return 1;
}

ALTX:whisper("/w");
CMD:whisper(playerid, params[])
{
    if(IsPlayerInjured(playerid) == 2)
		return SCM(playerid, COLOR_GREY, "?? ?? ?????? ???????? ? ?????? ??????.");

	new userid,
		text[128];

	if(sscanf(params,"us[128]", userid, text))
		return SendSyntaxMessage(playerid, "/(w)hisper [playerid/PartOfName] [text]");

	if(!IsPlayerLogged(userid))
		return SendNotConnected(playerid);

	if(PlayerInfo[playerid][pMutedTime] > 0)
		return SCM(playerid, COLOR_LIGHTRED, "??? ????????? ??? ???????????? ????????.");

    if(!PlayerNearPlayer(3.0, playerid, userid))
		return SendNotNearPlayer(playerid);

	if(userid == playerid)
	    return SendErrorMessage(playerid, "?? ?? ?????? ??????? ????.");

	new mes[MAX_PLAYER_NAME + MAX_PLAYER_NAME];
	format(mes, sizeof(mes), "> %s ?????? %s.", GetNameWithMask(playerid), GetNameWithMask(userid));
	SetPlayerChatBubble(playerid, mes, COLOR_PURPLE, 15.0, 10000);

	SendClientMessageEx(userid, COLOR_YELLOW3, "%s ?????? ???: %s", GetNameWithMask(playerid), text);
	SendClientMessageEx(playerid,  COLOR_YELLOW3, "?? ??????? %s: %s", GetNameWithMask(userid), text);
	return 1;
}
CMD:cw(playerid, params[])
{
	if(isnull(params))
		return SendSyntaxMessage(playerid, "/cw [text]");

	if(!IsPlayerInAnyVehicle(playerid))
		return SendNotInVehicle(playerid);

	if(PlayerInfo[playerid][pMutedTime] > 0)
		return SCM(playerid, COLOR_LIGHTRED, "??? ????????? ??? ???????????? ????????.");

	new vehicle = GetPlayerVehicleID(playerid);

	foreach(Player, i)
	{
	    if(0 == IsPlayerLogged(i) || !IsPlayerInVehicle(i, vehicle))
	        continue;

		if(strlen(params) > MAXLEN)
		{
		    new pos = MAXLEN;
			if(pos < MAXLEN-1) pos = MAXLEN;
			SendClientMessageEx(i,  COLOR_YELLOWG, "%s ??????: %.*s ...", GetNameWithMask(playerid), pos, params);
			SendClientMessageEx(i,  COLOR_YELLOWG, "... %s", params[pos]);
		}
		else SendClientMessageEx(i,  COLOR_YELLOWG, "%s ??????: %s", GetNameWithMask(playerid), params);
	}
	return 1;
}

CMD:adminhide(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 5)
	    return 1;

    PlayerInfo[playerid][pAdminHide] = (PlayerInfo[playerid][pAdminHide])?(0):(1);
    SendClientMessageEx(playerid, -1, "?? %s ???? ??? ??????????????.", (PlayerInfo[playerid][pAdminHide])?("??????"):("????????"));

	if(PlayerInfo[playerid][pAdminHide] && IsAdminDuty(playerid))
	    SetPlayerColor(playerid, TEAM_HIT_COLOR);

	else if(!PlayerInfo[playerid][pAdminHide] && IsAdminDuty(playerid))
		SetPlayerColor(playerid, TEAM_ADMIN_COLOR);
	return 1;
}

CMD:admins(playerid, params[])
{
	SCM(playerid, COLOR_GREY, "?????????????? ??????:");
	foreach(Player, i)
	{
		if(0 == IsPlayerLogged(i) || PlayerInfo[i][pAdmin] < 1 || PlayerInfo[i][pAdminHide] == 1)
		    continue;

        if(!IsAdminDuty(i))
			SendClientMessageEx(playerid, COLOR_GREY, "(Level: %i) %s (ID: %i) ?? ?????????: ???", PlayerInfo[i][pAdmin], GetAccName(i), i);
		else
		    SendClientMessageEx(playerid, COLOR_GREEN2, "(Level: %i) %s (ID: %i) ?? ?????????: ??", PlayerInfo[i][pAdmin], GetAccName(i), i);
	}
	return 1;
}

CMD:testers(playerid, params[])
{
	SCM(playerid, COLOR_GREY, "??????? ??????:");
	foreach(Player, i)
	{
		if(0 == IsPlayerLogged(i) || PlayerInfo[i][pTester] < 1)
		    continue;

        if(!IsTesterDuty(i))
			SendClientMessageEx(playerid, COLOR_GREY, "%s(ID:%i) (???????: %s) ?? ?????????: ???", GetNameEx(i), i, GetAccName(i));
		else
		    SendClientMessageEx(playerid, COLOR_GREEN2, "%s(ID:%i) (???????: %s) ?? ?????????: ??", GetNameEx(i), i, GetAccName(i));
	}
	return 1;
}

ALTX:ooc("/o");
CMD:ooc(playerid, params[])
{
	if(PlayerInfo[playerid][pSettings] & togOOC)
		return SCM(playerid, COLOR_LIGHTRED, "??????? ???????? OOC ??? (/togooc).");

	if(PlayerInfo[playerid][pMutedTime] > 0)
		return SCM(playerid, COLOR_LIGHTRED, "??? ????????? ??? ???????????? ????????.");

	if ((noooc) && !CheckAdmin(playerid, 1))
	    return SCM(playerid, COLOR_GRAD2, "??? ??? ???????? ???????????????!");

	if(isnull(params))
		return SendSyntaxMessage(playerid, "/ooc [text]");

	new mes[128];
	if(strlen(params) > MAXLEN)
	{
		new pos = MAXLEN;
		if(pos < MAXLEN-1) pos = MAXLEN;
		format(mes, sizeof(mes), "[OOC] %s (ID: %i): %.*s ...", GetAccName(playerid), playerid, pos, params);
		OOCMSG(COLOR_OOC,mes);
		format(mes, sizeof(mes), "... %s", params[pos]);
		OOCMSG(COLOR_OOC,mes);
	}
	else
	{
		format(mes, sizeof(mes), "[OOC] %s (ID: %i): %s", GetAccName(playerid), playerid, params);
		OOCMSG(COLOR_OOC, mes);
	}
	return 1;
}

CMD:blockpm(playerid, params[])
{
    if(PlayerInfo[playerid][pPremium] < 1)
		return SCM(playerid, COLOR_LIGHTRED, "?????? ??????? ???????? ?????? ??? ??????? ?????????.");

	new userid;

	if(sscanf(params,"u", userid))
		return SendSyntaxMessage(playerid, "/blockpm [playerid/PartOfName]");

	if(userid == playerid)
		return SCM(playerid, COLOR_INFO, "?????? ???? ??????????? ??????????");

    if(people_blocking[playerid][userid] == 1)
    {
		SendClientMessageEx(playerid, COLOR_INFO, "?? ????????? %s[ID:%i] ?? ??????? ?????? ??.", GetNameEx(userid), userid);
		people_blocking[playerid][userid] = 0;
		return 1;
	}

    if(!IsPlayerLogged(userid))
		return SendNotConnected(playerid);

    SendClientMessageEx(playerid, COLOR_INFO, "?? ??????? %s[ID:%i] ?? ??????? ?????? ??.", GetNameEx(userid), userid);
	people_blocking[playerid][userid] = 1;
	return 1;
}

CMD:blocklist(playerid, params[])
{
	if(PlayerInfo[playerid][pPremium] < 1)
		return SCM(playerid, COLOR_INFO, "?? ?? ????????? ??????? ???????.");

	SCM(playerid, COLOR_LIGHTRED, "|______?????? ?????? ??______|");
	foreach(Player, i)
	{
		if(people_blocking[playerid][i] == 0)
		    continue;

		SendClientMessageEx(playerid, COLOR_INFO, "[ID:%i]%s.", i, GetNameEx(i));
	}
	return 1;
}

CMD:pm(playerid, params[])
{
	new userid,
		text[128];

	if(PlayerInfo[playerid][pMutedTime] > 0)
		return SCM(playerid, COLOR_LIGHTRED, "??? ????????? ??? ???????????? ????????.");

	if(sscanf(params, "us[128]", userid, text))
		return SendSyntaxMessage(playerid, "/pm [playerid/PartOfName] [text]");

	if(!IsPlayerLogged(userid))
		return SendNotConnected(playerid);

    if(userid == playerid)
		return SCM(playerid, COLOR_LIGHTRED, "?????? ????-?? ??????");

	if(PlayerInfo[playerid][pSettings] & togPM)
		return SCM(playerid, COLOR_LIGHTRED, "??????? ???????? ????? ?????? ????????? (/togpm).");

	if(!IsAdminDuty(playerid) && (PlayerInfo[userid][pSettings] & togPM))
		return SCM(playerid, COLOR_LIGHTRED, "????? ???????? ????? ?????? ?????????");

	if(people_blocking[userid][playerid] == 1)
        return SCM(playerid, COLOR_LIGHTRED, "????? ??????? ??? ? ?????? ?????? PM.");

	if(PlayerInfo[userid][pAdmin] > 0 && !IsAdminDuty(userid) && PlayerInfo[playerid][pAdmin] == 0 && GetPVarInt(playerid, #pm_to) != userid)
	{
		SetPVarInt(playerid, #pm_to, userid);
		SetPVarString(playerid, #pm_text, text);

		new str[512] = "{B4B5B7}???????? ??????????? ??????? #17\n????????????? ?? ?? ????????? ? ????????? ? ??????? ????????.\n\n? ?????? ?????? ?? ?? ????????? ??????, ??????? ??????? ? ?? ????? ????????? ? ?????-???.\n\n?? ??????????? ?? ??? ????? ?????????? ? ??????????????? ? ???????.";
		Dialog_Show(playerid, SendPM, DIALOG_STYLE_MSGBOX, "{FF4500}????????", str, "?????????", "??????");
		return 1;
	}

	SendPMToPlayer(playerid, userid, text);
	return 1;
}
CMD:time(playerid, params[])
{
	new hour,
		minute,
		mes[128];

	gettime(hour,minute);
	format(mes, sizeof(mes), "~w~%02d:%02d~n~Paycheck: %02i min", hour, minute, 60 - PlayerInfo[playerid][pPayDayTime]);

	if(PlayerInfo[playerid][pMutedTime] > 0)
		format(mes, sizeof(mes), "%s~n~~r~Mute time left: %i", mes, PlayerInfo[playerid][pMutedTime]);

	if(PlayerInfo[playerid][pJailed] == JEFF_JAIL || PlayerInfo[playerid][pJailed] == LSPD_JAIL || PlayerInfo[playerid][pJailed] == SASD_JAIL)
	{
		format(mes, sizeof(mes), "~y~Jail time left: %i~n~%s", PlayerInfo[playerid][pJailTime], mes);
		GameTextForPlayer(playerid, mes, 5000, 1);
		ApplyAnimation(playerid,"COP_AMBIENT","Coplook_watch",4.1,0,0,0,0,0,1);
		return 1;
	}
	else if(PlayerInfo[playerid][pIsolateTime] != 0)
	{
		format(mes, sizeof(mes), "~y~Isolate time left: %i~n~%s", PlayerInfo[playerid][pIsolateTime], mes);
		GameTextForPlayer(playerid, mes, 5000, 1);
		ApplyAnimation(playerid,"COP_AMBIENT","Coplook_watch",4.1,0,0,0,0,0,1);
		return 1;
	}
	else if(PlayerInfo[playerid][pJailed] == PRISON_JAIL)
	{
		format(mes, sizeof(mes), "~y~Prison time left: %i~n~%s", PlayerInfo[playerid][pJailTime], mes);
		GameTextForPlayer(playerid, mes, 5000, 1);
		ApplyAnimation(playerid,"COP_AMBIENT","Coplook_watch",4.1,0,0,0,0,0,1);
		return 1;
	}
	else
	{
		GameTextForPlayer(playerid, mes, 5000, 1);
		cmd::ame(playerid, "?????????(?) ?? ????.");
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
			ApplyAnimation(playerid,"COP_AMBIENT","Coplook_watch",4.1,0,0,0,0,0,1);
	}
	return 1;
}

CMD:enter(playerid, params[])
{
    if(pTemp[playerid][pZond] != 0)
        return 1;

	new id = -1;
	if(IsDriver(playerid) && (id = GetNearEntranceOutside(playerid, 3.0)) != -1)
	{
	    if(EntranceInfo[id][eLocked] == 1)
   	 		return GameTextForPlayer(playerid, "~r~Locked", 5000, 1);

        if(EntranceInfo[id][eVehicle] != 1)
            return 1;

	    if(!GetWorld(playerid) && !GetInterior(playerid))
   			GetPlayerPos(playerid, PlayerInfo[playerid][pLocationPos][0], PlayerInfo[playerid][pLocationPos][1], PlayerInfo[playerid][pLocationPos][2]);

        SetPlayerCoords(playerid, EntranceInfo[id][eExitX], EntranceInfo[id][eExitY], EntranceInfo[id][eExitZ]);
		SetInterior(playerid, EntranceInfo[id][eExitInt]);
		SetWorld(playerid, EntranceInfo[id][eExitVW]);

        new vehicleid = GetPlayerVehicleID(playerid);
        foreach (new i : Player)
		{
		    if (playerid == i || !IsPlayerInVehicle(i, vehicleid))
				continue;

            SetPlayerCoords(i, EntranceInfo[id][eExitX], EntranceInfo[id][eExitY], EntranceInfo[id][eExitZ]);
			SetInterior(i, EntranceInfo[id][eExitInt]);
			SetWorld(i, EntranceInfo[id][eExitVW]);

			PlayerInfo[i][pLocationPos][0] = PlayerInfo[playerid][pLocationPos][0];
			PlayerInfo[i][pLocationPos][1] = PlayerInfo[playerid][pLocationPos][1];
			PlayerInfo[i][pLocationPos][2] = PlayerInfo[playerid][pLocationPos][2];
		}

        SetVehiclePos(GetPlayerVehicleID(playerid), EntranceInfo[id][eExitX], EntranceInfo[id][eExitY], EntranceInfo[id][eExitZ]);
		SetVehicleZAngle(GetPlayerVehicleID(playerid), EntranceInfo[id][eExitA] - 180.0);
		LinkVehicleToInterior(GetPlayerVehicleID(playerid), EntranceInfo[id][eExitInt]);
		SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), EntranceInfo[id][eExitVW]);
	    return 1;
	}

    if(0 == IsPlayerInAnyVehicle(playerid) && (id = GetNearEntranceOutside(playerid)) != -1)
	{
	    if(EntranceInfo[id][eLocked] == 1)
   	 		return GameTextForPlayer(playerid, "~r~Locked", 5000, 1);

	    if(!GetWorld(playerid) && !GetInterior(playerid))
	   		GetPlayerPos(playerid, PlayerInfo[playerid][pLocationPos][0], PlayerInfo[playerid][pLocationPos][1], PlayerInfo[playerid][pLocationPos][2]);

		SetPlayerPosEx(playerid, EntranceInfo[id][eExitX], EntranceInfo[id][eExitY], EntranceInfo[id][eExitZ]);
		SetPlayerFacingAngle(playerid, EntranceInfo[id][eExitA] - 180.0);
		SetInterior(playerid, EntranceInfo[id][eExitInt]);
		SetWorld(playerid, EntranceInfo[id][eExitVW]);
	    return 1;
	}

    if(0 == IsPlayerInAnyVehicle(playerid) && (id = GetNearApartmentOutside(playerid)) != -1)
	{
	    if(!GetWorld(playerid) && !GetInterior(playerid))
	    	GetPlayerPos(playerid, PlayerInfo[playerid][pLocationPos][0], PlayerInfo[playerid][pLocationPos][1], PlayerInfo[playerid][pLocationPos][2]);

		SetPlayerPosEx(playerid, ApartInfo[id][aExitX], ApartInfo[id][aExitY], ApartInfo[id][aExitZ]);
		SetWorld(playerid, ApartInfo[id][aExitVW]);
		SetInterior(playerid, ApartInfo[id][aExitInt]);

		pTemp[playerid][pApartEntered] = id;
		return 1;
	}

	if(0 == IsPlayerInAnyVehicle(playerid) && (id = GetNearHouseOutside(playerid)) != -1)
	{
        if(HouseInfo[id][hOwnerID] == 0)
            return SendClientMessage(playerid, -1, "??????????? /checkint, ????? ?????????? ???????? ????.");

	    if(HouseInfo[id][hLocked] == 1)
			return GameTextForPlayer(playerid, "~r~Locked", 5000, 1);

        if(!GetWorld(playerid) && !GetInterior(playerid))
	    	GetPlayerPos(playerid, PlayerInfo[playerid][pLocationPos][0], PlayerInfo[playerid][pLocationPos][1], PlayerInfo[playerid][pLocationPos][2]);

		SetPlayerPosEx(playerid,HouseInfo[id][hExitX],HouseInfo[id][hExitY],HouseInfo[id][hExitZ]);
		SetInterior(playerid,HouseInfo[id][hExitInt]);
		SetWorld(playerid,HouseInfo[id][hExitVW]);
		pTemp[playerid][pHouseEntered] = id;

		if(PlayerInfo[playerid][pRentKey] == HouseInfo[id][hID] || HouseInfo[id][hOwnerID] == PlayerInfo[playerid][pID])
			GameTextForPlayer(playerid, "~w~Welcome Home", 5000, 1);

		if(HouseInfo[id][hRadioOn] == 1)
		{
		    pTemp[playerid][pBoombox_house] = id;
			PlayAudioStreamForPlayer(playerid, HouseInfo[id][hRadioURL]);
		}
		return 1;
	}

	for(new i = 0; i < MAX_BIZ; i++)
	{
	    if(0 != IsPlayerBizOutside(playerid, i, 15.0) && BizInfo[i][bizType] == BIZ_TUNING && IsDriver(playerid))
	    {
	        ShowModMenu(playerid);
	        return 1;
	    }
		if (0 != IsPlayerBizOutside(playerid, i, 5.0) && BizInfo[i][bizType] == BIZ_PAYNSPRAY)
		{
			if(BizInfo[i][bizLocked] == 1)
				return GameTextForPlayer(playerid, "~r~Locked", 5000, 1);

			if(GetPlayerVehicleID(playerid) == 0 || GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
				return SendClientMessage(playerid, COLOR_LIGHTRED, "?? ?????? ?????????? ? ??????????.");

            if(VehicleInfo[GetPlayerVehicleID(playerid)][carEngineOn])
				return SCM(playerid, COLOR_LIGHTRED, "????????? ?????????, ?????? ??? ?????? ????????.");

			if(GetPVarInt(playerid, #repair_time))
				return SCM(playerid, COLOR_LIGHTRED, "?????? ??? ????... ??????????, ?????????.");

			if(GetCash(playerid) < BizInfo[i][bizEntrance])
				return SendClientMessageEx(playerid,COLOR_LIGHTRED,"?????? ????? $%i.", BizInfo[i][bizEntrance]);

			if(BizInfo[i][bizOwnerID] != 0 && !BizInfo[i][bizProduct])
			    return SendErrorMessage(playerid, "? Pay N Spray ???????????? ??????.");

			new Float: health;
			GetVehicleHealth(GetPlayerVehicleID(playerid), health);
			if(health < 230.0)
			    return SendErrorMessage(playerid, "?????? ????????? ??? ?????? ????????.");

			GiveCash(playerid, -BizInfo[i][bizEntrance]);
			SetPVarInt(playerid, #repair_time, 10);

			if(BizInfo[i][bizOwnerID] != 0)
			{
				BizInfo[i][bizProduct]--;
            	GiveBizCash(i, BizInfo[i][bizEntrance]);
			}
			return 1;
		}
		if (0 != IsPlayerBizOutside(playerid, i, 1.0))
		{
  			GameTextForPlayer(playerid, "_", 1, 4);
            if(BizInfo[i][bizType] == BIZ_TUNING) return 1;
			if(BizInfo[i][bizType] == BIZ_AUTOSALON) return Dialog_Show(playerid, SelectClass, DIALOG_STYLE_LIST, "???????? ?????????", "A-?????\nB-?????\nC-?????\n??????????\n????????????\n????????? ? ??????????\n???????\n??????", "???????", "???????");
			else if(BizInfo[i][bizType] == BIZ_BOATSALON) return ShowBoats(playerid);
			else if(BizInfo[i][bizType] == BIZ_FLYSALON) return ShowFly(playerid);
			else if(BizInfo[i][bizType] == BIZ_GAS_STATION) return SendServerMessage(playerid, "/fill - ????????? ?????????.");
            else if(BizInfo[i][bizType] == BIZ_ADVERT) return SendServerMessage(playerid, "/ad - ??????????, /cad - ?????????? ??? ????????.");

            if(IsPlayerInAnyVehicle(playerid))
                return 1;

			if(BizInfo[i][bizLocked] == 1)
				return GameTextForPlayer(playerid, "~r~Locked", 5000, 1);

			if(PlayerInfo[playerid][pID] != BizInfo[i][bizOwnerID] && PlayerInfo[playerid][pWorkOn] != BizInfo[i][bizID] && GetCash(playerid) < BizInfo[i][bizEntrance])
				return GameTextForPlayer(playerid, "~r~No cash", 5000, 1);

            if(!GetWorld(playerid) && !GetInterior(playerid))
	    		GetPlayerPos(playerid, PlayerInfo[playerid][pLocationPos][0], PlayerInfo[playerid][pLocationPos][1], PlayerInfo[playerid][pLocationPos][2]);

			SetPlayerPosEx(playerid,BizInfo[i][bizExitX], BizInfo[i][bizExitY], BizInfo[i][bizExitZ]);
			SetInterior(playerid,BizInfo[i][bizExitInt]);
			SetWorld(playerid,BizInfo[i][bizExitVW]);

			if(strlen(BizInfo[i][bizMes]) > 1)
				SCM(playerid, COLOR_WHITE, BizInfo[i][bizMes]);

			if(PlayerInfo[playerid][pID] != BizInfo[i][bizOwnerID] && PlayerInfo[playerid][pWorkOn] != BizInfo[i][bizID])
			{
				GiveCash(playerid, -BizInfo[i][bizEntrance]);
				GiveBizCash(i, BizInfo[i][bizEntrance]);
			}
			pTemp[playerid][pBizEntered] = i;
			GameTextForPlayer(playerid, BizInfo[i][bizName], 5000, 1);

			if(BizInfo[i][bizRadioOn] == 1)
			{
			    pTemp[playerid][pBoombox_biz] = i;
				PlayAudioStreamForPlayer(playerid, BizInfo[i][bizRadioURL]);
			}
			return 1;
		}
	}

	if((id = GarageNearestOutside(playerid)) != -1)
	{
	    if (GarageInfo[id][garageOwner] == 0 && IsPlayerInAnyVehicle(playerid))
	    	return SendErrorMessage(playerid, "?????? ????? ?????????? ??? ??????????.");

	    if (GarageInfo[id][garageLocked] != 0)
		    return SendErrorMessage(playerid, "????? ?????? ???????.");

		if (IsDriver(playerid))
		{
			new vehicleid = GetPlayerVehicleID(playerid);

            if(!GetWorld(playerid) && !GetInterior(playerid))
	    		GetPlayerPos(playerid, PlayerInfo[playerid][pLocationPos][0], PlayerInfo[playerid][pLocationPos][1], PlayerInfo[playerid][pLocationPos][2]);

            SetPlayerCoords(playerid, GarageInfo[id][garageVeh_Exit][0], GarageInfo[id][garageVeh_Exit][1], GarageInfo[id][garageVeh_Exit][2]);
		    SetInterior(playerid, GarageInfo[id][garageExitInt]);
			SetWorld(playerid, GarageInfo[id][garageExitVW]);

			foreach (new i : Player)
			{
			    if (playerid == i || !IsPlayerInVehicle(i, vehicleid))
					continue;

                SetPlayerCoords(i, GarageInfo[id][garageVeh_Exit][0], GarageInfo[id][garageVeh_Exit][1], GarageInfo[id][garageVeh_Exit][2]);
				SetInterior(i, GarageInfo[id][garageExitInt]);
				SetWorld(i, GarageInfo[id][garageExitVW]);

				PlayerInfo[i][pLocationPos][0] = PlayerInfo[playerid][pLocationPos][0];
				PlayerInfo[i][pLocationPos][1] = PlayerInfo[playerid][pLocationPos][1];
				PlayerInfo[i][pLocationPos][2] = PlayerInfo[playerid][pLocationPos][2];
			}

			SetVehiclePos(vehicleid, GarageInfo[id][garageVeh_Exit][0], GarageInfo[id][garageVeh_Exit][1], GarageInfo[id][garageVeh_Exit][2]);
		    SetVehicleZAngle(vehicleid, GarageInfo[id][garageVeh_Exit][3]);
		    SetVehicleVirtualWorld(vehicleid, GarageInfo[id][garageExitVW]);
			LinkVehicleToInterior(vehicleid, GarageInfo[id][garageExitInt]);
		    return 1;
		}
		else if(0 == IsPlayerInAnyVehicle(playerid))
		{
		    if(!GetWorld(playerid) && !GetInterior(playerid))
	    		GetPlayerPos(playerid, PlayerInfo[playerid][pLocationPos][0], PlayerInfo[playerid][pLocationPos][1], PlayerInfo[playerid][pLocationPos][2]);

			SetPlayerPosEx(playerid, GarageInfo[id][garagePlayer_Exit][0], GarageInfo[id][garagePlayer_Exit][1], GarageInfo[id][garagePlayer_Exit][2]);
		    SetInterior(playerid, GarageInfo[id][garageExitInt]);
			SetWorld(playerid, GarageInfo[id][garageExitVW]);
		}
	    return 1;
	}
	return 1;
}

CMD:exit(playerid, params[])
{
    if(pTemp[playerid][pZond] != 0)
        return 1;

	new id = -1;
	if(IsDriver(playerid) && (id = GetNearEntranceInside(playerid, 3.0)) != -1)
	{
	    if(EntranceInfo[id][eLocked] == 1)
   	 		return GameTextForPlayer(playerid, "~r~Locked", 5000, 1);

        if(EntranceInfo[id][eVehicle] != 1)
            return 1;

	    if(!GetWorld(playerid) && !GetInterior(playerid))
    		GetPlayerPos(playerid, PlayerInfo[playerid][pLocationPos][0], PlayerInfo[playerid][pLocationPos][1], PlayerInfo[playerid][pLocationPos][2]);

        SetPlayerCoords(playerid, EntranceInfo[id][eEnterX], EntranceInfo[id][eEnterY], EntranceInfo[id][eEnterZ]);
		SetInterior(playerid, EntranceInfo[id][eEnterInt]);
		SetWorld(playerid, EntranceInfo[id][eEnterVW]);

		new vehicleid = GetPlayerVehicleID(playerid);
        foreach (new i : Player)
		{
		    if (playerid == i || !IsPlayerInVehicle(i, vehicleid))
				continue;

            SetPlayerCoords(i, EntranceInfo[id][eEnterX], EntranceInfo[id][eEnterY], EntranceInfo[id][eEnterZ]);
			SetInterior(i, EntranceInfo[id][eEnterVW]);
			SetWorld(i, EntranceInfo[id][eEnterVW]);

			PlayerInfo[i][pLocationPos][0] = PlayerInfo[playerid][pLocationPos][0];
			PlayerInfo[i][pLocationPos][1] = PlayerInfo[playerid][pLocationPos][1];
			PlayerInfo[i][pLocationPos][2] = PlayerInfo[playerid][pLocationPos][2];
		}

		SetVehiclePos(GetPlayerVehicleID(playerid), EntranceInfo[id][eEnterX], EntranceInfo[id][eEnterY], EntranceInfo[id][eEnterZ]);
		SetVehicleZAngle(GetPlayerVehicleID(playerid), EntranceInfo[id][eEnterA] - 180.0);
		LinkVehicleToInterior(GetPlayerVehicleID(playerid), EntranceInfo[id][eEnterInt]);
		SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), EntranceInfo[id][eEnterVW]);
	    return 1;
	}

	if(0 == IsPlayerInAnyVehicle(playerid) && (id = GetNearEntranceInside(playerid)) != -1)
	{
	    if(EntranceInfo[id][eLocked] == 1)
   	 		return GameTextForPlayer(playerid, "~r~Locked", 5000, 1);

	    if(!GetWorld(playerid) && !GetInterior(playerid))
	   		GetPlayerPos(playerid, PlayerInfo[playerid][pLocationPos][0], PlayerInfo[playerid][pLocationPos][1], PlayerInfo[playerid][pLocationPos][2]);

		SetPlayerPosEx(playerid, EntranceInfo[id][eEnterX], EntranceInfo[id][eEnterY], EntranceInfo[id][eEnterZ]);
		SetPlayerFacingAngle(playerid, EntranceInfo[id][eEnterA] - 180.0);
		SetInterior(playerid, EntranceInfo[id][eEnterInt]);
		SetWorld(playerid, EntranceInfo[id][eEnterVW]);
	    return 1;
	}

	if(0 == IsPlayerInAnyVehicle(playerid) && (id = GetNearApartmentInside(playerid, 1.0)) != -1)
	{
	    if(!GetWorld(playerid) && !GetInterior(playerid))
	    		GetPlayerPos(playerid, PlayerInfo[playerid][pLocationPos][0], PlayerInfo[playerid][pLocationPos][1], PlayerInfo[playerid][pLocationPos][2]);

		SetPlayerPosEx(playerid, ApartInfo[id][aPosX], ApartInfo[id][aPosY], ApartInfo[id][aPosZ]);
		SetWorld(playerid, ApartInfo[id][aPosVW]);
		SetInterior(playerid, ApartInfo[id][aPosInt]);

		pTemp[playerid][pApartEntered] = -1;
		return 1;
	}

	if(0 == IsPlayerInAnyVehicle(playerid) && (id = GetNearHouseInside(playerid, 2.0)) != -1)
	{
		/*if(HouseInfo[id][hLocked] == 1 && !GetPVarInt(playerid, #check_int))
			return GameTextForPlayer(playerid, "~r~Locked", 5000, 1);*/

        if(!GetWorld(playerid) && !GetInterior(playerid))
	    		GetPlayerPos(playerid, PlayerInfo[playerid][pLocationPos][0], PlayerInfo[playerid][pLocationPos][1], PlayerInfo[playerid][pLocationPos][2]);

		SetPlayerPosEx(playerid,HouseInfo[id][hPosX],HouseInfo[id][hPosY],HouseInfo[id][hPosZ]);
		SetInterior(playerid, HouseInfo[id][hPosInt]);
		SetWorld(playerid,HouseInfo[id][hPosVW]);

        pTemp[playerid][pHouseEntered] = -1;
        DeletePVar(playerid, #check_int);
	    return 1;
	}
	else if((id = GetNearBizInside(playerid, 2.0)) != -1)
	{
	    if(BizInfo[id][bizType] == BIZ_GAS_STATION || BizInfo[id][bizType] == BIZ_AUTOSALON || BizInfo[id][bizType] == BIZ_BOATSALON || BizInfo[id][bizType] == BIZ_FLYSALON || BizInfo[id][bizType] == BIZ_TUNING || BizInfo[id][bizType] == BIZ_ADVERT || BizInfo[id][bizType] == BIZ_LICENSE)
			return 1;

	    /*if(BizInfo[id][bizLocked] == 1)
			return GameTextForPlayer(playerid, "~r~Locked", 5000, 1);*/

        if(!GetWorld(playerid) && !GetInterior(playerid))
	    		GetPlayerPos(playerid, PlayerInfo[playerid][pLocationPos][0], PlayerInfo[playerid][pLocationPos][1], PlayerInfo[playerid][pLocationPos][2]);

		SetPlayerPosEx(playerid,BizInfo[id][bizPosX], BizInfo[id][bizPosY], BizInfo[id][bizPosZ]);
		SetInterior(playerid,BizInfo[id][bizPosInt]);
		SetWorld(playerid,BizInfo[id][bizPosVW]);

		pTemp[playerid][pBizEntered] = -1;
		return 1;
	}
	else if((id = GarageNearestInside(playerid)) != -1)
	{
	    if (GarageInfo[id][garageLocked] != 0)
    		return SendErrorMessage(playerid, "????? ?????? ???????.");

		if (IsDriver(playerid))
		{
		    if(!GetWorld(playerid) && !GetInterior(playerid))
	    		GetPlayerPos(playerid, PlayerInfo[playerid][pLocationPos][0], PlayerInfo[playerid][pLocationPos][1], PlayerInfo[playerid][pLocationPos][2]);

			new vehicleid = GetPlayerVehicleID(playerid);
            SetPlayerCoords(playerid, GarageInfo[id][garageVeh_Enter][0], GarageInfo[id][garageVeh_Enter][1], GarageInfo[id][garageVeh_Enter][2]);
		    SetInterior(playerid, GarageInfo[id][garageEnterInt]);
			SetWorld(playerid, GarageInfo[id][garageEnterVW]);

			foreach (new i : Player)
			{
			    if(playerid == i ||  !IsPlayerInVehicle(i, vehicleid))
					continue;

                SetPlayerCoords(i, GarageInfo[id][garageVeh_Enter][0], GarageInfo[id][garageVeh_Enter][1], GarageInfo[id][garageVeh_Enter][2]);
				SetInterior(i, GarageInfo[id][garageEnterInt]);
				SetWorld(i, GarageInfo[id][garageEnterVW]);

                PlayerInfo[i][pLocationPos][0] = PlayerInfo[playerid][pLocationPos][0];
				PlayerInfo[i][pLocationPos][1] = PlayerInfo[playerid][pLocationPos][1];
				PlayerInfo[i][pLocationPos][2] = PlayerInfo[playerid][pLocationPos][2];
			}

			SetVehiclePos(vehicleid, GarageInfo[id][garageVeh_Enter][0], GarageInfo[id][garageVeh_Enter][1], GarageInfo[id][garageVeh_Enter][2]);
		    SetVehicleZAngle(vehicleid, GarageInfo[id][garageVeh_Enter][3]);
		    SetVehicleVirtualWorld(vehicleid, GarageInfo[id][garageEnterVW]);
			LinkVehicleToInterior(vehicleid, GarageInfo[id][garageEnterInt]);
		    return 1;
		}
		else if(0 == IsPlayerInAnyVehicle(playerid))
		{
		    if(!GetWorld(playerid) && !GetInterior(playerid))
	    		GetPlayerPos(playerid, PlayerInfo[playerid][pLocationPos][0], PlayerInfo[playerid][pLocationPos][1], PlayerInfo[playerid][pLocationPos][2]);

			SetPlayerPosEx(playerid, GarageInfo[id][garagePlayer_Enter][0], GarageInfo[id][garagePlayer_Enter][1], GarageInfo[id][garagePlayer_Enter][2]);
		    SetInterior(playerid, GarageInfo[id][garageEnterInt]);
			SetWorld(playerid, GarageInfo[id][garageEnterVW]);
		}
	    return 1;
	}
	return 1;
}

CMD:tog(playerid, params[])
{
	SCM(playerid, -1, "????????? ???????:");
	SCM(playerid, COLOR_YELLOWG, "/togname{FFFFFF} - ????????/????????? ????? ?????.");
	SCM(playerid, COLOR_YELLOWG, "/toghud{FFFFFF} - ????????/????????? HUD.");
	SCM(playerid, COLOR_YELLOWG, "/togooc{FFFFFF} - ????????/????????? ????? OOC ????.");
	SCM(playerid, COLOR_YELLOWG, "/togjoin{FFFFFF} - ????????/????????? ????? ?????????? ? ?????/?????? ???????.");
	SCM(playerid, COLOR_YELLOWG, "/togads{FFFFFF} -  ????????/????????? ????? ???????.");
	SCM(playerid, COLOR_YELLOWG, "/toggov{FFFFFF} - ????????/????????? ????? ????????????????? ????????.");
	SCM(playerid, COLOR_YELLOWG, "/togpm{FFFFFF} - ????????/????????? ????? ?????? ?????????.");
	SCM(playerid, COLOR_YELLOWG, "/togadm{FFFFFF} - ????????/????????? ?????-??????????.");
	SCM(playerid, COLOR_YELLOWG, "/togf{FFFFFF} - ????????/????????? ??????????? ???.");
	SCM(playerid, COLOR_YELLOWG, "/tognews{FFFFFF} - ????????/????????? ????? ????????.");
	SCM(playerid, COLOR_YELLOWG, "/togafk{FFFFFF} - ????????/????????? ????? ??????? ? AFK.");
	SCM(playerid, COLOR_YELLOWG, "/togenter{FFFFFF} - ????????/????????? ????/????? ? ??????? ??????? F.");
	return 1;
}

CMD:togenter(playerid, params[])
{
    if(PlayerInfo[playerid][pSettings] & togEnter)
	{
    	SCM(playerid, COLOR_YELLOWG, "?? ???????? ????/????? ? ??????? ??????? F.");
		PlayerInfo[playerid][pSettings] &= ~togEnter;
	}
	else
	{
		SCM(playerid, COLOR_YELLOWG, "?? ????????? ????/????? ? ??????? ??????? F.");
		PlayerInfo[playerid][pSettings] |= togEnter;
	}
	return 1;
}

CMD:toghud(playerid, params[])
{
    if(PlayerInfo[playerid][pSettings] & togHUD)
	{
		SCM(playerid, COLOR_YELLOWG, "?? ???????? HUD.");
		PlayerInfo[playerid][pSettings] &= ~togHUD;

		ShowRadioTextDraw(playerid);
	}
	else
	{
		SCM(playerid, COLOR_YELLOWG, "?? ????????? HUD.");
		PlayerInfo[playerid][pSettings] |= togHUD;

		HideRadioTextDraw(playerid);
	}
	return 1;
}

CMD:togname(playerid, params[])
{
	if(PlayerInfo[playerid][pSettings] & togName)
	{
	    SCM(playerid,COLOR_YELLOWG,"?? ???????? ????? ????????? ???????.");
		PlayerInfo[playerid][pSettings] &= ~togName;
		foreach(new i: Player)
			ShowPlayerNameTagForPlayer(playerid, i, 1);
	}
	else
	{
		SCM(playerid,COLOR_YELLOWG,"?? ????????? ????? ????????? ???????.");
		PlayerInfo[playerid][pSettings] |= togName;
        foreach(new i: Player)
			ShowPlayerNameTagForPlayer(playerid, i, 0);
	}
	return 1;
}

CMD:togooc(playerid, params[])
{
	if(PlayerInfo[playerid][pSettings] & togOOC)
	{
	    SCM(playerid,COLOR_YELLOWG,"?? ???????? OOC ???.");
		PlayerInfo[playerid][pSettings] &= ~togOOC;
	}
	else
	{
		SCM(playerid,COLOR_YELLOWG,"?? ????????? OOC ???.");
		PlayerInfo[playerid][pSettings] |= togOOC;
	}
	return 1;
}

CMD:togservice(playerid, params[])
{
    if(PlayerInfo[playerid][pSettings] & togService)
	{
    	SCM(playerid, COLOR_YELLOWG, "?? ???????? ????? ???????? [REPORT & HELP & REQUEST].");
		PlayerInfo[playerid][pSettings] &= ~togService;
	}
	else
	{
		SCM(playerid, COLOR_YELLOWG, "?? ????????? ????? ???????? [REPORT & HELP & REQUEST].");
		PlayerInfo[playerid][pSettings] |= togService;
	}
	return 1;
}

CMD:togjoin(playerid, params[])
{
    if(PlayerInfo[playerid][pSettings] & togJoin)
	{
    	SCM(playerid, COLOR_YELLOWG, "?? ???????? ????? ?????????? ? ?????/?????? ??????? ????? ? ????.");
		PlayerInfo[playerid][pSettings] &= ~togJoin;
	}
	else
	{
		SCM(playerid, COLOR_YELLOWG, "?? ????????? ????? ?????????? ? ?????/?????? ??????? ????? ? ????.");
		PlayerInfo[playerid][pSettings] |= togJoin;
	}
	return 1;
}

CMD:togads(playerid, params[])
{
    if(PlayerInfo[playerid][pSettings] & togAdv)
	{
    	SCM(playerid, COLOR_YELLOWG, "?? ???????? ????? ???????.");
		PlayerInfo[playerid][pSettings] &= ~togAdv;
	}
	else
	{
		SCM(playerid, COLOR_YELLOWG, "?? ????????? ????? ???????.");
		PlayerInfo[playerid][pSettings] |= togAdv;
	}
	return 1;
}

CMD:toggov(playerid, params[])
{
    if(PlayerInfo[playerid][pSettings] & togGov)
	{
    	SCM(playerid, COLOR_YELLOWG, "?? ???????? ????? ????????????????? ????????.");
		PlayerInfo[playerid][pSettings] &= ~togGov;
	}
	else
	{
		SCM(playerid, COLOR_YELLOWG, "?? ????????? ????? ????????????????? ????????.");
		PlayerInfo[playerid][pSettings] |= togGov;
	}
	return 1;
}

CMD:togpm(playerid, params[])
{
    if(PlayerInfo[playerid][pSettings] & togPM)
	{
    	SCM(playerid, COLOR_YELLOWG, "?? ???????? ????? ?????? ?????????.");
		PlayerInfo[playerid][pSettings] &= ~togPM;
	}
	else
	{
		SCM(playerid, COLOR_YELLOWG, "?? ????????? ????? ?????? ?????????.");
		PlayerInfo[playerid][pSettings] |= togPM;
	}
	return 1;
}

CMD:togadm(playerid, params[])
{
    if(PlayerInfo[playerid][pSettings] & togAdmCmds)
	{
    	SCM(playerid, COLOR_YELLOWG, "?? ???????? ????? ?????-??????????.");
		PlayerInfo[playerid][pSettings] &= ~togAdmCmds;
	}
	else
	{
		SCM(playerid, COLOR_YELLOWG, "?? ????????? ????? ?????-??????????.");
		PlayerInfo[playerid][pSettings] |= togAdmCmds;
	}
	return 1;
}

CMD:togf(playerid, params[])
{
    if(PlayerInfo[playerid][pSettings] & togFaction)
	{
    	SCM(playerid, COLOR_YELLOWG, "?? ???????? ????? ??????????? ?????????.");
		PlayerInfo[playerid][pSettings] &= ~togFaction;
	}
	else
	{
		SCM(playerid, COLOR_YELLOWG, "?? ????????? ????? ??????????? ?????????.");
		PlayerInfo[playerid][pSettings] |= togFaction;
	}
	return 1;
}

CMD:tognews(playerid, params[])
{
    if(PlayerInfo[playerid][pSettings] & togNews)
	{
    	SCM(playerid, COLOR_YELLOWG, "?? ???????? ????? ???????? ?? SAN.");
		PlayerInfo[playerid][pSettings] &= ~togNews;
	}
	else
	{
		SCM(playerid, COLOR_YELLOWG, "?? ????????? ????? ???????? ?? SAN.");
		PlayerInfo[playerid][pSettings] |= togNews;
	}
	return 1;
}

CMD:togafk(playerid, params[])
{
    if(PlayerInfo[playerid][pSettings] & togAFK)
	{
    	SCM(playerid, COLOR_YELLOWG, "?? ???????? ????? ??????? ???????????? ? AFK.");
		PlayerInfo[playerid][pSettings] &= ~togAFK;
	}
	else
	{
		SCM(playerid, COLOR_YELLOWG, "?? ????????? ????? ??????? ???????????? ? AFK.");
		PlayerInfo[playerid][pSettings] |= togAFK;
	}
	return 1;
}

CMD:coin(playerid, params[])
{
	SendNearbyMessage(Range_Normal, playerid, COLOR_WHITE, "* %s ??????????? ?????? ? ???????? %s.", GetNameWithMask(playerid), (random(2) == 0)?("????"):("?????"));
	return 1;
}

CMD:dice(playerid, params[])
{
	if(-1 == IsPlayerHasItem(playerid, INV_DICE))
		return SCM(playerid, COLOR_LIGHTRED, "? ??? ??? ??????.");

	SendNearbyMessage(Range_Normal, playerid, COLOR_WHITE, "* %s ??????? ????? ? ???????? %i.", GetNameWithMask(playerid), random(6)+1);
	return 1;
}

CMD:showdown(playerid, params[])
{
	if(GetPVarInt(playerid, "SummCards") < 1) return SCM(playerid, COLOR_LIGHTRED, "? ??? ??? ????.");
	ShowPlayerCardsToAll(playerid);
	ClearPackCards(playerid);
	return 1;
}

CMD:givecard(playerid, params[])
{
	new id;
	if(sscanf(params,"u",id))
		return SendSyntaxMessage(playerid, "/givecard [playerid/PartOfName]");

	if(-1 == IsPlayerHasItem(playerid, INV_CARDS))
		return SCM(playerid, COLOR_LIGHTRED, "? ??? ??? ????????? ????.");

	if(!IsPlayerLogged(id))
		return SendNotConnected(playerid);

	if(!PlayerNearPlayer(5.0, playerid, id))
		return SendNotNearPlayer(playerid);

	if(GetPVarInt(id, "SummCards") > 6)
		return SCM(playerid, COLOR_LIGHTRED, "? ????? ?????? ?????????? ????!");

	new newcarid, newcaridlear;
	GetPlayerSummCard(playerid);

	if(PlayerSumm[playerid] < 1)
		return SCM(playerid, COLOR_LIGHTRED, "? ?????? ?????? ??? ????.");

	GivePlayerCard(playerid, newcarid, newcaridlear);
	PlayerCurrentCards[id][GetPVarInt(id, "SummCards")][0] = newcarid;
	PlayerCurrentCards[id][GetPVarInt(id, "SummCards")][1] = newcaridlear;
	SetPVarInt(id, "SummCards", GetPVarInt(id, "SummCards")+1);

	SendClientMessageEx(id, COLOR_WHITE, "?? ???????? ?????: %s%s", exicards[newcarid][0], GetTypeCard(newcaridlear));
	ShowPlayerCards(id);

	if(id == playerid)
		cmd::ame(playerid, "??????? ???? ???????????? ?????.");
	else
	{
	    new mes[128];
	    format(mes, sizeof(mes), "???????? ???????????? ????? %s.", GetNameWithMask(id));
		cmd::ame(playerid, mes);
	}
	return 1;
}
CMD:pay(playerid, params[])
{
    if(IsPlayerInjured(playerid) != 0 || pTemp[playerid][pTaserTime] || pTemp[playerid][pCuffed])
		return SCM(playerid, COLOR_GREY, "?? ?? ?????? ???????????? ?????? ??????? ????? ??????.");

	new userid,
		amount;

	if(sscanf(params,"ud", userid, amount))
		return SendSyntaxMessage(playerid, "/pay [playerid/PartOfName] [text]");

	if(userid == playerid)
		return SCM(playerid, COLOR_LIGHTRED, "?????? ???? ??????.");

	if(PlayerInfo[playerid][pHours] < 2)
		return SCM(playerid, COLOR_LIGHTRED, "?? ???????? ????? 2 ????? ?? ???????. ?????? ??????? ??????????.");

	if(GetPVarInt(playerid, #just_paid) > gettime())
		return SendErrorMessage(playerid, "????????? 2 ???????.");

	if(!IsPlayerLogged(userid))
		return SendNotConnected(playerid);

	if(amount > GetCash(playerid) || amount <= 0)
		return SendNotCash(playerid);

	if(!PlayerNearPlayer(3.0, playerid, userid))
		return SendNotNearPlayer(playerid);

	SetPVarInt(playerid, #just_paid, gettime() + 2);

	new money1 = PlayerInfo[playerid][pCash],
		money2 = PlayerInfo[userid][pCash];

	GiveCash(playerid, -amount);
	GiveCash(userid, amount);

	PlaySound(playerid, 1052);
	PlaySound(userid, 1052);

	SendClientMessageEx(playerid, COLOR_GRAD1, "?? ???????? $%i %s[ID:%i].", amount, GetNameWithMask(userid), userid);
	SendClientMessageEx(userid, COLOR_GRAD1, "?? ???????? $%i ?? %s[ID:%i].", amount, GetNameWithMask(playerid), playerid);

	AMSG(COLOR_YELLOWG, "AdmCmd: %s (ID: %i) ??????? %s (ID: %i) $%i", GetNameEx(playerid), playerid, GetNameEx(userid), userid, amount);

	new mes[256];
	format(mes, 128, "??????? ?????? ? ???????? ?? %s.", GetNameWithMask(userid));
	cmd::me(playerid, mes);

    format(mes, sizeof(mes), "%s [MYSQL: %i | IP: %s | ??????(????): %i | ??????(?????): %i] ??????? ?????? %s [MYSQL: %i | IP: %s | ??????(????): %i | ??????(?????): %i] -- $%i",
	GetName(playerid), PlayerInfo[playerid][pID], GetPlayerIP(playerid), money1, GetCash(playerid),
	GetName(userid), PlayerInfo[userid][pID], GetPlayerIP(userid), money2, GetCash(userid), amount);
    insert_log(mes, MONEY_LOG, 1, playerid);
	return 1;
}

CMD:licenses(playerid, params[])
{
	new userid;
	if(sscanf(params,"u", userid))
		return SendSyntaxMessage(playerid, "/licenses [playerid/PartOfName]");

	if(userid == playerid)
	{
		cmd::ame(playerid, "??????? ???? ID ?????.");
		ShowLicenses(playerid, playerid);
		return 1;
	}

	if(!IsPlayerLogged(userid))
		return SendNotConnected(playerid);

	if(!PlayerNearPlayer(8.0, playerid, userid))
		return SendNotNearPlayer(playerid);

	new mes[128];
	format(mes, sizeof(mes), "?????????? ID ????? %s.", GetNameWithMask(userid));
	cmd::ame(playerid, mes);
	ShowLicenses(playerid, userid);
	return 1;
}
//================================
CMD:acceptdeath(playerid, params[])
{
    if(0 == IsPlayerInjured(playerid))
        return SendErrorMessage(playerid, "?? ?? ??????/??????.");

	new mes[128];
    format(mes, sizeof(mes), "Wait %i to use that command.", pTemp[playerid][pInjuredTime]);

	if(pTemp[playerid][pInjuredTime])
		return ErrorMsg(playerid, mes);

    if(PlayerInfo[playerid][pAJailed] != 0)
	{
		SetInterior(playerid, 18);
		SetWorld(playerid, playerid + 100);
		SetPlayerPosEx(playerid, -219.4580,1410.6747,27.7734);
		SendClientMessageEx(playerid, COLOR_WHITE,"?? ?????????? ? ?????-??????. ????: %i ?????.", PlayerInfo[playerid][pAJailTime]/60);
		return 1;
	}
	else if(PlayerInfo[playerid][pJailed])
	{
	    PutPlayerInPrison(playerid);
	}
	else
	{
    	SetPlayerPosEx(playerid, 1177.4866,-1323.9749,14.0731);
		SetPlayerFacingAngle(playerid, 270.0);
		SetInterior(playerid, 0);
		SetWorld(playerid, 0);

		if(PlayerInfo[playerid][pInjured] == 1)
	    	SCM(playerid, COLOR_LIGHTRED, "?? ??????????? ? ?????????.");
		else if(PlayerInfo[playerid][pInjured] == 2)
			SCM(playerid, COLOR_LIGHTRED, "?? ??????? ?????? ?????? ?????????.");
	}
	ResetDamages(playerid);
	SetPlayerHealth(playerid, 100.0);
	StopPlayerAnims(playerid);
	UnFreezePlayer(playerid);
	return 1;
}
//============0========
CMD:note(playerid, params[])
{
	new option[7], secoption[128];
	if(sscanf(params, "s[7]S(NULL)[128]", option, secoption))
	{
		SendSyntaxMessage(playerid, "/note [????????]");
		SCM(playerid, COLOR_HELPS,"_______________________________________________");
		SCM(playerid, COLOR_HELPS,"?????????: ?? ?????? ?????? ????? ? 24-7!");
		SCM(playerid, COLOR_HELPS,"/note show - ?????????? ?????? ???????.");
		SCM(playerid, COLOR_HELPS,"/note create - ???????? ??????? ? ??????? ?????.");
		SCM(playerid, COLOR_HELPS,"/note remove - ??????? ???? ?? ???????.");
		SCM(playerid, COLOR_HELPS,"/note give - ???????? ???????????? ?????? ??????? ??????.");
		SCM(playerid, COLOR_HELPS,"/note edit - ???????? ????? ???????.");
		SCM(playerid, COLOR_HELPS,"_______________________________________________");
		return 1;
	}
	if(CompareStrings(option, "show"))
	{
		cmd::ame(playerid, "?????? ??????? ?? ??????? ? ??????? ?? ????.");
		new count = 0;
		for(new i = 0; i < MAX_PLAYER_NOTES; i++)
		{
			if(PlayerNotes[playerid][i][noteOn] != 1)
			    continue;

			SendClientMessageEx(playerid, COLOR_HELPS, "[???????] ??????? (%i): %s", i+1, PlayerNotes[playerid][i][noteText]);
			count++;
		}

		if(count == 0)
			return SCM(playerid, COLOR_YELLOWG, "? ??? ??? ???????.");

		return 1;
	}
	else if(CompareStrings(option, "edit"))
	{
		new slot,
			text[128];

		if(sscanf(params, "{s[7]}ds[128]", slot, text))
			return SendSyntaxMessage(playerid, "/note edit [???? ???????] [????? ?????]");

		if(-1 == IsPlayerHasItem(playerid, INV_PEN))
			return SendSyntaxMessage(playerid, "? ??? ??? ?????.");

		if(slot < 1 || slot > MAX_PLAYER_NOTES)
			return SendErrorMessage(playerid, "???????? ???? 1 - %i.", MAX_PLAYER_NOTES);

		if(strlen(text) < 1 || strlen(text) > 127)
		    return SendErrorMessage(playerid, "????? ?????? 1 - 127.");

		slot = slot - 1;
		if(PlayerNotes[playerid][slot][noteOn] != 1)
			return SendSyntaxMessage(playerid, "? ???? ????? ??? ???????.");

		SendNoteMessage(playerid, "?? ??????? ???????? ??????? ? ????? %i, ??: %s", slot+1, text);
		format(PlayerNotes[playerid][slot][noteText], 128, "%s", text);

		new query[128 + 128];
		mysql_format(dbHandle, query, sizeof(query), "UPDATE `player_notes` SET `text` = '%e' WHERE `id` = %i", text, PlayerNotes[playerid][slot][noteID]);
		mysql_tquery(dbHandle, query);
		return 1;
	}
	else if(CompareStrings(option, "create"))
	{
		new text[128];

		if(sscanf(params, "{s[7]}s[128]", text))
			return SendSyntaxMessage(playerid, "/note create [text]");

		if(-1 == IsPlayerHasItem(playerid, INV_PEN))
			return SendSyntaxMessage(playerid, "? ??? ??? ?????.");

        if(strlen(text) < 1 || strlen(text) > 127)
		    return SendErrorMessage(playerid, "????? ?????? 1 - 127.");

		new noteid = -1;
		for(new i = 0; i < MAX_PLAYER_NOTES; i++)
		{
			if(PlayerNotes[playerid][i][noteOn] == 1)
			    continue;

			noteid = i;
			break;
		}

		if(noteid == -1)
			return SendErrorMessage(playerid, "? ???????? ??? ????? ??? ??????.");

		format(PlayerNotes[playerid][noteid][noteText], 128, "%s", text);
        PlayerNotes[playerid][noteid][noteOn] = 1;

        cmd::ame(playerid, "?????? ??????? ?? ???????, ? ??? ?? ??????? ? ????.");
		SendNoteMessage(playerid, "??????? (%i) ??????? ???????.", noteid+1);

		new query[128 + 128];
		mysql_format(dbHandle, query, sizeof(query), "INSERT INTO `player_notes` (userid, text) VALUES (%i, '%e')", PlayerInfo[playerid][pID], text);
		mysql_tquery(dbHandle, query, "OnNoteInsert", "ii", playerid, noteid);
		return 1;
	}
	else if(CompareStrings(option, "remove"))
	{
		new slot;
		if(sscanf(params, "{s[7]}d", slot))
			return SendSyntaxMessage(playerid, "/note remove [???? ???????]");

		if(slot < 1 || slot > MAX_PLAYER_NOTES)
			return SendErrorMessage(playerid, "???????? ???? 1 - %i.", MAX_PLAYER_NOTES);

		slot = slot - 1;

		if(PlayerNotes[playerid][slot][noteOn] != 1)
			return SendSyntaxMessage(playerid, "? ???? ????? ??? ???????.");

        cmd::ame(playerid, "?????? ??????? ?? ???????, ????? ???? ?????? ???????? ?? ???? ? ???????? ?? ?? ?????.");
		SendNoteMessage(playerid, "??????? ??? ?????? %i ???? ??????? ???????.", slot+1);

		new query[128];
		mysql_format(dbHandle, query, sizeof(query), "DELETE FROM `player_notes` WHERE `id` = %i", PlayerNotes[playerid][slot][noteID]);
		mysql_tquery(dbHandle, query);

		PlayerNotes[playerid][slot][noteOn] = 0;
		PlayerNotes[playerid][slot][noteID] = 0;
		format(PlayerNotes[playerid][slot][noteText], 128, "");
		return 1;
	}
	else if(CompareStrings(option, "give"))
	{
		new targetid,
			slot;

		if(sscanf(params, "{s[7]}du", slot, targetid))
			return SendSyntaxMessage(playerid, "/note give [???? ???????] [playerid/PartOfName]");

		if(slot < 1 || slot > MAX_PLAYER_NOTES)
			return SendErrorMessage(playerid, "???????? ???? 1 - %i.", MAX_PLAYER_NOTES);

		slot = slot - 1;

		if(PlayerNotes[playerid][slot][noteOn] != 1)
			return SendSyntaxMessage(playerid, "? ???? ????? ??? ???????.");

		if(targetid == playerid)
			return SCM(playerid, COLOR_WHITE, "?? ?? ?????? ???? ??????? ?????? ????.");

		if(!IsPlayerLogged(targetid))
			return SendNotConnected(playerid);

		if(!PlayerNearPlayer(3.0, playerid, targetid))
			return SendNotNearPlayer(playerid);

        new noteid = -1;
		for(new i = 0; i < MAX_PLAYER_NOTES; i++)
		{
			if(PlayerNotes[targetid][i][noteOn] == 1)
			    continue;

			noteid = i;
			break;
		}

		if(noteid == -1)
			return SendErrorMessage(playerid, "? ???????? ?????? ??? ????? ??? ??????.");

        new mes[128];
		format(mes, sizeof(mes), "??????? ??????? ?? ???????, ????? ???? ?????? ???????? ? ???????? ?? %s.", GetNameWithMask(targetid));
		cmd::ame(playerid, mes);

		SendNoteMessage(playerid, "?? ???????? ??????? (%i) ?????? %s (ID: %i).", slot+1, GetNameWithMask(targetid), targetid);
		SendNoteMessage(targetid, "?? ???????? ??????? (%i) ?? ?????? %s (ID: %i).", noteid+1, GetNameWithMask(playerid), playerid);

		new query[128];
		mysql_format(dbHandle, query, sizeof(query), "UPDATE `player_notes` SET `userid` = %i WHERE `id` = %i", PlayerInfo[targetid][pID], PlayerNotes[playerid][slot][noteID]);
		mysql_tquery(dbHandle, query);

		PlayerNotes[targetid][noteid][noteID] = PlayerNotes[playerid][slot][noteID];
		format(PlayerNotes[targetid][noteid][noteText], 128, "%s", PlayerNotes[playerid][slot][noteText]);
		PlayerNotes[targetid][noteid][noteOn] = 1;

		PlayerNotes[playerid][slot][noteID] = 0;
		PlayerNotes[playerid][slot][noteOn] = 0;
		return 1;
	}
	SendSyntaxMessage(playerid, "/note [show/create/remove/give/edit]");
	return 1;
}

CMD:myfish(playerid, params[])
{
	SendFishMessage(playerid, "??? ????? ???????? ??? ?????????? %i ??????.", PlayerInfo[playerid][pFishCount]);

	if(PlayerInfo[playerid][pFishCount] >= 300)
		return SendFishMessage(playerid, "?? ?????? ????? ????, /unloadfish.");

	return 1;
}

CMD:stopfish(playerid, params[])
{
    if(pTemp[playerid][pFishTime] == 0)
	    return SendErrorMessage(playerid, "?? ?? ??????????? ??????.");

    pTemp[playerid][pFishTime] = 0;
    StopPlayerAnims(playerid);
	return 1;
}

CMD:unloadfish(playerid, params[])
{
	if(!PlayerToPoint(4,playerid,2478.0762,-2707.8352,3.0000))
	{
		SendFishMessage(playerid, "?? ?? ?? ????? ???????? ????.");
		Waypoint_Set(playerid, 2478.0762, -2707.8352, 3.0000, 8.0);
		return 1;
	}

	if(PlayerInfo[playerid][pFishTime] > gettime())
	    return SendErrorMessage(playerid, "?? ?????? ????? ???? ????? - %s.", ConvertSecond(PlayerInfo[playerid][pFishTime] - gettime()));

	if(PlayerInfo[playerid][pFishCount] < 300)
		return SendFishMessage(playerid, "? ??? ???????????? ????, ??????????? ?????????? ?????????? 300 ??????.");

    new money = floatround(0.7 * float(PlayerInfo[playerid][pFishCount]));
	SendFishMessage(playerid, "?? ????????? %i ?????? ???? ?? $%i.", PlayerInfo[playerid][pFishCount], money);
	SendFishMessage(playerid, "?????? ?? ?????? ????????? ??????? ? ???????.");
    SendFishMessage(playerid, "??????? ????????? ???? ????? ????? ?????? ????? 40 ?????.");

	GiveCash(playerid, money);
	PlayerInfo[playerid][pFishCount] = 0;
	PlayerInfo[playerid][pFishTime] = gettime() + 2400;
	return 1;
}

CMD:fishzone(playerid, params[])
{
	if(GetPVarInt(playerid, #show_fish) == 1)
	{
	    DeletePVar(playerid, #show_fish);
	    GangZoneHideForPlayer(playerid, gz_fish[0]);
	    GangZoneHideForPlayer(playerid, gz_fish[1]);
	    GangZoneHideForPlayer(playerid, gz_fish[2]);
	    GangZoneHideForPlayer(playerid, gz_fish[3]);
	    SCM(playerid, -1, "????? ????? ????????.");
	    return 1;
	}

	SetPVarInt(playerid, #show_fish, 1);
	GangZoneShowForPlayer(playerid, gz_fish[0], 0xFF0000AA);
	GangZoneShowForPlayer(playerid, gz_fish[1], 0xFF0000AA);
	GangZoneShowForPlayer(playerid, gz_fish[2], 0xFF0000AA);
	GangZoneShowForPlayer(playerid, gz_fish[3], 0xFF0000AA);
	SCM(playerid, -1, "????? ????? ???????? ?? ????? ???????? ?????? (ESC > Maps).");
	return 1;
}

CMD:fish(playerid, params[])
{
    if(PlayerInfo[playerid][pFishCount] >= 1000)
		return SendFishMessage(playerid, "?? ?? ?????? ?????? ?????? ????, ? ??? ???????????? ?????????? ??????, /unloadfish.");

	if(pTemp[playerid][pFishTime] != 0)
	    return SendErrorMessage(playerid, "?? ??? ????????? ??????.");

	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
	    return SendErrorMessage(playerid, "?? ?????? ?????????? ??? ??????????.");

	new id = -1;
	for(new i; i != MAX_PLAYER_ATTACH; i++)
	{
	    if(AttachInfo[playerid][i][aID] == 0 || AttachInfo[playerid][i][aModel] != 18632 || AttachInfo[playerid][i][aUsed] == 0)
	        continue;

		id = i;
		break;
	}

	if(id == -1)
	    return SendErrorMessage(playerid, "? ??? ?????? ???? ??????.");

	id = -1;

	for(new i; i != 4; i++)
	{
	    if(0 == IsPlayerInCube(playerid, fish_pos[i][0], fish_pos[i][1], fish_pos[i][2], fish_pos[i][3]))
	        continue;

		id = i;
		break;
	}

    if(id == -1)
	    return SendErrorMessage(playerid, "?? ?????? ?????????? ? ?????????? ????? ????? (/fishzone).");

	new veh = 0;
	if(id != 0 && ((veh = GetNearVehicle(playerid, 5.0)) == 0 || !IsABoat(veh)))
	    return SendErrorMessage(playerid, "?? ?????? ?????????? ????? ? ??????.");

	if(0 == OnPlayAnim(playerid, "SWORD", "SWORD_BLOCK", 4.1, 0, 0, 0, 1, 0))
		return SendErrorMessage(playerid, "?? ?? ?????? ?????? ???? ?.?. ???????? ?? ????? ???? ?????????.");

	pTemp[playerid][pFishTime] = 10 + random(10);
	GameTextForPlayer(playerid, "~w~WAITING...", pTemp[playerid][pFishTime] * 1000, 6);
	return 1;
}

//===========Bank commands===========//
CMD:atm(playerid, params[])
{
    if(ATM_Nearest(playerid) == -1)
		return 1;

	Dialog_Show(playerid, ATMMenu, DIALOG_STYLE_LIST, "????", "- ??????\n- ????? ??????\n- ???????? ??????\n- ????????? ??????", "???????", "??????");
	return 1;
}

Dialog:ATMMenu(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return 1;

	switch(listitem)
	{
	    case 0:
		{
		    static const str_size[] = "?????????? ????: {"COL_GREEN"}$%i.\n?????????????? ????: {"COL_GREEN"}$%i\n???: {"COL_GREEN"}$%i";
		    new mes[sizeof(str_size) - 4 + 24];
		    format(mes, sizeof(mes), str_size, PlayerInfo[playerid][pBank], PlayerInfo[playerid][pSavings], PlayerInfo[playerid][pPayCheckMoney]);
			Dialog_Show(playerid, ATMBack, DIALOG_STYLE_LIST, "??????", mes, "?????", "");
		}
		case 1: Dialog_Show(playerid, ATMWithdraw, DIALOG_STYLE_INPUT, "????? ??????", "{FFFFFF}??????? ?????, ??????? ?? ?????? ?????:", "?????", "?????");
		case 2: Dialog_Show(playerid, ATMDeposit, DIALOG_STYLE_INPUT, "???????? ??????", "{FFFFFF}??????? ?????, ??????? ?? ?????? ????????:", "????????", "?????");
		case 3: Dialog_Show(playerid, ATMTransfer, DIALOG_STYLE_INPUT, "??????? ?????", "{FFFFFF}??????? ??? / ID ?????????? ? ????? ????:", "?????", "?????");
	}
	return 1;
}

Dialog:ATMBack(playerid, response, listitem, inputtext[])
{
	if(response)
	    cmd::atm(playerid, "");

	return 1;
}

Dialog:ATMTransfer(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return cmd::atm(playerid, "");

	new userid;
	sscanf(inputtext, "u", userid);
	if(0 == IsPlayerLogged(userid) || userid == playerid)
	{
	    Dialog_Show(playerid, ATMTransfer, DIALOG_STYLE_INPUT, "??????? ?????", "{FFFFFF}??????? ??? / ID ?????????? ? ????? ????:", "?????", "?????");
	    return SCM(playerid, COLOR_LIGHTRED, "?????????? ?? ??????.");
	}

	static const str_size[] = "??????? ????? - {FFFF00}%s";
	new mes[sizeof(str_size) - 2 + MAX_PLAYER_NAME + 1];
	format(mes, sizeof(mes), str_size, GetNameEx(userid));
	SetPVarInt(playerid, #transfer_player, userid);
	Dialog_Show(playerid, ATMTransfer2, DIALOG_STYLE_INPUT, mes, "{FFFFFF}??????? ?????, ??????? ?? ?????? ?????????:", "???????", "??????");
	return 1;
}

Dialog:ATMTransfer2(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return cmd::atm(playerid, "");

	new userid = GetPVarInt(playerid, #transfer_player),
	    amount = strval(inputtext);
	DeletePVar(playerid, #transfer_player);
	if(0 == IsPlayerLogged(userid) || userid == playerid)
	{
	    Dialog_Show(playerid, ATMTransfer, DIALOG_STYLE_INPUT, "??????? ?????", "{FFFFFF}??????? ??? / ID ?????????? ? ????? ????:", "?????", "?????");
	    return SCM(playerid, COLOR_LIGHTRED, "?????? ????????! ?????????? ?? ??????.");
	}
	if(GetBankCash(playerid) < amount || amount < 1)
	{
	    static const str_size[] = "??????? ????? - {FFFF00}%s";
		new mes[sizeof(str_size) - 2 + MAX_PLAYER_NAME + 1];
		format(mes, sizeof(mes), str_size, GetNameEx(userid));
		SetPVarInt(playerid, #transfer_player, userid);
		Dialog_Show(playerid, ATMTransfer2, DIALOG_STYLE_INPUT, mes, "{FFFFFF}??????? ?????, ??????? ?? ?????? ?????????:", "???????", "??????");
 		return SCM(playerid, COLOR_LIGHTRED, "? ??? ??? ????? ????? ?? ?????????? ?????.");
	}

	BankTransfer(playerid, userid, amount);
	cmd::atm(playerid, "");
	return 1;
}

Dialog:ATMWithdraw(playerid, response, listitem, inputtext[])
{
	if(!response)
		return cmd::atm(playerid, "");

	new amount = strval(inputtext);
    if (amount > GetBankCash(playerid) || amount < 1)
	{
        Dialog_Show(playerid, ATMWithdraw, DIALOG_STYLE_INPUT, "????? ??????", "{FFFFFF}??????? ?????, ??????? ?? ?????? ?????:", "?????", "?????");
		return SCM(playerid, COLOR_LIGHTRED, "? ??? ??? ????? ????? ?? ?????????? ?????.");
	}

	BankWithdraw(playerid, amount);
	cmd::atm(playerid, "");
	return 1;
}

Dialog:ATMDeposit(playerid, response, listitem, inputtext[])
{
	if(!response)
		return cmd::atm(playerid, "");

	new amount = strval(inputtext);
    if (amount > GetCash(playerid) || amount < 1)
	{
        Dialog_Show(playerid, ATMDeposit, DIALOG_STYLE_INPUT, "???????? ??????", "{FFFFFF}??????? ?????, ??????? ?? ?????? ????????:", "????????", "?????");
		return SCM(playerid, COLOR_LIGHTRED, "? ??? ??? ????? ????? ?? ?????.");
	}

	BankDeposit(playerid, amount);
	cmd::atm(playerid, "");
	return 1;
}

CMD:balance(playerid, params[])
{
	if(0 == Bank_Nearest(playerid))
		return SCM(playerid, COLOR_LIGHTRED, "?? ?? ? ?????.");

	SendClientMessageEx(playerid, COLOR_FADE1, "[????]: ?? ????? ?????????? ????? $%i.", PlayerInfo[playerid][pBank]);
    SendClientMessageEx(playerid, COLOR_FADE1, "[????]: ?????????????? ????: $%i. ???: $%i", PlayerInfo[playerid][pSavings], PlayerInfo[playerid][pPayCheckMoney]);
	return 1;
}

CMD:transfer(playerid, params[])
{
	new userid,
		amount;

	if(0 == Bank_Nearest(playerid))
		return SCM(playerid, COLOR_LIGHTRED, "?? ?? ? ?????.");

	if(sscanf(params,"ud",userid,amount))
	{
		SendSyntaxMessage(playerid, "/transfer [playerid/PartOfName] [text].");
		SendClientMessageEx(playerid,COLOR_FADE1,"[????]: ? ??? $%i ?? ?????????? ?????.", PlayerInfo[playerid][pBank]);
		return 1;
	}

	if(userid == playerid)
		return SCM(playerid, COLOR_LIGHTRED, "????????? ??????? ???????? ??????? ?????? ???? ??????????.");

	if(!IsPlayerLogged(userid))
		return SendNotConnected(playerid);

	if(GetBankCash(playerid) < amount || amount < 1)
		return SCM(playerid, COLOR_LIGHTRED, "? ??? ??? ????? ????? ?? ?????.");

	BankTransfer(playerid, userid, amount);
	return 1;
}

stock BankTransfer(playerid, userid, amount)
{
    if(GetPVarInt(playerid, #just_transfer) > gettime())
		return SendErrorMessage(playerid, "????????? 25 ??????.");

    if(userid == playerid)
		return 1;

	if(!IsPlayerLogged(userid))
		return 1;

	if(GetBankCash(playerid) < amount || amount < 1)
		return 1;

    new money1 = PlayerInfo[playerid][pBank],
		money2 = PlayerInfo[userid][pBank];

	GiveBankCash(playerid, -amount);
	GiveBankCash(userid, amount);

	SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "?? ?????? ??? ????????? ??????? $%i ?? ???? %s.", amount, GetNameEx(userid));
	SendClientMessageEx(userid, COLOR_LIGHTBLUE, "??? ???? ?????????? $%i ?? ??? ?????????? ????. ??: %s.", amount, GetNameEx(playerid));

	new mes[256];
    format(mes, sizeof(mes), "%s [MYSQL: %i | IP: %s | ????(????): %i | ????(?????): %i] ??????? ?????? ?? ????? %s [MYSQL: %i | IP: %s | ????(????): %i | ????(?????): %i] -- $%i",
	GetName(playerid), PlayerInfo[playerid][pID], GetPlayerIP(playerid), money1, PlayerInfo[playerid][pBank],
	GetName(userid), PlayerInfo[userid][pID], GetPlayerIP(userid), money2, PlayerInfo[userid][pBank], amount);
    insert_log(mes, MONEY_LOG, 2, playerid);

    SetPVarInt(playerid, #just_transfer, gettime() + 25);

    AMSG(COLOR_YELLOWG, "AdmCmd: %s (ID: %i) ??????? ?? ?????????? ???? %s (ID: %i) - $%i", GetNameEx(playerid), playerid, GetNameEx(userid), userid, amount);
	return 1;
}

CMD:deposit(playerid, params[])
{
	new amount;

	if(0 == Bank_Nearest(playerid))
		return SCM(playerid, COLOR_LIGHTRED, "?? ?? ? ?????.");

	if(sscanf(params,"d",amount))
	{
		SendSyntaxMessage(playerid, "/deposit [text].");
		SendClientMessageEx(playerid, COLOR_FADE1, "[????]: ? ??? $%i ?? ?????????? ?????.", PlayerInfo[playerid][pBank]);
		return 1;
	}

    if (amount > GetCash(playerid) || amount < 1)
		return SCM(playerid, COLOR_LIGHTRED, "? ??? ??? ????? ????? ?? ?????.");

	BankDeposit(playerid, amount);
	return 1;
}

stock BankDeposit(playerid, amount)
{
    if (amount > GetCash(playerid) || amount < 1)
		return 1;

    new money = PlayerInfo[playerid][pCash],
		bank = PlayerInfo[playerid][pBank];
	GiveCash(playerid,-amount);
	SCM(playerid, COLOR_WHITE, "|___ BANK STATEMENT ___|");
	SendClientMessageEx(playerid, COLOR_GRAD2, "  ?????? ??????: $%i", GetBankCash(playerid));
	GiveBankCash(playerid, amount);
	SendClientMessageEx(playerid, COLOR_GRAD4, "  ??????? ?? ????: $%i",amount);
	SCM(playerid, COLOR_GRAD6, "|-----------------------------------------|");
	SendClientMessageEx(playerid, COLOR_WHITE, "  ????? ??????: $%i", GetBankCash(playerid));

    new mes[256];
	format(mes, sizeof(mes), "%s [MYSQL: %i | IP: %s | ??????(????): %i | ??????(?????): %i | ????(????): %i | ????(?????): %i] ??????? ? ???? -- $%i",
	GetName(playerid), PlayerInfo[playerid][pID], GetPlayerIP(playerid), money, GetCash(playerid), bank, PlayerInfo[playerid][pBank], amount);
    insert_log(mes, MONEY_LOG, 3, playerid);
	return 1;
}

CMD:withdraw(playerid, params[])
{
	new amount;

	if(0 == Bank_Nearest(playerid))
		return SCM(playerid, COLOR_LIGHTRED, "?? ?? ? ?????.");

	if(sscanf(params,"d",amount))
	{
		SendSyntaxMessage(playerid, "/withdraw [text].");
		SendClientMessageEx(playerid, COLOR_FADE1, "[????]: ? ??? $%i ?? ?????????? ?????.", PlayerInfo[playerid][pBank]);
		return 1;
	}

    if (amount > GetBankCash(playerid) || amount < 1)
		return SCM(playerid, COLOR_LIGHTRED, "? ??? ??? ????? ????? ?? ?????????? ?????.");

	BankWithdraw(playerid, amount);
	return 1;
}

stock BankWithdraw(playerid, amount)
{
    if (amount > GetBankCash(playerid) || amount < 1)
		return 1;

    new money = PlayerInfo[playerid][pCash],
		bank = PlayerInfo[playerid][pBank];
	GiveCash(playerid,amount);
	GiveBankCash(playerid, -amount);

	SendClientMessageEx(playerid, COLOR_YELLOW, "[????]: ?? ????? $%i ?? ?????? ??????????? ?????. ???????: $%i.", amount,GetBankCash(playerid));

    new mes[256];
	format(mes, sizeof(mes), "%s [MYSQL: %i | IP: %s | ??????(????): %i | ??????(?????): %i | ????(????): %i | ????(?????): %i] ???? ? ????? -- $%i",
	GetName(playerid), PlayerInfo[playerid][pID], GetPlayerIP(playerid), money, GetCash(playerid), bank, PlayerInfo[playerid][pBank], amount);
    insert_log(mes, MONEY_LOG, 4, playerid);
	return 1;
}

CMD:savings(playerid, params[])
{
	new amount;
	if(0 == Bank_Nearest(playerid))
		return SCM(playerid, COLOR_LIGHTRED, "?? ?? ? ?????.");

	if(PlayerInfo[playerid][pSavings] == 0)
	{
		if(sscanf(params,"d",amount))
			return SendSyntaxMessage(playerid, "/savings [?????????? ?????]");

		if(amount < 35000 || amount > 100000)
			return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???????? ? ????????? $35.000 - $100.000.");

		if(GetCash(playerid) < amount)
			return SendNotCash(playerid);

		SendClientMessageEx(playerid, COLOR_YELLOW, "?? ???????? $%i ?? ?????????? ??? 1%%. (??? ???? ????? ????? ???????? ???????? ?? ?????, ??????????? ??????? /savings).", amount);
		GiveCash(playerid, -amount);
		PlayerInfo[playerid][pSavings] = amount;
		return 1;
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_YELLOW, "?? ????? ???? ?????????? ?? ????? $%i.", PlayerInfo[playerid][pSavings]);
		GiveCash(playerid, PlayerInfo[playerid][pSavings]);
		PlayerInfo[playerid][pSavings] = 0;
	}
	return 1;
}

CMD:paycheck(playerid, params[])
{
	if(0 == Bank_Nearest(playerid))
		return SCM(playerid, COLOR_LIGHTRED, "?? ?? ? ?????.");

	if(PlayerInfo[playerid][pPayCheckMoney] < 1)
	    return SendErrorMessage(playerid, "?? ???? ??? ?????.");

	SendClientMessageEx(playerid, COLOR_YELLOWG, "?? ?????????? $%i ?? ?????? ????.", PlayerInfo[playerid][pPayCheckMoney]);
	GiveCash(playerid, PlayerInfo[playerid][pPayCheckMoney]);
	PlayerInfo[playerid][pPayCheckMoney] = 0;
	return 1;
}

//===========Bank commands===========//
CMD:lastad(playerid, params[])
{
	new mes[156 * MAX_LAST_ADVERT + 9] = "{FFFFFF}";
	for(new i; i != MAX_LAST_ADVERT; i++)
	{
	    if(strlen(AdvertInfo[i][advertText]) == 0)
	        continue;

        if(strlen(AdvertInfo[i][advertText]) > MAXLEN)
		{
			new pos = MAXLEN;
			if(pos < MAXLEN-1) pos = MAXLEN;
			format(mes, sizeof(mes), "%s%.*s ...\n", mes, pos, AdvertInfo[i][advertText]);
			format(mes, sizeof(mes), "%s... %s", mes, AdvertInfo[i][advertText][pos]);
		}
		else
			format(mes, sizeof(mes), "%s%s", mes, AdvertInfo[i][advertText]);

		strcat(mes, "\n\n");
	}

	if(strlen(mes) < 9)
	    return SCM(playerid, -1, "?????? ????????? ?????????? ????.");

	Dialog_Show(playerid, None, DIALOG_STYLE_MSGBOX, "?????? ????????? ??????????", mes, "???????", "");
	return 1;
}

ALTX:advert("/ad");
CMD:advert(playerid, params[])
{
	if(PlayerInfo[playerid][pNumber] == 0)
		return SendErrorMessage(playerid, "??? ?????? ?????????? ??? ????? ???????.");

    if(isnull(params))
		return SendSyntaxMessage(playerid, "/ad [?????????]");

    if(PlayerInfo[playerid][pSettings] & togAdv)
		return SCM(playerid, COLOR_LIGHTRED, "??????? ???????? ????? ?????????? (/togads).");

	new prem_time = (PlayerInfo[playerid][pPremium] > 1)?(30):(0);

    if(advert_time - prem_time > gettime())
		return SendErrorMessage(playerid, "?????????? ????????? %i ??????.", advert_time - gettime() - prem_time);

    new bizid = -1;
    if((bizid = Advertisement_Nearest(playerid)) == -1)
        return SCM(playerid, COLOR_LIGHTRED, "?? ?? ? ?????????? ????????!");

	if(BizInfo[bizid][bizLocked] == 1)
		return GameTextForPlayer(playerid, "~r~Locked", 5000, 1);

	if(BizInfo[bizid][bizOwnerID] != 0 && !BizInfo[bizid][bizProduct])
	    return SendErrorMessage(playerid, "? ??????? ???????????? ?????????.");

	if(GetCash(playerid) < BizInfo[bizid][bizEntrance])
		return SendClientMessageEx(playerid,COLOR_LIGHTRED, "? ??? ?? ??????? ?????, ???? ??????????: $%i.", BizInfo[bizid][bizEntrance]);

    advert_time = gettime() + 60;

    if(BizInfo[bizid][bizOwnerID] != 0)
    {
        BizInfo[bizid][bizProduct]--;
        GiveBizCash(bizid, BizInfo[bizid][bizEntrance]);
    }
	GiveCash(playerid, -BizInfo[bizid][bizEntrance]);

	foreach(Player, i)
	{
		if(0 == IsPlayerLogged(i) || (PlayerInfo[i][pSettings] & togAdv))
		    continue;

		if(strlen(params) > MAXLEN)
		{
			new pos = MAXLEN;
			if(pos < MAXLEN-1) pos = MAXLEN;
			SendClientMessageEx(i, COLOR_ADGREEN, "[???????] %.*s ...", pos, params);
			SendClientMessageEx(i, COLOR_ADGREEN, "[???????] ... %s ???????: %i.", params[pos], PlayerInfo[playerid][pNumber]);
		}
		else
			SendClientMessageEx(i, COLOR_ADGREEN, "[???????] %s ???????: %i.", params, PlayerInfo[playerid][pNumber]);
	}

	AMSG(COLOR_ADGREEN, "%s (ID: %i) ?????????? /ad.", GetNameEx(playerid), playerid);

	new mes[156];
	format(mes, sizeof(mes), "[???????] %s ???????: %i.", params, PlayerInfo[playerid][pNumber]);

	new time = gettime(),
	    a = 0;

	for(new i; i != MAX_LAST_ADVERT; i++)
	{
		if(strlen(AdvertInfo[i][advertText]) == 0)
		{
			a = i;
			break;
		}

		if(AdvertInfo[i][advertTime] > time)
		    continue;

	    time = AdvertInfo[i][advertTime];
	    a = i;
	}

    AdvertInfo[a][advertTime] = gettime();
    format(AdvertInfo[a][advertText], 156, mes);
	return 1;
}

CMD:cad(playerid, params[])
{
	if(isnull(params))
		return SendSyntaxMessage(playerid, "/cad [?????????]");

    if(PlayerInfo[playerid][pSettings] & togAdv)
		return SCM(playerid, COLOR_LIGHTRED, "??????? ???????? ????? ?????????? (/togads).");

    new prem_time = (PlayerInfo[playerid][pPremium] > 1)?(30):(0);

    if(advert_time - prem_time > gettime())
		return SendErrorMessage(playerid, "?????????? ????????? %i ??????.", advert_time - gettime() - prem_time);

    new bizid = -1;
    if((bizid = Advertisement_Nearest(playerid)) == -1)
        return SCM(playerid, COLOR_LIGHTRED, "?? ?? ? ?????????? ????????!");

	if(BizInfo[bizid][bizLocked] == 1)
		return GameTextForPlayer(playerid, "~r~Locked", 5000, 1);

	if(BizInfo[bizid][bizOwnerID] != 0 && !BizInfo[bizid][bizProduct])
	    return SendErrorMessage(playerid, "? ??????? ???????????? ?????????.");

	if(GetCash(playerid) < BizInfo[bizid][bizEntrance])
		return SendClientMessageEx(playerid,COLOR_LIGHTRED, "? ??? ?? ??????? ?????, ???? ??????????: $%i.", BizInfo[bizid][bizEntrance]);

    advert_time = gettime() + 60;

    if(BizInfo[bizid][bizOwnerID] != 0)
    {
        BizInfo[bizid][bizProduct]--;
        GiveBizCash(bizid, BizInfo[bizid][bizEntrance]);
    }
	GiveCash(playerid, -BizInfo[bizid][bizEntrance]);

	advert_time = gettime() + 60;

	foreach(Player, i)
	{
		if(0 == IsPlayerLogged(i) || (PlayerInfo[i][pSettings] & togAdv))
		    continue;

		if(strlen(params) > MAXLEN)
		{
			new pos = MAXLEN;
			if(pos < MAXLEN-1) pos = MAXLEN;
			SendClientMessageEx(i, COLOR_GREEN, "[?????????? ????????] %.*s ...", pos, params);
			SendClientMessageEx(i, COLOR_GREEN, "[?????????? ????????] ... %s", params[pos]);
		}
		else
			SendClientMessageEx(i, COLOR_GREEN, "[?????????? ????????] %s", params);
	}

	AMSG(COLOR_GREEN, "%s (ID: %i) ?????????? /ad.", GetNameEx(playerid), playerid);

	new mes[156];
	format(mes, sizeof(mes), "[?????????? ????????] %s", params);

	new time = gettime(),
	    a = 0;

	for(new i; i != MAX_LAST_ADVERT; i++)
	{
		if(strlen(AdvertInfo[i][advertText]) == 0)
		{
			a = i;
			break;
		}

		if(AdvertInfo[i][advertTime] > time)
		    continue;

	    time = AdvertInfo[i][advertTime];
	    a = i;
	}

    AdvertInfo[a][advertTime] = gettime();
    format(AdvertInfo[a][advertText], 156, mes);
	return 1;
}

//phone
CMD:togphone(playerid, params[])
{
	SendErrorMessage(playerid, "??????????? ????????? ????????, ????? ????????? ???.");
	return 1;
}

ALTX:hangup("/hg", "/h");
CMD:hangup(playerid, params[])
{
    if(PlayerInfo[playerid][pNumber] == 0)
		return SendErrorMessage(playerid, "? ??? ??? ????????.");

	if(pTemp[playerid][pEmergency])
	{
	    pTemp[playerid][pEmergency] = 0;
	    SCM(playerid, -1, "> ?? ???????? ??????.");

	    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
		RemovePlayerAttachedObject(playerid, ATTACH_HANDS);
	    return 1;
	}

	if(pTemp[playerid][pCallLine] == INVALID_PLAYER_ID)
	    return 1;

	new targetid = pTemp[playerid][pCallLine];

	if(pTemp[playerid][pCallStatus] == 2)
	{
	    SendClientMessageEx(playerid, -1, "> ?? ????????? ???????? ? ????????? %s.", pTemp[playerid][pCallName]);
	    SendClientMessage(targetid, -1, "> ??????????? ???????? ?????.");
 	}
	else if(pTemp[playerid][pCallStatus] == 1)
	{
	    SendClientMessage(targetid, -1, "> ?? ????????? ????????? ?????.");
	    SendClientMessage(playerid, -1, "> ??????? ???????? ???????.");
 	}
	CancelCall(playerid);
	return 1;
}

CMD:rne(playerid, params[])
{
    new vehicle = GetPlayerVehicleID(playerid);
	if(PlayerInfo[playerid][pFaction] != LSPD && PlayerInfo[playerid][pFaction] != SASD)
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???? ???????????.");

	if(VehicleInfo[vehicle][carFaction] != PlayerInfo[playerid][pFaction] && !PlayerToPoint(5.0, playerid, 96.8945,-76.5486,1001.6760))
		return SCM(playerid, COLOR_LIGHTRED, "???????? ?????? ? ??????????? ??????? ??? ? ?????????? LSPD/SASD.");

	new userid;
	if(sscanf(params, "i", userid))
	    return SendSyntaxMessage(playerid, "/rne [????? ??????]");

	if(0 == IsPlayerLogged(userid) || pTemp[userid][pCallOn] != 1)
	    return SendErrorMessage(playerid, "????? ??? ????? ??????? ?? ??????.");

	if(pTemp[playerid][pPatrol])
        SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_LSPD, "* %s %s [%s] ?????? ????? ?? ??????? ?????. #%i.", GetRankName(playerid), GetNameEx(playerid), PatrolInfo[GetPatrolID(playerid)][pTemp[playerid][pPatrol]-1][patrulName], userid);
	else
		SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_LSPD, "* %s %s ?????? ????? ?? ??????? ?????. #%i.", GetRankName(playerid), GetNameEx(playerid), userid);

	Waypoint_Set(playerid, pTemp[userid][pCallPosX], pTemp[userid][pCallPosY], pTemp[userid][pCallPosZ], 3.0);
	pTemp[userid][pCallOn] = 0;
	return 1;
}

CMD:payphone(playerid, params[])
{
    if(IsPlayerInjured(playerid) != 0 || pTemp[playerid][pTaserTime] || pTemp[playerid][pCuffed])
		return SCM(playerid, COLOR_GREY, "?? ?? ?????? ???????????? ?????? ??????? ????? ??????.");

	new id = -1;
	if((id = Payphone_Nearest(playerid)) == -1)
	    return 1;

	if(PayphoneInfo[id][phUsed] != INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "???????? ??? ????????????.");

	pTemp[playerid][pPayphone] = id+1;
	PayphoneInfo[id][phUsed] = playerid;
	Dialog_Show(playerid, PayphoneCall, DIALOG_STYLE_MSGBOX, "", "", "", "");
	return 1;
}

/*Dialog:PayphoneCall()
{
	if(!response)
	{
	    if(!pTemp[playerid][pPayphone])
	        return 1;

		PayphoneInfo[pTemp[playerid][pPayphone]-1][phUsed] = INVALID_PLAYER_ID;
		pTemp[playerid][pPayphone] = 0;
	    return 1;
	}

	return 1;
}*/

CMD:call(playerid, params[])
{
    if(IsPlayerInjured(playerid) != 0 || pTemp[playerid][pTaserTime] || pTemp[playerid][pCuffed])
		return SCM(playerid, COLOR_GREY, "?? ?? ?????? ???????????? ?????? ??????? ????? ??????.");

    if(PlayerInfo[playerid][pNumber] == 0)
		return SendErrorMessage(playerid, "? ??? ??? ????????.");

    if(PlayerInfo[playerid][pPhoneOff] != 0)
        return SendErrorMessage(playerid, "??????? ????????.");

	if(0 == GetPlayerNetwork(playerid))
	    return SendErrorMessage(playerid, "??? ?????.");

	if(PlayerInfo[playerid][pPhoneAirplane] == 1)
	    return SendErrorMessage(playerid, "?????? ? ??? ?????????? - ??? ??????? ? ?????? ??????.");

    if(PlayerInfo[playerid][pJailed] != 0)
		return SCM(playerid, COLOR_WHITE, "?????? ???????????? ??????? ? ??????.");

    if(pTemp[playerid][pCallLine] != INVALID_PLAYER_ID || pTemp[playerid][pEmergency])
	    return SendErrorMessage(playerid, "? ??? ???? ????????????? ??????. ??????? /hangup ????? ???????? ??????.");

    if(!IsPlayerPhoneCreated(playerid) && IsPlayerAttachedObjectSlotUsed(playerid, 9))
        return SendErrorMessage(playerid, "???? ???? ??? ??????.");

	new number_str[32],
	    number,
	    targetid,
	    mes[52];

	if(sscanf(params,"s[32]", number_str))
	{
		SendSyntaxMessage(playerid, "/call [????? ???????? / ??????? ?? ??????]");
		if(PlayerInfo[playerid][pJailed] != 0)
		    return 1;

		SCM(playerid, COLOR_WHITE, "???????/?????? ????????: 911");
		SCM(playerid, COLOR_WHITE, "??????? ????? ???????: 991");
		SCM(playerid, COLOR_WHITE, "?????: 555");
		SCM(playerid, COLOR_WHITE, "?????? ?????????: 544");
		return 1;
	}
	number = strval(number_str);

	for(new i = 0; i != MAX_PLAYER_CONTACTS; i++)
    {
        if(PlayerContacts[playerid][i][contactOn] == 0 || strcmp(PlayerContacts[playerid][i][contactName], number_str, true) != 0)
            continue;

        number = PlayerContacts[playerid][i][contactNumber];
        break;
    }

	if((number == 544 || number == 555 || number == 911 || number == 991) && PlayerInfo[playerid][pJailed] == 0 && PlayerInfo[playerid][pAJailed] == 0)
	{
	    if(IsPlayerPhoneCreated(playerid))
	    	Phone_Destroy(playerid);

	    pTemp[playerid][pEmergency] = number;
	    switch(number)
	    {
	        case 544: SCM(playerid, COLOR_YELLOWG, "????????? (???????): ????????????, ?????? ????????? ???-???????, ??? ????? ??? ???????");
	        case 555: SCM(playerid, COLOR_YELLOWG, "????????? (???????): ????????????, ???????? ????? ???-???????, ?????? ??? ????????");
	        case 911: SCM(playerid, COLOR_YELLOWG, "????????? (???????): ?? ????????? ? ?????? ????????, ????? ??????????? ??? ?????: POLICE, LSFD?");
	        case 991: SCM(playerid, COLOR_YELLOWG, "????????? (???????): ?? ????????? ?? ??????? ????? ???????, ??????? ???? ?????????????? ? ????????.");
	    }

	    cmd::ame(playerid, "??????? ??????? ?? ???????.");
		SetPlayerAttachedObject(playerid, ATTACH_HANDS, phone_model[PlayerInfo[playerid][pPhoneModel]], 6, 0.111, -0.000999, 0.0, 77.9, -171.6, -3.40001, 1.0, 1.0, 1.0);
	    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
	    return 1;
	}

	if((targetid = GetNumberOwner(number)) == INVALID_PLAYER_ID)
	{
	    SCM(playerid, -1, "???????? (???????): ????????, ????????? ????? ?? ??????????.");
		return SCM(playerid, -1, "??????????? ???????? ?????.");
	}

    if (targetid == playerid)
    	return SendErrorMessage(playerid, "?? ??????? ???? ????? ????????.");

	if(pTemp[targetid][pCallLine] != INVALID_PLAYER_ID || pTemp[targetid][pEmergency])
	    return SendErrorMessage(playerid, "????? ?????.");

    if(PlayerInfo[targetid][pPhoneOff] != 0 || PlayerInfo[targetid][pPhoneAirplane] != 0 || 0 == GetPlayerNetwork(targetid))
        return SendErrorMessage(playerid, "??????? ??????????.");

    new find_phone[2] = {0, 0};
    for (new i = 0; i != MAX_PLAYER_CONTACTS; i ++)
	{
		if(PlayerContacts[playerid][i][contactOn] != 0 && PlayerContacts[playerid][i][contactNumber] == number)
		{
 			strmid(pTemp[playerid][pCallName], PlayerContacts[playerid][i][contactName], 0, strlen(PlayerContacts[playerid][i][contactName]), 32);
 			find_phone[0] = 1;
		}
		if(PlayerContacts[targetid][i][contactOn] != 0 && PlayerContacts[targetid][i][contactNumber] == PlayerInfo[playerid][pNumber])
		{
 			strmid(pTemp[targetid][pCallName], PlayerContacts[targetid][i][contactName], 0, strlen(PlayerContacts[targetid][i][contactName]), 32);
	        find_phone[1] = 1;
		}
	}

	if(!find_phone[0]) format(pTemp[playerid][pCallName], 24, "%i", number);
	if(!find_phone[1]) format(pTemp[targetid][pCallName], 24, "%i", PlayerInfo[playerid][pNumber]);


	pTemp[playerid][pCallLine] = targetid;
	pTemp[playerid][pCallStatus] = 0;
	pTemp[playerid][pCallTime] = 0;
	//
	pTemp[targetid][pCallLine] = playerid;
	pTemp[targetid][pCallStatus] = 1;
	pTemp[targetid][pCallTime] = 0;

	if(0 == IsPlayerPhoneCreated(targetid))
	    Phone_Create(targetid, 1);
	else
	{
	    Phone_Menu(targetid, 0);
	    Phone_Block(targetid, 0);
	    Phone_Contacts(targetid);
	    Phone_SMS(targetid);
	    Phone_History(targetid);
	    Phone_Contact_Info(targetid);
	    Phone_Contact_Info(targetid);
	    Phone_Setting(targetid, 0);
	    Phone_Keypad(targetid, 0);

	    format(mes, sizeof(mes), "%s~n~mobile", pTemp[targetid][pCallName]);

		PlayerTextDrawSetString(targetid, TD_iphone_name[targetid], mes);
	   	PlayerTextDrawShow(targetid, TD_iphone_name[targetid]);

	   	PlayerTextDrawShow(targetid, TD_iphone_button[targetid][2]);
	    PlayerTextDrawShow(targetid, TD_iphone_button[targetid][3]);
	    PlayerTextDrawShow(targetid, TD_iphone_button[targetid][4]);
	    PlayerTextDrawShow(targetid, TD_iphone_button[targetid][5]);
	}

    if(0 == IsPlayerPhoneCreated(playerid))
	    Phone_Create(playerid, 1);
	else
	{
	    Phone_Menu(playerid, 0);
	    Phone_Block(playerid, 0);
	    Phone_Contacts(playerid);
	    Phone_SMS(playerid);
	    Phone_History(playerid);
	    Phone_Contact_Info(playerid);
	    Phone_SMS_Info(playerid);
	    Phone_Setting(playerid, 0);
	    Phone_Keypad(playerid, 0);

	    format(mes, sizeof(mes), "%s~n~calling...", pTemp[playerid][pCallName]);

		PlayerTextDrawSetString(playerid, TD_iphone_name[playerid], mes);
	   	PlayerTextDrawShow(playerid, TD_iphone_name[playerid]);

	   	PlayerTextDrawShow(playerid, TD_iphone_button[playerid][0]);
  		PlayerTextDrawShow(playerid, TD_iphone_button[playerid][1]);
	}

    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);

	PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);

	if(PlayerInfo[targetid][pPhoneSound] == 0)
 		PlayerPlaySoundEx(targetid, phone_ringtons[PlayerInfo[targetid][pPhoneRingtone]]);

    cmd::do(targetid, "? ??????? ???????? ??????? ???????.");
    SendClientMessage(targetid, -1, "[ ! ] ???????: ??????? ??? ?????? ??????? /phone. ????? ???????????? ?????? /pc.");
	SendClientMessage(targetid, -1, "[ ! ] ????? ???????? ?? ??????, ??????????? /pickup.");

	cmd::ame(playerid, "???????? ????? ????????.");
	SendClientMessage(playerid, -1, "[ ! ] ??????? '/pc' ??? ??????????? ???????, ??? '/phone' ????? ?????? ???????.");
	CancelSelectTextDraw(playerid);
	return 1;
}

CMD:dropcell(playerid, params[])
{
 	if(PlayerInfo[playerid][pNumber] == 0)
		return SendErrorMessage(playerid, "? ??? ??? ????????.");

	if(pTemp[playerid][pCallLine] != INVALID_PLAYER_ID || pTemp[playerid][pEmergency] != 0)
	    return SendErrorMessage(playerid, "????????? ?????? - /hangup.");

	if(IsPlayerPhoneCreated(playerid))
		Phone_Destroy(playerid);

    new query[128];
   	mysql_format(dbHandle, query, sizeof(query), "DELETE FROM `sms` WHERE `to_number` = %i", PlayerInfo[playerid][pNumber]);
	mysql_tquery(dbHandle, query);

	mysql_format(dbHandle, query, sizeof(query), "DELETE FROM `player_contacts` WHERE `userid` = %i", PlayerInfo[playerid][pID]);
	mysql_tquery(dbHandle, query);

	for(new i; i != MAX_PLAYER_CONTACTS; i++)
	{
	    PlayerContacts[playerid][i][contactNumber] = 0;
		PlayerContacts[playerid][i][contactOn] = 0;
		PlayerContacts[playerid][i][contactID] = 0;
	}

	SendCellMessage(playerid, "?? ????????? ???? ????????? ???????.");
	SendNearbyMessage(Range_Normal, playerid, COLOR_PURPLE, "* %s ???????? ???? ???????.", GetNameWithMask(playerid));

	PlayerInfo[playerid][pNumber] = 0;
	PlayerInfo[playerid][pPhoneModel] = 0;
	return 1;
}

/*CMD:pshop(playerid, params[])
{
	if(PlayerInfo[playerid][pJailed] != PRISON_JAIL)
		return SCM(playerid, COLOR_LIGHTRED, "?? ?? ????????? ???? ? ??????.");

	if(!PlayerToPoint(2, playerid, 168.6892,1916.0608,19.1663))
		return SCM(playerid, COLOR_LIGHTRED, "?? ?? ? ????????? ????????.");

	Dialog_Show(playerid, StorePrisonDialog, DIALOG_STYLE_LIST, "??????????? ?????????? ??????:", "????????? - $100\n???????? - $500\n????????? ????? - $500\n????????? ????? - $1,000\n????? - $50", "??????", "???????");
	return 1;
}*/

CMD:prisonlist(playerid, params[])
{
	new faction = PlayerInfo[playerid][pFaction];

	if(faction != LSPD && faction != SASD && faction != DOCS)
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???? ???????????/??????????? ??????.");

	if(faction == DOCS)
	{
		SCM(playerid, COLOR_GREEN, "?????? ??????????? ? ??????:");
		foreach(Player, i)
		{
			if(!IsPlayerLogged(i) || PlayerInfo[i][pJailed] != PRISON_JAIL) continue;
			SendClientMessageEx(playerid, COLOR_GRAD2, "%s%i %s | ????? ??????????: %s ???.", (PlayerInfo[i][pIsolateTime] != 0)?("B"):("A"),PlayerInfo[i][pPrisoned]+100, GetNameEx(i), FormatNumber(PlayerInfo[i][pJailTime]));
		}
		return 1;
	}
	else if(faction == LSPD)
	{
		SCM(playerid, COLOR_GREEN, "?????? ??????????? ? ??????? Los Santos Police Department:");
		foreach(Player, i)
		{
			if(!IsPlayerLogged(i) || (PlayerInfo[i][pJailed] != LSPD_JAIL && PlayerInfo[i][pJailed] != JEFF_JAIL)) continue;
			SendClientMessageEx(playerid, COLOR_GRAD2, "%s | ????? ??????????: %s ???.", GetNameEx(i), FormatNumber(PlayerInfo[i][pJailTime]));
		}
		return 1;
	}
	else if(faction == SASD)
	{
		SCM(playerid, COLOR_GREEN, "?????? ??????????? ? ??????? San Andreas Sheriff's Department:");
		foreach(Player, i)
		{
			if(!IsPlayerLogged(i) || PlayerInfo[i][pJailed] != SASD_JAIL) continue;
			SendClientMessageEx(playerid, COLOR_GRAD2, "%s | ????? ??????????: %s ???.", GetNameEx(i), FormatNumber(PlayerInfo[i][pJailTime]));
		}
		return 1;
	}
	return 1;
}

CMD:myprisonnumber(playerid, params[])
{
	if(PlayerInfo[playerid][pJailed] != PRISON_JAIL)
		return SCM(playerid, COLOR_GREY, "?? ?? ? ??????.");

	SendClientMessageEx(playerid, COLOR_GRAD2, "???: %s | ?????: %s%i", GetNameEx(playerid), (PlayerInfo[playerid][pIsolateTime] != 0)?("B"):("A"),PlayerInfo[playerid][pPrisoned]+100);
	return 1;
}

ALTX:pickup("/p");
CMD:pickup(playerid, params[])
{
    if(PlayerInfo[playerid][pNumber] == 0)
		return SendErrorMessage(playerid, "? ??? ??? ????????.");

    new targetid = pTemp[playerid][pCallLine],
        mes[128];

    if(!IsPlayerPhoneCreated(playerid) && targetid == INVALID_PLAYER_ID && IsPlayerAttachedObjectSlotUsed(playerid, 9))
        return SendErrorMessage(playerid, "???? ???? ??? ??????.");

    if(pTemp[playerid][pCallStatus] == 2)
        return SendCellMessage(playerid, "?? ??? ??????????????.");

	if(targetid == INVALID_PLAYER_ID || pTemp[playerid][pCallStatus] != 1)
        return SendCellMessage(playerid, "??? ????? ?? ??????.");

	if(pTemp[targetid][pCallLine] != playerid)
	    return SendErrorMessage(playerid, "?????? ??????? ????????.");

	//SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);

    pTemp[playerid][pCallIncoming] = 1;
    pTemp[targetid][pCallIncoming] = 0;

    pTemp[playerid][pCallStatus] = 2;
    pTemp[targetid][pCallStatus] = 2;

    pTemp[playerid][pCallTime] = 0;
    pTemp[targetid][pCallTime] = 0;

    if(0 == IsPlayerPhoneCreated(targetid))
	    Phone_Create(targetid);
	else
	{
	    Phone_Menu(targetid, 0);
	    Phone_Block(targetid, 0);

	   	format(mes, sizeof(mes), "%s~n~%s", pTemp[targetid][pCallName], ConvertSecond(pTemp[targetid][pCallTime]));
   		PlayerTextDrawSetString(targetid, TD_iphone_name[targetid], mes);
	   	PlayerTextDrawShow(targetid, TD_iphone_name[targetid]);
	}

    if(0 == IsPlayerPhoneCreated(playerid))
	    Phone_Create(playerid);
	else
	{
	    Phone_Menu(playerid, 0);
	    Phone_Block(playerid, 0);

	   	format(mes, sizeof(mes), "%s~n~%s", pTemp[playerid][pCallName], ConvertSecond(pTemp[playerid][pCallTime]));
   		PlayerTextDrawSetString(playerid, TD_iphone_name[playerid], mes);
	   	PlayerTextDrawShow(playerid, TD_iphone_name[playerid]);

	   	PlayerTextDrawShow(playerid, TD_iphone_button[playerid][0]);
  		PlayerTextDrawShow(playerid, TD_iphone_button[playerid][1]);

  		PlayerTextDrawHide(playerid, TD_iphone_button[playerid][2]);
  		PlayerTextDrawHide(playerid, TD_iphone_button[playerid][3]);
  		PlayerTextDrawHide(playerid, TD_iphone_button[playerid][4]);
  		PlayerTextDrawHide(playerid, TD_iphone_button[playerid][5]);
	}

	SCM(targetid, -1, "> ??????? ??????? ?? ??????.");

    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
	return 1;
}

stock Update_Phone(playerid)
{
    if(0 == IsPlayerPhoneCreated(playerid) || PlayerInfo[playerid][pPhoneOff] == 1)
		return 1;

	new hours,
		minutes,
		str_time[16];

	gettime(hours, minutes);

	format(str_time, 6, "%02i:%02i", hours, minutes);
	PlayerTextDrawSetString(playerid, TD_iphone[playerid][18], str_time);
	PlayerTextDrawShow(playerid, TD_iphone[playerid][18]);

	new network[11];
	switch(GetPlayerNetwork(playerid))
	{
	    case 0: network = "_";
	    case 1: network = "o";
	    case 2: network = "oo";
	    case 3: network = "ooo";
	    case 4: network = "oooo";
	    case 5: network = "ooooo";
	}
	PlayerTextDrawSetString(playerid, TD_iphone[playerid][23], network);
	PlayerTextDrawShow(playerid, TD_iphone[playerid][23]);

	if(PhoneInfo[playerid][phoneBlock] != 0)
	{
	    format(str_time, 6, "%02i:%02i", hours, minutes);
		PlayerTextDrawSetString(playerid, TD_iphone_block[playerid][0], str_time);
		PlayerTextDrawShow(playerid, TD_iphone_block[playerid][0]);

		new month,
		    day;

		new month_name[12][10] = {"January","February","March","April","May","June","Jule","August","September","October","November","December"};

		getdate(_, month, day);

		format(str_time, 16, "%02i %s", day, month_name[month-1]);
		PlayerTextDrawSetString(playerid, TD_iphone_block[playerid][1], str_time);
		PlayerTextDrawShow(playerid, TD_iphone_block[playerid][1]);
	}
	return 1;
}

stock Phone_Keypad(playerid, status)
{
	if(status)
	{
		PhoneInfo[playerid][phoneKeypad] = 1;
		format(pTemp[playerid][pCallKeypad], 12, "");
		PlayerTextDrawSetString(playerid, TD_iphone_name[playerid], "_");
		PlayerTextDrawShow(playerid, TD_iphone_name[playerid]);
	    for(new i; i != 34; i++) PlayerTextDrawShow(playerid, TD_iphone_keypad[playerid][i]);
	}
	else
	{
	    PhoneInfo[playerid][phoneKeypad] = 0;
	    format(pTemp[playerid][pCallKeypad], 12, "");
	    PlayerTextDrawHide(playerid, TD_iphone_name[playerid]);
    	for(new i; i != 34; i++) PlayerTextDrawHide(playerid, TD_iphone_keypad[playerid][i]);
	}
	return 1;
}


stock Phone_Menu(playerid, status)
{
	if(status)
	{
	    for(new i; i != 7; i++) PlayerTextDrawShow(playerid, TD_iphone_menu[playerid][i]);
	}
	else
	{
    	for(new i; i != 7; i++) PlayerTextDrawHide(playerid, TD_iphone_menu[playerid][i]);
	}
	return 1;
}

stock Phone_Setting(playerid, status)
{
	if(status)
	{
	    PhoneInfo[playerid][phoneSetting] = 1;

        PlayerTextDrawBoxColor(playerid, TD_iphone_setting[playerid][1], phone_panel[PlayerInfo[playerid][pPhoneStyle]]);
		PlayerTextDrawSetString(playerid, TD_iphone_setting[playerid][1], (PlayerInfo[playerid][pPhoneAirplane] == 0)?("Airplane Mode: Off"):("Airplane Mode: On"));

        PlayerTextDrawBoxColor(playerid, TD_iphone_setting[playerid][2], phone_panel[PlayerInfo[playerid][pPhoneStyle]]);
		PlayerTextDrawSetString(playerid, TD_iphone_setting[playerid][2], (PlayerInfo[playerid][pPhoneSound] == 0)?("Sound: On"):("Sound: Off"));

		PlayerTextDrawBoxColor(playerid, TD_iphone_setting[playerid][4], phone_panel[PlayerInfo[playerid][pPhoneStyle]]);

		new mes[32];
		format(mes, sizeof(mes), "sound-%i.mp3", PlayerInfo[playerid][pPhoneRingtone]+1);
		PlayerTextDrawSetString(playerid, TD_iphone_setting[playerid][10], mes);

	    for(new i; i != 11; i++) PlayerTextDrawShow(playerid, TD_iphone_setting[playerid][i]);
	}
	else
	{
	    PhoneInfo[playerid][phoneSetting] = 0;
    	for(new i; i != 11; i++) PlayerTextDrawHide(playerid, TD_iphone_setting[playerid][i]);
	}
	return 1;
}

stock Phone_Block(playerid, status)
{
	if(status)
	{
	    PhoneInfo[playerid][phoneBlock] = 1;
	    PhoneInfo[playerid][phoneBlockSMS][0] = 0;
	    PhoneInfo[playerid][phoneBlockSMS][1] = 0;
	    PhoneInfo[playerid][phoneBlockSMS][2] = 0;
	    for(new i; i != 3; i++) PlayerTextDrawShow(playerid, TD_iphone_block[playerid][i]);

		new query[128];
		mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `sms` WHERE `to_number` = '%i' AND `read`=0 ORDER BY `id` DESC LIMIT 3", PlayerInfo[playerid][pNumber]);
		mysql_tquery(dbHandle, query, "ShowBlockSMS", "i", playerid);
	}
	else
	{
	    PhoneInfo[playerid][phoneBlock] = 0;
	    PhoneInfo[playerid][phoneBlockSMS][0] = 0;
	    PhoneInfo[playerid][phoneBlockSMS][1] = 0;
	    PhoneInfo[playerid][phoneBlockSMS][2] = 0;
    	for(new i; i != 6; i++) PlayerTextDrawHide(playerid, TD_iphone_block[playerid][i]);
	}
	return 1;
}

forward ShowBlockSMS(playerid);
public ShowBlockSMS(playerid)
{
	if(PhoneInfo[playerid][phoneBlock] != 1 || cache_num_rows() == 0)
	    return 1;

	new name[128];
	for(new i; i != cache_num_rows(); i++)
	{
	    if(i > 2)
	        break;

		cache_get_field_content(i, "from_name", name, dbHandle, 24);
		PhoneInfo[playerid][phoneBlockSMS][i] = cache_get_field_content_int(i, "id");
		format(name, sizeof(name), "iMessage from~n~~l~%s", name);

		PlayerTextDrawSetString(playerid, TD_iphone_block[playerid][i+3], name);
		PlayerTextDrawShow(playerid, TD_iphone_block[playerid][i+3]);
	}
	return 1;
}

stock Phone_Button(playerid)
{
	for(new i; i != 6; i++) PlayerTextDrawHide(playerid, TD_iphone_button[playerid][i]);
	return 1;
}

stock Phone_Destroy(playerid)
{
    if(PhoneInfo[playerid][phoneCreated] == 0)
	    return 1;

    #include "../include/iphone_destroy.inc"
    PhoneInfo[playerid][phoneCreated] = 0;

    if(pTemp[playerid][pCallLine] == INVALID_PLAYER_ID && !GetPVarInt(playerid, #selfie))
        RemovePlayerAttachedObject(playerid, ATTACH_HANDS);

	return 1;
}

stock Phone_Create(playerid, type = 0)
{
	if(PhoneInfo[playerid][phoneCreated] != 0)
	    return 1;

	new mes[56];

    #include "../include/iphone_create.inc"
 	PhoneInfo[playerid][phoneCreated] = 1;
	PhoneInfo[playerid][phoneContact] = 0;
	PhoneInfo[playerid][phoneSMS] = 0;
	PhoneInfo[playerid][phoneHistory] = 0;
	PhoneInfo[playerid][phoneKeypad] = 0;
	PhoneInfo[playerid][phoneGPS] = 0;
	PhoneInfo[playerid][phoneSetting] = 0;

	if(!IsPlayerAttachedObjectSlotUsed(playerid, ATTACH_HANDS)) SetPlayerAttachedObject(playerid, ATTACH_HANDS, phone_model[PlayerInfo[playerid][pPhoneModel]], 6, 0.111, -0.000999, 0.0, 77.9, -171.6, -3.40001, 1.0, 1.0, 1.0);

	if(type == 0)
	{
	    cmd::ame(playerid, "??????? ??????? ?? ???????.");
 		SendClientMessage(playerid, -1, "[ ! ] ???????: ??????? ??? ?????? ??????? /phone. ????? ???????????? ?????? /pc.");
		SendClientMessage(playerid, -1, "[ ! ] ??????? ??????? ESC ????? ????????? ? ????? ??????.");
		SelectTextDraw(playerid, -1);
	}

	if(PlayerInfo[playerid][pPhoneOff] == 1)
		return 1;

 	if(pTemp[playerid][pCallLine] != INVALID_PLAYER_ID)
 	{
		if(pTemp[playerid][pCallStatus] == 1)
		{
		    format(mes, sizeof(mes), "%s~n~mobile", pTemp[playerid][pCallName]);

		    PlayerTextDrawSetString(playerid, TD_iphone_name[playerid], mes);
		    PlayerTextDrawShow(playerid, TD_iphone_name[playerid]);

		    PlayerTextDrawShow(playerid, TD_iphone_button[playerid][2]);
		    PlayerTextDrawShow(playerid, TD_iphone_button[playerid][3]);
		    PlayerTextDrawShow(playerid, TD_iphone_button[playerid][4]);
		    PlayerTextDrawShow(playerid, TD_iphone_button[playerid][5]);
		}
		else
		{
		    if(pTemp[playerid][pCallStatus] == 2)
		    	format(mes, sizeof(mes), "%s~n~%s", pTemp[playerid][pCallName], ConvertSecond(pTemp[playerid][pCallTime]));
			else
			    format(mes, sizeof(mes), "%s~n~calling...", pTemp[playerid][pCallName]);

		    PlayerTextDrawSetString(playerid, TD_iphone_name[playerid], mes);
		    PlayerTextDrawShow(playerid, TD_iphone_name[playerid]);

		    PlayerTextDrawShow(playerid, TD_iphone_button[playerid][0]);
		    PlayerTextDrawShow(playerid, TD_iphone_button[playerid][1]);
		}
	}
 	else
 	{
 	    Update_Phone(playerid);
 	    Phone_Block(playerid, 1);
 	}
	return 1;
}

CMD:selfie(playerid, params[])
{
	if(!IsPlayerPhoneCreated(playerid) && !GetPVarInt(playerid, #selfie) && IsPlayerAttachedObjectSlotUsed(playerid, ATTACH_HANDS))
        return SendErrorMessage(playerid, "???? ???? ??? ??????.");

    if(!GetPVarInt(playerid, #selfie))
    {
		if (pTemp[playerid][pCallLine] != INVALID_PLAYER_ID || IsPlayerInAnyVehicle(playerid))
		    return SendErrorMessage(playerid, "?? ?? ?????? ???????????? ?????? ? ?????? ??????.");

        new Float: x,
			Float: y,
			Float: z,
			Float: new_x,
			Float: new_y,
			Float: radius = 0.9,
			Float: rot;

        TogglePlayerControllable(playerid, 0);

	    GetPlayerPos(playerid, x, y, z);
	    GetPlayerFacingAngle(playerid, rot);
     	new_x = x + radius * floatcos(rot, degrees);
	    new_y = y + radius * floatsin(rot, degrees);

		RemovePlayerAttachedObject(playerid, ATTACH_HANDS);
	   	SetPlayerAttachedObject(playerid, ATTACH_HANDS, phone_model[PlayerInfo[playerid][pPhoneModel]], 6, 0.06, 0.01, 0.08, 180.0, 90.0, 0.0);

		SetPlayerCameraPos(playerid, new_x, new_y, z + 0.78);
		SetPlayerCameraLookAt(playerid, x, y, z + 0.60);
	    SetPlayerFacingAngle(playerid, rot -90.0);

		SetPVarFloat(playerid, #selfie_z, 0.60);

		ApplyAnimation(playerid, "PED", "gang_gunstand", 4.1, 1, 1, 1, 1, 1, 1);
  		SetPVarInt(playerid, #selfie, 1);

		SetPlayerArmedWeapon(playerid, 0);

        SendErrorMessage(playerid, "[ ! ] {FFFFFF}??????? F8 ????? ??????? ????????, F7 (??????) ????? ?????? ???.");
		SendErrorMessage(playerid, "[ ! ] {FFFFFF}??????????? {FF6347}W, A, S ? D{FFFFFF}, ????? ????????? ???????, {FF6347}ENTER{FFFFFF} ????? ????????? ?????.");
		SendErrorMessage(playerid, "[ ! ] {FFFFFF}INFO: ??????????? /headmove, ????? ??????? ?????? ?????????.");
		CancelSelectTextDraw(playerid);
		return 1;
 	}
	TogglePlayerControllable(playerid, 1);
 	SetCameraBehindPlayer(playerid);

	RemovePlayerAttachedObject(playerid, ATTACH_HANDS);

	if(IsPlayerPhoneCreated(playerid))
 		SetPlayerAttachedObject(playerid, ATTACH_HANDS, phone_model[PlayerInfo[playerid][pPhoneModel]], 6, 0.111, -0.000999, 0.0, 77.9, -171.6, -3.40001, 1.0, 1.0, 1.0);

	ApplyAnimation(playerid, "PED", "ATM", 4.1, 0, 1, 1, 0, 1, 1);
 	DeletePVar(playerid, #selfie);
	return 1;
}

CMD:coh(playerid, params[])
{
    if(IsPlayerAttachedObjectSlotUsed(playerid, ATTACH_HANDS) && GetPVarInt(playerid, #money_hand))
    {
        SetPVarInt(playerid, #money_hand, 0);
 		RemovePlayerAttachedObject(playerid, ATTACH_HANDS);
 		return 1;
    }

	if(GetCash(playerid) < 300)
	    return SendNotCash(playerid);

    if(IsPlayerAttachedObjectSlotUsed(playerid, ATTACH_HANDS))
        return SendErrorMessage(playerid, "???? ???? ??? ??????.");

	new type = strval(params);
	if(isnull(params) || (type != 1 && type != 2))
	    return SendSyntaxMessage(playerid, "/coh [1 - ?????? ????, 2 - ????? ????]");

	if(type == 1)
		SetPlayerAttachedObject(playerid, ATTACH_HANDS, 1212, 6, 0.062999, 0.004999, 0.013000, -106.300003, -3.699995, -84.700004, 0.766000, 1.000000, 0.773000);
	else if(type == 2)
		SetPlayerAttachedObject(playerid, ATTACH_HANDS, 1212, 5, 0.083999, -0.005000, -0.015000, -106.300003, -3.699995, -84.700004, 0.766000, 1.000000, 0.829999);

    SetPVarInt(playerid, #money_hand, 1);
	return 1;
}

ALTX:phone("/ph");
CMD:phone(playerid, params[])
{
    if(PlayerInfo[playerid][pNumber] == 0)
		return SendErrorMessage(playerid, "? ??? ??? ????????.");

	if(IsPlayerPhoneCreated(playerid))
	    return Phone_Destroy(playerid);

	if(GetPVarInt(playerid, #selfie))
	    cmd::selfie(playerid, "");

	if(pTemp[playerid][pCallLine] == INVALID_PLAYER_ID && IsPlayerAttachedObjectSlotUsed(playerid, ATTACH_HANDS))
        return SendErrorMessage(playerid, "???? ???? ??? ??????.");

	Phone_Create(playerid);
	return 1;
}

ALTX:phonecursor("/pc");
CMD:phonecursor(playerid, params[])
{
	if(!IsPlayerPhoneCreated(playerid))
	    return 1;

	SelectTextDraw(playerid, -1);
	return 1;
}

ALTX:sms("/text");
CMD:sms(playerid, params[])
{
    if(IsPlayerInjured(playerid) != 0 || pTemp[playerid][pTaserTime] || pTemp[playerid][pCuffed])
		return SCM(playerid, COLOR_GREY, "?? ?? ?????? ???????????? ?????? ??????? ????? ??????.");

    if(PlayerInfo[playerid][pNumber] == 0)
		return SendErrorMessage(playerid, "? ??? ??? ????????.");

    if(PlayerInfo[playerid][pPhoneOff] != 0)
        return SendErrorMessage(playerid, "??????? ????????.");

    if(0 == GetPlayerNetwork(playerid))
	    return SendErrorMessage(playerid, "??? ?????.");

	if(PlayerInfo[playerid][pPhoneAirplane] == 1)
	    return SendErrorMessage(playerid, "?????? ? ??? ?????????? - ??? ??????? ? ?????? ??????.");

    if(PlayerInfo[playerid][pJailed] != 0)
		return SCM(playerid, COLOR_WHITE, "?????? ???????????? ??????? ? ??????.");

	new number_str[24],
	    number,
	    targetid,
	    text[128];

	if(sscanf(params,"s[24]s[128]", number_str, text))
		return SendSyntaxMessage(playerid, "/sms [????? ???????? / ??????? ?? ??????] [text]");

	number = strval(number_str);

	for(new i = 0; i != MAX_PLAYER_CONTACTS; i++)
    {
        if(PlayerContacts[playerid][i][contactOn] == 0 || strcmp(PlayerContacts[playerid][i][contactName], number_str, true) != 0)
            continue;

        number = PlayerContacts[playerid][i][contactNumber];
        break;
    }

    if (number == PlayerInfo[playerid][pNumber])
    	return SendErrorMessage(playerid, "?? ??????? ???? ????? ????????.");

    targetid = GetNumberOwner(number);
	if(!IsPlayerLogged(targetid))
	{
	    new query[201];
	    mysql_format(dbHandle, query, sizeof(query), "\
	    SELECT number, (SELECT `contact` FROM `player_contacts` WHERE users.id = player_contacts.userid AND player_contacts.number = '%i') as contact \
 		FROM `users` WHERE `number` = '%i'", PlayerInfo[playerid][pNumber], number);

 		mysql_tquery(dbHandle, query, "OfflineSMS", "iis", playerid, number, text);
	    return 1;
	}

    new find_phone[2] = {0, 0},
		name_playerid[MAX_PLAYER_NAME],
		name_targetid[MAX_PLAYER_NAME];

    for (new i = 0; i != MAX_PLAYER_CONTACTS; i ++)
	{
		if(PlayerContacts[playerid][i][contactOn] != 0 && PlayerContacts[playerid][i][contactNumber] == number)
		{
 			strmid(name_playerid, PlayerContacts[playerid][i][contactName], 0, strlen(PlayerContacts[playerid][i][contactName]), 32);
 			find_phone[0] = 1;
		}
		if(PlayerContacts[targetid][i][contactOn] != 0 && PlayerContacts[targetid][i][contactNumber] == PlayerInfo[playerid][pNumber])
		{
 			strmid(name_targetid, PlayerContacts[targetid][i][contactName], 0, strlen(PlayerContacts[targetid][i][contactName]), 32);
	        find_phone[1] = 1;
		}
	}

	if(!find_phone[0]) format(name_playerid, 24, "%i", number);
	if(!find_phone[1]) format(name_targetid, 24, "%i", PlayerInfo[playerid][pNumber]);

	new month,
 		day,
 		year,
 		hour,
 		minute;

	new month_name[12][5] = {"Jan","Feb","Mar","Apr","May","June","Jule","Aug","Sept","Oct","Nov","Dec"};
	gettime(hour, minute);
	getdate(year, month, day);

	new query[256 + 128];
    mysql_format(dbHandle, query, sizeof(query), "INSERT INTO `sms` (`to_name`,`from_name`,`to_number`,`from_number`,`text`,`date`,`read`) VALUES ('%e','%e',%i,%i,'%e','%s %02i %i, %02i:%02i','%i')",
	name_playerid,
	name_targetid,
	number,
	PlayerInfo[playerid][pNumber],
	text,
	month_name[month-1],
	day,
	year,
	hour,
	minute,
    (GetPlayerNetwork(targetid) != 0 && PlayerInfo[targetid][pPhoneAirplane] == 0 && PlayerInfo[targetid][pPhoneOff] == 0)?(0):(-1));
	mysql_tquery(dbHandle, query);

	if(GetPlayerNetwork(targetid) != 0 && PlayerInfo[targetid][pPhoneAirplane] == 0 && PlayerInfo[targetid][pPhoneOff] == 0)
	{
		if(PlayerInfo[targetid][pPhoneSound] == 0)
		{
		    cmd::do(targetid, "? ??????? ????????? ???????.");
			PlaySound(targetid, 1084);
		}

    	if(0 == IsPlayerPhoneCreated(targetid))
	    	Phone_Create(targetid, 1);
	}

	if(strlen(text) > MAXLEN)
	{
		new pos = MAXLEN;
		if(pos < MAXLEN-1) pos = MAXLEN;
		if(GetPlayerNetwork(targetid) != 0 && PlayerInfo[targetid][pPhoneAirplane] == 0 && PlayerInfo[targetid][pPhoneOff] == 0)
		{
			SendClientMessageEx(targetid, COLOR_YELLOWG, "SMS: %.*s ...", pos, text);
			SendClientMessageEx(targetid, COLOR_YELLOWG, "SMS: ... %s ???????????: %s.", text[pos], name_targetid);
		}
		SendClientMessageEx(playerid, COLOR_YELLOWG, "SMS: %.*s ...", pos, text);
		SendClientMessageEx(playerid, COLOR_YELLOWG, "SMS: ... %s ??????????: %s.", text[pos], name_playerid);
	}
	else
	{
	    if(GetPlayerNetwork(targetid) != 0 && PlayerInfo[targetid][pPhoneAirplane] == 0 && PlayerInfo[targetid][pPhoneOff] == 0)
			SendClientMessageEx(targetid, COLOR_YELLOWG, "SMS: %s ???????????: %s.", text, name_targetid);

		SendClientMessageEx(playerid, COLOR_YELLOWG, "SMS: %s ??????????: %s.", text, name_playerid);
	}

	cmd::ame(playerid, "???????? ????????? ? ????????.");
	return 1;
}

forward OfflineSMS(playerid, number, text[]);
public OfflineSMS(playerid, number, text[])
{
	if(!cache_num_rows())
	    return SCM(playerid, -1, "???????? (???????): ????????, ????????? ????? ?? ??????????.");

    new find_phone,
		name_playerid[MAX_PLAYER_NAME],
		name_targetid[MAX_PLAYER_NAME];

    cache_get_field_content(0, "contact", name_targetid);

    for (new i = 0; i != MAX_PLAYER_CONTACTS; i ++)
	{
		if(PlayerContacts[playerid][i][contactOn] != 0 && PlayerContacts[playerid][i][contactNumber] == number)
		{
 			strmid(name_playerid, PlayerContacts[playerid][i][contactName], 0, strlen(PlayerContacts[playerid][i][contactName]), 32);
 			find_phone = 1;
		}
	}

	if(!find_phone) format(name_playerid, 24, "%i", number);
	if(!strlen(name_targetid) || CompareStrings(name_targetid, "NULL")) format(name_targetid, 24, "%i", PlayerInfo[playerid][pNumber]);

	new month,
 		day,
 		year,
 		hour,
 		minute;

	new month_name[12][5] = {"Jan","Feb","Mar","Apr","May","June","Jule","Aug","Sept","Oct","Nov","Dec"};
	gettime(hour, minute);
	getdate(year, month, day);

	new query[256 + 128];
    mysql_format(dbHandle, query, sizeof(query), "INSERT INTO `sms` (`to_name`,`from_name`,`to_number`,`from_number`,`text`,`date`,`read`) VALUES ('%e','%e',%i,%i,'%e','%s %02i %i, %02i:%02i','%i')",
	name_playerid,
	name_targetid,
	number,
	PlayerInfo[playerid][pNumber],
	text,
	month_name[month-1],
	day,
	year,
	hour,
	minute,
 	0);
	mysql_tquery(dbHandle, query);

	if(strlen(text) > MAXLEN)
	{
		new pos = MAXLEN;
		if(pos < MAXLEN-1) pos = MAXLEN;
		SendClientMessageEx(playerid, COLOR_YELLOWG, "SMS: %.*s ...", pos, text);
		SendClientMessageEx(playerid, COLOR_YELLOWG, "SMS: ... %s ??????????: %s.", text[pos], name_playerid);
	}
	else
		SendClientMessageEx(playerid, COLOR_YELLOWG, "SMS: %s ??????????: %s.", text, name_playerid);

    cmd::ame(playerid, "???????? ????????? ? ????????.");
	return 1;
}

CMD:loudspeaker(playerid, params[])
{
    if(PlayerInfo[playerid][pNumber] == 0)
		return SendErrorMessage(playerid, "? ??? ??? ????????.");

	if(pTemp[playerid][pCallLine] == INVALID_PLAYER_ID || pTemp[playerid][pCallStatus] != 2)
	    return SendErrorMessage(playerid, "?? ?? ?????????????? ?? ????????.");

	if(GetPVarInt(playerid, #loud_speak) == 0)
	{
		SetPVarInt(playerid, #loud_speak, 1);
		SendClientMessage(playerid, -1, "> ?? ???????? ??????? ?????.");
	}
	else
	{
		SetPVarInt(playerid, #loud_speak, 0);
		SendClientMessage(playerid, -1, "> ?? ????????? ??????? ?????.");
	}
	return 1;
}

CMD:garageinfo(playerid, params[])
{
	new id = GarageNearestOutside(playerid);

	if (-1 == id && (id = GarageNearestInside(playerid)) == -1)
		return 1;

	SendClientMessage(playerid, 0x33AA33AA, "___________ ?????????? ? ?????? ___________");

	SendClientMessageEx(playerid, -1, "ID: [ %i ] ?????????: [ %i ] ??????: [ %s ]", id, GarageInfo[id][garagePrice], (GarageInfo[id][garageLocked]) ? ("????????"):("???????"));

	if (GarageInfo[id][garageHouse])
        SendClientMessageEx(playerid, -1, "????? ?????????? ? ???? ID: [ %i ]", GarageInfo[id][garageHouse]);

    if (GarageInfo[id][garageBiz])
        SendClientMessageEx(playerid, -1, "????? ?????????? ? ??????? ID: [ %i ]", GarageInfo[id][garageBiz]);

	if (GarageInfo[id][garageOwner])
		SendClientMessageEx(playerid, -1, "????? ??????????? [ %s ]", GarageInfo[id][garageOwnerName]);
	return 1;
}

CMD:garagehelp(playerid, params[])
{
	SCM(playerid, COLOR_GREEN,"|___________________?????? ?? ??????___________________|");
	SCM(playerid, COLOR_WHITE,"/garageinfo - ?????????? ? ??????.");
	SCM(playerid, COLOR_WHITE,"/buygarage - ?????? ?????.");
	SCM(playerid, COLOR_WHITE,"/sellgarage - ??????? ?????.");
	SCM(playerid, COLOR_WHITE,"/lock - ???????/??????? ?????.");
	return 1;
}

CMD:garagecmds(playerid, params[])
{
    if(!CheckAdmin(playerid, ADMIN_LEVEL_5))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	SCM(playerid, COLOR_WHITE, "[Level 5]: {C3C3C3}/makegarage /makehousegarage /makebusinessgarage /removegarage /editgarage /gotogarage");
	return 1;
}

ALTX:makegarage("/mgarage");
CMD:makegarage(playerid, params[])
{
    if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	new type, price;
	if (sscanf(params, "ii", type, price))
	    return SendSyntaxMessage(playerid, "/makegarage [??? 1-9] [?????????]");

	if (type < 1 || type > 9)
	    return SendErrorMessage(playerid, "?? ??????? ???????? ??? ?????? 1-9.");

	if (price < 0 || price > 1000000)
	    return SendErrorMessage(playerid, "?? ??????? ???????? ????????? ??????.");

	if (Garage_Create(playerid, type, price) == -1)
	    return SendErrorMessage(playerid, "?????????? ???????????? ?????????? ???????.");

	return 1;
}

ALTX:makehousegarage("/mhgarage");
CMD:makehousegarage(playerid, params[])
{
    if(!CheckAdmin(playerid, ADMIN_LEVEL_5))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	new type, id, price;
	if (sscanf(params, "iii", type, price, id))
	    return SendSyntaxMessage(playerid, "/makehousegarage [??? 1-9] [?????????] [ID ????]");

	if (type < 1 || type > 9)
	    return SendErrorMessage(playerid, "?? ??????? ???????? ??? ?????? 1-9.");

	if (price < 0 || price > 1000000)
	    return SendErrorMessage(playerid, "?? ??????? ???????? ????????? ??????.");

	if(id < 0 || id > MAX_HOUSES-1 || HouseInfo[id][hID] == 0)
 		return SendErrorMessage(playerid, "??? ? ????? ID ?? ??????.");

	if (Garage_Create(playerid, type, price, 1, id) == -1)
	    return SendErrorMessage(playerid, "?????????? ???????????? ?????????? ???????.");

	return 1;
}

ALTX:makebusinessgarage("/mbgarage");
CMD:makebusinessgarage(playerid, params[])
{
    if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	new type, id, price;
	if (sscanf(params, "iii", type, price, id))
	    return SendSyntaxMessage(playerid, "/makebusinessgarage [??? 1-9] [?????????] [ID ???????]");

	if (type < 1 || type > 9)
	    return SendErrorMessage(playerid, "?? ??????? ???????? ??? ?????? 1-9.");

	if (price < 0 || price > 1000000)
	    return SendErrorMessage(playerid, "?? ??????? ???????? ????????? ??????.");

    if(id < 0 || id > MAX_BIZ-1 || BizInfo[id][bizID] == 0)
 		return SendErrorMessage(playerid, "?????? ? ????? ID ?? ??????.");

	if (Garage_Create(playerid, type, price, 2, id) == -1)
	    return SendErrorMessage(playerid, "?????????? ???????????? ?????????? ???????.");

	return 1;
}

stock Garage_Create(playerid, type, price, tie = 0, id = 0)
{
    for(new i = 0; i < MAX_GARAGES; i++)
	{
	    if(GarageInfo[i][garageID] != 0)
			continue;

	    GarageInfo[i][garagePrice] = price;
     	GarageInfo[i][garageHouse] = 0;
	    GarageInfo[i][garageBiz] = 0;
	    GarageInfo[i][garageOwner] = 0;
     	if(tie == 1)
		{
	 		GarageInfo[i][garageHouse] = HouseInfo[id][hID];
            GarageInfo[i][garageOwner] = HouseInfo[id][hOwnerID];
		}
		else if(tie == 2)
		{
		 	GarageInfo[i][garageBiz] = BizInfo[id][bizID];
		 	GarageInfo[i][garageOwner] = BizInfo[id][bizOwnerID];
		}

	    GetPlayerPos(playerid, GarageInfo[i][garagePlayer_Enter][0], GarageInfo[i][garagePlayer_Enter][1], GarageInfo[i][garagePlayer_Enter][2]);
	    GetPlayerPos(playerid, GarageInfo[i][garageVeh_Enter][0], GarageInfo[i][garageVeh_Enter][1], GarageInfo[i][garageVeh_Enter][2]);
        GarageInfo[i][garageEnterInt] = GetInterior(playerid);
		GarageInfo[i][garageEnterVW] = GetWorld(playerid);

	    GarageInfo[i][garagePlayer_Exit][0] = garage_player_pos[type-1][0];
	    GarageInfo[i][garagePlayer_Exit][1] = garage_player_pos[type-1][1];
	    GarageInfo[i][garagePlayer_Exit][2] = garage_player_pos[type-1][2];

	    GarageInfo[i][garageVeh_Exit][0] = garage_veh_pos[type-1][0];
	    GarageInfo[i][garageVeh_Exit][1] = garage_veh_pos[type-1][1];
	    GarageInfo[i][garageVeh_Exit][2] = garage_veh_pos[type-1][2];
	    GarageInfo[i][garageVeh_Exit][3] = garage_veh_pos[type-1][3];
	    GarageInfo[i][garageExitInt] = garage_int[type-1];
	    GarageInfo[i][garageExitVW] = GarageInfo[i][garageID] + 100;

	    GarageInfo[i][garageCP] =
			CreateDynamicCP(GarageInfo[i][garagePlayer_Enter][0], GarageInfo[i][garagePlayer_Enter][1], GarageInfo[i][garagePlayer_Enter][2], 0.9, GarageInfo[i][garageEnterVW], GarageInfo[i][garageEnterInt], -1, 3.0);

	    new mes[128];
		format(mes, sizeof(mes), "????? ID: %i ??????. %s", i, (tie == 1)?("???????? ? ????."):((tie == 2)?("???????? ? ???????."):("???????.")));
    	SendClientMessage(playerid, -1, mes);
        SendClientMessage(playerid, 0xECA129FF, "[ ! ] {ffffff}???????? ????? ????????? ?????????? ??? ?????? ?? ?????? ???????? - /editgarage.");

		new query[512];
		mysql_format(dbHandle, query, sizeof(query), "INSERT INTO `garage` (\
  		`price`,\
		`house`,\
		`biz`,\
		`player_enter_x`,\
		`player_enter_y`,\
		`player_enter_z`,\
		`player_exit_x`,\
		`player_exit_y`,\
		`player_exit_z`,\
		`veh_enter_x`,\
		`veh_enter_y`,\
		`veh_enter_z`,\
		`veh_enter_fa`,\
		`veh_exit_x`,\
		`veh_exit_y`,\
		`veh_exit_z`,\
		`veh_exit_fa`,\
		`exit_int`,\
		`enter_int`,\
		`enter_vw`)\
		VALUES ('%i', '%i', '%i', '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%i','%i','%i')",
		price,GarageInfo[i][garageHouse],GarageInfo[i][garageBiz],
		GarageInfo[i][garagePlayer_Enter][0], GarageInfo[i][garagePlayer_Enter][1], GarageInfo[i][garagePlayer_Enter][2],
		GarageInfo[i][garagePlayer_Exit][0], GarageInfo[i][garagePlayer_Exit][1], GarageInfo[i][garagePlayer_Exit][2],
		GarageInfo[i][garagePlayer_Enter][0], GarageInfo[i][garagePlayer_Enter][1], GarageInfo[i][garagePlayer_Enter][2],
		GarageInfo[i][garageVeh_Exit][0], GarageInfo[i][garageVeh_Exit][1], GarageInfo[i][garageVeh_Exit][2], GarageInfo[i][garageExitInt], GarageInfo[i][garageEnterInt], GarageInfo[i][garageEnterVW]);
		mysql_tquery(dbHandle, query, "GarageInsert", "i", i);
		return i;
	}
	return -1;
}

ALTX:removegarage("/rgarage");
CMD:removegarage(playerid, params[])
{
    if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

    new id;
	if (sscanf(params, "i", id))
	    return SendSyntaxMessage(playerid, "/removegarage [ID ??????]");

	if(id < 0 || id > MAX_GARAGES-1 || 0 == GarageInfo[id][garageID])
	    return SendErrorMessage(playerid, "????? ??? ????? ID ?? ??????????.");

	new mes[128];
	format(mes, sizeof(mes), "????? ID: %i ??????.", id);
	SendClientMessage(playerid, -1, mes);

	mysql_format(dbHandle, mes, sizeof(mes), "DELETE FROM `garage` WHERE `id`='%i'", GarageInfo[id][garageID]);
	mysql_tquery(dbHandle, mes);

    GarageInfo[id][garageID] = 0;

	if(IsValidDynamicCP(GarageInfo[id][garageCP]))
		DestroyDynamicCP(GarageInfo[id][garageCP]);
	return 1;
}

CMD:gotogarage(playerid, params[])
{
    if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

    new id;
	if (sscanf(params, "i", id))
	    return SendSyntaxMessage(playerid, "/gotogarage [ID ??????]");

	if(id < 0 || id > MAX_GARAGES-1 || 0 == GarageInfo[id][garageID])
	    return SendErrorMessage(playerid, "????? ??? ????? ID ?? ??????????.");

	SetPlayerPosEx(playerid, GarageInfo[id][garagePlayer_Enter][0], GarageInfo[id][garagePlayer_Enter][1], GarageInfo[id][garagePlayer_Enter][2]);
    SetInterior(playerid, GarageInfo[id][garageEnterInt]);
	SetWorld(playerid, GarageInfo[id][garageEnterVW]);
	return 1;
}

CMD:editgarage(playerid, params[])
{
    if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

    new id, parametrs[12], arg[12], query[256];
	if (sscanf(params, "is[12]S()[12]", id, parametrs, arg))
	{
	    SendSyntaxMessage(playerid, "/editgarage [ID ??????] [????????] [????????]");
	    return SendClientMessage(playerid, 0xECA129FF, "?????????: {ffffff}position, vehposition, interior, vehinterior, price, locked");
	}

	if(id < 0 || id > MAX_GARAGES-1 || 0 == GarageInfo[id][garageID])
	    return SendErrorMessage(playerid, "????? ??? ????? ID ?? ??????????.");

	if(0 == strcmp(parametrs, "position"))
	{
	    if (IsPlayerInAnyVehicle(playerid))
	    	return SendErrorMessage(playerid, "?????????? ?????????? ??? ??????????.");

		if (GetInterior(playerid) || GetWorld(playerid))
	    	return SendErrorMessage(playerid, "??? ??????????? ??? ? ???????? ?????? ???? - 0.");

		SendClientMessageEx(playerid, -1, "?? ???????? ?????????????? ?????? ID: %i.", id);

		GetPlayerPos(playerid, GarageInfo[id][garagePlayer_Enter][0], GarageInfo[id][garagePlayer_Enter][1], GarageInfo[id][garagePlayer_Enter][2]);
        GarageInfo[id][garageEnterInt] = GetInterior(playerid);
		GarageInfo[id][garageEnterVW] = GetWorld(playerid);

        if(IsValidDynamicCP(GarageInfo[id][garageCP]))
			DestroyDynamicCP(GarageInfo[id][garageCP]);

        GarageInfo[id][garageCP] =
			CreateDynamicCP(GarageInfo[id][garagePlayer_Enter][0], GarageInfo[id][garagePlayer_Enter][1], GarageInfo[id][garagePlayer_Enter][2], 0.9, GarageInfo[id][garageEnterVW], GarageInfo[id][garageEnterInt], -1, 3.0);

		mysql_format(dbHandle, query, sizeof(query), "UPDATE `garage` SET `player_enter_x`='%f',`player_enter_y`='%f',`player_enter_z`='%f', `enter_int`='%i', `enter_vw`='%i' WHERE `id`='%i'",
		GarageInfo[id][garagePlayer_Enter][0], GarageInfo[id][garagePlayer_Enter][1], GarageInfo[id][garagePlayer_Enter][2], GarageInfo[id][garageEnterInt], GarageInfo[id][garageEnterVW], GarageInfo[id][garageID]);
		mysql_tquery(dbHandle, query);
	    return 1;
	}
    else if(0 == strcmp(parametrs, "vehposition"))
	{
	    if (!IsPlayerInAnyVehicle(playerid))
	    	return SendErrorMessage(playerid, "?????????? ?????????? ? ??????????.");

		if (GetInterior(playerid) || GetWorld(playerid))
	    	return SendErrorMessage(playerid, "??? ??????????? ??? ? ???????? ?????? ???? - 0.");

		SendClientMessageEx(playerid, -1, "????? ?????????? ??? ?????? ???????? ??? ?????? ID: %i.", id);

		GetVehiclePos(GetPlayerVehicleID(playerid), GarageInfo[id][garageVeh_Enter][0], GarageInfo[id][garageVeh_Enter][1], GarageInfo[id][garageVeh_Enter][2]);
		GetVehicleZAngle(GetPlayerVehicleID(playerid), GarageInfo[id][garageVeh_Enter][3]);

		mysql_format(dbHandle, query, sizeof(query), "UPDATE `garage` SET `veh_enter_x`='%f',`veh_enter_y`='%f',`veh_enter_z`='%f',`veh_enter_fa`='%f' WHERE `id`='%i'",
		GarageInfo[id][garageVeh_Enter][0], GarageInfo[id][garageVeh_Enter][1], GarageInfo[id][garageVeh_Enter][2], GarageInfo[id][garageVeh_Enter][3], GarageInfo[id][garageID]);
		mysql_tquery(dbHandle, query);
	    return 1;
	}
	else if(0 == strcmp(parametrs, "interior"))
	{
	    if (IsPlayerInAnyVehicle(playerid))
	    	return SendErrorMessage(playerid, "?????????? ?????????? ??? ??????????.");

		SendClientMessageEx(playerid, -1, "?? ???????? ?????????????? ?????? ?????? ? ?????? ID: %i.", id);

		GetPlayerPos(playerid, GarageInfo[id][garagePlayer_Enter][0], GarageInfo[id][garagePlayer_Enter][1], GarageInfo[id][garagePlayer_Enter][2]);
		GarageInfo[id][garageExitInt] = GetInterior(playerid);
		SetWorld(playerid, GarageInfo[id][garageExitVW]);

		mysql_format(dbHandle, query, sizeof(query), "UPDATE `garage` SET `player_exit_x`='%f',`player_exit_y`='%f',`player_exit_z`='%f',`exit_int`='%i' WHERE `id`='%i'",
		GarageInfo[id][garagePlayer_Exit][0], GarageInfo[id][garagePlayer_Exit][1], GarageInfo[id][garagePlayer_Exit][2], GarageInfo[id][garageExitInt], GarageInfo[id][garageID]);
		mysql_tquery(dbHandle, query);
	    return 1;
	}
	else if(0 == strcmp(parametrs, "vehinterior"))
	{
	    if (!IsPlayerInAnyVehicle(playerid))
	    	return SendErrorMessage(playerid, "?????????? ?????????? ? ??????????.");

		if (GetInterior(playerid) != GarageInfo[id][garageExitInt])
		    return SendErrorMessage(playerid, "??????? ???????? ????? ?????? ? ??????.");

		SendClientMessageEx(playerid, -1, "????? ?????????? ? ?????? ???????? ??? ?????? ID: %i.", id);

		GetVehiclePos(GetPlayerVehicleID(playerid), GarageInfo[id][garageVeh_Exit][0], GarageInfo[id][garageVeh_Exit][1], GarageInfo[id][garageVeh_Exit][2]);
		GetVehicleZAngle(GetPlayerVehicleID(playerid), GarageInfo[id][garageVeh_Exit][3]);

		mysql_format(dbHandle, query, sizeof(query), "UPDATE `garage` SET `veh_exit_x`='%f',`veh_exit_y`='%f',`veh_exit_z`='%f',`veh_exit_fa`='%f' WHERE `id`='%i'",
		GarageInfo[id][garageVeh_Exit][0], GarageInfo[id][garageVeh_Exit][1], GarageInfo[id][garageVeh_Exit][2], GarageInfo[id][garageVeh_Exit][3], GarageInfo[id][garageID]);
		mysql_tquery(dbHandle, query);
	    return 1;
	}
	else if(0 == strcmp(parametrs, "price"))
	{
	    new price;

	    if(sscanf(arg, "i", price))
	        return SendSyntaxMessage(playerid, "/editgarage price [????]");

        if (price < 0 || price > 1000000)
	    	return SendErrorMessage(playerid, "?? ??????? ???????? ????????? ??????.");

		SendClientMessageEx(playerid, -1, "????????? ?????? ID: %i ???????? ?? $%i.", id, price);

		GarageInfo[id][garagePrice] = price;

		mysql_format(dbHandle, query, sizeof(query), "UPDATE `garage` SET `price`='%i' WHERE `id`='%i'", GarageInfo[id][garagePrice], GarageInfo[id][garageID]);
		mysql_tquery(dbHandle, query);
	    return 1;
	}
	else if(0 == strcmp(parametrs, "locked"))
	{
	    new locked;

	    if(sscanf(arg, "i", locked))
	        return SendSyntaxMessage(playerid, "/editgarage locked [0 - ??????? | 1 - ???????]");

        if (locked != 0 && locked != 1)
	    	return SendErrorMessage(playerid, "????????: 0 - ??????? | 1 - ???????");

        GarageInfo[id][garageLocked] = locked;

		SendClientMessageEx(playerid, -1, "?????? ?????? ID: %i - %s", id, (locked)?("???????"):("???????"));

		mysql_format(dbHandle, query, sizeof(query), "UPDATE `garage` SET `locked`='%i' WHERE `id`='%i'", GarageInfo[id][garagePrice], GarageInfo[id][garageID]);
		mysql_tquery(dbHandle, query);
	    return 1;
	}
	else SendClientMessage(playerid, 0xECA129FF, "[ ! ] {ffffff}???????? ?? ??????.");
	return 1;
}

CMD:buygarage(playerid, params[])
{
	new id = GarageNearestOutside(playerid);

	if (-1 == id)
		return 1;

	if (GarageInfo[id][garageOwner] != 0)
	    return SendErrorMessage(playerid, "?????? ????? ??? ??????.");

	if (GarageInfo[id][garageHouse] != 0)
	    return SendErrorMessage(playerid, "?????? ????? ????? ?????????? ?????? ? ?????.");

    if (GarageInfo[id][garageBiz] != 0)
	    return SendErrorMessage(playerid, "?????? ????? ????? ?????????? ?????? ? ????????.");

	new we_have;
	for(new i = 0; i < MAX_GARAGES; i++)
	{
	    if(0 == GarageInfo[i][garageID] || 0 != GarageInfo[i][garageHouse] || 0 != GarageInfo[i][garageBiz] || PlayerInfo[playerid][pID] != GarageInfo[i][garageOwner]) continue;
		we_have++;
		break;
	}

	if (we_have)
	    return SendErrorMessage(playerid, "? ??? ??? ???? ????????????? ?????.");

	if (GetCash(playerid) < GarageInfo[id][garagePrice])
	    return SendErrorMessage(playerid, "? ??? ???????????? ????? ??? ??????? ??????.");

	new money = PlayerInfo[playerid][pCash];
	GiveCash(playerid, -GarageInfo[id][garagePrice]);

	SendClientMessageEx(playerid, -1, "????? ?????????? ?? $%i.", GarageInfo[id][garagePrice]);
	GarageInfo[id][garageOwner] = PlayerInfo[playerid][pID];

    new query[128];
	mysql_format(dbHandle, query, sizeof(query), "UPDATE `garage` SET `owner`='%i' WHERE `id`='%i'", GarageInfo[id][garageOwner], GarageInfo[id][garageID]);
	mysql_tquery(dbHandle, query);

	new mes[256];
	format(mes, sizeof(mes), "%s [MYSQL: %i | IP: %s | ??????(????): %i | ??????(?????): %i] ????? ????? [G_MYSQL: %i] ?? -- $%i",
	GetName(playerid), PlayerInfo[playerid][pID], GetPlayerIP(playerid), money, GetCash(playerid), GarageInfo[id][garageID], GarageInfo[id][garagePrice]);
    insert_log(mes, PROPERTY_LOG, 5, playerid);
	return 1;
}

CMD:sellgarage(playerid, params[])
{
	new id = GarageNearestOutside(playerid);

	if (-1 == id)
		return 1;

	if (GarageInfo[id][garageOwner] != PlayerInfo[playerid][pID])
	    return SendErrorMessage(playerid, "?????? ????? ?? ??????????? ???.");

	if(GarageInfo[id][garageHouse] != 0)
	    return SendErrorMessage(playerid, "????? ????????? ?????? ????? ??????? ????.");

    if(GarageInfo[id][garageBiz] != 0)
	    return SendErrorMessage(playerid, "????? ????????? ?????? ????? ??????? ???????.");

    new money = PlayerInfo[playerid][pCash];
	GiveCash(playerid, GarageInfo[id][garagePrice]);

	SendClientMessageEx(playerid, -1, "????? ?????? ?? $%i.", GarageInfo[id][garagePrice]);

	GarageInfo[id][garageOwner] = 0;

	new query[128];
	mysql_format(dbHandle, query, sizeof(query), "UPDATE `garage` SET `owner`='0' WHERE `id`='%i'", GarageInfo[id][garageID]);
	mysql_tquery(dbHandle, query);

	new mes[256];
	format(mes, sizeof(mes), "%s [MYSQL: %i | IP: %s | ??????(????): %i | ??????(?????): %i] ?????? ????? [G_MYSQL: %i] ?? -- $%i",
	GetName(playerid), PlayerInfo[playerid][pID], GetPlayerIP(playerid), money, GetCash(playerid), GarageInfo[id][garageID], GarageInfo[id][garagePrice]);
    insert_log(mes, PROPERTY_LOG, 6, playerid);
	return 1;
}

CMD:checkint(playerid, params[])
{
	new houseid;

	if ((houseid = GetNearHouseOutside(playerid)) == -1)
	    return SendErrorMessage(playerid, "????? ? ???? ??? ???? ??? ???????.");

	if(HouseInfo[houseid][hOwnerID] != 0)
	    return SendErrorMessage(playerid, "?????? ??? ??? ??????????.");

	if(!GetWorld(playerid) && !GetInterior(playerid))
	    	GetPlayerPos(playerid, PlayerInfo[playerid][pLocationPos][0], PlayerInfo[playerid][pLocationPos][1], PlayerInfo[playerid][pLocationPos][2]);

	SetPlayerPosEx(playerid,HouseInfo[houseid][hExitX],HouseInfo[houseid][hExitY],HouseInfo[houseid][hExitZ]);
	SetInterior(playerid,HouseInfo[houseid][hExitInt]);
	SetWorld(playerid,HouseInfo[houseid][hExitVW]);
	pTemp[playerid][pHouseEntered] = houseid;

	SetPVarInt(playerid, #check_int, 30);
	SendClientMessage(playerid, -1, "?? ?????????????? ????????. ? ??? ???? 30 ??????.");
	return 1;
}

CMD:buyhouse(playerid, params[])
{
	new houseid;

	if ((houseid = GetNearHouseOutside(playerid)) == -1)
	    return SendErrorMessage(playerid, "????? ? ???? ??? ???? ??? ???????.");

	if(HouseInfo[houseid][hOwnerID] != 0)
	    return SendErrorMessage(playerid, "?????? ??? ??? ??????????.");

    if(GetPlayerHouses(playerid) >= GetMaxPlayerHouse(playerid))
	    return SendErrorMessage(playerid, "?? ?? ?????? ?????????? ?????? ?????.");

	if(PlayerInfo[playerid][pLevel] < HouseInfo[houseid][hLevelbuy])
	    return SendClientMessageEx(playerid,COLOR_LIGHTRED,"??? ???????????? ??????? ???? ??? ????????? %i ???????.", HouseInfo[houseid][hLevelbuy]);

	if(GetCash(playerid) < HouseInfo[houseid][hPrice])
		return SendNotCash(playerid);

	HouseInfo[houseid][hOwnerID] = PlayerInfo[playerid][pID];
	HouseInfo[houseid][hLocked] = 1;
	HouseInfo[houseid][hCash] = 0;
	format(HouseInfo[houseid][hOwner], MAX_PLAYER_NAME, GetNameEx(playerid));

	new money = PlayerInfo[playerid][pCash];
	GiveCash(playerid, -HouseInfo[houseid][hPrice]);

	SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "???????????! ??? ??????? ?????????? ?? $%i.",HouseInfo[houseid][hPrice]);
	SCM(playerid,COLOR_WHITE,"??????????? \"/househelp\" ??? ?????? ?? ?????????? ?????.");

	for(new i = 0; i != MAX_GARAGES; i++)
	{
	    if(0 == GarageInfo[i][garageID] || GarageInfo[i][garageHouse] != HouseInfo[houseid][hID])
	        continue;

		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "?????? ? ????? ??? ???????? ????? ID: %i.", i);
        GarageInfo[i][garageOwner] = PlayerInfo[playerid][pID];

        new query[128];
		mysql_format(dbHandle, query, sizeof(query), "UPDATE `garage` SET `owner`='%i' WHERE `id`='%i'", GarageInfo[i][garageOwner], GarageInfo[i][garageID]);
		mysql_tquery(dbHandle, query);
	}

	UpdateHouseText(houseid);
	Save_House(houseid);

	new mes[256];
	format(mes, sizeof(mes), "%s [MYSQL: %i | IP: %s | ??????(????): %i | ??????(?????): %i] ????? ??? [H_MYSQL: %i] ?? -- $%i",
	GetName(playerid), PlayerInfo[playerid][pID], GetPlayerIP(playerid), money, GetCash(playerid), HouseInfo[houseid][hID], HouseInfo[houseid][hPrice]);
    insert_log(mes, PROPERTY_LOG, 3, playerid);
	return 1;
}

CMD:hmenu(playerid, params[])
{
    new houseid;

	if ((houseid = GetNearHouse(playerid)) == -1)
	    return SendErrorMessage(playerid, "????? ? ???? ??? ????.");

	if(HouseInfo[houseid][hOwnerID] != PlayerInfo[playerid][pID])
	    return SendErrorMessage(playerid, "?????? ??? ?? ??????????? ???.");

	static const str_size[] = "1. %s ??????? ?????\n\
		2. ?????????? ???????\n\
		3. ??????\n\
		4. ?????????\n\
		5. ????\n\
		6. ??????? ??? ??????????? {FFFF00}(50%c ?? ????????? ?????????)\n\
		7. ??????? ??? ??????";

	new mes[sizeof(str_size) - 4 + 7 + 1 + 1];
 	format(mes, sizeof(mes), str_size, (HouseInfo[houseid][hLocked] != 0)?("???????"):("???????"), '%');
	Dialog_Show(playerid, HouseMenu, DIALOG_STYLE_LIST, "???? ????", mes, "???????", "??????");

	SetPVarInt(playerid, #house_menu, houseid);
	return 1;
}

Dialog:HouseMenu(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return 1;

	new houseid = GetPVarInt(playerid, #house_menu);
	if(houseid < 0 || houseid > MAX_HOUSES-1 || HouseInfo[houseid][hOwnerID] != PlayerInfo[playerid][pID])
	    return 1;

	switch(listitem)
	{
	    case 0: cmd::lock(playerid, "");
		case 1: cmd::furniture(playerid, "");
		case 2:
		{
		    new query[128];
			mysql_format(dbHandle, query, sizeof(query), "SELECT `id`, `name` FROM `users` WHERE `rent_key` = %i", HouseInfo[houseid][hID]);
			mysql_tquery(dbHandle, query, "ShowTenantsAmount", "i", playerid);
		}
		case 3:
		{
		    if(0 == IsPlayerHouseInside(playerid, houseid))
		        return SendErrorMessage(playerid, "?? ?????? ?????????? ? ????.");

			ShowHouseInventory(playerid, houseid);
		}
		case 4: cmd::clothes(playerid, "");
		case 5:
		{
		    if(0 == IsPlayerHouseOutside(playerid, houseid))
		        return SendErrorMessage(playerid, "?? ?????? ?????????? ??????? ????.");

		    static const str_size[] = "{FFFFFF}?? ?????? ??????? ??? ?? $%i. {FFFF00}(50%c ?? ????????? ?????????)?";
			new mes[sizeof(str_size) - 2 + 12];
		 	format(mes, sizeof(mes), str_size, HouseInfo[houseid][hPrice]/2, '%');
			Dialog_Show(playerid, SellHouse, DIALOG_STYLE_MSGBOX, "??????? ????", mes, "???????", "??????");
		}
		case 6:
		{
		    Dialog_Show(playerid, SellHouseTo, DIALOG_STYLE_INPUT, "??????? ????", "{ffffff}??????? ????. ??????? {C3C3C3}[PartOfName/playerid] [????????? ???????]", "???????", "??????");
		}
	}
	return 1;
}

CMD:sellhouse(playerid, params[])
{
    new houseid;

	if ((houseid = GetNearHouseOutside(playerid)) == -1)
	    return SendErrorMessage(playerid, "????? ? ???? ??? ????.");

	if(HouseInfo[houseid][hOwnerID] != PlayerInfo[playerid][pID])
	    return SendErrorMessage(playerid, "?????? ??? ?? ??????????? ???.");

    static const str_size[] = "{FFFFFF}?? ?????? ??????? ??? ?? $%i. {FFFF00}(50%c ?? ????????? ?????????)?";
	new mes[sizeof(str_size) - 2 + 12];
 	format(mes, sizeof(mes), str_size, HouseInfo[houseid][hPrice]/2, '%');
	Dialog_Show(playerid, SellHouse, DIALOG_STYLE_MSGBOX, "??????? ????", mes, "???????", "??????");
	return 1;
}

CMD:sellhouseto(playerid, params[])
{
	new userid,
	    price;

    if(sscanf(params,"ii", userid, price))
		return SendSyntaxMessage(playerid, "/sellhouseto [playerid/PartOfName] [????????? ???????]");

    new houseid;

	if ((houseid = GetNearHouseOutside(playerid)) == -1)
	    return SendErrorMessage(playerid, "????? ? ???? ??? ????.");

	if(HouseInfo[houseid][hOwnerID] != PlayerInfo[playerid][pID])
	    return SendErrorMessage(playerid, "?????? ??? ?? ??????????? ???.");

	if(!IsPlayerLogged(userid))
		return SendNotConnected(playerid);

	if(!PlayerNearPlayer(3.0, playerid, userid))
		return SendNotNearPlayer(playerid);

	if(price < 0 || price > 100000000)
	    return SendErrorMessage(playerid, "??????? ?????????? ???? ???????.");

	SendClientMessageEx(playerid, COLOR_INFO, "?? ?????? ??????? ??? ?????? %s ?? $%i.", GetNameEx(userid), price);
    SendClientMessageEx(userid, COLOR_INFO, "%s ????? ??????? ??? ??? ??? ?? $%i. (??????? Y ??? ???????)", GetNameEx(playerid), price);

    pTemp[userid][pHousePrice] = price;
	pTemp[userid][pHousePlayer] = playerid;
	pTemp[userid][pHouseHouse] = houseid;
	SetPVarInt(userid, #accept_time, gettime() + 30);
	return 1;
}

CMD:grantbuild(playerid, params[])
{
    new userid;

	if(sscanf(params,"u", userid))
		return SendSyntaxMessage(playerid, "/grantbuild [playerid/PartOfName]");

    if(!IsPlayerLogged(userid))
		return SendNotConnected(playerid);

	if(userid == playerid)
		return SCM(playerid, COLOR_LIGHTRED, "???? ?????? ?????? ??????????.");

	if(!PlayerNearPlayer(3.0, playerid, userid))
		return SendNotNearPlayer(playerid);

    new houseid;

	if ((houseid = GetNearHouseInside(playerid)) == -1)
	    return SendErrorMessage(playerid, "?? ?????? ?????????? ? ????.");

	if(HouseInfo[houseid][hOwnerID] != PlayerInfo[playerid][pID])
	    return SendErrorMessage(playerid, "?????? ??? ?? ??????????? ???.");

	if(pTemp[userid][pBuildHouse] == HouseInfo[houseid][hID])
	{
	    SendServerMessage(playerid, "?? ??????? ?????? ?? ????????? ? ?????? %s.", GetNameWithMask(userid));
	    SendServerMessage(userid, "%s ??????(-?) ? ??? ?????? ?? ?????????.", GetNameWithMask(playerid));
	    pTemp[userid][pBuildHouse] = 0;
	    return 1;
	}
	SendServerMessage(playerid, "?? ?????? ?????? ? ?????? ????????? ?????? %s.", GetNameWithMask(userid));
 	SendServerMessage(userid, "%s ?????(-?) ??? ?????? ? ?????? ????????? ??? ?????????? ??????.", GetNameWithMask(playerid));
    pTemp[userid][pBuildHouse] = HouseInfo[houseid][hID];
	return 1;
}

CMD:clothes(playerid, params[])
{
    if(PlayerInfo[playerid][pOnDuty])
	    return SendErrorMessage(playerid, "?? ?????? ?????????? ?? ?? ?????????.");

    new id,
		used;

	if ((id = GetNearHouseInside(playerid)) != -1)
	{
		if(HouseInfo[id][hOwnerID] != PlayerInfo[playerid][pID] && PlayerInfo[playerid][pRentKey] != HouseInfo[id][hID])
	    	return SendErrorMessage(playerid, "?????? ??? ?? ??????????? ??? ??? ?? ??? ?? ?????????.");

		if(HouseInfo[id][hCupboard] == 0)
	    	return SendErrorMessage(playerid, "? ???? ??? ????? ??? ???????? ?????.");

		used = 1;
	}

	if(used == 0 && (id = GetNearBizInside(playerid)) != -1)
	{
		if(BizInfo[id][bizType] != BIZ_CLOTHES)
	    	return SCM(playerid, COLOR_INFO, "?? ?? ?????????? ? ???????? ??????.");

		used = 1;
	}

	if(used == 0)
	    return 1;

	new mes[128];
	for(new i; i != 3; i++)
	{
 		if(PlayerInfo[playerid][pTog][i] == 0)
			strcat(mes, "\n[????????]");
   		else
   			format(mes, sizeof(mes), "%s\n[??????? ???? #%i]", mes, PlayerInfo[playerid][pTog][i]);
	}
	Dialog_Show(playerid, EditClothes, DIALOG_STYLE_LIST, "???????? ????...", mes, "???????", "??????");
	return 1;
}

CMD:offclothes(playerid, params[])
{
	new
	    race;

	if(PlayerInfo[playerid][pOnDuty])
	    return SendErrorMessage(playerid, "?? ?????? ?????????? ?? ?? ?????????.");

	if (PlayerInfo[playerid][pSkin] != GetPlayerSkin(playerid))
	{
	    if(PlayerInfo[playerid][pSkin] == 0)
	        return SendErrorMessage(playerid, "?? ?? ?????? ??????? ?????? ??? ??? ? ??? ?? ???.");

	    SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
	    SCM(playerid, -1, "?? ??????? ???? ????.");
	    return 1;
	}

	if (sscanf(params, "d", race))
	    return SendSyntaxMessage(playerid, "/offclothes [1-2] (1-?????????? 2-???????????)");

	if (race < 1 || race > 2)
	    return SendErrorMessage(playerid, "??? ?????: (1-?????????? 2-???????????)");

    switch (PlayerInfo[playerid][pSex])
   	{
  		case 1: // 18 - ??????, 45, 97, 154 - ???????
  		{
			switch(race)
			{
			    case 1: SCM(playerid, -1, "?? ????? ? ???? ??????."), SetPlayerSkin(playerid, 18);
			    case 2:
				{
				    switch(random(3))
				    {
				        case 0: SetPlayerSkin(playerid, 45);
				        case 1: SetPlayerSkin(playerid, 97);
				        case 2: SetPlayerSkin(playerid, 154);
				    }
					SCM(playerid, -1, "?? ????? ? ???? ??????.");
				}
			}
		}
		case 2: // 251, 140, 138 - ???????, 139 - ??????
		{
			switch(race)
			{
			    case 1: SCM(playerid, -1, "?? ????? ? ???? ??????."), SetPlayerSkin(playerid, 139);
			    case 2:
				{
				    switch(random(3))
				    {
				        case 0: SetPlayerSkin(playerid, 251);
				        case 1: SetPlayerSkin(playerid, 140);
				        case 2: SetPlayerSkin(playerid, 138);
				    }
					SCM(playerid, -1, "?? ????? ? ???? ??????");
				}
			}
		}
  	}
	return 1;
}

CMD:houseupgrade(playerid, params[])
{
    new houseid;

	if ((houseid = GetNearHouseInside(playerid)) == -1)
	    return SendErrorMessage(playerid, "?? ?????? ???? ?????? ????.");

	if(HouseInfo[houseid][hOwnerID] != PlayerInfo[playerid][pID])
	    return SendErrorMessage(playerid, "?????? ??? ?? ??????????? ???.");


	new option[16],
		secoption[128],
		thirdoption,
		fourthoption;

	if(sscanf(params, "s[24]D(-1)D(-1)D(-1)", option, secoption, thirdoption, fourthoption))
		return SendSyntaxMessage(playerid, "/houseupgrade [?????????: radio($500), lock, alarm, cupboard($600), door, repairdoor, heal]");

	if(!strcmp(option, "radio", true))
	{
		if(HouseInfo[houseid][hRadio] == 1)
			return SCM(playerid, COLOR_LIGHTRED, "? ???? ???? ??? ??????????? ?????.");

		if(GetCash(playerid) < 500)
			return SCM(playerid, COLOR_LIGHTRED, "???? ????? ?????????? $500.");

		SCM(playerid, COLOR_GREEN, "?? ????????? ????? ??? ?????? ???? ?? $500. ??????????? \"/setstation\".");
		HouseInfo[houseid][hRadio] = 1;
		GiveCash(playerid, -500);

		set_house_int(houseid, "radio", 1);
		return 1;
	}
	else if(!strcmp(option, "lock", true))
	{
		new level;
		if(sscanf(params, "{s[64]}d", level))
		{
			SendSyntaxMessage(playerid, "/houseupgrade lock [???????]");
			SCM(playerid, COLOR_INFO, "??????? - 1: $250");
			SCM(playerid, COLOR_INFO, "??????? - 2: $500");
			SCM(playerid, COLOR_INFO, "??????? - 3: $750");
			SCM(playerid, COLOR_INFO, "??????? - 4: $1.000");
			SCM(playerid, COLOR_INFO, "??????? - 5: $1.250");
			return 1;
		}

		if(level < 1 || level > 5)
			return SendErrorMessage(playerid, "??????? ????? ?? ????? ???? ?????? 1 ? ?????? 5.");

		if(GetCash(playerid) < 250*level)
			return SendErrorMessage(playerid, "???? ????? %i-??? ?????? ?????????? $%i.", level, 250*level);

		if(HouseInfo[houseid][hLock] >= level)
			return SendErrorMessage(playerid,"? ??? ??? ?????????? ???? ??? ????? ?????.");

		GiveCash(playerid, -250*level);
		HouseInfo[houseid][hLock] = level;

		SendClientMessageEx(playerid,COLOR_GREEN,"?? ????????? ????? %i-?? ?????? ?? $%i.", HouseInfo[houseid][hLock], 250*level);
		set_house_int(houseid, "lock", HouseInfo[houseid][hLock]);
		return 1;
	}
	else if(!strcmp(option, "alarm", true))
	{
		new level;
		if(sscanf(params, "{s[64]}d", level))
		{
			SendSyntaxMessage(playerid, "/houseupgrade alarm [???????]");
			SCM(playerid, COLOR_INFO, "??????? - 1: $500");
			SCM(playerid, COLOR_INFO, "??????? - 2: $1.000");
			SCM(playerid, COLOR_INFO, "??????? - 3: $1.500");
			return 1;
		}
		if(level < 1 || level > 3)
			return SendErrorMessage(playerid, "??????? ???????????? ?? ????? ???? ?????? 1 ? ?????? 3.");

		if(GetCash(playerid) < 500*level)
			return SendErrorMessage(playerid, "???? ???????????? %i-??? ?????? ?????????? $%i.", level, 500*level);

		if(HouseInfo[houseid][hAlarm] >= level)
		    return SendErrorMessage(playerid, "? ??? ??? ??????????? ??? ??? ????? ????????????.");

		GiveCash(playerid, -500*level);
		HouseInfo[houseid][hAlarm] = level;

		SendClientMessageEx(playerid,COLOR_GREEN,"?? ????????? ???????????? %i-?? ?????? ?? $%i.", HouseInfo[houseid][hAlarm], 500*level);
		set_house_int(houseid, "alarm", HouseInfo[houseid][hAlarm]);
		return 1;
	}
	else if(!strcmp(option, "door", true))
	{
		new level;
		if(sscanf(params, "{s[64]}d", level))
		{
			SendSyntaxMessage(playerid, "/houseupgrade door [???????]");
			SCM(playerid, COLOR_INFO, "??????? - 1: ?????????? - $750");
			SCM(playerid, COLOR_INFO, "??????? - 2: ?????????  - $1.500");
			return 1;
		}

		if(level < 1 || level > 2)
			return SendErrorMessage(playerid,"??????? ????? ?? ????? ???? ?????? 1 ? ?????? 2.");

		if(GetCash(playerid) < 750*level)
			return SendErrorMessage(playerid, "???? %s ????? ?????????? $%i.", (level == 1)?("??????????"):("????????"), 500*level);

		if(HouseInfo[houseid][hDoor] >= level)
			return SendErrorMessage(playerid,"? ??? ??? ??????????? ??? ??? ????? ?????.");

		GiveCash(playerid, -750*level);
		HouseInfo[houseid][hDoor] = level;

		SendClientMessageEx(playerid,COLOR_GREEN,"?? ????????? %s ????? ?? $%i.", (level == 1)?("??????????"):("????????"), 750*level);
		set_house_int(houseid, "door", HouseInfo[houseid][hDoor]);
		return 1;
	}
	else if(!strcmp(option, "cupboard", true))
	{
		if(HouseInfo[houseid][hCupboard] != 0)
			return SCM(playerid, COLOR_LIGHTRED, "? ??? ??? ???? ????.");

		if(GetCash(playerid) < 600)
			return SCM(playerid,COLOR_LIGHTRED,"??? ????? ??? ????? $600.");

		GiveCash(playerid, -600);
		SCM(playerid,COLOR_GREEN,"?? ????????? ???? ?? $600. ??????? /clothes ??? ?????????????.");

		HouseInfo[houseid][hCupboard] = 1;
		set_house_int(houseid, "cupboard", 1);
	}
	else if(!strcmp(option, "repairdoor", true))
	{
		if(HouseInfo[houseid][hDDoor] == 0)
			return SCM(playerid, COLOR_LIGHTRED, "? ????? ??????? ?????? ??? ?????????.");

		if(GetCash(playerid) < 300)
			return SCM(playerid,COLOR_LIGHTRED,"??? ??????? ????? ??? ????? $300.");

		GiveCash(playerid, -300);
		SCM(playerid,COLOR_GREEN,"?? ???????? ????? ?? $300.");

		HouseInfo[houseid][hDDoor] = 0;
		UpdateHouseDoor(houseid);
		set_house_int(houseid, "ddoor", 0);
	}
	else if(!strcmp(option, "heal", true))
	{
		new level;
		if(sscanf(params, "{s[64]}d", level))
		{
			SendSyntaxMessage(playerid, "/houseupgrade heal [???????]");
			SCM(playerid, COLOR_INFO, "??????? - 1: $800 / +20 HP / ????????: 60 ??????.");
			SCM(playerid, COLOR_INFO, "??????? - 2: $1.000 / +40 HP / ????????: 80 ??????.");
			SCM(playerid, COLOR_INFO, "??????? - 3: $1.400 / +60 HP / ????????: 100 ??????.");
			SCM(playerid, COLOR_INFO, "??????? - 4: $2.000 / +80 HP / ????????: 120 ??????.");
			SCM(playerid, COLOR_INFO, "??????? - 5: $3.000 / +100 HP / ????????: 150 ??????.");
			return 1;
		}

		if(HouseInfo[houseid][hHeal] != 0)
		    return SendErrorMessage(playerid, "? ???? ??? ???? ???????.");

		new cost_heal[5] = {800, 1000, 1400, 2000, 3000};

		if(level < 1 || level > 5)
			return SendErrorMessage(playerid, "??????? ???????????? ?? ????? ???? ?????? 1 ? ?????? 5.");

		if(GetCash(playerid) < cost_heal[level-1])
			return SendErrorMessage(playerid, "???? ??????? %i-??? ?????? ?????????? $%i.", level, cost_heal[level-1]);

		GiveCash(playerid, -cost_heal[level-1]);
		HouseInfo[houseid][hHeal] = level;
		HouseInfo[houseid][hHealAmount] = 3;

		SendClientMessageEx(playerid,COLOR_GREEN,"?? ????????? ??????? %i-?? ?????? ?? $%i.", HouseInfo[houseid][hHeal], cost_heal[level-1]);
  		Save_House(houseid);
		return 1;
	}
	return 1;
}

CMD:housewithdraw(playerid, params[])
{
    new houseid;

	if ((houseid = GetNearHouseInside(playerid)) == -1)
	    return SendErrorMessage(playerid, "?? ?????? ???? ?????? ????.");

	if(HouseInfo[houseid][hOwnerID] != PlayerInfo[playerid][pID])
	    return SendErrorMessage(playerid, "?????? ??? ?? ??????????? ???.");

	new amount;
	if(sscanf(params, "i", amount))
	{
	    SendClientMessageEx(playerid,COLOR_YELLOWG,"? ????? ?????? ???? $%i",HouseInfo[houseid][hCash]);
		return SendSyntaxMessage(playerid, "/housewithdraw [text]");
	}

	if (amount > HouseInfo[houseid][hCash] || amount < 1)
	    return SendClientMessageEx(playerid,COLOR_YELLOWG,"? ????? ?????? ???? $%i",HouseInfo[houseid][hCash]);

	GiveCash(playerid, amount);
	HouseInfo[houseid][hCash] -= amount;
	SendClientMessageEx(playerid,COLOR_YELLOWG,"?? ??????? $%i ?? ?????. ???????: $%i ", amount, HouseInfo[houseid][hCash]);
	set_house_int(houseid, "cash", HouseInfo[houseid][hCash]);
	return 1;
}

CMD:housedeposit(playerid, params[])
{
    new houseid;

	if ((houseid = GetNearHouseInside(playerid)) == -1)
	    return SendErrorMessage(playerid, "?? ?????? ???? ?????? ????.");

	if(HouseInfo[houseid][hOwnerID] != PlayerInfo[playerid][pID])
	    return SendErrorMessage(playerid, "?????? ??? ?? ??????????? ???.");

	new amount;
	if(sscanf(params, "i", amount))
	{
	    SendClientMessageEx(playerid,COLOR_YELLOWG,"? ????? ?????? ???? $%i",HouseInfo[houseid][hCash]);
		return SendSyntaxMessage(playerid, "/housewithdraw [text]");
	}

	if (amount >  GetCash(playerid) || amount < 1)
	    return SendErrorMessage(playerid, "? ??? ??? ??????? ?????.");

	GiveCash(playerid, -amount);
	HouseInfo[houseid][hCash] += amount;
	SendClientMessageEx(playerid,COLOR_YELLOWG,"?? ???????? $%i ? ??? ????. ????? ? ?????: $%i.", amount, HouseInfo[houseid][hCash]);
	set_house_int(houseid, "cash", HouseInfo[houseid][hCash]);
	return 1;
}

CMD:tenants(playerid, params[])
{
	new houseid;

	if ((houseid = GetNearHouse(playerid)) == -1)
	    return SendErrorMessage(playerid, "????? ? ???? ??? ????.");

	if(HouseInfo[houseid][hOwnerID] != PlayerInfo[playerid][pID])
	    return SendErrorMessage(playerid, "?????? ??? ?? ??????????? ???.");

    new query[128];
	mysql_format(dbHandle, query, sizeof(query), "SELECT `id`, `name` FROM `users` WHERE `rent_key` = %i", HouseInfo[houseid][hID]);
	mysql_tquery(dbHandle, query, "ShowTenantsAmount", "i", playerid);
	return 1;
}

CMD:rentcar(playerid, params[])
{
	new vehicle = GetPlayerVehicleID(playerid);
	if(!IsDriver(playerid))
	    return 1;

    if(0 == IsRentCar(vehicle))
		return SendErrorMessage(playerid, "?????? ????????? ?????? ??????????");

	if(VehicleInfo[vehicle][carRent] != 0)
	    return SendErrorMessage(playerid, "?????? ????????? ??? ?????????.");

	if(pTemp[playerid][pRentveh] != 0)
	    return SendErrorMessage(playerid, "?? ??? ????????? ?????????. ??????? /unrentcar, ????? ?????????? ??????.");

	if(GetCash(playerid) < 300)
	    return SendNotCash(playerid);

	GiveCash(playerid, -300);
	SendClientMessageEx(playerid, COLOR_GREEN, "?? ?????????? %s ?? $300. ????????? ???????: /unrentcar, /v lock.", VehicleNames[GetVehicleModel(vehicle)-400]);
    SendClientMessage(playerid, COLOR_GREEN, "????????! ???? ?? ???????????? ????????? 10 ?????, ?? ?? ????????.");
	pTemp[playerid][pRentveh] = vehicle;
    VehicleInfo[vehicle][carRent] = PlayerInfo[playerid][pID];
	return 1;
}

CMD:unrentcar(playerid, params[])
{
    if(pTemp[playerid][pRentveh] == 0)
		return 1;

	new vehicle = pTemp[playerid][pRentveh];
    SendClientMessageEx(playerid, COLOR_GREEN, "?? ?????????? ?????? %s.", VehicleNames[GetVehicleModel(vehicle)-400]);
	pTemp[playerid][pRentveh] = 0;
    VehicleInfo[vehicle][carRent] = 0;
    RespawnVehicle(vehicle);
	return 1;
}

CMD:rentroom(playerid, params[])
{
    new houseid;

	if ((houseid = GetNearHouseInside(playerid)) == -1)
	    return SendErrorMessage(playerid, "?? ?????? ?????????? ?????? ?????? ????.");

	if(HouseInfo[houseid][hOwnerID] != PlayerInfo[playerid][pID])
	    return SendErrorMessage(playerid, "?????? ??? ?? ??????????? ???.");

    new userid,
		price;

	if(sscanf(params,"ud", userid, price))
		return SendSyntaxMessage(playerid, "/rentroom [playerid/PartOfName] [????????? ?????????? ? ???]");

    if(userid == playerid)
		return SCM(playerid, COLOR_LIGHTRED, "?????? ???? ??????.");

	if(!IsPlayerLogged(userid))
		return SendNotConnected(playerid);

    if(!PlayerNearPlayer(3.0, playerid, userid))
		return SendNotNearPlayer(playerid);

	if(price < 0 || price > 500)
		return SendErrorMessage(playerid, "????????? ?????????? ?? $0 ?? $500.");

    if(GetPlayerHouses(userid) != 0 || PlayerInfo[userid][pRentKey] != 0)
	    return SendErrorMessage(playerid, "????? ??? ?????/???????? ???.");

	if(GetCash(userid) < price)
	    return SendClientMessage(playerid,COLOR_LIGHTRED,"? ?????? ???????????? ?????.");

    new query[128];
	mysql_format(dbHandle, query, sizeof(query), "SELECT `id` FROM `users` WHERE `rent_key`='%i'", HouseInfo[houseid][hID]);
	mysql_tquery(dbHandle, query, "OfferRentRoom", "iii", playerid, userid, price);
	return 1;
}

forward OfferRentRoom(playerid, userid, price);
public OfferRentRoom(playerid, userid, price)
{
	if(cache_num_rows() > 4)
	    return SendErrorMessage(playerid, "? ??? ????? ???????? ?? ????? 5 ???????.");

	pTemp[userid][pRentPlayer] = playerid;
	pTemp[userid][pRentPrice] = price;
	SetPVarInt(userid, #accept_time, gettime() + 30);
	SendClientMessageEx(playerid, COLOR_INFO, "?? ?????????? %s ?????????? ??? ?? $%i.", GetNameWithMask(userid), price);
    SendClientMessageEx(userid, COLOR_INFO, "%s ?????????(?) ??? ?????????? ??? ?? $%i ?????? ????????. (??????? Y ??? ??????)", GetNameWithMask(playerid), price);
	return 1;
}

CMD:unrent(playerid, params[])
{
	if(PlayerInfo[playerid][pRentKey] < 1)
	    return SendErrorMessage(playerid, "?? ?? ????????? ???.");

	PlayerInfo[playerid][pRentKey] = 0;
	SendClientMessageEx(playerid,COLOR_GREEN,"?? ?????????? ?? ?????? ????.");
	return 1;
}

CMD:greet(playerid, params[])
{
	new userid,
		type;

	if(sscanf(params,"ud", userid, type))
	{
		SendSyntaxMessage(playerid, "/greet [playerid/PartOfName] [???]");
		SCM(playerid, COLOR_GREEN, "[1] ???????????? [2] ??????????? [3] ??????????? [4] ??????????? [5] ???????????");
		SCM(playerid, COLOR_GREEN, "[6] ??????????? [7] ??????????? [8] ??????????? [9] ???????????");
		return 1;
	}

	if(!IsPlayerLogged(userid))
		return SendNotConnected(playerid);

	if(userid == playerid)
		return SCM(playerid, COLOR_LIGHTRED, "?? ?? ?????? ???????????? ??? ??????? ?? ????? ????.");

	if(type > 9 || type < 1)
	{
		SCM(playerid, COLOR_GREEN, "[1] ???????????? [2] ??????????? [3] ??????????? [4] ??????????? [5] ???????????");
		SCM(playerid, COLOR_GREEN, "[6] ??????????? [7] ??????????? [8] ??????????? [9] ???????????");
		return 1;
	}

	if(!PlayerNearPlayer(2.0, playerid, userid))
		return SendNotNearPlayer(playerid);

    pTemp[userid][pGreetPlayer] = playerid;
	pTemp[userid][pGreetType] = type;
    SetPVarInt(userid, #accept_time, gettime() + 30);

	SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"?? ????????? ?????? ??????????? %s.", GetNameWithMask(userid));
	SendClientMessageEx(userid, COLOR_LIGHTBLUE,"%s ????? ???????????????? ???. (??????? Y ????? ??????? ???????????)", GetNameWithMask(playerid));
	return 1;
}

CMD:buyfood(playerid, params[])
{
	for(new i; i != MAX_FOOD_STAND; i++)
	{
	    if(FoodStand[i][fStandOn] != 1 || !PlayerToPoint(3, playerid,FoodStand[i][fPosX], FoodStand[i][fPosY], FoodStand[i][fPosZ]) || FoodStand[i][fVW] != GetWorld(playerid) || FoodStand[i][fInt] != GetInterior(playerid))
	        continue;

		new mes[128];
		format(mes, sizeof(mes), "\
		??????\t$%i\n\
		?????\t$%i\n\
		??????\t$%i\n\
		???-???\t$%i",
		PRICE_BURGER,
		PRICE_PIZZA,
		PRICE_CHICKEN,
		PRICE_HOTDOG);

		Dialog_Show(playerid, BuyStandFood, DIALOG_STYLE_TABLIST, "{ffffff}[??????? ? ????]", mes, "??????", "??????");
		break;
	}
	return 1;
}

CMD:buy(playerid, params[])
{
	new string[1024],
		bizid = -1;
	if((bizid = GetNearBizInside(playerid)) != -1)
	{
	    if(BizInfo[bizid][bizType] == BIZ_BUILD)
	    {
	        Dialog_Show(playerid, BuyInterior, DIALOG_STYLE_INPUT, "????? ?????????", "{FFFFFF}??????? ID ????, ? ???????? ?? ?????? ???????? ????????:\n?????? ??? ?????? ???????????? ???!", "?????", "???????");
	        return 1;
	    }
	    else if(BizInfo[bizid][bizType] == BIZ_STORE)
	    {
	        new store_items[] =
				"??????? - $100\n????? - $200\n????? - $50\n????????? - $5\n???????? - $20\n???? ? ????? - $10\n???????? - $200\n????? - $5\n????????? ????? - $30\n?????????? - $500";

			Dialog_Show(playerid, StoreDialog, DIALOG_STYLE_LIST, "???????? ?????? ??? ?????", store_items, "???????", "???????");
	        return 1;
	    }
	    else if(BizInfo[bizid][bizType] == BIZ_PHARMACY)
	    {
	       	new pharmacy_items[] =
				"??????????? ????????? - $500/2??????\n??????? - $200";

			Dialog_Show(playerid, PharmacyDialog, DIALOG_STYLE_LIST, "???????? ?????? ??? ?????", pharmacy_items, "???????", "???????");
	        return 1;
	    }
	    else if(BizInfo[bizid][bizType] == BIZ_BARBER)
	    {
	        if(GetPVarInt(playerid, #buy_attach) != 0)
				return SCM(playerid, COLOR_LIGHTRED, "????????? ??????? ????????.");

			if(GetNextToySlot(playerid) == -1)
 				return SCM(playerid, COLOR_LIGHTRED, "??? ????? ??? ?????? ??????.");

			for(new x;x<sizeof(BarberShop);x++)
			{
				format(string, sizeof(string), "%s%s - $%i\n", string, BarberShop[x][toyName], BarberShop[x][toyPrice]);
			}
			Dialog_Show(playerid, BarberDialog, DIALOG_STYLE_LIST, "???????? ?????? ??? ?????", string, "???????", "???????");
	    	return 1;
		}
		else if(BizInfo[bizid][bizType] == BIZ_BAR)
	    {
			Dialog_Show(playerid, BuyDrink, DIALOG_STYLE_TABLIST, "??????? ???????", "\
			????\t$16\n\
			?????\t$24\n\
			????\t$10\n\
			????\t$4\n\
			?????\t$15\n\
			??????\t$26\n\
			????\t$6\n\
			????\t$23", "??????", "??????");
			return 1;
		}
		else if (BizInfo[bizid][bizType] == BIZ_PIZZA || BizInfo[bizid][bizType] == BIZ_CLUCKIN || BizInfo[bizid][bizType] == BIZ_BURGER || BizInfo[bizid][bizType] == BIZ_DONUT)
		{
			for(new i; i != 4; i++)
			    TextDrawShowForPlayer(playerid, TD_restaurant[i]);

			new mes[128],
				type = BizInfo[bizid][bizType] - BIZ_PIZZA;

			for(new i; i != max_product[type]; i++)
			{
			    format(mes, sizeof(mes), "%s~n~~r~Health: +%i~n~~r~Removes hunger~n~~p~Price: $%i~n~", name_order[type][i], 30 + (i * 10), BizInfo[bizid][bizProductPrice][i]);
				PlayerTextDrawSetString(playerid, TD_restaurant_prod[playerid][i], mes);
				PlayerTextDrawShow(playerid, TD_restaurant_prod[playerid][i]);
	            PlayerTextDrawSetPreviewModel(playerid, TD_restaurant_prod[playerid][i + 4], model_order[type][i]);
	            PlayerTextDrawShow(playerid, TD_restaurant_prod[playerid][i + 4]);
			}
			SelectTextDraw(playerid, 0x00cb77FF);
			SetPVarInt(playerid, #restaurant, 1);
		    return 1;
		}
	}

	if(PlayerToPoint(2.0, playerid, 1097.4409,-1443.6039,15.7969))
	{
		if(GetPVarInt(playerid, #buy_attach) != 0)
			return SCM(playerid, COLOR_LIGHTRED, "????????? ??????? ????????.");

		if(GetNextToySlot(playerid) == -1)
 			return SCM(playerid, COLOR_LIGHTRED, "??? ????? ??? ?????? ??????.");

		Dialog_Show(playerid, ClothesCategory, DIALOG_STYLE_LIST, "???????? ?????????", "???????? ?????\n????\n???????\n????????", "???????", "???????");
	}
	else if(PlayerToPoint(2.0, playerid, 1115.4150,-1526.1453,15.7969))
	{
		if(GetPVarInt(playerid, #buy_attach) != 0)
			return SCM(playerid, COLOR_LIGHTRED, "????????? ??????? ????????.");

		if(GetNextToySlot(playerid) == -1)
 			return SCM(playerid, COLOR_LIGHTRED, "??? ????? ??? ?????? ??????.");

		for(new x;x<sizeof(SportsInfo);x++)
		{
			format(string, sizeof(string), "%s%s - $%i\n", string, SportsInfo[x][toyName], SportsInfo[x][toyPrice]);
		}
		Dialog_Show(playerid, SportsDialog, DIALOG_STYLE_LIST, "???????? ?????? ??? ?????", string, "??????", "???????");
	}
	else if(PlayerToPoint(2.0, playerid, 1081.5078,-1444.0103,22.7422))
		Dialog_Show(playerid, ComputerStore, DIALOG_STYLE_LIST, "???????? ?????? ??? ?????", "???????????? ???????? - $3,000\n?????? ??????? - $1,000\n????? ??????? - $1,000\n??????? ??????? - $1,000\n??????? ??????? - $1,000\n????? ??????? - $1,000", "???????", "???????");
	else if(PlayerToPoint(2.0, playerid, 1093.72,-1506.08,15.7981))
	{
		if(GetPVarInt(playerid, #buy_attach) != 0)
			return SCM(playerid, COLOR_LIGHTRED, "????????? ??????? ????????.");

		if(GetNextToySlot(playerid) == -1)
 			return SCM(playerid, COLOR_LIGHTRED, "??? ????? ??? ?????? ??????.");

		for(new x;x<sizeof(GuitarsInfo);x++)
		{
			format(string, sizeof(string), "%s%s - $%i\n", string, GuitarsInfo[x][toyName], GuitarsInfo[x][toyPrice]);
		}
		Dialog_Show(playerid, GuitarsDialog, DIALOG_STYLE_LIST, "???????? ?????? ??? ?????", string, "???????", "???????");
	}
	else if(PlayerToPoint(2.0, playerid, 1089.9041,-1445.1016,22.7422))
	{
		if(GetPVarInt(playerid, #buy_attach) != 0)
			return SCM(playerid, COLOR_LIGHTRED, "????????? ??????? ????????.");

		if(GetNextToySlot(playerid) == -1)
 			return SCM(playerid, COLOR_LIGHTRED, "??? ????? ??? ?????? ??????.");

		for(new x;x<sizeof(ClockInfo);x++)
		{
			format(string, sizeof(string), "%s%s - $%i\n", string, ClockInfo[x][toyName], ClockInfo[x][toyPrice]);
		}
		Dialog_Show(playerid, ClockDialog, DIALOG_STYLE_LIST, "???????? ?????? ??? ?????", string, "???????", "???????");
 	}
	else if(pTemp[playerid][pBizEntered] != -1 && BizInfo[pTemp[playerid][pBizEntered]][bizType] == BIZ_BARBER)
	{
  		if(GetPVarInt(playerid, #buy_attach) != 0)
			return SCM(playerid, COLOR_LIGHTRED, "????????? ??????? ????????.");

		if(GetNextToySlot(playerid) == -1)
 			return SCM(playerid, COLOR_LIGHTRED, "??? ????? ??? ?????? ??????.");

		for(new x;x<sizeof(BarberShop);x++)
		{
			format(string, sizeof(string), "%s%s - $%i\n", string, BarberShop[x][toyName], BarberShop[x][toyPrice]);
		}
		Dialog_Show(playerid, BarberDialog, DIALOG_STYLE_LIST, "???????? ?????? ??? ?????", string, "???????", "???????");
	}

	else if(PlayerToPoint(2.0, playerid, 1165.6273,-1521.6267,22.7656))
	{
		if(GetPVarInt(playerid, #buy_attach) != 0)
			return SCM(playerid, COLOR_LIGHTRED, "????????? ??????? ????????.");

		if(GetNextToySlot(playerid) == -1)
 			return SCM(playerid, COLOR_LIGHTRED, "??? ????? ??? ?????? ??????.");

		for(new x;x<sizeof(HardwareStore);x++)
		{
			format(string, sizeof(string), "%s%s - $%i\n", string, HardwareStore[x][toyName], HardwareStore[x][toyPrice]);
		}
		Dialog_Show(playerid, HardwareStore, DIALOG_STYLE_LIST, "???????? ?????? ??? ?????", string, "???????", "???????");
	}
	return 1;
}

ALTX:clothing("/acc");
CMD:clothing(playerid, params[])
{
    if(GetPVarInt(playerid, #edit_attach) == 1 || GetPVarInt(playerid, #buy_attach) != 0)
        return SendErrorMessage(playerid, "????????? ???????/?????????????? ??????.");

	new count,
		string[750];

	for(new i; i < MAX_PLAYER_ATTACH; i++)
	{
	    if (AttachInfo[playerid][i][aID] == 0) continue;
	    format(string, sizeof(string), "%s\n{FFFFFF}%i: %s %s", string, i+1, AttachInfo[playerid][i][aName], (AttachInfo[playerid][i][aUsed]) ? ("{30A90F}[????????????]") : ("{AFAFAF}[?? ????????????]"));
	    count++;
	}

	if (0 == count)
	    return SendErrorMessage(playerid, "? ??? ??? ?????.");

    Dialog_Show(playerid, Clothing, DIALOG_STYLE_LIST, "{FFFFFF}????? ?????", string, "???????", "???????");
	return 1;
}

Dialog:BoomBox(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return 1;

    if(BoomboxInfo[playerid][bUsed] == 0)
		return SendErrorMessage(playerid, "?? ?? ????????? ???? ???????.");

	if(Boombox_Nearest(playerid) == 0)
     	return SendErrorMessage(playerid, "?? ?????? ?????????? ????? ?? ????? ?????????.");

	switch(listitem)
	{
	    case 0:
	        Dialog_Show(playerid, RadioStations, DIALOG_STYLE_LIST, "???????? ????", "Pop/Dance/Dubstep\nJazz/Country/Rock\nHip-hop/RnB/Reggae\n??? ???????????", "???????", "???????");
	    case 1:
	        ShowMusicList(playerid);
		case 2:
		{
		    if(strlen(BoomboxInfo[playerid][bUrl]) == 0)
		        return SendErrorMessage(playerid, "??????? ?? ????????.");

			SCM(playerid, COLOR_LIGHTBLUE, "?? ????????? ???????.");
            BoomboxInfo[playerid][bUrl] = EOS;
            foreach(Player, i)
            {
	    		if(0 == IsPlayerLogged(i) || pTemp[i][pBoombox] != playerid)
	        		continue;

                StopAudioStreamForPlayer(i);
			}
		}
		case 3:
	    {
			Destroy_Boombox(playerid);
			SCM(playerid, COLOR_LIGHTBLUE, "?? ?????? ???????.");

	    }
	}
	return 1;
}

stock Destroy_Boombox(playerid)
{
    if(BoomboxInfo[playerid][bUsed] == 0)
        return 1;

    GivePlayerItem(playerid, INV_BOOMBOX, 1);
    BoomboxInfo[playerid][bUsed] = 0;

    foreach(Player, i)
	{
		if(!IsPlayerLogged(i) || pTemp[i][pBoombox] != playerid)
			continue;

		StopAudioStreamForPlayer(i);
	}

	if(IsValidDynamicArea(BoomboxInfo[playerid][bArea]))
        DestroyDynamicArea(BoomboxInfo[playerid][bArea]);

    if(IsValidDynamicObject(BoomboxInfo[playerid][bObject]))
        DestroyDynamicObject(BoomboxInfo[playerid][bObject]);

	return 1;
}

ALTX:setstation("/ss");
CMD:setstation(playerid, params[])
{
    new vehicle = GetPlayerVehicleID(playerid),
        id;

    if(IsDriver(playerid))
	{
		if(VehicleInfo[vehicle][carRadio] == 0)
			return SCM(playerid, COLOR_LIGHTRED, "? ???? ?????????? ??? ?????.");

		ShowBoomBoxStations(playerid);
		return 1;
	}

	if ((id = GetNearHouseInside(playerid)) != -1 && HouseInfo[id][hOwnerID] == PlayerInfo[playerid][pID])
	{
	    if(HouseInfo[id][hRadio] == 0)
			return SCM(playerid, COLOR_LIGHTRED, "? ????? ???? ??? ?????.");

		ShowBoomBoxStations(playerid);
	    return 1;
	}
	else if ((id = GetNearBizInside(playerid)) != -1 && BizInfo[id][bizOwnerID] == PlayerInfo[playerid][pID])
	{
	    if(BizInfo[id][bizRadio] == 0)
			return SCM(playerid, COLOR_LIGHTRED, "? ????? ??????? ??? ?????.");

		ShowBoomBoxStations(playerid);
	    return 1;
	}
	return 1;
}

CMD:furniture(playerid, params[])
{
    if(GetPVarInt(playerid, "buy_furniture"))
        return SendErrorMessage(playerid, "???????? ??? ???????????.");

    new houseid = -1;
    for(new i = 0; i < MAX_HOUSES; i++)
	{
	    if(HouseInfo[i][hID] == 0)
			continue;

        if(HouseInfo[i][hOwnerID] != PlayerInfo[playerid][pID] && HouseInfo[i][hID] != pTemp[playerid][pBuildHouse])
            continue;

		if(IsPlayerHouseOutside(playerid, i, 5.0) != 0)
		{
		    houseid = i;
		    break;
		}
        else if(IsPlayerHouseInside(playerid, i) != 0)
		{
		    houseid = i;
		    break;
		}
	}

	if (houseid == -1)
	    return SendErrorMessage(playerid, "?? ?????? ???? ??????/??????? ????.");

	if(HouseInfo[houseid][hOwnerID] != PlayerInfo[playerid][pID] && HouseInfo[houseid][hID] != pTemp[playerid][pBuildHouse])
	    return SendErrorMessage(playerid, "? ??? ??? ?????????? ????????? ?????????? ??????? ????.");

    if(pTemp[playerid][p3DMenu] != -1)
	{
	   	Destroy3DMenu(pTemp[playerid][p3DMenu]);
		pTemp[playerid][p3DMenu] = -1;
	}

	pTemp[playerid][pHouseFurniture] = houseid;
	Dialog_Show(playerid, FurnitureDialog, DIALOG_STYLE_LIST, "?????????? ???????", "?????? ??????\n????????????? ??????\n??????? ??? ??????", "???????", "??????");
	return 1;
}

CMD:trunkspot(playerid, params[])
{
    new houseid;

	if ((houseid = GetNearHouseInside(playerid)) == -1)
	    return SendErrorMessage(playerid, "?? ?????? ???? ?????? ????.");

	if(HouseInfo[houseid][hOwnerID] != PlayerInfo[playerid][pID])
	    return SendErrorMessage(playerid, "?????? ??? ?? ??????????? ???.");


 	GetPlayerPos(playerid, HouseInfo[houseid][hCheckPosX], HouseInfo[houseid][hCheckPosY], HouseInfo[houseid][hCheckPosZ]);

 	Save_House(houseid);
 	SendServerMessage(playerid, "????? ??????? ????????.");
	return 1;
}

CMD:weapon(playerid, params[])
{
	new option[24],
		secoption,
		thirdoption,
		fourthoption;

	if(sscanf(params, "s[24]D(-1)D(-1)D(-1)", option, secoption, thirdoption, fourthoption))
		return SendSyntaxMessage(playerid, "/weapon [adjust / bone / hide / standart]");

	if(!strcmp(option, "bone", true))
	{
		new slot, bone, type;
		if(sscanf(params, "{s[7]}ddD(-1)", slot, bone, type))
		{
			SCM(playerid,COLOR_LIGHTRED,"???????????:{FFFFFF} /weapon bone [????] [text]");
			SendSyntaxMessage(playerid, "???? - (1 - ?????? ?????? | 2 - ???????? ?????? | 3 - ?????????????? ??????)");
			SendSyntaxMessage(playerid, "????? - (1 - ??????????? | 3 - ????? ????? ???? | 4 - ????? ?????? ???? | 5 - ????? ???? | 6 - ?????? ????)");
			SendSyntaxMessage(playerid, "????? - (7 - ????? ????? | 8 - ?????? ????? | 9 - ????? ???? | 10 - ?????? ????)");
			return 1;
		}
		if(slot > 3 || slot < 1)
			return SendErrorMessage(playerid, "????: 1-3.");

		if(IsPlayerHoldingWeapon(playerid))
			return SendErrorMessage(playerid, "?????? ??? ?????? ?????????????? ??????? ?????? ??????? ??? ? ??????.");

		if(bone < 1 || bone == 2 || bone > 10)
			return SendErrorMessage(playerid, "ID ??????: 1-10 (????? 2).");

		if(GetPVarInt(playerid, #edit_weapon) != 0)
			return SendErrorMessage(playerid, "?? ??? ???????????? ??????? ??????.");

		if(PlayerInfo[playerid][pWeap][slot-1] == 0)
		    return SCM(playerid, COLOR_LIGHTRED, "? ??? ??? ?????? ? ???? ?????.");

		new weaponid = PlayerInfo[playerid][pWeap][slot-1];

        SCM(playerid, COLOR_GREEN, "?? ???????? ????? ?????????.");

        SetPVarInt(playerid, #edit_weapon, slot);
		SetPlayerAttachedObject(playerid, 4 + slot, inventory_items[weaponid][itemModel], PlayerInfo[playerid][pWeaponBone][slot-1]);
		EditAttachedObject(playerid, 4 + slot);
		return 1;
	}
	else if(!strcmp(option, "adjust", true))
	{
		new slot;

		if(sscanf(params, "{s[7]}d", slot))
			return SCM(playerid,COLOR_LIGHTRED,"???????????:{FFFFFF} /weapon adjust [????(1 - ?????? ?????? | 2 - ???????? ?????? | 3 - ?????????????? ??????)]");

		if(slot > 3 || slot < 1)
			return SendErrorMessage(playerid, "????: 1-3.");

		if(IsPlayerHoldingWeapon(playerid))
			return SendErrorMessage(playerid, "?????? ??? ?????? ?????????????? ??????? ?????? ??????? ??? ? ??????.");

		if(GetPVarInt(playerid, #edit_weapon) != 0)
			return SendErrorMessage(playerid, "?? ??? ???????????? ??????? ??????.");

		if(PlayerInfo[playerid][pWeap][slot-1] == 0)
		    return SCM(playerid, COLOR_LIGHTRED, "? ??? ??? ?????? ? ???? ?????.");

		//new weaponid = PlayerInfo[playerid][pWeap][slot-1];

        SCM(playerid, COLOR_GREEN, "?? ???????????? ??????? ??????.");
		SetPVarInt(playerid, #edit_weapon, slot);
 		//SetPlayerAttachedObject(playerid, 4 + slot, GunObjects[weaponid][0], PlayerInfo[playerid][pWeaponBone][slot-1]);
		EditAttachedObject(playerid, 4 + slot);
		return 1;
	}
	else if(!strcmp(option, "standart", true))
	{
		new slot;

		if(sscanf(params, "{s[7]}d", slot))
			return SCM(playerid,COLOR_LIGHTRED,"???????????:{FFFFFF} /weapon standart [????(1 - ?????? ?????? | 2 - ???????? ?????? | 3 - ?????????????? ??????)]");

		if(slot > 3 || slot < 1)
			return SCM(playerid, COLOR_LIGHTRED, "????: 1-3.");

		if(slot == 1)
		{
			PlayerInfo[playerid][pWeaponBone][0] = 1;
			PlayerInfo[playerid][pWeaponX][0] = 0.323999;
			PlayerInfo[playerid][pWeaponY][0] = -0.144999;
			PlayerInfo[playerid][pWeaponZ][0] = -0.166;
			PlayerInfo[playerid][pWeaponRX][0] = 0.0;
			PlayerInfo[playerid][pWeaponRY][0] = -72.0;
			PlayerInfo[playerid][pWeaponRZ][0] = 0.0;
			RemovePlayerAttachedObject(playerid, 5);

			Save_AttachWeapon(playerid, 0);
			SCM(playerid, COLOR_GREEN, "?? ??????? ??????????? ??????? ??????? ??????.");
		}
		else if(slot == 2)
		{
			PlayerInfo[playerid][pWeaponBone][1] = 8;
			PlayerInfo[playerid][pWeaponX][1] = -0.239;
			PlayerInfo[playerid][pWeaponY][1] = -0.062999;
			PlayerInfo[playerid][pWeaponZ][1] = 0.079999;
			PlayerInfo[playerid][pWeaponRX][1] = -97.2;
			PlayerInfo[playerid][pWeaponRY][1] = -8.1;
			PlayerInfo[playerid][pWeaponRZ][1] = -1.7;
			RemovePlayerAttachedObject(playerid, 6);

			Save_AttachWeapon(playerid, 1);
			SCM(playerid, COLOR_GREEN, "?? ??????? ??????????? ??????? ????????? ??????.");
		}
		else if(slot == 3)
		{
			PlayerInfo[playerid][pWeaponBone][2] = 1;
			PlayerInfo[playerid][pWeaponX][2] = 0.106999;
			PlayerInfo[playerid][pWeaponY][2] = 0.207;
			PlayerInfo[playerid][pWeaponZ][2] = -0.079;
			PlayerInfo[playerid][pWeaponRX][2] = 179.1;
			PlayerInfo[playerid][pWeaponRY][2] = 143.1;
			PlayerInfo[playerid][pWeaponRZ][2] = -0.099999;
			RemovePlayerAttachedObject(playerid, 7);

			Save_AttachWeapon(playerid, 2);
			SCM(playerid, COLOR_GREEN, "?? ??????? ??????????? ??????? ??????????????? ??????.");
		}
		return 1;
	}
	else if(!strcmp(option, "hide", true))
	{
		new slot;

		if(sscanf(params, "{s[7]}d", slot))
			return SCM(playerid,COLOR_LIGHTRED,"???????????:{FFFFFF} /weapon hide [???? (1 - ?????? ?????? | 2 - ???????? ?????? | 3 - ?????????????? ??????)]");

		if(slot > 3 || slot < 1)
			return SCM(playerid, COLOR_LIGHTRED, "????: 1-3.");

		if(PlayerInfo[playerid][pWeap][slot-1] == 0)
		    return SCM(playerid, COLOR_LIGHTRED, "? ??? ??? ?????? ? ???? ?????.");

		if(IsWeaponDontHide(PlayerInfo[playerid][pWeap][slot-1]))
			return SendErrorMessage(playerid, "?? ?? ?????? ???????? ?????? ??????.");

		PlayerInfo[playerid][pHideWeap][slot-1] = (PlayerInfo[playerid][pHideWeap][slot-1]) ? (0) : (1);
		if(0 == PlayerInfo[playerid][pHideWeap][slot-1])
 			SendClientMessageEx(playerid, COLOR_GREEN, "?? ???????? ?????? ???? ID: %i.", slot);
		else
		{
		    SendClientMessageEx(playerid, COLOR_GREEN, "?? ???????? ?????? ???? ID: %i.", slot);
            RemovePlayerAttachedObject(playerid, 4 + slot);
		}
		return 1;
	}
	else
	{
		SendSyntaxMessage(playerid, "/weapon [adjust / bone / hide / standart]");
	}
	return 1;
}
CMD:weapons(playerid, params[])
{
	SCM(playerid, COLOR_LIGHTRED, "????? ????????? ??????, ??????? /dropgun [????]");
    new weapname[32];
	for(new i; i < MAX_WEAP; i++)
	{
	    if(PlayerInfo[playerid][pWeap][i] == 0)
			continue;

		GetWeaponName(PlayerInfo[playerid][pWeap][i], weapname, 32);
		SendClientMessageEx(playerid,COLOR_GREY, "[????: %i] ??????: [%s] - %s: [%i]", i+1, weapname, (i != 3)?("???????"):("??????????"), PlayerInfo[playerid][pAmmo][i]);
 	}
	return 1;
}

CMD:place(playerid, params[])
{
	if(GetPlayerVehicleID(playerid))
	    return SendErrorMessage(playerid, "?????? ???????????? ???????? ? ??????????.");

    if(pTemp[playerid][pTaser])
    	return SendErrorMessage(playerid, "??????? ??????? ?????.");

	new weaponid,
	    slot = GetWeapSlot(GetPlayerWeapon(playerid))+1,
		vehicle = GetPlayerVehicleID(playerid),
		weapammo;

	if(!IsPlayerHoldingWeapon(playerid) && sscanf(params, "i", slot))
		return SendSyntaxMessage(playerid, "/place [???? 1-4]");

	if(slot < 1 || slot > 4)
	    return SendErrorMessage(playerid, "?? ??????? ???????? ???? (1-4).");

	slot--;
	weaponid = PlayerInfo[playerid][pWeap][slot],
	weapammo = PlayerInfo[playerid][pAmmo][slot];

	if(weaponid == 0)
	    return SendErrorMessage(playerid, "? ??? ??? ?????? ? ????? ID: %i.", slot+1);

    if(ValidWeaponForInventory(weaponid) == 0)
    	return SendErrorMessage(playerid, "?????? ???????? ?????? ?????? ? ????????/????????? ??? ? ??????.");

	if(slot == -1 || !HasWeapon(playerid, weaponid))
		return SendErrorMessage(playerid, "? ??? ??? ??????? ?????? (/weapons).");

	if(vehicle != 0 || (vehicle = GetNearVehicle(playerid, 5.0)) != 0)
	{
	    if(IsADontTrunk(vehicle) || IsAPlane(vehicle) || IsABiker(vehicle) || IsAHelicopter(vehicle) || IsABoat(vehicle) || IsABicycle(vehicle))
			return SCM(playerid, COLOR_LIGHTRED, "? ????? ?????????? ??? ?????????.");

        if(!IsPlayerInAnyVehicle(playerid) && VehicleInfo[vehicle][carTrunkLock] == 0)
			    return SCM(playerid, COLOR_LIGHTRED, "???????? ????? ????????????? ???????? ??????.");

		if(VehicleInfo[vehicle][carFaction] && VehicleInfo[vehicle][carFaction] != PlayerInfo[playerid][pFaction])
		    return SendErrorMessage(playerid, "??? ?????????? ???????? ?????????? ??????????.");

        if(PlayerInfo[playerid][pFaction] && VehicleInfo[vehicle][carFaction] != PlayerInfo[playerid][pFaction] && PlayerInfo[playerid][pOnDuty])
				return SCM(playerid, COLOR_LIGHTRED,"?????? ?????? ?????? ? ?? ??????????? ????????? ?? ?????????.");

        new i = GetNextVehicleTrunkSlot(vehicle);
		if(i == -1)
 			return SendErrorMessage(playerid, "? ???????????? ???????? ??? ?????.");

		VehicleInfo[vehicle][carInv][i] = weaponid;
		VehicleInfo[vehicle][carInvAmount][i] = weapammo;
		ResetPlayerWeaponID(playerid, weaponid);

		if(0 == IsPlayerInAnyVehicle(playerid))
		{
			new Float:x,
				Float:y,
				Float:z;

			GetVehiclePos(vehicle, x, y, z);
			VehicleInfo[vehicle][carAttach][i] =
				CreateDynamicObject(inventory_items[weaponid][itemModel], x, y, z, 0.0, 0.0, 0.0);

			SetPVarInt(playerid, #veh_editor, vehicle);
			SetPVarInt(playerid, #veh_slot, i);

			EditDynamicObject(playerid,VehicleInfo[vehicle][carAttach][i]);

			if(IsPlayerInAnyVehicle(playerid))
			    SendClientMessage(playerid, COLOR_LIGHTRED, "[ ! ] {FFFFFF}?? ?????? ???????????? {FF6347}W {FFFFFF}????? ?????????? ?????? ??????.");
			else
			    SendClientMessage(playerid, COLOR_LIGHTRED, "[ ! ] {FFFFFF}?? ?????? ???????????? {FF6347}SPACE {FFFFFF}????? ?????????? ?????? ??????.");
		}

		SendClientMessageEx(playerid, COLOR_YELLOW, "?? ???????? %s ? %s.", inventory_items[weaponid][itemName], VehicleNames[GetVehicleModel(vehicle)-400]);
		SendClientMessage(playerid, COLOR_LIGHTRED, "/takegun ????? ????? ?????? ?? ?????????? / ????.");

 		new mes[128];
		format(mes, sizeof(mes), "?????? %s ? %s %s.", inventory_items[weaponid][itemName], (VehicleInfo[vehicle][carFaction])?("?????????"):("????????"), VehicleNames[GetVehicleModel(vehicle)-400]);
		cmd::ame(playerid, mes);
		Save_CarInventory(vehicle);
		return 1;
	}

	new houseid;
	if((houseid = GetNearHouseInside(playerid)) != -1)
	{
		if(!PlayerToPoint(0.5, playerid,HouseInfo[houseid][hCheckPosX], HouseInfo[houseid][hCheckPosY], HouseInfo[houseid][hCheckPosZ]))
		    return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???? ????? ? ????????.");

        if(PlayerInfo[playerid][pOnDuty])
			return SCM(playerid, COLOR_LIGHTRED,"?????? ?????? ?????? ? ??? ?? ?????????.");

        new i = GetNextHouseTrunkSlot(houseid);
		if(i == -1)
 			return SendErrorMessage(playerid, "? ???? ??? ?????.");

		SendClientMessageEx(playerid, COLOR_GREEN, "?? ???????? %s ? ?????? ????.", inventory_items[weaponid][itemName]);

		HouseInfo[houseid][hInv][i] = weaponid;
		HouseInfo[houseid][hInvAmount][i] = weapammo;
		ResetPlayerWeaponID(playerid, weaponid);

		new mes[128];
		format(mes, sizeof(mes), "?????? %s ? ?????? ????.", inventory_items[weaponid][itemName]);
		cmd::ame(playerid, mes);

		Save_HouseInventory(houseid);
		return 1;
	}
	return 1;
}

CMD:takegun(playerid, params[])
{
 	new slot,
 	    vehicle = GetPlayerVehicleID(playerid);
	if(sscanf(params,"d",slot))
		return SendSyntaxMessage(playerid, "/takegun [???? 1-10] (?????? ID ????? ?????????? ? /check.)");

	if(slot < 1 || slot > 10)
		return SCM(playerid, COLOR_LIGHTRED, "ID ????? ????? ???? ?? 1 ?? 10.");

 	slot = slot - 1;

	if(vehicle != 0 || (vehicle = GetNearVehicle(playerid, 5.0)) != 0)
	{
	    if(IsADontTrunk(vehicle) || IsAPlane(vehicle) || IsABiker(vehicle) || IsAHelicopter(vehicle) || IsABoat(vehicle) || IsABicycle(vehicle))
			return SCM(playerid, COLOR_LIGHTRED, "? ????? ?????????? ??? ?????????.");

        if(!IsPlayerInAnyVehicle(playerid) && VehicleInfo[vehicle][carTrunkLock] == 0)
			    return SCM(playerid, COLOR_LIGHTRED, "???????? ????? ????????????? ???????? ??????.");

		if(VehicleInfo[vehicle][carFaction] && VehicleInfo[vehicle][carFaction] != PlayerInfo[playerid][pFaction])
		    return SendErrorMessage(playerid, "??? ?????????? ???????? ?????????? ??????????.");

        if(PlayerInfo[playerid][pFaction] && VehicleInfo[vehicle][carFaction] != PlayerInfo[playerid][pFaction] && PlayerInfo[playerid][pOnDuty])
			return SCM(playerid, COLOR_LIGHTRED,"?????? ????? ?????? ?? ?? ???????????? ?????????? ?? ?????????.");

		if(PlayerInfo[playerid][pFaction] != 0 && Factions[PlayerInfo[playerid][pFaction]][fType] == FACTION_LEGAL && PlayerInfo[playerid][pFaction] == VehicleInfo[vehicle][carFaction] && !PlayerInfo[playerid][pOnDuty])
		    return SendErrorMessage(playerid, "????????? ?? ?????????, ????? ???????????? ????????? ?????????.");

        new weaponid = VehicleInfo[vehicle][carInv][slot],
		    weapammo = VehicleInfo[vehicle][carInvAmount][slot],
			weapslot = GetWeapSlot(weaponid);

        if(VehicleInfo[vehicle][carInv][slot] == 0 || ValidWeaponForInventory(weaponid) == 0)
    		return SendErrorMessage(playerid, "? ???? ????? ??? ?????? (/check).");

	    if(PlayerInfo[playerid][pWeap][weapslot] != 0)
       		return SendErrorMessage(playerid, "?????? ???? ?????? ??? ?????.");

	    if(ac_GivePlayerWeapon(playerid, weaponid, weapammo) == 0)
	        return SendErrorMessage(playerid, "?????? ????? ?????? ??????.");

		if(IsValidDynamicObject(VehicleInfo[vehicle][carAttach][slot]))
			DestroyDynamicObject(VehicleInfo[vehicle][carAttach][slot]);

		new mes[128];
		format(mes, sizeof(mes), "~b~You have taken ~y~%s~b~ from the ~y~%s's~b~ trunk.", inventory_items[weaponid][itemName], VehicleNames[GetVehicleModel(vehicle)-400]);
		InfoMSG(playerid, mes, 5);

		format(mes, sizeof(mes), "??????? %s ?? %s %s.", inventory_items[weaponid][itemName], (VehicleInfo[vehicle][carFaction])?("?????????"):("?????????"), VehicleNames[GetVehicleModel(vehicle)-400]);
		cmd::ame(playerid, mes);

		VehicleInfo[vehicle][carInv][slot] = 0;
		VehicleInfo[vehicle][carInvAmount][slot] = 0;
		Save_CarInventory(vehicle);
	    return 1;
	}

	new houseid;
	if((houseid = GetNearHouseInside(playerid)) != -1)
	{
		if(!PlayerToPoint(0.5, playerid,HouseInfo[houseid][hCheckPosX], HouseInfo[houseid][hCheckPosY], HouseInfo[houseid][hCheckPosZ]))
		    return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???? ????? ? ????????.");

        if(PlayerInfo[playerid][pOnDuty])
			return SCM(playerid, COLOR_LIGHTRED,"?????? ????? ?????? ? ???? ?? ?????????.");

  		new weaponid = HouseInfo[houseid][hInv][slot],
		    weapammo = HouseInfo[houseid][hInvAmount][slot],
			weapslot = GetWeapSlot(weaponid);

        if(HouseInfo[houseid][hInv][slot] == 0 || ValidWeaponForInventory(weaponid) == 0)
    		return SendErrorMessage(playerid, "? ???? ????? ??? ?????? (/check).");

		if(PlayerInfo[playerid][pWeap][weapslot] != 0)
			return SendErrorMessage(playerid, "?????? ???? ?????? ??? ?????.");

        if(ac_GivePlayerWeapon(playerid, weaponid, weapammo) == 0)
	        return SendErrorMessage(playerid, "?????? ????? ?????? ??????.");

		SendClientMessageEx(playerid, COLOR_GREEN, "?? ????? %s ?? ??????? ????.", inventory_items[weaponid][itemName]);
		HouseInfo[houseid][hInv][slot] = 0;
		HouseInfo[houseid][hInvAmount][slot] = 0;

		new mes[128];
		format(mes, sizeof(mes), "????? %s ?? ??????? ????.", inventory_items[weaponid][itemName]);
		cmd::ame(playerid, mes);

		Save_HouseInventory(houseid);
		return 1;
	}

	SendErrorMessage(playerid, "?????? ??????? ???????? ????? ????????? ??? ? ????.");
	return 1;
}

CMD:trunk(playerid, params[])
{
	if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    new vehicle = GetPlayerVehicleID(playerid);
	    if(IsADontTrunk(vehicle) || IsAPlane(vehicle) || IsABiker(vehicle) || IsAHelicopter(vehicle) || IsABoat(vehicle) || IsABicycle(vehicle))
			return SCM(playerid, COLOR_LIGHTRED, "? ????? ?????????? ??? ?????????.");

        if(VehicleInfo[vehicle][carOwnerID] != 0 && PlayerInfo[playerid][pCarKey] != vehicle)
            return SendErrorMessage(playerid, "?????? ????????? ?? ??????????? ???.");

        if(VehicleInfo[vehicle][carFaction] != 0 && PlayerInfo[playerid][pFaction] != VehicleInfo[vehicle][carFaction])
            return SendErrorMessage(playerid, "?????? ????????? ??????????? ?????? ???????.");

		if(VehicleInfo[vehicle][carLocked] == 1 || (IsRentCar(vehicle) && VehicleInfo[vehicle][carRent] == 0))
		    return SendErrorMessage(playerid, "????? ?????????? ??????.");

		if(VehicleInfo[vehicle][carTrunkLock] == 1)
		{
		    new mes[56];
			format(mes, sizeof(mes), "~w~%s Trunk ~r~Close", VehicleNames[GetVehicleModel(vehicle)-400]);
			GameTextForPlayer(playerid, mes, 3000, 3);
			VehicleTrunk(vehicle, false);

			SendClientMessage(playerid, COLOR_YELLOW3, "?? ??????? ???????? ??????????.");
			return 1;
		}
		else
		{
			new mes[56];
	        format(mes, sizeof(mes), "~w~%s Trunk ~g~Open", VehicleNames[GetVehicleModel(vehicle)-400]);
			GameTextForPlayer(playerid, mes, 3000, 3);
			VehicleTrunk(vehicle, true);

			SendClientMessage(playerid, COLOR_YELLOW3, "?? ??????? ???????? ??????????.");
			SendClientMessage(playerid, -1, "??????????? ??????? /check, /place ??? /takegun.");
		}
		return 1;
	}

	new vehicle = 0;
	foreach(new i:Vehicle)
	{
	    if(IsADontTrunk(i) || IsAPlane(i) || IsABiker(i) || IsAHelicopter(i) || IsABoat(i) || IsABicycle(i) || 0 == IsOnBootVehicle(playerid, i))
	        continue;

	    vehicle = i;
		break;
	}

	if(vehicle == 0)
	    return SCM(playerid, COLOR_LIGHTRED, "????? ? ???? ??? ?????????? ? ??????????.");

    if(VehicleInfo[vehicle][carOwnerID] != 0 && PlayerInfo[playerid][pCarKey] != vehicle)
    	return SendErrorMessage(playerid, "?????? ????????? ?? ??????????? ???.");

    if(VehicleInfo[vehicle][carFaction] != 0 && PlayerInfo[playerid][pFaction] != VehicleInfo[vehicle][carFaction])
    	return SendErrorMessage(playerid, "?????? ????????? ??????????? ?????? ???????.");

    if(VehicleInfo[vehicle][carLocked] == 1 || (IsRentCar(vehicle) && VehicleInfo[vehicle][carRent] == 0))
    	return SendErrorMessage(playerid, "????? ?????????? ??????.");

    if(VehicleInfo[vehicle][carTrunkLock] == 1)
	{
	    new mes[56];
		format(mes, sizeof(mes), "~w~%s Trunk ~r~Close", VehicleNames[GetVehicleModel(vehicle)-400]);
		GameTextForPlayer(playerid, mes, 3000, 3);
		VehicleTrunk(vehicle, false);

		SendClientMessage(playerid, COLOR_YELLOW3, "?? ??????? ???????? ??????????.");
		return 1;
	}
	else
	{
		new mes[56];
        format(mes, sizeof(mes), "~w~%s Trunk ~g~Open", VehicleNames[GetVehicleModel(vehicle)-400]);
		GameTextForPlayer(playerid, mes, 3000, 3);
		VehicleTrunk(vehicle, true);

		SendClientMessage(playerid, COLOR_YELLOW3, "?? ??????? ???????? ??????????.");
		SendClientMessage(playerid, -1, "??????????? ??????? /check, /place ??? /takegun.");
	}
	return 1;
}

CMD:hood(playerid, params[])
{
	if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    new vehicle = GetPlayerVehicleID(playerid);
	    if(IsAPlane(vehicle) || IsABiker(vehicle) || IsAHelicopter(vehicle) || IsABoat(vehicle) || IsABicycle(vehicle))
			return SCM(playerid, COLOR_LIGHTRED, "? ????? ?????????? ??? ??????.");

		if(VehicleInfo[vehicle][carLocked] == 1)
		    return SendErrorMessage(playerid, "????? ?????????? ??????.");

		if(VehicleInfo[vehicle][carHoodLock] == 1)
		{
		    new mes[56];
			format(mes, sizeof(mes), "~w~%s Hood ~r~Close", VehicleNames[GetVehicleModel(vehicle)-400]);
			GameTextForPlayer(playerid, mes, 3000, 3);
			VehicleHood(vehicle, false);

			SendClientMessage(playerid, COLOR_YELLOW3, "?? ??????? ????? ??????????.");
			return 1;
		}
		else
		{
			new mes[56];
	        format(mes, sizeof(mes), "~w~%s Hood ~g~Open", VehicleNames[GetVehicleModel(vehicle)-400]);
			GameTextForPlayer(playerid, mes, 3000, 3);
			VehicleHood(vehicle, true);

			SendClientMessage(playerid, COLOR_YELLOW3, "?? ??????? ????? ??????????.");
		}
		return 1;
	}

	new vehicle = 0;
	foreach(new i:Vehicle)
	{
	    if(IsAPlane(i) || IsABiker(i) || IsAHelicopter(i) || IsABoat(i) || IsABicycle(i) || 0 == IsOnHoodVehicle(playerid, i))
	        continue;

	    vehicle = i;
		break;
	}

	if(vehicle == 0)
	    return SCM(playerid, COLOR_LIGHTRED, "????? ? ???? ??? ?????????? ? ???????.");

    if(VehicleInfo[vehicle][carLocked] == 1)
    	return SendErrorMessage(playerid, "????? ?????????? ??????.");

    if(VehicleInfo[vehicle][carHoodLock] == 1)
	{
	    new mes[56];
		format(mes, sizeof(mes), "~w~%s Hood ~r~Close", VehicleNames[GetVehicleModel(vehicle)-400]);
		GameTextForPlayer(playerid, mes, 3000, 3);
		VehicleHood(vehicle, false);

		SendClientMessage(playerid, COLOR_YELLOW3, "?? ??????? ????? ??????????.");
		return 1;
	}
	else
	{
		new mes[56];
        format(mes, sizeof(mes), "~w~%s Hood ~g~Open", VehicleNames[GetVehicleModel(vehicle)-400]);
		GameTextForPlayer(playerid, mes, 3000, 3);
		VehicleHood(vehicle, true);

		SendClientMessage(playerid, COLOR_YELLOW3, "?? ??????? ????? ??????????.");
	}
	return 1;
}

Dialog:InventoryOther(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return 1;

	new houseid = -1;
	if((houseid = GetNearHouseInside(playerid)) != -1)
	{
		if (!PlayerToPoint(1.0, playerid,HouseInfo[houseid][hCheckPosX], HouseInfo[houseid][hCheckPosY], HouseInfo[houseid][hCheckPosZ]))
			return SendErrorMessage(playerid, "?? ?????? ?? ?????.");

        if(HouseInfo[houseid][hInv][listitem] == 0)
            return 1;

        new item = HouseInfo[houseid][hInv][listitem];
		if(ValidWeaponForInventory(item) != 0)
		{
		    if(PlayerInfo[playerid][pOnDuty])
				return SCM(playerid, COLOR_LIGHTRED,"?????? ????? ?????? ? ???? ?? ?????????.");

		    new slot = GetWeapSlot(item);
			if(slot == -1)
		    	return SendErrorMessage(playerid, "?????? ?????? ?????? ?????????.");

			if(PlayerInfo[playerid][pWeap][slot] != 0)
   				return SendErrorMessage(playerid, "?????? ???? ?????? ??? ?????.");

			if(ac_GivePlayerWeapon(playerid, item, HouseInfo[houseid][hInvAmount][listitem]) == 0)
			    return SendErrorMessage(playerid, "?? ?? ?????? ????? ?????? ??????.");
		}
		else
		{
		    if(GivePlayerItem(playerid, item, HouseInfo[houseid][hInvAmount][listitem]) == -1)
				return SendErrorMessage(playerid, "? ????????? ??? ?????.");
		}

        SendClientMessageEx(playerid, COLOR_GREEN, "?? ????? %s ?? ??????? ????.", inventory_items[item][itemName]);

		new mes[128];
		format(mes, sizeof(mes), "????? %s ?? ??????? ????.", inventory_items[item][itemName]);
		cmd::ame(playerid, mes);

        HouseInfo[houseid][hInv][listitem] = 0;
		HouseInfo[houseid][hInvAmount][listitem] = 0;
		Save_HouseInventory(houseid);
		return 1;
	}

	new vehicle;
	if((vehicle = GetNearVehicle(playerid, 5.0)) != 0)
	{
	    if(IsADontTrunk(vehicle) || IsAPlane(vehicle) || IsABiker(vehicle) || IsAHelicopter(vehicle) || IsABoat(vehicle) || IsABicycle(vehicle))
			return SCM(playerid, COLOR_LIGHTRED, "? ????? ?????????? ??? ?????????.");

        if(VehicleInfo[vehicle][carTrunkLock] == 0)
			    return SCM(playerid, COLOR_LIGHTRED, "???????? ????? ????????????? ???????? ??????.");

		if(VehicleInfo[vehicle][carFaction] && VehicleInfo[vehicle][carFaction] != PlayerInfo[playerid][pFaction])
		    return SendErrorMessage(playerid, "??? ?????????? ???????? ?????????? ??????????.");

        if(VehicleInfo[vehicle][carInv][listitem] == 0)
     		return 1;

	    new item = VehicleInfo[vehicle][carInv][listitem];
		if(ValidWeaponForInventory(item) != 0)
		{
			if(PlayerInfo[playerid][pFaction] && VehicleInfo[vehicle][carFaction] != PlayerInfo[playerid][pFaction] && PlayerInfo[playerid][pOnDuty])
				return SCM(playerid, COLOR_LIGHTRED,"?????? ????? ?????? ?? ?? ???????????? ?????????? ?? ?????????.");

			new slot = GetWeapSlot(item);
			if(slot == -1)
		    	return SendErrorMessage(playerid, "?????? ?????? ?????? ?????????.");

		    if(PlayerInfo[playerid][pWeap][slot] != 0)
		        return SendErrorMessage(playerid, "?????? ???? ?????? ??? ?????.");

			if(ac_GivePlayerWeapon(playerid, item, VehicleInfo[vehicle][carInvAmount][listitem]) == 0)
			    return SendErrorMessage(playerid, "?? ?? ?????? ????? ?????? ??????.");

			if(IsValidDynamicObject(VehicleInfo[vehicle][carAttach][listitem]))
				DestroyDynamicObject(VehicleInfo[vehicle][carAttach][listitem]);
		}
		else
		{
		    if(GivePlayerItem(playerid, item, VehicleInfo[vehicle][carInvAmount][listitem]) == -1)
				return SendErrorMessage(playerid, "? ????????? ??? ?????.");
		}

        new mes[128];
		format(mes, sizeof(mes), "??????? %s ?? %s %s.", inventory_items[item][itemName], (VehicleInfo[vehicle][carFaction])?("?????????"):("?????????"), VehicleNames[GetVehicleModel(vehicle)-400]);
		cmd::ame(playerid, mes);

        VehicleInfo[vehicle][carInv][listitem] = 0;
		VehicleInfo[vehicle][carInvAmount][listitem] = 0;
		Save_CarInventory(vehicle);
	    return 1;
	}

    SendErrorMessage(playerid, "?????? ??????? ???????? ????? ????????? ??? ? ????.");

	return 1;
}

CMD:check(playerid, params[])
{
	new houseid = -1;
	if((houseid = GetNearHouseInside(playerid)) != -1)
	{
		if (!PlayerToPoint(1.0, playerid,HouseInfo[houseid][hCheckPosX], HouseInfo[houseid][hCheckPosY], HouseInfo[houseid][hCheckPosZ]))
			return SendErrorMessage(playerid, "?? ?????? ?? ?????.");

        ShowHouseInventory(playerid, houseid);
		return 1;
	}

	new vehicle = GetPlayerVehicleID(playerid);
	if(vehicle == 0 && (vehicle = GetNearVehicle(playerid, 5.0)) != 0)
	{
	    if(IsADontTrunk(vehicle) || IsAPlane(vehicle) || IsABiker(vehicle) || IsAHelicopter(vehicle) || IsABoat(vehicle) || IsABicycle(vehicle))
			return SCM(playerid, COLOR_LIGHTRED, "? ????? ?????????? ??? ?????????.");

        if(!IsPlayerInAnyVehicle(playerid) && VehicleInfo[vehicle][carTrunkLock] == 0)
			    return SCM(playerid, COLOR_LIGHTRED, "???????? ????? ????????????? ???????? ??????.");

		if(VehicleInfo[vehicle][carFaction] && VehicleInfo[vehicle][carFaction] != PlayerInfo[playerid][pFaction])
		    return SendErrorMessage(playerid, "??? ?????????? ???????? ?????????? ??????????.");

        if(PlayerInfo[playerid][pFaction] && VehicleInfo[vehicle][carFaction] != PlayerInfo[playerid][pFaction] && PlayerInfo[playerid][pOnDuty])
			return SCM(playerid, COLOR_LIGHTRED,"?????? ????? ?????? ?? ?? ???????????? ?????????? ?? ?????????.");

		if(PlayerInfo[playerid][pFaction] != 0 && Factions[PlayerInfo[playerid][pFaction]][fType] == FACTION_LEGAL && PlayerInfo[playerid][pFaction] == VehicleInfo[vehicle][carFaction] && !PlayerInfo[playerid][pOnDuty])
		    return SendErrorMessage(playerid, "????????? ?? ?????????, ????? ???????????? ????????? ?????????.");

        new mes[MAX_VEHICLE_INVENTORY * 32] = "{ffffff}???????\t{ffffff}??????????";
		for(new i; i != MAX_VEHICLE_INVENTORY; i++)
		{
		    if(VehicleInfo[vehicle][carInv][i] == 0)
				format(mes, sizeof(mes), "%s\n{C3C3C3}?????? ????\t", mes);
			else
				format(mes, sizeof(mes), "%s\n%s\t%i", mes, inventory_items[VehicleInfo[vehicle][carInv][i]][itemName], VehicleInfo[vehicle][carInvAmount][i]);
		}

		new title[32] = "???????? %s";
		format(title, sizeof(title), title, VehicleNames[GetVehicleModel(vehicle)-400]);
		Dialog_Show(playerid, InventoryOther, DIALOG_STYLE_TABLIST_HEADERS, title, mes, "?????", "???????");
	    return 1;
	}
	return 1;
}

CMD:discharge(playerid, params[])
{
    new slot,
		ammo,
	    weaponid,
		ammo_slot;

    if(sscanf(params, "ii", slot, ammo))
		return SendSyntaxMessage(playerid, "/discharge [???? 1-4] [??????? ??? ????????]");

    if(slot < 1 || slot > 4)
	    return SendErrorMessage(playerid, "?? ??????? ???????? ???? (1-4).");

	if(ammo < 1 || ammo > 100)
	    return SendErrorMessage(playerid, "???????? ?????????? ???????? 1 - 100.");

	slot--;
	weaponid = PlayerInfo[playerid][pWeap][slot],
	ammo_slot = PlayerInfo[playerid][pAmmo][slot];

	if(weaponid == 0)
	    return SendErrorMessage(playerid, "? ??? ??? ?????? ? ????? ID: %i.", slot+1);

	if(slot == -1 || !HasWeapon(playerid, weaponid))
		return SendErrorMessage(playerid, "? ??? ??? ??????? ??????.");

    if(GetWeapSlot(weaponid) != 1 && GetWeapSlot(weaponid) != 2)
        return SendErrorMessage(playerid, "?????? ?????? ?????? ?????????.");

    if(ammo_slot < ammo)
	    return SendErrorMessage(playerid, "???????? ??????????, ???????? - %i.", ammo_slot);

    if(ac_GivePlayerWeapon(playerid, weaponid, -ammo) == 0)
	    return SendErrorMessage(playerid, "?????? ?????? ?????? ?????????.");

	if(GivePlayerItem(playerid, INV_AMMO, ammo) == -1)
	    return SendErrorMessage(playerid, "? ????????? ??? ?????.");

    SendClientMessageEx(playerid, -1, "?? ????????? %s - %i ??????(-?/-??).", inventory_items[weaponid][itemName], ammo);
	return 1;
}

CMD:charge(playerid, params[])
{
	new slot,
		ammo,
	    weaponid;

    if(sscanf(params, "ii", slot, ammo))
		return SendSyntaxMessage(playerid, "/charge [???? 1-4] [??????? ??? ???????]");

    if(slot < 1 || slot > 4)
	    return SendErrorMessage(playerid, "?? ??????? ???????? ???? (1-4).");

	slot--;
	weaponid = PlayerInfo[playerid][pWeap][slot];

	if(weaponid == 0)
	    return SendErrorMessage(playerid, "? ??? ??? ?????? ? ????? ID: %i.", slot+1);

	if(slot == -1 || !HasWeapon(playerid, weaponid))
		return SendErrorMessage(playerid, "? ??? ??? ??????? ??????.");

    if(GetWeapSlot(weaponid) != 1 && GetWeapSlot(weaponid) != 2)
        return SendErrorMessage(playerid, "?????? ?????? ?????? ????????.");

	new ammo_slot = -1;
	if((ammo_slot = IsPlayerHasItem(playerid, INV_AMMO, ammo)) == -1)
	    return SendErrorMessage(playerid, "? ??? ??? ??????(-?/-??) ? ?????????.");

	if(PlayerInfo[playerid][pInvAmount][ammo_slot] < ammo)
	    return SendErrorMessage(playerid, "???????? ??????????, ???????? - %i.", PlayerInfo[playerid][pInvAmount][ammo_slot]);

    if(ac_GivePlayerWeapon(playerid, weaponid, ammo) == 0)
	    return SendErrorMessage(playerid, "?????? ?????? ?????? ????????.");

    SendClientMessageEx(playerid, -1, "?? ???????? %s - %i ??????(-?/-??).", inventory_items[weaponid][itemName], ammo);

    PlayerInfo[playerid][pInvAmount][ammo_slot] -= ammo;
    if(PlayerInfo[playerid][pInvAmount][ammo_slot] < 1)
        PlayerInfo[playerid][pInv][ammo_slot] = 0;

	return 1;
}

ALTX:dropmoney("/dmoney");
CMD:dropmoney(playerid, params[])
{
    if(IsPlayerInjured(playerid) != 0 || pTemp[playerid][pTaserTime] || pTemp[playerid][pCuffed])
		return SCM(playerid, COLOR_GREY, "?? ?? ?????? ???????????? ?????? ??????? ????? ??????.");

	if(CheckAdmin(playerid, ADMIN_LEVEL_1))
		return SCM(playerid, COLOR_LIGHTRED, "??????? ?????? ? ?????-?????????.");

	if(IsPlayerInAnyVehicle(playerid))
	    return SendErrorMessage(playerid, "?? ?? ?????? ?????????? ? ??????????.");

	if(PlayerInfo[playerid][pHours] < 2)
		return SCM(playerid, COLOR_LIGHTRED, "?? ???????? ????? 2 ????? ?? ???????. ?????? ??????? ??????????.");

	new amount;
	if(sscanf(params, "i", amount))
		return SendSyntaxMessage(playerid, "/dropmoney [?????????? 1-100]");

	if(amount < 1 || amount > 100)
	    return SendErrorMessage(playerid, "?? ??????? ???????? ?????????? ($1-$100).");

	if(amount > GetCash(playerid))
	    return SendNotCash(playerid);

	if(ItemDrop_Drop(playerid, 9999, amount) == -1)
	    return SendErrorMessage(playerid, "?????????? ???????????? ?????????? ????????? ?????????.");

    AMSG(COLOR_YELLOWG, "AdmCmd: %s (ID: %i) ???????? ?????? ?? ????? - $%i", GetNameEx(playerid), playerid, amount);

	GiveCash(playerid, -amount);
    SendClientMessageEx(playerid,COLOR_GREEN,"?? ????????? $%i, /pickupitem ??? N ????? ?????????.", amount);
	return 1;
}

ALTX:dropgun("/dgun");
CMD:dropgun(playerid, params[])
{
    if(IsPlayerInjured(playerid) != 0 || pTemp[playerid][pTaserTime] || pTemp[playerid][pCuffed])
		return SCM(playerid, COLOR_GREY, "?? ?? ?????? ???????????? ?????? ??????? ????? ??????.");

	if(CheckAdmin(playerid, ADMIN_LEVEL_1)|| IsTester(playerid))
		return SCM(playerid, COLOR_LIGHTRED, "??????? ?????? ? ?????/??????-?????????.");

	if(PlayerInfo[playerid][pOnDuty])
	    return SCM(playerid,COLOR_LIGHTRED,"?????? ??????? ?????????? ?? ?????????.");

	if(IsPlayerInAnyVehicle(playerid))
	    return SendErrorMessage(playerid, "?? ?? ?????? ?????????? ? ??????????.");

	new weaponid,
	    slot = GetWeapSlot(GetPlayerWeapon(playerid))+1;

	if(!IsPlayerHoldingWeapon(playerid) && sscanf(params, "i", slot))
		return SendSyntaxMessage(playerid, "/dropgun [???? 1-4]");

	if(slot < 1 || slot > 4)
	    return SendErrorMessage(playerid, "?? ??????? ???????? ???? (1-4).");

	slot--;
	weaponid = PlayerInfo[playerid][pWeap][slot];

	if(weaponid == 0)
	    return SendErrorMessage(playerid, "? ??? ??? ?????? ? ????? ID: %i.", slot+1);

	if(slot == -1 || !HasWeapon(playerid, weaponid))
		return SendErrorMessage(playerid, "? ??? ??? ??????? ??????.");

	if(ItemDrop_Drop(playerid, weaponid, PlayerInfo[playerid][pAmmo][slot]) == -1)
	    return SendErrorMessage(playerid, "?????????? ???????????? ?????????? ????????? ?????????.");

    SendClientMessageEx(playerid,COLOR_GREEN,"?? ????????? %s, ???????????? ????????: %i, /pickupitem ??? N ????? ?????????.", GetWeaponNameEx(weaponid), PlayerInfo[playerid][pAmmo][slot]);
	ResetPlayerWeaponID(playerid, weaponid);
	return 1;
}

ALTX:pickupitem("/pitem");
CMD:pickupitem(playerid, params[])
{
    if(IsPlayerInjured(playerid) != 0 || pTemp[playerid][pTaserTime] || pTemp[playerid][pCuffed])
		return SCM(playerid, COLOR_GREY, "?? ?? ?????? ???????????? ?????? ??????? ????? ??????.");

	new dropid = -1;

	if((dropid = ItemDrop_Nearest(playerid)) == -1)
		return 1;

	ItemDrop_Pickup(playerid, dropid);
	return 1;
}

CMD:rentchannel(playerid, params[])
{
    if(!PlayerToPoint(2.0, playerid, 1167.69, -1478.84, 15.781))
    {
        Waypoint_Set(playerid, 1167.69, -1478.84, 15.781);
		return SCM(playerid, COLOR_GRAD2, "?? ?????????? ?? ? ?????.");
	}

	new channel,
		pass[33],
		cost = 1500;

	if(sscanf(params,"iS(!)[33]", channel, pass))
	{
		SendSyntaxMessage(playerid, "/rentchannel [????? (1-9999)] [?????? | ???????? ???? ??????, ???? ?? ?? ?????? ??????? ??????]");
		return 1;
	}

	if(strlen(pass) < 1 || strlen(pass) > 32)
	    return SendErrorMessage(playerid, "?????????? ???????? ? ??????: 1-32.");

	if(channel > MAX_RADIOS-1 || channel < 1)
		return SendErrorRadioMessage(playerid, "????????? ??????: 1-9999.");

	if(PlayerInfo[playerid][pOwnedChannel] != 0)
		return SendErrorRadioMessage(playerid, "?? ??? ?????????? ???? ?????, '/sellchannel'.");

	if(ChannelExists(channel) != 0)
	    return SendErrorMessage(playerid, "????? ??? ?????.");

	if(strcmp(pass, "!", true) != 0 && StringHasSymbols(pass))
		return SendErrorRadioMessage(playerid, "? ?????? ????? ???????????? ?????? ????? ? ?????.");

	if(GetCash(playerid) < cost)
		return SendNotCash(playerid);

	new id = -1;
	for(new i; i != MAX_RADIOS; i++)
	{
	    if(RadiosInfo[i][radioOn] != 0)
	        continue;

		id = i;
		break;
	}

	if(id == -1)
	    return SendErrorMessage(playerid, "??? ???????????? ????? ??????, ????????? ?????.");

    GiveCash(playerid, -cost);
	SendErrorRadioMessage(playerid, "?? ?????????? ?????: %i ?? $%i, ??????????? '/radiohelp' ??? ??????.", channel, cost);

	RadiosInfo[id][radioChannel] = channel;
	RadiosInfo[id][radioOwner] = PlayerInfo[playerid][pID];
	format(RadiosInfo[id][radioPass], 33, "%s", pass);
	AddChannelToFile(playerid, channel, pass, id);
	return 1;
}

CMD:sellchannel(playerid, params[])
{
	if(0 == PlayerInfo[playerid][pOwnedChannel])
	    return SendErrorMessage(playerid, "?? ?? ????????? ?????.");

	new id = -1,
	    award = 750;

	if((id = GetChannelID(PlayerInfo[playerid][pOwnedChannel])) == -1)
	{
	    PlayerInfo[playerid][pOwnedChannel] = 0;
	    return SendErrorMessage(playerid, "????? ?? ??????.");
	}

	GiveCash(playerid, award);
	SendErrorRadioMessage(playerid, "?? ??????? ?????: %i, ??????????: $%i.", RadiosInfo[id][radioChannel], award);

	foreach(Player, i)
	{
	    if(0 == IsPlayerLogged(i) || GetPlayerChannel(i) != RadiosInfo[id][radioChannel] || i == playerid)
			continue;

		SendErrorRadioMessage(i, "????? ????? ??? ?????? ??? ?????????? ? ?? ???? ??????? ? ????.");
		SetRadioChannel(i, 0);
	}

	new query[128];
	mysql_format(dbHandle, query, sizeof(query), "UPDATE `users` SET `channel`=0,`authed`=0 WHERE `channel`= %i", RadiosInfo[id][radioChannel]);
	mysql_tquery(dbHandle, query);

	mysql_format(dbHandle, query, sizeof(query), "DELETE FROM `radios` WHERE `id` = %i", RadiosInfo[id][radioID]);
	mysql_tquery(dbHandle, query);

	RadiosInfo[id][radioOn] = 0;
	RadiosInfo[id][radioID] = 0;
	RadiosInfo[id][radioChannel] = 0;
	RadiosInfo[id][radioOwner] = 0;

	SetRadioChannel(playerid, 0);
	PlayerInfo[playerid][pOwnedChannel] = 0;
	return 1;
}

CMD:setchannel(playerid, params[])
{
    if(-1 == IsPlayerHasItem(playerid, INV_RADIO))
		return SCM(playerid, COLOR_LIGHTRED, "? ??? ??? ?????.");

	new channelid;

	if(sscanf(params,"d", channelid))
		return SendSyntaxMessage(playerid, "/setchannel [text]");

 	if(ChannelExists(channelid) == 0)
	    return SendErrorMessage(playerid, "????? ?? ??????.");

	if(channelid == 911 && PlayerInfo[playerid][pFaction] != LSPD)
		return SCM(playerid, COLOR_GREY, "????? ????? (LSPD).");

	if(channelid == 999 && PlayerInfo[playerid][pFaction] != SASD)
		return SCM(playerid, COLOR_GREY, "????? ????? (SASD).");

	if(channelid == 912 && PlayerInfo[playerid][pFaction] != LSFD)
		return SCM(playerid, COLOR_GREY, "????? ????? (LSFD).");

	if(channelid == 998 && PlayerInfo[playerid][pFaction] != DOCS)
		return SCM(playerid, COLOR_GREY, "????? ????? (DOCS).");

    if(channelid == 379 && PlayerInfo[playerid][pFaction] != CITY)
		return SCM(playerid, COLOR_GREY, "????? ????? (CITY).");

    if(channelid == GetPlayerChannel(playerid))
		return SendErrorRadioMessage(playerid, "?? ??? ?? ???? ??????.");

	if(channelid == 911 && PlayerInfo[playerid][pFaction] == LSPD)
	{
		SendErrorRadioMessage(playerid, "????? ??????? [CH: %i]", channelid);
		PlayerInfo[playerid][pAuthed] = 1;
		SetRadioChannel(playerid, channelid);
		return 1;
	}
	else if(channelid == 999 && PlayerInfo[playerid][pFaction] == SASD)
	{
		SendErrorRadioMessage(playerid, "????? ??????? [CH: %i]", channelid);
		PlayerInfo[playerid][pAuthed] = 1;
		SetRadioChannel(playerid, channelid);
        return 1;
	}
	else if(channelid == 912 && PlayerInfo[playerid][pFaction] == LSFD)
	{
		SendErrorRadioMessage(playerid, "????? ??????? [CH: %i]", channelid);
		PlayerInfo[playerid][pAuthed] = 1;
		SetRadioChannel(playerid, channelid);
		return 1;
	}
	else if(channelid == 998 && PlayerInfo[playerid][pFaction] == DOCS)
	{
		SendErrorRadioMessage(playerid, "????? ??????? [CH: %i]", channelid);
		PlayerInfo[playerid][pAuthed] = 1;
		SetRadioChannel(playerid, channelid);
		return 1;
	}
    else if(channelid == 379 && PlayerInfo[playerid][pFaction] == CITY)
	{
		SendErrorRadioMessage(playerid, "????? ??????? [CH: %i]", channelid);
		PlayerInfo[playerid][pAuthed] = 1;
		SetRadioChannel(playerid, channelid);
		return 1;
	}
	SendErrorRadioMessage(playerid, "????? ??????? [CH: %i]", channelid);
	SendErrorRadioMessage(playerid, "??????????? /auth, ????? ??????????????, ? ????? /r.");

	PlayerInfo[playerid][pAuthed] = 0;
	SetRadioChannel(playerid, channelid);
	return 1;
}

CMD:setslot(playerid, params[])
{
    if(-1 == IsPlayerHasItem(playerid, INV_RADIO))
		return SCM(playerid, COLOR_LIGHTRED, "? ??? ??? ?????.");

	new slot;

	if(sscanf(params,"d",slot))
		return SendSyntaxMessage(playerid, "/setslot [???? (0-100)]");

	if(slot == GetPlayerSlot(playerid))
		return SendErrorRadioMessage(playerid, "?? ??? ?? ???? ?????.");

    if(slot < 0 || slot > 100)
	    return SendErrorMessage(playerid, "???????? ???? 0-100.");

	SetRadioSlot(playerid, slot);
	SendErrorRadioMessage(playerid, "??????? ???????? [Slot: %i]", slot);
	return 1;
}

CMD:leavechannel(playerid, params[])
{
	if(-1 == IsPlayerHasItem(playerid, INV_RADIO))
		return SCM(playerid, COLOR_LIGHTRED, "? ??? ??? ?????.");

	if(GetPlayerChannel(playerid) == 0)
		return SendErrorRadioMessage(playerid, "?? ?? ?????????? ?? ?? ????? ?? ???????.");

	SendErrorRadioMessage(playerid, "????? %i ???????.", GetPlayerChannel(playerid));
	SetRadioChannel(playerid, 0);
	PlaySound(playerid, 6400);
	return 1;
}

CMD:auth(playerid, params[])
{
    if(-1 == IsPlayerHasItem(playerid, INV_RADIO))
		return SCM(playerid, COLOR_LIGHTRED, "? ??? ??? ?????.");

	if(GetPlayerChannel(playerid) == 0)
		return SendErrorRadioMessage(playerid, "???? ????? ?????????.");

	if(PlayerInfo[playerid][pAuthed] == 1)
		return SendErrorRadioMessage(playerid, "?? ??? ???????????? ?????.");

	new id = -1;
	if((id = ChannelExists(GetPlayerChannel(playerid))) == 0)
	    return SendErrorMessage(playerid, "????? ?? ??????.");

	if(CompareStrings(RadiosInfo[id][radioPass], "!"))
	{
	    SendErrorRadioMessage(playerid, "?? ?????????????? ?? ?????? %i.", GetPlayerChannel(playerid));
		PlayerInfo[playerid][pAuthed] = 1;
		PlaySound(playerid, 6400);
	    return 1;
	}

	if(isnull(params))
		return SendSyntaxMessage(playerid, "/auth [?????? ??????]");

	if(0 == CompareStrings(RadiosInfo[id][radioPass], params))
		return SendErrorRadioMessage(playerid, "?? ????? ???????? ??????.");

	SendErrorRadioMessage(playerid, "?? ?????????????? ?? ?????? %i.", GetPlayerChannel(playerid));
	PlayerInfo[playerid][pAuthed] = 1;
	PlaySound(playerid, 6400);
	return 1;
}

CMD:newauth(playerid, params[])
{
	if(0 == PlayerInfo[playerid][pOwnedChannel])
	    return SendErrorMessage(playerid, "?? ?? ????????? ?????.");

    new id = -1;
	if((id = GetChannelID(PlayerInfo[playerid][pOwnedChannel])) == -1)
	    return SendErrorMessage(playerid, "????? ?? ??????.");

	if(isnull(params))
		return SendSyntaxMessage(playerid, "/newauth [????? ?????? | ???? ?????? ?????? ??????, ?? ??????? !]");

	if(strlen(params) < 1 || strlen(params) > 32)
	    return SendErrorMessage(playerid, "?????????? ???????? ? ??????: 1-32.");

	if(CompareStrings(RadiosInfo[id][radioPass], "!") && CompareStrings(params, "!"))
	    return SendErrorMessage(playerid, "?? ????? ?????? ??? ??????.");

	if(!CompareStrings(params, "!") && StringHasSymbols(params))
		return SendErrorRadioMessage(playerid, "? ?????? ????? ???????????? ?????? ????? ? ?????.");

	if(CompareStrings(params, "!"))
        SendErrorRadioMessage(playerid, "?????? ??? ????? ?? ????? ??????.");
	else
		SendErrorRadioMessage(playerid, "?? ??????? ????? ??????: %s", params);

	format(RadiosInfo[id][radioPass], 33, "%s", params);

	new query[128 + 128];
    mysql_format(dbHandle, query, sizeof(query), "UPDATE `radios` SET `pass`='%e' WHERE `id` = %i", params, RadiosInfo[id][radioID]);
	mysql_tquery(dbHandle, query);
	return 1;
}

CMD:radiomembers(playerid, params[])
{
    if(0 == PlayerInfo[playerid][pOwnedChannel])
	    return SendErrorMessage(playerid, "?? ?? ????????? ?????.");

    new id = -1;

	if((id = GetChannelID(PlayerInfo[playerid][pOwnedChannel])) == -1)
	    return SendErrorMessage(playerid, "????? ?? ??????.");

	SendClientMessageEx(playerid, COLOR_YELLOWG, "|_______________????? %i_______________|", RadiosInfo[id][radioChannel]);
	foreach(Player, i)
	{
	    if(0 == IsPlayerLogged(i) || GetPlayerChannel(i) != RadiosInfo[id][radioChannel])
	        continue;

	    SendClientMessageEx(playerid, COLOR_FADE2, "(ID: %i) %s.", i, GetNameEx(i));
	}
	SCM(playerid, COLOR_YELLOWG, "|______________________________________|");
	return 1;
}

CMD:kickoffradio(playerid, params[])
{
    if(0 == PlayerInfo[playerid][pOwnedChannel])
	    return SendErrorMessage(playerid, "?? ?? ????????? ?????.");

	new userid;

	if(sscanf(params,"u", userid))
		return SendSyntaxMessage(playerid, "/kickoffradio [playerid/PartOfName]");

	if(!IsPlayerLogged(userid))
		return SendNotConnected(playerid);

	if(userid == playerid)
		return SCM(playerid, COLOR_WHITE, "?? ?? ?????? ???????? ???? ?? ??????.");

    new id = -1;

	if((id = GetChannelID(PlayerInfo[playerid][pOwnedChannel])) == -1)
	    return SendErrorMessage(playerid, "????? ?? ??????.");

	if(RadiosInfo[id][radioChannel] != GetPlayerChannel(playerid))
	    return SendErrorMessage(playerid, "?? ?????? ?????????? ? ????? ??????: %i.", RadiosInfo[id][radioChannel]);

	if(GetPlayerChannel(userid) != GetPlayerChannel(playerid))
	    return SendErrorRadioMessage(playerid, "??????? ?????? ??? ? ?????? ??????.");

	SendErrorRadioMessage(playerid, "?? ??????? %s ? ?????-???????.", GetNameEx(id));
	SendErrorRadioMessage(userid, "?? ???? ??????? ? ?????-???????.");
	SetRadioChannel(userid, 0);
	return 1;
}

ALTX:r("/radio");
CMD:r(playerid, params[])
{
	if(isnull(params))
		return SendSyntaxMessage(playerid, "/r [text]");

    if(PlayerInfo[playerid][pMutedTime] > 0)
		return SCM(playerid, COLOR_LIGHTRED, "??? ????????? ??? ???????????? ????????.");

    new channel = GetPlayerChannel(playerid);

	if(-1 == IsPlayerHasItem(playerid, INV_RADIO))
		return SCM(playerid, COLOR_LIGHTRED, "? ??? ??? ?????.");

	if(channel == 0)
		return SendErrorRadioMessage(playerid, "?? ?? ?? ???????.");

	if(PlayerInfo[playerid][pAuthed] == 0)
		return SendErrorRadioMessage(playerid, "?? ?? ???????????? ?? ???????.");

	new mes[128];
	if(strlen(params) > MAXLEN)
	{
		new pos = MAXLEN;
		if(pos < MAXLEN-1) pos = MAXLEN;

		if(pTemp[playerid][pPatrol])
		    format(mes, sizeof(mes), "**[CH: %i, S: 0] [%s] %s: %.*s ...", channel, PatrolInfo[GetPatrolID(playerid)][pTemp[playerid][pPatrol]-1][patrulName], GetNameEx(playerid), pos, params);
		else
		    format(mes, sizeof(mes), "**[CH: %i, S: 0] %s: %.*s ...", channel, GetNameEx(playerid), pos, params);

		SendRadioMessage(channel, COLOR_RADIO, mes);
		format(mes, sizeof(mes), "... %s", params[pos]);
		SendRadioMessage(channel, COLOR_RADIO, mes);

		SendLocalMessage(5.0, playerid, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5, "(?????) %s ???????: %.*s ...", GetNameWithMask(playerid), pos, params);
		SendLocalMessage(5.0, playerid, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5, "... %s", params[pos]);
	}
	else
	{
	    if(pTemp[playerid][pPatrol])
			format(mes, sizeof(mes), "**[CH: %i, S: 0] [%s] %s: %s", channel, PatrolInfo[GetPatrolID(playerid)][pTemp[playerid][pPatrol]-1][patrulName], GetNameEx(playerid), params);
		else
			format(mes, sizeof(mes), "**[CH: %i, S: 0] %s: %s", channel, GetNameEx(playerid), params);

		SendRadioMessage(channel, COLOR_RADIO, mes);
		SendLocalMessage(5.0, playerid, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5, "(?????) %s ???????: %s", GetNameWithMask(playerid), params);
	}
	return 1;
}

CMD:rr(playerid, params[])
{
	if(isnull(params))
		return SendSyntaxMessage(playerid, "/rr [text]");

    if(PlayerInfo[playerid][pMutedTime] > 0)
		return SCM(playerid, COLOR_LIGHTRED, "??? ????????? ??? ???????????? ????????.");

    new channel = GetPlayerChannel(playerid),
		slot = GetPlayerSlot(playerid);

	if(-1 == IsPlayerHasItem(playerid, INV_RADIO))
		return SCM(playerid, COLOR_LIGHTRED, "? ??? ??? ?????.");

	if(channel == 0)
		return SendErrorRadioMessage(playerid, "?? ?? ?? ???????.");

	if(PlayerInfo[playerid][pAuthed] == 0)
		return SendErrorRadioMessage(playerid, "?? ?? ???????????? ?? ???????.");

	new mes[128];
	if(strlen(params) > MAXLEN)
	{
		new pos = MAXLEN;
		if(pos < MAXLEN-1) pos = MAXLEN;
		if(pTemp[playerid][pPatrol])
		    format(mes, sizeof(mes), "**[CH: %i, S: %i] [%s] %s: %.*s ...", channel, slot, PatrolInfo[GetPatrolID(playerid)][pTemp[playerid][pPatrol]-1][patrulName], GetNameEx(playerid), pos, params);
		else
			format(mes, sizeof(mes), "**[CH: %i, S: %i] %s: %.*s ...", channel, slot, GetNameEx(playerid), pos, params);

		SendSlotRadioMessage(channel, slot, COLOR_RADIO, mes);
		format(mes, sizeof(mes), "... %s", params[pos]);
		SendSlotRadioMessage(channel, slot, COLOR_RADIO, mes);

		SendLocalMessage(5.0, playerid, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5, "(?????) %s ???????: %.*s ...", GetNameWithMask(playerid), pos, params);
		SendLocalMessage(5.0, playerid, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5, "... %s", params[pos]);
	}
	else
	{
	    if(pTemp[playerid][pPatrol])
			format(mes, sizeof(mes), "**[CH: %i, S: %i] [%s] %s: %s", channel, slot, PatrolInfo[GetPatrolID(playerid)][pTemp[playerid][pPatrol]-1][patrulName], GetNameEx(playerid), params);
		else
			format(mes, sizeof(mes), "**[CH: %i, S: %i] %s: %s", channel, slot, GetNameEx(playerid), params);

		SendSlotRadioMessage(channel, slot, COLOR_RADIO, mes);
		SendLocalMessage(5.0, playerid, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5, "(?????) %s ???????: %s", GetNameWithMask(playerid), params);
	}
	return 1;
}

ALTX:rlow("/rl");
CMD:rlow(playerid, params[])
{
	if(isnull(params))
		return SendSyntaxMessage(playerid, "/rlow [text]");

    if(PlayerInfo[playerid][pMutedTime] > 0)
		return SCM(playerid, COLOR_LIGHTRED, "??? ????????? ??? ???????????? ????????.");

    new channel = GetPlayerChannel(playerid);

	if(-1 == IsPlayerHasItem(playerid, INV_RADIO))
		return SCM(playerid, COLOR_LIGHTRED, "? ??? ??? ?????.");

	if(channel == 0)
		return SendErrorRadioMessage(playerid, "?? ?? ?? ???????.");

	if(PlayerInfo[playerid][pAuthed] == 0)
		return SendErrorRadioMessage(playerid, "?? ?? ???????????? ?? ???????.");

	new mes[128];
	if(strlen(params) > MAXLEN)
	{
		new pos = MAXLEN;
		if(pos < MAXLEN-1) pos = MAXLEN;

		if(pTemp[playerid][pPatrol])
		    format(mes, sizeof(mes), "**[CH: %i, S: 0] [%s] %s [????]: %.*s ...", channel, PatrolInfo[GetPatrolID(playerid)][pTemp[playerid][pPatrol]-1][patrulName], GetNameEx(playerid), pos, params);
		else
			format(mes, sizeof(mes), "**[CH: %i, S: 0] %s [????]: %.*s ...", channel, GetNameEx(playerid), pos, params);

		SendRadioMessage(channel, COLOR_RADIO, mes);
		format(mes, sizeof(mes), "... %s", params[pos]);
		SendRadioMessage(channel, COLOR_RADIO, mes);

		SendLocalMessage(2.0, playerid, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5, "(?????) %s ??????? [????]: %.*s ...", GetNameWithMask(playerid), pos, params);
		SendLocalMessage(2.0, playerid, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5, "... %s", params[pos]);
	}
	else
	{
	    if(pTemp[playerid][pPatrol])
			format(mes, sizeof(mes), "**[CH: %i, S: 0] [%s] %s [????]: %s", channel, PatrolInfo[GetPatrolID(playerid)][pTemp[playerid][pPatrol]-1][patrulName], GetNameEx(playerid), params);
		else
			format(mes, sizeof(mes), "**[CH: %i, S: 0] %s [????]: %s", channel, GetNameEx(playerid), params);

		SendRadioMessage(channel, COLOR_RADIO, mes);
		SendLocalMessage(2.0, playerid, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5, "(?????) %s ??????? [????]: %s", GetNameWithMask(playerid), params);
	}
	return 1;
}

ALTX:rrlow("/rrl");
CMD:rrlow(playerid, params[])
{
	if(isnull(params))
		return SendSyntaxMessage(playerid, "/rrlow [text]");

    if(PlayerInfo[playerid][pMutedTime] > 0)
		return SCM(playerid, COLOR_LIGHTRED, "??? ????????? ??? ???????????? ????????.");

    new channel = GetPlayerChannel(playerid),
        slot = GetPlayerSlot(playerid);

	if(-1 == IsPlayerHasItem(playerid, INV_RADIO))
		return SCM(playerid, COLOR_LIGHTRED, "? ??? ??? ?????.");

	if(channel == 0)
		return SendErrorRadioMessage(playerid, "?? ?? ?? ???????.");

	if(PlayerInfo[playerid][pAuthed] == 0)
		return SendErrorRadioMessage(playerid, "?? ?? ???????????? ?? ???????.");

	new mes[128];
	if(strlen(params) > MAXLEN)
	{
		new pos = MAXLEN;
		if(pos < MAXLEN-1) pos = MAXLEN;

		if(pTemp[playerid][pPatrol])
		    format(mes, sizeof(mes), "**[CH: %i, S: %i] [%s] %s [????]: %.*s ...", channel, slot, PatrolInfo[GetPatrolID(playerid)][pTemp[playerid][pPatrol]-1][patrulName], GetNameEx(playerid), pos, params);
		else
			format(mes, sizeof(mes), "**[CH: %i, S: %i] %s [????]: %.*s ...", channel, slot, GetNameEx(playerid), pos, params);

		SendSlotRadioMessage(channel, slot, COLOR_RADIO, mes);
		format(mes, sizeof(mes), "... %s", params[pos]);
		SendSlotRadioMessage(channel, slot, COLOR_RADIO, mes);

		SendLocalMessage(2.0, playerid, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5, "(?????) %s ??????? [????]: %.*s ...", GetNameWithMask(playerid), pos, params);
		SendLocalMessage(2.0, playerid, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5, "... %s", params[pos]);
	}
	else
	{
	    if(pTemp[playerid][pPatrol])
			format(mes, sizeof(mes), "**[CH: %i, S: %?] [%s] %s [????]: %s", channel, slot, PatrolInfo[GetPatrolID(playerid)][pTemp[playerid][pPatrol]-1][patrulName], GetNameEx(playerid), params);
		else
			format(mes, sizeof(mes), "**[CH: %i, S: %i] %s [????]: %s", channel, slot, GetNameEx(playerid), params);

		SendSlotRadioMessage(channel, slot, COLOR_RADIO, mes);
		SendLocalMessage(2.0, playerid, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5, "(?????) %s ??????? [????]: %s", GetNameWithMask(playerid), params);
	}
	return 1;
}

CMD:mask(playerid, params[])
{
	if(-1 == IsPlayerHasItem(playerid, INV_MASK) && !PlayerInfo[playerid][pOnDuty])
		return SCM(playerid, COLOR_LIGHTRED, "? ??? ??? ?????.");

	if(!maskOn{playerid})
	{
	    cmd::ame(playerid, "???????? ?????.");
		GameTextForPlayer(playerid, "~b~You have put ~g~ON ~b~your mask.", 4000, 4);
		maskOn{playerid} = true;
		ShowPlayerName(playerid, false);
		format(PlayerInfo[playerid][pMaskname], 32, "[????? %i_%i]", randomEx(100000, 999999), randomEx(10, 100));
	}
	else
	{
	    cmd::ame(playerid, "??????? ?????.");
		GameTextForPlayer(playerid, "~b~You have taken ~r~OFF ~b~your mask.", 4000, 4);
		maskOn{playerid} = false;
		ShowPlayerName(playerid, true);
		format(PlayerInfo[playerid][pMaskname], 32, PlayerInfo[playerid][pUsername_]);
	}
	return 1;
}

CMD:buyclothes(playerid, params[])
{
    if(PlayerInfo[playerid][pOnDuty])
	    return SendErrorMessage(playerid, "?? ?????? ?????????? ?? ?? ?????????.");

	new id;

	if((id = GetNearBizInside(playerid)) == -1)
	    return SCM(playerid, COLOR_INFO, "?? ?? ?????????? ? ???????? ??????.");

	if(BizInfo[id][bizType] != BIZ_CLOTHES)
	    return SCM(playerid, COLOR_INFO, "?? ?? ?????????? ? ???????? ??????.");

	if(GetCash(playerid) < 100)
		return SCM(playerid, COLOR_GREY, "???????????? ?????! (????? $100)");

	if(PlayerInfo[playerid][pSex] == 1)
	    ShowModelSelectionMenu(playerid, "Buy skin", MODEL_SELECTION_BUYCLOTHES, male_skins, sizeof(male_skins));
	else
	    ShowModelSelectionMenu(playerid, "Buy skin", MODEL_SELECTION_BUYCLOTHES, female_skins, sizeof(female_skins));
	return 1;
}

ALTX:stopanim("/sa");
CMD:stopanim(playerid, params[])
{
	StopPlayerAnims(playerid);
	return 1;
}

//====================================Vehicles====================================//
CMD:dropkey(playerid, params[])
{
	if(PlayerInfo[playerid][pSpareKey] == 0)
		return SCM(playerid, COLOR_GREEN, "? ??? ??? ??????.");

	SCM(playerid, COLOR_INFO, "?? ????????? ????? ?? ?????.");
	PlayerInfo[playerid][pSpareKey] = 0;
	return 1;
}

CMD:damages(playerid, params[])
{
	new userid;

	if(sscanf(params, "u", userid))
		return SendSyntaxMessage(playerid,"/damages [playerid/PartOfName]");

	if(!IsPlayerConnected(userid))
		return SCM(playerid, COLOR_LIGHTRED, "?????? ?? ? ????.");

	if(!PlayerNearPlayer(6.0, playerid, userid))
		return SendNotNearPlayer(playerid);

	DisplayDamages(playerid, userid);
	return 1;
}

CMD:lights(playerid, params[])
{
	if(!IsDriver(playerid))
		return SendNotInVehicle(playerid);

	new vehicleid = GetPlayerVehicleID(playerid),
	    mes[128];

	new engine,lights,alarm,doors,bonnet,boot,objective;
    GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);

	if(lights != 0)
	{
		format(mes, sizeof(mes), "????????(-?) ???? ??? %s.", VehicleNames[GetVehicleModel(vehicleid)-400]);
		cmd::ame(playerid, mes);

		format(mes, sizeof(mes), "~w~%s LIGHTS ~r~OFF", VehicleNames[GetVehicleModel(vehicleid)-400]);
		GameTextForPlayer(playerid, mes, 2500, 4);

		VehicleLight(vehicleid, false);
		return 1;
	}

	format(mes, sizeof(mes), "???????(-?) ???? ??? %s.", VehicleNames[GetVehicleModel(vehicleid)-400]);
	cmd::ame(playerid, mes);

	format(mes, sizeof(mes), "~w~%s LIGHTS ~g~ON", VehicleNames[GetVehicleModel(vehicleid)-400]);
	GameTextForPlayer(playerid, mes, 2500, 4);

	VehicleLight(vehicleid, true);
	return 1;
}

CMD:alarmoff(playerid, params[])
{
    if(!IsValidVehicle(PlayerInfo[playerid][pCarKey]))
		return SCM(playerid, COLOR_LIGHTRED, "???? ???????????? ???????? ?? ??????????.");

	if(GetNearVehicle(playerid, 10.0, PlayerInfo[playerid][pCarKey]) == 0)
	    return SendErrorMessage(playerid, "?? ?????? ?????????? ????? ?? ????? ???????????.");

    new engine,lights,alarm,doors,bonnet,boot,objective;
    GetVehicleParamsEx(PlayerInfo[playerid][pCarKey],engine,lights,alarm,doors,bonnet,boot,objective);

	if(alarm == VEHICLE_PARAMS_OFF)
	    return SendErrorMessage(playerid, "???????????? ?? ????????.");

	AlarmOff(PlayerInfo[playerid][pCarKey]);
	SCM(playerid, COLOR_INFO, "?? ????????? ????????????.");
	return 1;
}

ALTX:window("/wi");
CMD:window(playerid, params[])
{
    if(!IsPlayerInAnyVehicle(playerid))
		return SendNotInVehicle(playerid);

	new vehicle = GetPlayerVehicleID(playerid),
	    seat = GetPlayerVehicleSeat(playerid),
		model = GetVehicleModel(vehicle),
		wi;

    if(IsADontWindow(vehicle))
		return SCM(playerid, COLOR_LIGHTRED, "? ????? ????????????? ???????? ??? ????.");

	if(sscanf(params, "i", wi))
	{
		SendSyntaxMessage(playerid, "/v window [????]");
		SendSyntaxMessage(playerid, "????: 1 - ???????????? | 2 - ???????? ???????????? | 3 - ?????? ????? | 4 - ?????? ??????");
		return 1;
	}

	if(wi > 4 || wi < 1)
		return SendClientMessage(playerid,-1,"1 - ???????????? | 2 - ???????? ???????????? | 3 - ?????? ????? | 4 - ?????? ??????");

	if(!IsDriver(playerid) && seat+1 != wi)
		return SendClientMessageEx(playerid, COLOR_LIGHTRED, "?? ?? ???????? ? ?????? ???????/??????? ?????? (%i) ????.", seat+1);

	if((model == 401 || model == 402 || model == 403 || model == 406 || model == 408 ||
	model == 410 || model == 411 || model == 412 || model == 413 || model == 414 ||
	model == 415 || model == 416 || model == 417 || model == 419 || model == 422 ||
	model == 425 || model == 427 || model == 428 || model == 429 || model == 431 ||
	model == 433 || model == 434 || model == 436 || model == 437 || model == 439 ||
	model == 440 || model == 443 || model == 444 || model == 447 || model == 451 ||
	model == 455 || model == 456 || model == 459 || model == 474 || model == 475 ||
	model == 477 || model == 478 || model == 480 || model == 482 || model == 489 ||
	model == 491 || model == 494 || model == 495 || model == 496 || model == 498 ||
	model == 499 || model == 500 || model == 502 || model == 503 || model == 505 ||
	model == 506 || model == 508 || model == 514 || model == 515 || model == 517 ||
	model == 518 || model == 524 || model == 525 || model == 526 || model == 527 ||
	model == 528 || model == 533 || model == 534 || model == 535 || model == 536 ||
	model == 541 || model == 542 || model == 543 || model == 544 || model == 545 ||
	model == 549 || model == 552 || model == 554 || model == 555 || model == 556 ||
	model == 557 || model == 558 || model == 559 || model == 562 || model == 565 ||
	model == 573 || model == 574 || model == 575 || model == 576 || model == 578 ||
	model == 582 || model == 583 || model == 587 || model == 589 || model == 593 ||
	model == 599 || model == 600 || model == 602) && wi > 2)
		return SCM(playerid, COLOR_LIGHTRED, "? ????? ????????????? ???????? ??? ?????? ????.");

	new wi_state[4],
		mes[128];

	GetVehicleParamsCarWindows(vehicle, wi_state[0], wi_state[1], wi_state[2], wi_state[3]);
	wi_state[wi-1] = !wi_state[wi-1] ? (1):(0);

	new seat_name[4][32] =
		{"????????????", "???????? ????????????", "?????? ?????", "?????? ??????"};

    if(wi_state[wi-1] == 0)
	{
		format(mes, sizeof(mes), "??????(-?) %s ???? %s.", seat_name[wi-1], VehicleNames[model-400]);
		cmd::ame(playerid, mes);

		GameTextForPlayer(playerid, "~w~WINDOW ~g~OPEN", 2500, 4);
	}
	else
	{
	    format(mes, sizeof(mes), "??????(-?) %s ???? %s.", seat_name[wi-1], VehicleNames[model-400]);
		cmd::ame(playerid, mes);

		GameTextForPlayer(playerid, "~w~WINDOW ~r~CLOSE", 2500, 4);
	}

	SetVehicleParamsCarWindows(vehicle, wi_state[0], wi_state[1], wi_state[2], wi_state[3]);
	return 1;
}

CMD:vmenu(playerid, params[])
{
    if(0 == IsValidVehicle(PlayerInfo[playerid][pCarKey]))
		return SCM(playerid, COLOR_LIGHTRED, "???? ???????????? ???????? ?? ??????????.");

	new vehicle = PlayerInfo[playerid][pCarKey];
	if(vehicle == 0 || VehicleInfo[vehicle][carOwnerID] != PlayerInfo[playerid][pID])
		return 1;

	new mes[256] =
	"1. ?????????? ??????????\n\
	2. ???????????? ?????????\n\
	3. ??????? ????????? ??????????? {FFFF00}(50%c ?? ????????? ?????????)\n\
	4. ??????? ????????? ??????";

	if(VehicleInfo[vehicle][carGps] == 1 && VehicleInfo[vehicle][carRadio] == 1)
		strcat(mes, "\n5. ????? ????????? ?? GPS\n6. ?????????");
    else if(VehicleInfo[vehicle][carGps] == 1 && VehicleInfo[vehicle][carRadio] == 0)
		strcat(mes, "\n5. ????? ????????? ?? GPS");
    else if(VehicleInfo[vehicle][carGps] == 0 && VehicleInfo[vehicle][carRadio] == 1)
		strcat(mes, "\n5. ?????????");

	format(mes, sizeof(mes), mes, '%');

	new title[39];
	format(title, sizeof(title), "???? - %s", VehicleNames[GetVehicleModel(vehicle)-400]);
	Dialog_Show(playerid, VehMenu, DIALOG_STYLE_LIST, title, mes, "???????", "??????");
	return 1;
}

Dialog:VehMenu(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return 1;

    if(0 == IsValidVehicle(PlayerInfo[playerid][pCarKey]))
		return SCM(playerid, COLOR_LIGHTRED, "???? ???????????? ???????? ?? ??????????.");

	new vehicle = PlayerInfo[playerid][pCarKey];
	if(vehicle == 0 || VehicleInfo[vehicle][carOwnerID] != PlayerInfo[playerid][pID])
		return 1;

	switch(listitem)
	{
	    case 0: cmd::vehicle(playerid, "stats");
	    case 1: cmd::vehicle(playerid, "park");
	    case 2: cmd::vehicle(playerid, "sell");
	    case 3: Dialog_Show(playerid, SellVehTo, DIALOG_STYLE_INPUT, "??????? ??????????", "{ffffff}??????? ??????????. ??????? {C3C3C3}[PartOfName/playerid] [????????? ???????]", "???????", "??????");
	    case 4:
		{
		    if(VehicleInfo[vehicle][carGps] == 1)
				return cmd::vehicle(playerid, "find");

		    if(VehicleInfo[vehicle][carRadio] == 1)
		        cmd::setstation(playerid, "");
		}
		case 5:
		{
		    if(VehicleInfo[vehicle][carRadio] == 1)
		        cmd::setstation(playerid, "");
		}
	}
	return 1;
}

Dialog:SellVehTo(playerid, response, listitem, inputtext[])
{
	if(!response)
 		return cmd::vmenu(playerid, "");

    if(!IsValidVehicle(PlayerInfo[playerid][pCarKey]))
		return SCM(playerid, COLOR_LIGHTRED, "???? ???????????? ???????? ?? ??????????.");

	new vehicle = GetPlayerVehicleID(playerid);
	if(vehicle == 0)
		return 1;

	if(VehicleInfo[vehicle][carOwnerID] != PlayerInfo[playerid][pID])
		return SCM(playerid, COLOR_LIGHTRED, "?? ?? ????????? ?????????? ????? ????????????? ????????.");

    new userid,
		price;

	if(sscanf(inputtext, "ui", userid, price))
	{
	    Dialog_Show(playerid, SellVehTo, DIALOG_STYLE_INPUT, "??????? ??????????", "{ffffff}??????? ??????????. ??????? {C3C3C3}[PartOfName/playerid] [????????? ???????]", "???????", "??????");
	    return SendErrorMessage(playerid, "???????????? ??????.");
	}

	if(0 == IsPlayerLogged(userid))
	{
	    Dialog_Show(playerid, SellVehTo, DIALOG_STYLE_INPUT, "??????? ??????????", "{ffffff}??????? ??????????. ??????? {C3C3C3}[PartOfName/playerid] [????????? ???????]", "???????", "??????");
		return SendNotConnected(playerid);
	}

	if(!PlayerNearPlayer(3.0, playerid, userid))
	{
	    Dialog_Show(playerid, SellVehTo, DIALOG_STYLE_INPUT, "??????? ??????????", "{ffffff}??????? ??????????. ??????? {C3C3C3}[PartOfName/playerid] [????????? ???????]", "???????", "??????");
		return SendNotNearPlayer(playerid);
	}

	if(price < 0 || price > 100000000)
	{
	    Dialog_Show(playerid, SellVehTo, DIALOG_STYLE_INPUT, "??????? ??????????", "{ffffff}??????? ??????????. ??????? {C3C3C3}[PartOfName/playerid] [????????? ???????]", "???????", "??????");
	    return SendErrorMessage(playerid, "??????? ?????????? ???? ???????.");
	}

	new str[32];
	format(str, sizeof(str), "sellto %i %i", userid, price);
	cmd::vehicle(playerid, str);
	return 1;
}

CMD:register(playerid, params[])
{
    if(0 == IsValidVehicle(PlayerInfo[playerid][pCarKey]))
		return SCM(playerid, COLOR_LIGHTRED, "???? ???????????? ???????? ?? ??????????.");

	new vehicle = PlayerInfo[playerid][pCarKey];
	if(VehicleInfo[vehicle][carOwnerID] != PlayerInfo[playerid][pID])
		return SCM(playerid, COLOR_LIGHTRED, "?? ?? ????????? ?????????? ????? ????????????? ????????.");

	if(IsABicycle(vehicle))
		return SCM(playerid, COLOR_LIGHTRED, "?????? ????????? ?? ???? ?????????.");

	if(VehicleInfo[vehicle][carEngineOn])
		return SCM(playerid, COLOR_LIGHTRED, "????????? ?????????, ?????? ??? ?????? ?????????????? ???? ?????????.");

	if(VehicleInfo[vehicle][carAttach3DtextUse] != 0)
		return SCM(playerid, COLOR_LIGHTRED, "?????????, ???????? ??? ???????????.");

	if(VehicleInfo[vehicle][carRegistered])
		return SCM(playerid, COLOR_LIGHTRED, "???? ????????? ??? ???????????????.");

	if(GetCash(playerid) < 300)
		return SendNotCash(playerid);

	if(0 == IsPlayerInRangeOfPoint(playerid, 5.0, 2753.7205,-1058.7595,1028.4969) && 0 == IsPlayerInRangeOfPoint(playerid, 5.0, 619.6464,-565.7822,716.8319))
		return SendErrorMessage(playerid, "?? ?????? ?????????? ?????? PDHQ ??? SDHQ.");

    if(0 == IsVehicleInRangeOfPoint(vehicle, 15.0, 1536.0444,-1674.1277,13.3828) && 0 == IsVehicleInRangeOfPoint(vehicle, 15.0, 635.3169,-576.1884,16.3359))
		return SendErrorMessage(playerid, "??? ????????? ?????? ?????????? ????? PDHQ ??? SDHQ.");

	StartVehicleUpgrade(playerid, vehicle, 7, 300);
	SendClientMessage(playerid, COLOR_GREEN, "?????????? ?? ???? ??????, ??? ?????? ????????? ?????.");
	return 1;
}

CMD:vlock(playerid, params[])
	return cmd::vehicle(playerid, "lock");

ALTX:vehicle("/v");
CMD:vehicle(playerid, params[])
{
	new parametrs[13],
	    arg[128],
	    vehicle = GetPlayerVehicleID(playerid),
	    model = GetVehicleModel(vehicle);

	if(sscanf(params, "s[13]S()[128]", parametrs, arg))
	{
		SendClientMessage(playerid, COLOR_HELPS, "_____________________________________________");
		SendClientMessage(playerid, COLOR_HELPS, "???????????: /(v)ehicle [????????]");
		SendClientMessage(playerid, COLOR_HELPS, "[????????] list, get, stats, lock, park, tow, find, sell, sellto, fines");
		SendClientMessage(playerid, COLOR_HELPS, "[????????] /(en)ngine (Y), /lights (2), /trunk, /hood, /(s)et(s)tation, /(wi)ndow");
		SendClientMessage(playerid, COLOR_HELPS, "_____________________________________________");
		return 1;
	}

	/*else if(0 == strcmp(parametrs, "upgrade"))
	{
	    if(!IsValidVehicle(PlayerInfo[playerid][pCarKey]))
			return SCM(playerid, COLOR_LIGHTRED, "???? ???????????? ???????? ?? ??????????.");

		if(!IsPlayerInAnyVehicle(playerid))
			return SendNotInVehicle(playerid);

		if(VehicleInfo[vehicle][carOwnerID] != PlayerInfo[playerid][pID])
			return SCM(playerid, COLOR_LIGHTRED, "?? ?? ????????? ?????????? ????? ????????????? ????????.");

	    new dealer = -1;
		if(IsABoatModel(model) && (dealer = DealerShip_Nearest(playerid, BIZ_BOATSALON)) == -1)
	        return SendErrorMessage(playerid, "?? ?????? ?????????? ????? ?????? ?? ??????? ?????.");

     	if(IsAPlaneModel(model) && (dealer = DealerShip_Nearest(playerid, BIZ_FLYSALON)) == -1)
	        return SendErrorMessage(playerid, "?? ?????? ?????????? ????? ?????? ?? ??????? ??????????? ?????????.");

		if(!IsABoatModel(model) && !IsAPlaneModel(model) && (dealer = DealerShip_Nearest(playerid, BIZ_AUTOSALON)) == -1)
		    return SendErrorMessage(playerid, "?? ?????? ?????????? ????? ??????????.");

		new upgrade[12],
			string[12];

		if(sscanf(arg, "s[12]S()[12]", upgrade, string))
		{
			SendSyntaxMessage(playerid, "/(v)ehicle upgrade [??????????]");

			if(IsABicycle(vehicle))
				SCM(playerid, COLOR_HELPS, "[??????????] lock, gps, color");
			else
				SCM(playerid, COLOR_HELPS, "[??????????] lock, alarm, immob, insurance, armour, color, engine, battery");
			return 1;
		}

		if(!strcmp(upgrade, "lock", true))
		{
			if(!IsABicycle(vehicle) && VehicleInfo[vehicle][carEngineOn])
				return SCM(playerid, COLOR_LIGHTRED, "????????? ?????????, ?????? ??? ?????? ?????????????? ???? ?????????.");

   			new level = strval(string);
			if(isnull(string))
			{
				SCM(playerid, COLOR_HELPS, "???????????: /(v)ehicle upgrade lock [??????? ?????]");
				SCM(playerid, COLOR_HELPS, "1 ??????? ????? - {33AA33}$900");
				SCM(playerid, COLOR_HELPS, "2 ??????? ????? - {33AA33}$1.500");
				SCM(playerid, COLOR_HELPS, "3 ??????? ????? - {33AA33}$2.400");
				SCM(playerid, COLOR_HELPS, "4 ??????? ????? - {33AA33}$3.600");
				SCM(playerid, COLOR_HELPS, "5 ??????? ????? - {33AA33}$5.100");
				return 1;
			}

			if(IsABicycle(vehicle) && 0 == VehicleInfo[vehicle][carRegistered])
				return SCM(playerid, COLOR_LIGHTRED, "???? ????????? ?? ???????????????.");

			if(VehicleInfo[vehicle][carAttach3DtextUse] != 0)
				return SCM(playerid, COLOR_LIGHTRED, "?????????, ???????? ??? ???????????.");

			if(level < 1 || level > 5)
				return SCM(playerid, COLOR_LIGHTRED, "??????? ????? ?? ????? ???? ???? 1 ? ???? 5.");

			if(level > VehicleInfo[vehicle][carLock]+1)
				return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???????? ????? ? ??????? ???????????.");

			if(VehicleInfo[vehicle][carLock] >= level)
			    return SendClientMessageEx(playerid,COLOR_LIGHTRED,"?? ??? ?????? ??????? ????? %i ??? ????.", level);

			new lock_cost[] =
				{900, 1500, 2400, 3600, 5100};

			if(GetCash(playerid) < lock_cost[level-1])
				return SendNotCash(playerid);

            StartVehicleUpgrade(playerid, vehicle, 2, lock_cost[level-1], level);
			FreezePlayer(playerid);
			return 1;
		}

		else if(!strcmp(upgrade, "alarm", true))
		{
			if(IsABicycle(vehicle))
				return SCM(playerid, COLOR_LIGHTRED, "?????? ?????????? ???????????? ?? ?????????.");

			if(VehicleInfo[vehicle][carEngineOn])
				return SCM(playerid, COLOR_LIGHTRED, "????????? ?????????, ?????? ??? ?????? ?????????????? ???? ?????????.");

  			new level = strval(string);
			if(isnull(string))
			{
				SCM(playerid, COLOR_HELPS, "???????????: /(v)ehicle upgrade alarm [??????? ????????????]");
				SCM(playerid, COLOR_HELPS, "1 ??????? ???????????? - {33AA33}$700");
				SCM(playerid, COLOR_HELPS, "2 ??????? ???????????? - {33AA33}$1.800");
				SCM(playerid, COLOR_HELPS, "3 ??????? ???????????? - {33AA33}$3.200");
				SCM(playerid, COLOR_HELPS, "4 ??????? ???????????? - {33AA33}$5.000");
				return 1;
			}

			if(!VehicleInfo[vehicle][carRegistered])
				return SCM(playerid, COLOR_LIGHTRED, "???? ????????? ?? ???????????????.");

			if(VehicleInfo[vehicle][carAttach3DtextUse] != 0)
				return SCM(playerid, COLOR_LIGHTRED, "?????????, ???????? ??? ???????????.");

			if(level < 1 || level > 4)
				return SCM(playerid, COLOR_LIGHTRED, "??????? ????? ?? ????? ???? ???? 1 ? ???? 4.");

			if(level > VehicleInfo[vehicle][carAlarm]+1)
				return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???????? ???????????? ? ??????? ???????????.");

			if(VehicleInfo[vehicle][carAlarm] >= level)
			    return SendClientMessageEx(playerid,COLOR_LIGHTRED,"?? ??? ?????? ??????? ???????????? %i ??? ????.", level);

			if(GetCash(playerid) < alarm_cost[level-1])
				return SendNotCash(playerid);

            StartVehicleUpgrade(playerid, vehicle, 3, alarm_cost[level-1], level);
			FreezePlayer(playerid);
			return 1;
		}
		else if(!strcmp(upgrade, "immob", true))
		{
			if(IsABicycle(vehicle))
				return SCM(playerid, COLOR_LIGHTRED, "?????? ?????????? ???????????? ?? ?????????.");

			if(VehicleInfo[vehicle][carEngineOn])
				return SCM(playerid, COLOR_LIGHTRED, "????????? ?????????, ?????? ??? ?????? ?????????????? ???? ?????????.");

			new level = strval(string);
			if(isnull(string))
			{
				SCM(playerid, COLOR_HELPS, "???????????: /(v)ehicle upgrade immob [??????? ?????????????]");
				SCM(playerid, COLOR_HELPS, "1 ??????? ????????????? - {33AA33}$800");
				SCM(playerid, COLOR_HELPS, "2 ??????? ????????????? - {33AA33}$2.000");
				SCM(playerid, COLOR_HELPS, "3 ??????? ????????????? - {33AA33}$4.300");
				SCM(playerid, COLOR_HELPS, "4 ??????? ????????????? - {33AA33}$8.500");
				return 1;
			}
			if(!VehicleInfo[vehicle][carRegistered])
				return SCM(playerid, COLOR_LIGHTRED, "???? ????????? ?? ???????????????.");

			if(VehicleInfo[vehicle][carAttach3DtextUse] != 0)
				return SCM(playerid, COLOR_LIGHTRED, "?????????, ???????? ??? ???????????.");

			if(level < 1 || level > 4)
				return SCM(playerid, COLOR_LIGHTRED, "??????? ????????????? ?? ????? ???? ???? 1 ? ???? 4.");

			if(level > VehicleInfo[vehicle][carImmob]+1)
				return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???????? ???????????? ? ??????? ???????????.");

			if(VehicleInfo[vehicle][carImmob] >= level)
				return SendClientMessageEx(playerid,COLOR_LIGHTRED,"?? ??? ?????? ??????? ????????????? %i ??? ????.", level);

			new immob_cost[] =
				{800, 2000, 4300, 8500};

			if(GetCash(playerid) < immob_cost[level-1])
				return SendNotCash(playerid);

            StartVehicleUpgrade(playerid, vehicle, 4, immob_cost[level-1], level);
			FreezePlayer(playerid);
			return 1;
		}
		else if(!strcmp(upgrade, "insurance", true))
		{
			if(IsABicycle(vehicle))
				return SCM(playerid, COLOR_LIGHTRED, "?????? ?????????? ????????? ?? ?????????.");

			if(VehicleInfo[vehicle][carEngineOn])
				return SCM(playerid, COLOR_LIGHTRED, "????????? ?????????, ?????? ??? ?????? ?????????????? ???? ?????????.");

  			new level = strval(string),
				amount = GetInsurancePrice(GetVehicleModel(vehicle));

			if(isnull(string))
			{
				SCM(playerid, COLOR_HELPS, "???????????: /(v)ehicle upgrade insurance [??????? ?????????]");
				SendClientMessageEx(playerid, COLOR_HELPS, "1 ??????? ????????? - {33AA33}$%i", amount * 1);
				SendClientMessageEx(playerid, COLOR_HELPS, "2 ??????? ????????? - {33AA33}$%i", amount * 2);
				SendClientMessageEx(playerid, COLOR_HELPS, "3 ??????? ????????? - {33AA33}$%i", amount * 3);
				return 1;
			}
			if(!VehicleInfo[vehicle][carRegistered])
				return SCM(playerid, COLOR_LIGHTRED, "???? ????????? ?? ???????????????.");

			if(VehicleInfo[vehicle][carAttach3DtextUse] != 0)
				return SCM(playerid, COLOR_LIGHTRED, "?????????, ???????? ??? ???????????.");

			if(level < 1 || level > 3)
				return SCM(playerid, COLOR_LIGHTRED, "??????? ????????? ?? ????? ???? ???? 1 ? ???? 3.");

			if(VehicleInfo[vehicle][carInsurance] >= level)
				return SendClientMessageEx(playerid,COLOR_LIGHTRED,"?? ??? ?????? ??????? ????????? %i ??? ????.", level);

			if(GetCash(playerid) < amount * level)
				return SendNotCash(playerid);

            StartVehicleUpgrade(playerid, vehicle, 5, amount * level, level);
			FreezePlayer(playerid);
			return 1;
		}
		else if(!strcmp(upgrade, "color", true))
		{
			if(!IsABicycle(vehicle) && VehicleInfo[vehicle][carEngineOn])
				return SCM(playerid, COLOR_LIGHTRED, "????????? ?????????, ?????? ??? ?????? ?????????????? ???? ?????????.");

			new color1, color2;
			if(sscanf(string, "ii", color1, color2))
				return SendSyntaxMessage(playerid, "/v upgrade color [???? 1] [???? 2]");

			if(color2 < 0 || color2 > 255 || color1 < 0 || color1 > 255)
				return SCM(playerid, COLOR_LIGHTRED, "ID ????? ?? ????? ???? ???? 0 ? ?????? 255.");

			if(!IsABicycle(vehicle) && !VehicleInfo[vehicle][carRegistered])
				return SCM(playerid, COLOR_LIGHTRED, "???? ????????? ?? ???????????????.");

			if(GetCash(playerid) < 700)
				return SendNotCash(playerid);

            StartVehicleUpgrade(playerid, vehicle, 10, 700, color1, color2);
			FreezePlayer(playerid);
			return 1;
		}
		else if(!strcmp(upgrade, "armour", true))
		{
			if(IsABicycle(vehicle))
				return SCM(playerid, COLOR_LIGHTRED, "?????? ?????????? ????? ?? ?????????.");

			if(VehicleInfo[vehicle][carEngineOn])
				return SCM(playerid, COLOR_LIGHTRED, "????????? ?????????, ?????? ??? ?????? ?????????????? ???? ?????????.");

			new level = strval(string);
			if(isnull(string))
			{
				SCM(playerid, COLOR_HELPS, "???????????: /(v)ehicle upgrade armour [?????????? 10 - 250]");
				SCM(playerid, COLOR_HELPS, "{33AA33}$10 {FFEC8B}????????? ?????? ?????? ?????.");
				return 1;
			}

			if(VehicleInfo[vehicle][carAttach3DtextUse] != 0)
				return SCM(playerid, COLOR_LIGHTRED, "?????????, ???????? ??? ???????????.");

			if(VehicleInfo[vehicle][carArmour]+level > 250.0)
				return SCM(playerid, COLOR_LIGHTRED, "????? ?? ????? ???? ?????? 250.");

			if(level < 10 || level > 250)
				return SCM(playerid, COLOR_LIGHTRED, "?????????? ????? ?? ????? ???? ?????? 10 ? ?????? 250.");

			if(GetCash(playerid) < level * 10)
			    return SendClientMessageEx(playerid,COLOR_LIGHTRED,"???? ????? ?????????? $%i.", level * 10);

            StartVehicleUpgrade(playerid, vehicle, 6, 10 * level, level);
			FreezePlayer(playerid);
			return 1;
		}
	    else
	        SendErrorMessage(playerid, "?????????? \"%s\" ?? ??????????.", arg);

	    return 1;
	}*/
	else if(!strcmp(parametrs, "menu", true))
	    return cmd::vmenu(playerid, "");

	else if(!strcmp(parametrs, "fines", true))
	{
	    if(0 == IsValidVehicle(PlayerInfo[playerid][pCarKey]))
			return SCM(playerid, COLOR_LIGHTRED, "???? ???????????? ???????? ?? ??????????.");

		if(vehicle == 0)
			return SendNotInVehicle(playerid);

		if(VehicleInfo[vehicle][carOwnerID] != PlayerInfo[playerid][pID])
			return SCM(playerid, COLOR_LIGHTRED, "?? ?? ????????? ?????????? ????? ????????????? ????????.");

	    new count,
	        string[512];

	    for(new i; i != MAX_CAR_TICKETS; i++)
		{
		    pTemp[playerid][pTicketListed][i] = -1;
		    if(vTickets[vehicle][i][tID] == 0)
				continue;

	        pTemp[playerid][pTicketListed][count] = i;
	        format(string, sizeof(string), "%s\n????? #%i ["EMBED_LIGHTBLUE"$%s"EMBED_WHITE"] ???????? '%.11s...'",
				string,
				count+1,
				FormatNumber(vTickets[vehicle][i][tAmount]),
				vTickets[vehicle][i][tReason]
			);
			count++;
		}

		if(count == 0)
		    return SendErrorMessage(playerid, "?????? ???????????? ???????? ?? ????? ???????????? ???????.");

		Dialog_Show(playerid, VehicleFines, DIALOG_STYLE_LIST, "?????? ???????:", string, "???????", "???????");
	    return 1;
	}
	else if(!strcmp(parametrs, "get", true))
	{
		new slot = strval(arg);
		if(isnull(arg))
			return SendSyntaxMessage(playerid, "/v get [????(1-5)]");

		if(slot > 5 || slot < 1)
			return SCM(playerid, COLOR_LIGHTRED, "???????????? ???? 1-5.");

		if(IsValidVehicle(PlayerInfo[playerid][pCarKey]))
			return SendErrorMessage(playerid, "? ??? ??? ???? ???????????? ?????????.");

		new query[128];
	    mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `cars` WHERE `owner` = '%i'", PlayerInfo[playerid][pID]);
		mysql_tquery(dbHandle, query, "OnPlayerSpawnVehicle", "ii", playerid, slot-1);
		return 1;
	}
	else if(!strcmp(parametrs, "park", true))
	{
		if(0 == IsValidVehicle(PlayerInfo[playerid][pCarKey]))
			return SCM(playerid, COLOR_LIGHTRED, "???? ???????????? ???????? ?? ??????????.");

		if(vehicle == 0)
			return SendNotInVehicle(playerid);

		if(VehicleInfo[vehicle][carOwnerID] != PlayerInfo[playerid][pID])
			return SCM(playerid, COLOR_LIGHTRED, "?? ?? ????????? ?????????? ????? ????????????? ????????.");

		new Float:hp;
		GetVehicleHealth(vehicle, hp);
		if(hp < 250.0)
			return SCM(playerid, COLOR_LIGHTRED, "?? ?? ?????? ???????????? ???? ?????????, ??? ??? ?? ?????? ?????????.");

		if(VehicleInfo[vehicle][carAttach3DtextUse] != 0)
			return SCM(playerid, COLOR_LIGHTRED, "?????????, ???????? ??? ???????????.");

		SendClientMessageEx(playerid,COLOR_GREEN, "???????????? ???????? \"%s\" ????????????.", VehicleNames[model-400]);
        GetVehiclePos(vehicle, VehicleInfo[vehicle][carParkX], VehicleInfo[vehicle][carParkY], VehicleInfo[vehicle][carParkZ]);
		GetVehicleZAngle(vehicle, VehicleInfo[vehicle][carParkA]);

		Save_Car(vehicle);
		DestroyVehicle(vehicle);
		PlayerInfo[playerid][pCarKey] = 0;
		VehicleInfo[vehicle][carOwnerPlayer] = INVALID_PLAYER_ID;
		return 1;
	}
	else if(!strcmp(parametrs, "sellto", true))
	{
		new userid,
			price;

		if(0 == IsValidVehicle(PlayerInfo[playerid][pCarKey]))
			return SCM(playerid, COLOR_LIGHTRED, "???? ???????????? ???????? ?? ??????????.");

		if(vehicle == 0)
			return SendNotInVehicle(playerid);

		if(VehicleInfo[vehicle][carOwnerID] != PlayerInfo[playerid][pID])
			return SCM(playerid, COLOR_LIGHTRED, "?? ?? ????????? ?????????? ????? ????????????? ????????.");

		if(sscanf(arg, "ui", userid, price))
			return SendSyntaxMessage(playerid, "/v sell [playerid/PartOfName] [????]");

        if(!IsPlayerLogged(userid))
			return SendNotConnected(playerid);

		if(IsADonateModel(GetVehicleModel(vehicle)))
			return SCM(playerid, COLOR_LIGHTRED, "?? ?? ?????? ??????? ????? ????????? ??????.");

        if(PlayerInfo[userid][pPremium] < 2 && VehicleInfo[vehicle][carComponent][5] != 0)
	    	return SendErrorMessage(playerid, "? ??????? ?????? ??? ??????? ? ?????.");

		if(userid == playerid)
			return SCM(playerid, COLOR_LIGHTRED, "?? ?? ?????? ??????? ???????????? ???????? ?????? ????.");

		if(!IsABicycle(vehicle) && !VehicleInfo[vehicle][carRegistered])
			return SCM(playerid, COLOR_LIGHTRED, "???? ????????? ?? ???????????????.");

		if(!PlayerNearPlayer(3.0, playerid, userid))
			return SendNotNearPlayer(playerid);

		if(IsValidVehicle(PlayerInfo[userid][pCarKey]))
			return SCM(playerid, COLOR_LIGHTRED, "???? ????? ??? ????????? ?????????.");

		if(price < 0 || price > 10000000)
			return SCM(playerid, COLOR_LIGHTRED, "???? ?????? ???? ?????? $0 ? ?????? $10.000.000.");

		SendClientMessageEx(userid, -1, "%s ????? ??????? ??? ??? %s ?? $%i. (??????? {33AA33}Y{FFFFFF} ??? ???????.)", GetNameEx(playerid), VehicleNames[GetVehicleModel(vehicle)-400], price);
		if(IsABicycle(vehicle))
		{
			SendClientMessageEx(userid, -1, "????????????: ?????[%i]", VehicleInfo[vehicle][carLock]);
			SendClientMessageEx(userid, -1, "??????: ????[{%06x}#%i{FFFFFF}], ????[{%06x}#%i{FFFFFF}]", VehicleColoursTableRGBA[VehicleInfo[vehicle][carColor1]] >>> 8, VehicleInfo[vehicle][carColor1], VehicleColoursTableRGBA[VehicleInfo[vehicle][carColor2]] >>> 8, VehicleInfo[vehicle][carColor2]);
		}
		else
		{
			SendClientMessageEx(userid, -1, "????????? ??????????: ?????????[%.2f], ???????????[%.2f], ??????[%.2f]",VehicleInfo[vehicle][carEngine], VehicleInfo[vehicle][carBattery], VehicleInfo[vehicle][carMilliage]);
			SendClientMessageEx(userid, -1, "????????????: ?????[%i], ????????????[%i], ????????????[%i], ?????????[%i]", VehicleInfo[vehicle][carLock], VehicleInfo[vehicle][carAlarm], VehicleInfo[vehicle][carImmob], VehicleInfo[vehicle][carInsurance]);
			if(VehicleInfo[vehicle][carArmour] > 0.0)
				SendClientMessageEx(userid, -1, "??????: ????[{%06x}#%i{FFFFFF}], ????[{%06x}#%i{FFFFFF}], ?????[%s], ?????[%.2f], ?????????[%i]", VehicleColoursTableRGBA[VehicleInfo[vehicle][carColor1]] >>> 8, VehicleInfo[vehicle][carColor1], VehicleColoursTableRGBA[VehicleInfo[vehicle][carColor2]] >>> 8, VehicleInfo[vehicle][carColor2], VehicleInfo[vehicle][carPlate], VehicleInfo[vehicle][carArmour], VehicleInfo[vehicle][carRadio]);
			else
				SendClientMessageEx(userid, -1, "??????: ????[{%06x}#%i{FFFFFF}], ????[{%06x}#%i{FFFFFF}], ?????[%s], ?????????[%i]", VehicleColoursTableRGBA[VehicleInfo[vehicle][carColor1]] >>> 8, VehicleInfo[vehicle][carColor1], VehicleColoursTableRGBA[VehicleInfo[vehicle][carColor2]] >>> 8, VehicleInfo[vehicle][carColor2], VehicleInfo[vehicle][carPlate], VehicleInfo[vehicle][carRadio]);
		}

		SendClientMessageEx(playerid,COLOR_GREEN,"?? ?????????? ?????? ???? \"%s\" %s ?? $%i.", VehicleNames[GetVehicleModel(vehicle)-400], GetNameWithMask(userid), price);

		pTemp[userid][pCarPlayer] = playerid;
		pTemp[userid][pCarPrice] = price;
		SetPVarInt(userid, #accept_time, gettime() + 30);
		return 1;
	}
	else if(!strcmp(parametrs, "lock", true))
	{
	    if(IsPlayerInjured(playerid) != 0 || pTemp[playerid][pTaserTime] || pTemp[playerid][pCuffed])
			return SCM(playerid, COLOR_GREY, "?? ?? ?????? ???????????? ?????? ??????? ????? ??????.");

	    vehicle = 0;
		if((vehicle = GetNearVehicle(playerid, 4.0)) != 0)
		{
		    if((VehicleInfo[vehicle][carFaction] && VehicleInfo[vehicle][carFaction] == PlayerInfo[playerid][pFaction]) || pTemp[playerid][pRentveh] == vehicle || PlayerInfo[playerid][pCarKey] == vehicle || (PlayerInfo[playerid][pSpareKey] == VehicleInfo[vehicle][carID] && PlayerInfo[playerid][pSpareKey] != 0))
			{
			    PlaySound(playerid, 1145);
			    new mes[128];
			    if(VehicleInfo[vehicle][carLocked])
			        format(mes, sizeof(mes), "~w~%s ~g~UNLOCKED", VehicleNames[GetVehicleModel(vehicle)-400]);
				else
				    format(mes, sizeof(mes), "~w~%s ~r~LOCKED", VehicleNames[GetVehicleModel(vehicle)-400]);
				GameTextForPlayer(playerid, mes, 2500, 4);

			    if(VehicleInfo[vehicle][carLocked])
			        format(mes, sizeof(mes), "??????(-?) ??????????? ????? %s.", VehicleNames[GetVehicleModel(vehicle)-400]);
				else
				    format(mes, sizeof(mes), "??????(-?) ??????????? ????? %s.", VehicleNames[GetVehicleModel(vehicle)-400]);
				cmd::ame(playerid, mes);

			    ToggleVehicleLock(vehicle, (VehicleInfo[vehicle][carLocked]) ? (false): (true));
				return 1;
			}
		}
	    return 1;
	}
	else if(!strcmp(parametrs, "find", true))
	{
		if(0 == IsValidVehicle(PlayerInfo[playerid][pCarKey]))
			return SCM(playerid, COLOR_LIGHTRED, "???? ???????????? ???????? ?? ??????????.");

		vehicle = PlayerInfo[playerid][pCarKey];
		if(VehicleInfo[vehicle][carGps] == 0)
			return SCM(playerid, COLOR_GREY, "? ????? ?????????? ?? ?????????? GPS.");

        if(IsPlayerInVehicle(playerid, vehicle))
			return SCM(playerid, COLOR_GREY, "?? ??????????? ???? ?????????.");

		if(0 == VehicleEmpty(vehicle))
			return SCM(playerid, COLOR_GREY, "??? ????????? ?????? ???-?? ??????????.");

		if(veh_int[vehicle])
		    return SendErrorMessage(playerid, "?????????? ????? ??? ?????????. (? ?????????)");

		new Float:x,
			Float:y,
			Float:z,
		    vZone[MAX_ZONE_NAME];

		GetVehiclePos(vehicle, x, y, z);
		GetVehicleZone(vehicle, vZone, MAX_ZONE_NAME);

		SendClientMessageEx(playerid, COLOR_GREEN, "[GPS] ???? ???????????? ???????? \"%s\" ????????? ? ?????? \"%s\".", VehicleNames[GetVehicleModel(vehicle)-400], vZone);
		SCM(playerid,COLOR_GREEN,"????? ?????????? ????????????? ???????? ???????? ?? ?????.");
		Waypoint_Set(playerid, x, y, z);
		return 1;
	}
	else if(!strcmp(parametrs, "tow", true))
	{
		if(0 == IsValidVehicle(PlayerInfo[playerid][pCarKey]))
			return SCM(playerid, COLOR_LIGHTRED, "???? ???????????? ???????? ?? ??????????.");

		vehicle = PlayerInfo[playerid][pCarKey];
		if(VehicleInfo[vehicle][carOwnerID] != PlayerInfo[playerid][pID])
			return SCM(playerid, COLOR_LIGHTRED, "?? ?? ????????? ?????????? ????? ????????????? ????????.");

		if(VehicleInfo[vehicle][carAttach3DtextUse] != 0)
			return SCM(playerid, COLOR_LIGHTRED, "?????????, ???????? ??? ???????????.");

		if(IsPlayerInVehicle(playerid, vehicle))
			return SCM(playerid, COLOR_GREY, "?? ??????????? ???? ?????????.");

		if(0 == VehicleEmpty(vehicle))
			return SCM(playerid, COLOR_LIGHTRED, "??? ????????? ?????? ???-?? ??????????.");

		if(!IsABicycle(vehicle) && !VehicleInfo[vehicle][carRegistered])
			return SCM(playerid, COLOR_LIGHTRED, "???? ????????? ?? ???????????????.");

		if(GetCash(playerid) < 200)
			return SendNotCash(playerid);

		SCM(playerid, COLOR_GREEN, "???? ???????????? ???????? ????? ????????????? ?? ????? ???????? ????? 10 ??????.");
        StartVehicleUpgrade(playerid, vehicle, 1, 200);
		UpdateDynamic3DTextLabelText(status_update[vehicle], 0x33AA33FF, "(( ---------- ))\n?????????? ??????????");
		return 1;
	}
	else if(!strcmp(parametrs, "stats", true))
	{
		if(0 == IsValidVehicle(PlayerInfo[playerid][pCarKey]))
			return SCM(playerid, COLOR_LIGHTRED, "???? ???????????? ???????? ?? ??????????.");

  		vehicle = PlayerInfo[playerid][pCarKey];
		if(VehicleInfo[vehicle][carOwnerID] != PlayerInfo[playerid][pID])
			return SCM(playerid, COLOR_LIGHTRED, "?? ?? ????????? ?????????? ????? ????????????? ????????.");

		if(IsABicycle(vehicle))
		{
			SendClientMessageEx(playerid, -1, "%s | ????????????: ?????[%i]", VehicleNames[GetVehicleModel(vehicle)-400], VehicleInfo[vehicle][carLock]);
			SendClientMessageEx(playerid, -1, "??????: ????[{%06x}#%i{FFFFFF}] | ????[{%06x}#%i{FFFFFF}]", VehicleColoursTableRGBA[VehicleInfo[vehicle][carColor1]] >>> 8, VehicleInfo[vehicle][carColor1], VehicleColoursTableRGBA[VehicleInfo[vehicle][carColor2]] >>> 8, VehicleInfo[vehicle][carColor2]);
			return 1;
		}

		SendClientMessageEx(playerid, -1, "%s | ?????????[%.2f] | ???????????[%.2f] | ??????[%.2f]", VehicleNames[GetVehicleModel(vehicle)-400], VehicleInfo[vehicle][carEngine], VehicleInfo[vehicle][carBattery], VehicleInfo[vehicle][carMilliage]);
		SendClientMessageEx(playerid, -1, "????????????: ?????[%i] | ????????????[%i] | ????????????[%i] | ?????????[%i]", VehicleInfo[vehicle][carLock], VehicleInfo[vehicle][carAlarm], VehicleInfo[vehicle][carImmob], VehicleInfo[vehicle][carInsurance]);
		if(VehicleInfo[vehicle][carArmour] > 0.0)
		{
			if(VehicleInfo[vehicle][carRegistered])
				SendClientMessageEx(playerid, -1, "??????: ????[{%06x}#%i{FFFFFF}] | ????[{%06x}#%i{FFFFFF}] | ?????[%s] | ?????[%.2f] | ?????????[%s]", VehicleColoursTableRGBA[VehicleInfo[vehicle][carColor1]] >>> 8, VehicleInfo[vehicle][carColor1], VehicleColoursTableRGBA[VehicleInfo[vehicle][carColor2]] >>> 8, VehicleInfo[vehicle][carColor2], VehicleInfo[vehicle][carPlate], VehicleInfo[vehicle][carArmour], (VehicleInfo[vehicle][carRadio])?("????"):("???"));
			else
				SendClientMessageEx(playerid, -1, "??????: ????[{%06x}#%i{FFFFFF}] | ????[{%06x}#%i{FFFFFF}] | ?????[%.2f] | ?????????[%s]", VehicleColoursTableRGBA[VehicleInfo[vehicle][carColor1]] >>> 8, VehicleInfo[vehicle][carColor1], VehicleColoursTableRGBA[VehicleInfo[vehicle][carColor2]] >>> 8, VehicleInfo[vehicle][carColor2], VehicleInfo[vehicle][carArmour], (VehicleInfo[vehicle][carRadio])?("????"):("???"));
			return 1;
		}
		else
		{
			if(VehicleInfo[vehicle][carRegistered])
				SendClientMessageEx(playerid, -1, "??????: ????[{%06x}#%i{FFFFFF}] | ????[{%06x}#%i{FFFFFF}] | ?????[%s] | ?????????[%s]", VehicleColoursTableRGBA[VehicleInfo[vehicle][carColor1]] >>> 8, VehicleInfo[vehicle][carColor1], VehicleColoursTableRGBA[VehicleInfo[vehicle][carColor2]] >>> 8, VehicleInfo[vehicle][carColor2], VehicleInfo[vehicle][carPlate], (VehicleInfo[vehicle][carRadio])?("????"):("???"));
			else
				SendClientMessageEx(playerid, -1, "??????: ????[{%06x}#%i{FFFFFF}] | ????[{%06x}#%i{FFFFFF}] | ?????????[%s]", VehicleColoursTableRGBA[VehicleInfo[vehicle][carColor1]] >>> 8, VehicleInfo[vehicle][carColor1], VehicleColoursTableRGBA[VehicleInfo[vehicle][carColor2]] >>> 8, VehicleInfo[vehicle][carColor2], (VehicleInfo[vehicle][carRadio])?("????"):("???"));
			return 1;
		}
	}
	else if(!strcmp(parametrs, "list", true))
	{
	    new query[128];
	    mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `cars` WHERE `owner` = '%i'", PlayerInfo[playerid][pID]);
		mysql_tquery(dbHandle, query, "ShowCarsForPlayer", "ii", playerid, playerid);
	    return 1;
	}
	else if(!strcmp(parametrs, "sell", true))
	{
		new veh = PlayerInfo[playerid][pCarKey], lockuse[100], alarmuse[250], immobuse[260], insuranceuse[260], xmradiouse[50], gpsuse[50], string1[1024];
		if(!IsValidVehicle(veh))
			return SCM(playerid, COLOR_LIGHTRED, "???? ???????????? ???????? ?? ??????????.");

		if(!IsPlayerInAnyVehicle(playerid))
			return SendNotInVehicle(playerid);

		if(VehicleInfo[vehicle][carOwnerID] != PlayerInfo[playerid][pID])
			return SCM(playerid, COLOR_LIGHTRED, "?? ?? ????????? ?????????? ????? ????????????? ????????.");

		if(VehicleInfo[veh][carLock] == 1) lockuse = "{a9c4e4}?????: \t{bab9ba}1 ??????? {e2bd63}$3.500\n	{4af085}+{e2bd63}120 ?????? ?????? ??????????.\n";
		else if(VehicleInfo[veh][carLock] == 2) lockuse = "{a9c4e4}?????: \t{bab9ba}2 ??????? {e2bd63}$5.500\n	{4af085}+{e2bd63}180 ?????? ?????? ??????????.\n";
		else if(VehicleInfo[veh][carLock] == 3) lockuse = "{a9c4e4}?????: \t{bab9ba}3 ??????? {e2bd63}$7.500\n	{4af085}+{e2bd63}240 ?????? ?????? ??????????.\n";
		else if(VehicleInfo[veh][carLock] == 4) lockuse = "{a9c4e4}?????: \t{bab9ba}4 ??????? {e2bd63}$10.500\n	{4af085}+{e2bd63}300 ?????? ?????? ??????????.\n";
		else if(VehicleInfo[veh][carLock] == 5) lockuse = "{a9c4e4}?????: \t{bab9ba}5 ??????? {e2bd63}$13.500\n	{4af085}+{e2bd63}360 ?????? ?????? ??????????.\n";

		if(VehicleInfo[veh][carAlarm] == 1) alarmuse = "{a9c4e4}????????????: \t{bab9ba}1 ??????? {e2bd63}$2.600\n	{f0634a}+{e2bd63}??????? ?????????? ???????.\n";
		else if(VehicleInfo[veh][carAlarm] == 2) alarmuse = "{a9c4e4}????????????: \t{bab9ba}2 ??????? {e2bd63}$5.500\n	{f0634a}+{e2bd63}??????? ?????????? ???????.\n	{f0634a}+{e2bd63}?????????? ? ?????? ???????.\n";
		else if(VehicleInfo[veh][carAlarm] == 3) alarmuse = "{a9c4e4}????????????: \t{bab9ba}3 ??????? {e2bd63}$8.000\n	{f0634a}+{e2bd63}??????? ?????????? ???????.\n	{f0634a}+{e2bd63}?????????? ? ?????? ???????.\n	{f0634a}+{e2bd63}?????????? ? ?????? ????????? ?? ???\n";
		else if(VehicleInfo[veh][carAlarm] == 4) alarmuse = "{a9c4e4}????????????: \t{bab9ba}4 ??????? {e2bd63}$10.500\n	{f0634a}+{e2bd63}??????? ?????????? ???????.\n	{f0634a}+{e2bd63}?????????? ? ?????? ???????.\n	{f0634a}+{e2bd63}?????????? ? ?????? ????????? ?? ???+???????\n";

		if(VehicleInfo[veh][carImmob] == 1) immobuse = "{a9c4e4}????????????: \t{bab9ba}1 ??????? {e2bd63}$5.600\n	{feff00}+{e2bd63}??????? ????????????? ????? ??????????.\n";
		else if(VehicleInfo[veh][carImmob] == 2) immobuse = "{a9c4e4}????????????: \t{bab9ba}2 ??????? {e2bd63}$11.300\n	{feff00}+{e2bd63}??????? ????????????? ????? ??????????.\n";
		else if(VehicleInfo[veh][carImmob] == 3) immobuse = "{a9c4e4}????????????: \t{bab9ba}3 ??????? {e2bd63}$17.000\n	{feff00}+{e2bd63}??????? ????????????? ????? ??????????.\n";
		else if(VehicleInfo[veh][carImmob] == 4) immobuse = "{a9c4e4}????????????: \t{bab9ba}4 ??????? {e2bd63}$22.600\n	{feff00}+{e2bd63}??????? ????????????? ????? ??????????.\n";

		if(VehicleInfo[veh][carInsurance] == 1) insuranceuse = "{a9c4e4}?????????: \t{bab9ba}1 ??????? {e2bd63}$5.600\n	{4a90f0}+{e2bd63}????????? ?????? ????? ???????????? ? ??? ???????????? ?????????.\n";
		else if(VehicleInfo[veh][carInsurance] == 2) insuranceuse = "{a9c4e4}?????????: \t{bab9ba}2 ??????? {e2bd63}$11.300\n	{4a90f0}+{e2bd63}????????? ?????? ????? ???????????? ? ??? ???????????? ?????????.\n	{4a90f0}+{e2bd63}????????? ????? ???????????? ??? ???????????.\n";
		else if(VehicleInfo[veh][carInsurance] == 3) insuranceuse = "{a9c4e4}?????????: \t{bab9ba}3 ??????? {e2bd63}$17.000\n	{4a90f0}+{e2bd63}????????? ?????? ????? ???????????? ? ??? ???????????? ?????????.\n	{4a90f0}+{e2bd63}????????? ????? ???????????? ??? ???????????.\n	{4a90f0}+{e2bd63}?????????? ??????? ? ?????????.\n";

		if(VehicleInfo[veh][carRadio] == 1) xmradiouse = "{a9c4e4}?????????: \t{e2bd63}$7.500\n";
		if(VehicleInfo[veh][carGps] == 1) gpsuse = "{a9c4e4}GPS: \t{e2bd63}$3.500\n";

		new mes[56];
		if(IsABicycle(veh))
			format(mes, sizeof(mes), "{33AA33}%s", VehicleNames[VehicleInfo[veh][carModel]-400]);
		else
		{
			if(VehicleInfo[veh][carRegistered])
				format(mes, sizeof(mes), "%s[%s]", VehicleNames[VehicleInfo[veh][carModel]-400], VehicleInfo[veh][carPlate]);
			else
				format(mes, sizeof(mes), "%s", VehicleNames[VehicleInfo[veh][carModel]-400]);
		}
		format(string1, sizeof(string1), "???? ?? ???????: \t{e2bd63}$%i\n{a9c4e4}???????????? ????????: \t{e2bd63}%.2f\n\n%s%s%s%s%s%s", GetVehiclePrice(VehicleInfo[veh][carModel])/2, MAX_HEALTH_VEHICLE, lockuse, alarmuse, immobuse, insuranceuse, xmradiouse, gpsuse);
		Dialog_Show(playerid, ScrapSell, DIALOG_STYLE_MSGBOX, mes, string1, "???????", "????????");
		return 1;
	}
	/*else if(!strcmp(parametrs, "faction", true))
	{
	    if(PlayerInfo[playerid][pFaction] == 0)
	        return SendErrorMessage(playerid, "?? ?? ???????? ?? ???????.");

		if(!isLeader(playerid))
		    return SendErrorMessage(playerid, "?? ?? ?????.");

        if(Factions[PlayerInfo[playerid][pFaction]][fType] != FACTION_LEGAL)
			return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???? ? ??????????????? ???????.");

		if(!IsValidVehicle(PlayerInfo[playerid][pCarKey]))
			return SCM(playerid, COLOR_LIGHTRED, "???? ???????????? ???????? ?? ??????????.");

		if(VehicleInfo[vehicle][carOwnerID] != PlayerInfo[playerid][pID])
			return SCM(playerid, COLOR_LIGHTRED, "?? ?? ????????? ?????????? ????? ????????????? ????????.");

	    if(IsADonateModel(GetVehicleModel(vehicle)))
			return SCM(playerid, COLOR_LIGHTRED, "?? ?? ?????? ????????? ????? ?????????.");

        if(VehicleInfo[vehicle][carComponent][5] != 0)
	    	return SendErrorMessage(playerid, "??????? ?????, ?????? ??? ?????????? ?????????.");

	    new mes[128];
	    format(mes, sizeof(mes), "{B4B5B7}?? ???????, ??? ?????? ????????? ???? ????????? ?? ???????\n%s?", Factions[PlayerInfo[playerid][pFaction]][fName]);
		Dialog_Show(playerid, ScrapVehicleFaction, DIALOG_STYLE_MSGBOX, "??????? ??????????", mes, "??", "???");
		return 1;
	}*/
	else
	{
		SendClientMessage(playerid, COLOR_HELPS, "_____________________________________________");
		SendClientMessage(playerid, COLOR_HELPS, "???????????: /(v)ehicle [????????]");
		SendClientMessage(playerid, COLOR_HELPS, "[????????] list, get, stats, lock, park, tow, find, sell, sellto");
		SendClientMessage(playerid, COLOR_HELPS, "[????????] /(en)ngine (Y), /lights (2), /trunk, /hood, /(s)et(s)tation, /(wi)ndow");
		SendClientMessage(playerid, COLOR_HELPS, "_____________________________________________");
	}
	return 1;
}

CMD:stop(playerid, params[])
{
	if(IsPlayerInjured(playerid))
		return 1;

	if(JackingEngine[playerid] != 0)
	{
		JackingEngine[playerid] = 0;
		UnFreezePlayer(playerid);
		SCM(playerid, COLOR_YELLOWG, "?? ?????????? ????? ?????????.");
	}

	if(JackingLock[playerid] != 0)
	{
		JackingLock[playerid] = 0;
		JackingVehicle[playerid] = 0;
		UnFreezePlayer(playerid);
		SCM(playerid, COLOR_YELLOWG, "?? ?????????? ????? ??????.");
	}

	if(pTemp[playerid][pPlantTime] != 0)
	{
		SCM(playerid, COLOR_YELLOWG, "?? ?????????? ???????.");
		UnFreezePlayer(playerid);
		StopPlayerAnims(playerid);
		pTemp[playerid][pPlantTime] = 0;
	}
	return 1;
}

CMD:bizinfo(playerid, params[])
{
    new bizid;

	if ((bizid = GetNearBizOutside(playerid)) == -1)
	    bizid = GetNearBizInside(playerid);

	if (bizid == -1)
        return SendErrorMessage(playerid, "????? ? ???? ??? ???????.");

	if(BizInfo[bizid][bizOwnerID] != PlayerInfo[playerid][pID])
	    return SendErrorMessage(playerid, "?????? ?????? ?? ??????????? ???.");

    SendClientMessageEx(playerid,COLOR_GRAD2,"???????? ???????: %s - ??? ???????: %s - ?????????: %s.", BizInfo[bizid][bizName], biz_types[BizInfo[bizid][bizType]], (BizInfo[bizid][bizLocked])?("??????"):("??????"));
	SendClientMessageEx(playerid,COLOR_GRAD2,"????? ? ?????: $%i - ????????? ?????: $%i. - ????????? ??????: %i / 400.", BizInfo[bizid][bizCash], BizInfo[bizid][bizEntrance], BizInfo[bizid][bizProduct]);
	if(BizInfo[bizid][bizBuyPrice] != 0)
	{
	    new id = biz_prod_types[BizInfo[bizid][bizType]];
	    SendClientMessageEx(playerid,COLOR_GRAD2,"?????: %s ?? $%i / 1 ?????.", truckcargo_product[id], BizInfo[bizid][bizBuyPrice]);
	}
	return 1;
}

CMD:bizfee(playerid, params[])
{
    new bizid;

	if ((bizid = GetNearBizOutside(playerid)) == -1)
	    return SendErrorMessage(playerid, "????? ? ???? ??? ???????.");

	if(BizInfo[bizid][bizOwnerID] != PlayerInfo[playerid][pID])
	    return SendErrorMessage(playerid, "?????? ?????? ?? ??????????? ???.");

	new fee;

    if(sscanf(params,"i",fee))
		return SendSyntaxMessage(playerid, "/bizfee [???? ?? ????(1-100)]");


	if(fee < 0 || fee > 100)
		return SCM(playerid, COLOR_LIGHTRED, "???? ?? ???? ?????? ???? ?? ????? $0 ? ?? ????? $100.");

	SendClientMessageEx(playerid,COLOR_YELLOWG,"??????????? ???? ?? ???? ? ??????: $%i.", fee);
	BizInfo[bizid][bizEntrance] = fee;
	Save_Business(bizid);
	return 1;
}

CMD:biztext(playerid, params[])
{
    new bizid;

	if ((bizid = GetNearBizOutside(playerid)) == -1)
	    return SendErrorMessage(playerid, "????? ? ???? ??? ???????.");

	if(BizInfo[bizid][bizOwnerID] != PlayerInfo[playerid][pID])
	    return SendErrorMessage(playerid, "?????? ?????? ?? ??????????? ???.");

	new name[128];
	if(sscanf(params,"s[128]",name))
	{
 		SendSyntaxMessage(playerid, "/biztext [????? ??? ????? ? ??????]");
		SCM(playerid, -1, "????? ??????? ????? ??? ????? ??????? - \"delete\"");
		SCM(playerid, -1, "? ?????? ????? ???????????? HTML ?????. ?????? ?????: ~FFFF00~ - ??????.");
		SCM(playerid, -1, "?????? ??????: \"~FFFF00~????????????\" ??????? ????? ????? - \"{FFFF00}????????????\"");
		return 1;
	}

	if(CompareStrings(name, "delete"))
	{
	    format(BizInfo[bizid][bizMes], 128, "!");
	    Save_Business(bizid);
	    SendClientMessage(playerid,COLOR_YELLOWG,"????? ??? ????? ?????? ?? ????? ????????????.");
	    return 1;
	}

	if(strlen(name) < 2 || strlen(name) > 127)
		return SCM(playerid, COLOR_LIGHTRED, "????? ??????? ????? ????????? ?? ????? 127 ????????.");

    format(BizInfo[bizid][bizMes], 128, "%s", name);
	place_color(BizInfo[bizid][bizMes]);

	SendClientMessageEx(playerid,COLOR_YELLOWG,"?? ?????????? ????? ??? ?????: %s", BizInfo[bizid][bizMes]);
	Save_Business(bizid);
	return 1;
}


CMD:bizname(playerid, params[])
{
    new bizid;

	if ((bizid = GetNearBizOutside(playerid)) == -1)
	    return SendErrorMessage(playerid, "????? ? ???? ??? ???????.");

	if(BizInfo[bizid][bizOwnerID] != PlayerInfo[playerid][pID])
	    return SendErrorMessage(playerid, "?????? ?????? ?? ??????????? ???.");

	new name[32];
	if(sscanf(params,"s[32]",name))
	{
		SendSyntaxMessage(playerid, "/bizname [name]");
		SCM(playerid, COLOR_INFO, "?????: ~b~ = {0000FF}blue{FFFFFF}, ~r~ = {FF0000}red{FFFFFF}, ~y~ = {FFFF00}yellow{FFFFFF}.");
		SCM(playerid, COLOR_INFO, "?????: ~g~ = {808000}green{FFFFFF}, ~w~ = {FFFFFF}white{FFFFFF}, ~p~ = {004080}purple{FFFFFF}, ~h~ = lighter color.");
		SCM(playerid, COLOR_INFO, "???????: \"]\" - *(?????????).");
		return 1;
	}
	if(strlen(name) > 30) return SCM(playerid, COLOR_LIGHTRED, "???????? ??????? ????? ????????? ?? ????? 30 ????????.");
	SendClientMessageEx(playerid,COLOR_YELLOWG,"?? ?????????? ???????? ???????: \"%s\"", name);
	format(BizInfo[bizid][bizName], 32, "%s", name);
	Save_Business(bizid);
	return 1;
}

CMD:bizdeposit(playerid, params[])
{
    new bizid;

	if ((bizid = GetNearBizOutside(playerid)) == -1)
	    return SendErrorMessage(playerid, "????? ? ???? ??? ???????.");

	if(BizInfo[bizid][bizOwnerID] != PlayerInfo[playerid][pID])
	    return SendErrorMessage(playerid, "?????? ?????? ?? ??????????? ???.");

	new amount;
	if(sscanf(params,"d",amount))
	{
		SendSyntaxMessage(playerid, "/bizdeposit [text]");
		SendClientMessageEx(playerid,COLOR_YELLOWG,"?? ?????? $%i ? ????? ?????? ???????.", BizInfo[bizid][bizCash]);
		return 1;
	}

	if(GetCash(playerid) < amount || amount < 1)
		return SendNotCash(playerid);

	if(BizInfo[bizid][bizCash]+amount >= 25000000)
		return SendErrorMessage(playerid, "? ????? ??????? ????? ???????? ?? ????? $25.000.000.");

	GiveCash(playerid, -amount);
	GiveBizCash(bizid, amount);
	SendClientMessageEx(playerid,COLOR_YELLOWG,"?? ?????? $%i ? ????? ???????. ????? ?????: $%i.", amount, BizInfo[bizid][bizCash]);
	Save_Business(bizid);
	return 1;
}

CMD:bizwithdraw(playerid, params[])
{
    new bizid;

	if ((bizid = GetNearBizOutside(playerid)) == -1)
	    return SendErrorMessage(playerid, "????? ? ???? ??? ???????.");

	if(BizInfo[bizid][bizOwnerID] != PlayerInfo[playerid][pID])
	    return SendErrorMessage(playerid, "?????? ?????? ?? ??????????? ???.");

	new amount;
	if(sscanf(params,"d",amount))
	{
		SendSyntaxMessage(playerid, "/bizwithdraw [text]");
		SendClientMessageEx(playerid,COLOR_YELLOWG,"?? ?????? $%i ? ????? ???????.", BizInfo[bizid][bizCash]);
		return 1;
	}

	if(BizInfo[bizid][bizCash] < amount)
		return SendClientMessageEx(playerid, COLOR_LIGHTRED, "? ????? ??????? $%i.",BizInfo[bizid][bizCash]);

	if(amount < 1 || amount > 5000000)
		return SendErrorMessage(playerid, "?? ??? ????? ????? ?? ????? $1 ? ?? ????? $5.000.000.");

	GiveCash(playerid, amount);
    GiveBizCash(bizid, -amount);
	SendClientMessageEx(playerid,COLOR_YELLOWG,"?? ????? ? ????? ??????? $%i. ???????: $%i.", amount, BizInfo[bizid][bizCash]);
	Save_Business(bizid);
	return 1;
}


CMD:buybiz(playerid, params[])
{
	if(GetPlayerBizes(playerid) >= GetMaxPlayerBiz(playerid))
	    return SendErrorMessage(playerid, "?? ?? ?????? ?????????? ?????? ????????.");

    new bizid;

	if ((bizid = GetNearBizOutside(playerid)) == -1)
	    return SendErrorMessage(playerid, "????? ? ???? ??? ???????.");

	if(BizInfo[bizid][bizOwnerID] != 0)
	    return SendErrorMessage(playerid, "?????? ?????? ??? ??????????.");

    if(BizInfo[bizid][bizFreeze] != 0)
		return SCM(playerid, COLOR_LIGHTRED, "?????? ?????? ?????? ??????????.");

	new money = PlayerInfo[playerid][pCash];

	if(PlayerInfo[playerid][pLevel] < BizInfo[bizid][bizLevelbuy])
		return SendClientMessageEx(playerid,COLOR_LIGHTRED,"??? ???????????? ??????? ??????? ??? ????????? %i ???????.",BizInfo[bizid][bizLevelbuy]);

	if(GetCash(playerid) < BizInfo[bizid][bizPrice])
		return SendNotCash(playerid);

	BizInfo[bizid][bizOwnerID] = PlayerInfo[playerid][pID];
	BizInfo[bizid][bizLocked] = 0;
	BizInfo[bizid][bizProduct] = 0;
	BizInfo[bizid][bizBuyPrice] = 0;
	format(BizInfo[bizid][bizOwner], MAX_PLAYER_NAME, "%s", GetNameEx(playerid));
	GiveCash(playerid,-BizInfo[bizid][bizPrice]);

	SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "???????????! ?????? \"%s\" ??????? ?????????? ?? $%i.",BizInfo[bizid][bizName],BizInfo[bizid][bizPrice]);
	SCM(playerid,COLOR_WHITE,"??????????? \"/bizhelp\" ??? ?????? ?? ?????????? ????????.");
	Save_Business(bizid);

	for(new i = 0; i != MAX_GARAGES; i++)
	{
	    if(0 == GarageInfo[i][garageID] || GarageInfo[i][garageBiz] != BizInfo[bizid][bizID])
	        continue;

		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "?????? ? ???????? ??? ???????? ????? ID: %i.", i);
        GarageInfo[i][garageOwner] = PlayerInfo[playerid][pID];

        new query[128];
		mysql_format(dbHandle, query, sizeof(query), "UPDATE `garage` SET `owner`='%i' WHERE `id`='%i'", GarageInfo[i][garageOwner], GarageInfo[i][garageID]);
		mysql_tquery(dbHandle, query);
	}

    new mes[256];
	format(mes, sizeof(mes), "%s [MYSQL: %i | IP: %s | ??????(????): %i | ??????(?????): %i] ????? ?????? [B_MYSQL: %i] ?? -- $%i",
	GetName(playerid), PlayerInfo[playerid][pID], GetPlayerIP(playerid), money, GetCash(playerid), BizInfo[bizid][bizID], BizInfo[bizid][bizPrice]);
    insert_log(mes, PROPERTY_LOG, 4, playerid);
	return 1;
}

CMD:sellbiz(playerid, params[])
{
    new bizid;

	if ((bizid = GetNearBizOutside(playerid)) == -1)
	    return SendErrorMessage(playerid, "????? ? ???? ??? ???????.");

	if(BizInfo[bizid][bizOwnerID] != PlayerInfo[playerid][pID])
	    return SendErrorMessage(playerid, "?????? ?????? ?? ??????????? ???.");

	static const str_size[] = "{FFFFFF}?? ?????? ??????? ?????? ?? $%i. {FFFF00}(50%c ?? ????????? ?????????)?";
	new mes[sizeof(str_size) - 2 + 12];
	format(mes, sizeof(mes), str_size, BizInfo[bizid][bizPrice] / 2, '%');
	Dialog_Show(playerid, SellBiz, DIALOG_STYLE_LIST, "??????? ???????", mes, "??", "???");
	return 1;
}

CMD:buyprod(playerid, params[])
{
    new bizid,
		price;

	if ((bizid = GetNearBizOutside(playerid)) == -1)
	    return SendErrorMessage(playerid, "????? ? ???? ??? ???????.");

	if(BizInfo[bizid][bizOwnerID] != PlayerInfo[playerid][pID])
	    return SendErrorMessage(playerid, "?????? ?????? ?? ??????????? ???.");

    new id = biz_prod_types[BizInfo[bizid][bizType]];
	if(id == -1)
	    return SendErrorMessage(playerid, "?????? ??????? ?? ????????? ?????.");

    if(sscanf(params, "i", price))
		return SendSyntaxMessage(playerid, "/buyprod [???? ??????? ?????? | 0 - ?????????? ??????? ??????]");

	if(price < 0 || price > 1000)
	    return 1;

    BizInfo[bizid][bizBuyPrice] = price;
    Save_Business(bizid);

	if(price == 0)
	    SendClientMessageEx(playerid, COLOR_GREEN, "?? ?????? ?? ????????? \"%s\".", truckcargo_product[id]);
	else
		SendClientMessageEx(playerid, COLOR_GREEN, "?????? ?? ????????? \"%s\" ?? $%i ?? ???????.", truckcargo_product[id], price);
	return 1;
}

CMD:bizupgrade(playerid, params[])
{
    new bizid,
        option[16];

	if ((bizid = GetNearBizOutside(playerid)) == -1)
	    return SendErrorMessage(playerid, "????? ? ???? ??? ???????.");

	if(BizInfo[bizid][bizOwnerID] != PlayerInfo[playerid][pID])
	    return SendErrorMessage(playerid, "?????? ?????? ?? ??????????? ???.");

    if(sscanf(params, "s[16]", option))
		return SendSyntaxMessage(playerid, "/bizupgrade [upgrade] [upgrade: radio, repairdoor]");

	if(!strcmp(option, "radio", true))
	{
		if(BizInfo[bizid][bizRadio] == 1)
			return SendErrorMessage(playerid, "? ???? ??????? ??? ??????????? ?????.");

		if(GetCash(playerid) < 100)
			return SendErrorMessage(playerid, "???? ????? ?????????? $100.");

		SCM(playerid, COLOR_GREEN, "?? ????????? ????? ??? ?????? ???????. ??????????? \"/setstation\".");
		BizInfo[bizid][bizRadio] = 1;
		GiveCash(playerid, -100);
		Save_Business(bizid);
		return 1;
	}
	else if(!strcmp(option, "repairdoor", true))
	{
		if(BizInfo[bizid][bizDDoor] == 0)
			return SCM(playerid, COLOR_LIGHTRED, "? ????? ??????? ?????? ??? ?????????.");

		if(GetCash(playerid) < 1500)
			return SCM(playerid, COLOR_LIGHTRED, "??? ??????? ????? ??? ????? $1500.");

		BizInfo[bizid][bizDDoor] = 0;
		UpdateBusinessDoor(bizid);
		Save_Business(bizid);

		GiveCash(playerid, -1500);
		SendClientMessage(playerid,COLOR_GREEN,"?? ???????? ????? ?? $1500.");
	}
	return 1;
}

CMD:hire(playerid, params[])
{
    new bizid;

	if ((bizid = GetNearBizOutside(playerid)) == -1)
	    return SendErrorMessage(playerid, "????? ? ???? ??? ???????.");

	if(BizInfo[bizid][bizOwnerID] != PlayerInfo[playerid][pID])
	    return SendErrorMessage(playerid, "?????? ?????? ?? ??????????? ???.");

	new userid;
	if(sscanf(params,"u", userid))
		return SendSyntaxMessage(playerid, "/hire [playerid/PartOfName]");

	if(userid == playerid)
		return SendErrorMessage(playerid, "?? ?? ?????? ?????? ?? ?????? ?????? ????.");

	if(!IsPlayerLogged(userid))
		return SendNotConnected(playerid);

	if(!PlayerNearPlayer(3.0, playerid, userid))
		return SendNotNearPlayer(playerid);

	if(pTemp[userid][pHirePlayer] == playerid)
	    return SendErrorMessage(playerid, "?? ??? ?????????? ?????? ??????.");

    pTemp[userid][pHirePlayer] = playerid;
    SetPVarInt(userid, #accept_time, gettime() + 30);

	SendClientMessageEx(userid, COLOR_LIGHTBLUE, "%s ?????????(-?) ??? ???????? ? ??? ???????. (??????? Y ????? ??????? ???????????)", GetNameWithMask(playerid));
	SendClientMessageEx(playerid, COLOR_INFO, "?? ?????????? %s ???????? ? ????? ???????.", GetNameWithMask(userid));
	return 1;
}

CMD:fire(playerid, params[])
{
    new bizid;

	if ((bizid = GetNearBizOutside(playerid)) == -1)
	    return SendErrorMessage(playerid, "????? ? ???? ??? ???????.");

	if(BizInfo[bizid][bizOwnerID] != PlayerInfo[playerid][pID])
	    return SendErrorMessage(playerid, "?????? ?????? ?? ??????????? ???.");

	new userid;
	if(sscanf(params,"u", userid))
		return SendSyntaxMessage(playerid, "/fire [playerid/PartOfName]");

	if(userid == playerid)
		return SendErrorMessage(playerid, "?? ?? ?????? ??????? ? ?????? ?????? ????.");

	if(!IsPlayerLogged(userid))
		return SendNotConnected(playerid);

	if(PlayerInfo[userid][pWorkOn] != BizInfo[bizid][bizID])
	    return SendErrorMessage(playerid, "?????? ??????? ?? ???????? ? ???.");

	SendClientMessageEx(userid, COLOR_LIGHTBLUE, "%s ??????(-?) ??? ? ?????? ?? ???????.", GetNameWithMask(playerid));
	SendClientMessageEx(playerid, COLOR_INFO, "?? ??????? %s ? ?? ?????? ?? ????? ?????? ?? ???????.", GetNameWithMask(userid));

	PlayerInfo[userid][pWorkOn] = 0;
	return 1;
}

CMD:animlist(playerid, params[])
{
	SendClientMessage(playerid,COLOR_GREEN,"____________?????? ????????____________");
	SendClientMessage(playerid,COLOR_WHITE,"/handsup /sit /aim /cellin /cellout /drunk /kicking /bomb /bar /stoptaxi");
	SendClientMessage(playerid,COLOR_WHITE,"/getarrested /laugh /crossarms /vomit /eating /sipdrink");
	SendClientMessage(playerid,COLOR_WHITE,"/slapass /chat /fuckyou /taichi /injured /no /yes /crawl /push /superkick");
	SendClientMessage(playerid,COLOR_WHITE,"/facepalm /balls /lowbodypush /spraying /medic /koface /kostomach /piss");
	SendClientMessage(playerid,COLOR_WHITE,"/lifejump /rollfall /hoodfrisked /flip /tired /box /chant /finger /gpunch /gog");
	SendClientMessage(playerid,COLOR_WHITE,"/gkick /lowthrow /riot /bp /cry /taxiR /taxiL /gro /seat /tatto /strip");
	SendClientMessage(playerid,COLOR_WHITE,"/joy /dance /deal /smoking /bat /basket /lean /lay /gsign /walk /wave /police");
	SendClientMessage(playerid,COLOR_WHITE,"/crack /waimL /waimR /lookback /caim /creep /sroll /gesture");
	SendClientMessage(playerid,COLOR_WHITE,"/lookout /agreement /bend /cmouth /nfall /hsit /rod /swingback");
	SendClientMessage(playerid,COLOR_WHITE,"/csit /bracing /pool /search /daim /rhandL /rhandR /hstand /nlean /shelter");
	SendClientMessage(playerid,COLOR_WHITE,"/wsit /waim /hangon /sleepL /sleepR /blowj /rseat /polwalk /wallow /nflip");
	SendClientMessage(playerid,COLOR_WHITE,"/csdead /follow /grnd /copa /cmon /lose /win /gunthreat /givecash /robr");
	SendClientMessage(playerid,COLOR_WHITE,"/serend /heist /beckon /shotgun /colt /climb /pushup /protection");
	SendClientMessage(playerid,COLOR_WHITE,"/tlean /swallow /stand /pullhand /nlook /extend");
	SendClientMessage(playerid,COLOR_WHITE,"/rap /car /repcar /onehand /backwalk /mirro /hips /pullo /rtake");
	SendClientMessage(playerid,COLOR_WHITE,"/obalance /wobalance /taction /catch /despair /rooting /spyglass /looksky");
	SendClientMessage(playerid,COLOR_WHITE,"/show /sh /crossfingers /delight /showtable /tfacepalm");
	SendClientMessage(playerid,COLOR_WHITE,"/tpull /fail /wear /fsit /crushjump /scatch /lookfloor /tramplefloor /tgro");
	SendClientMessage(playerid,COLOR_WHITE,"/swing /nbp /takehead /readtable /squat /sprawl /throwmoney /faim");
	SendClientMessage(playerid,COLOR_WHITE,"/greet /hnds /liftup /putdown /stretch /idle");
	SendClientMessage(playerid,COLOR_WHITE,"/reload /batidle /tapcig /fall /inbedleft /inbedright");
	SendClientMessage(playerid,COLOR_WHITE,"/cover /dealerstance /stance /yell");
	SendClientMessage(playerid,COLOR_GREEN,"_____________________________________________");

	return 1;
}

CMD:strip(playerid, params[])
{
	new type;
	if(sscanf(params,"d",type))
		return SendSyntaxMessage(playerid, "/strip [1-14]");

	switch(type)
	{
		case 1: OnPlayAnim(playerid,"STRIP", "strip_A", 4.1, 1, 1, 1, 1, 1 );
		case 2: OnPlayAnim(playerid,"STRIP", "strip_B", 4.1, 1, 1, 1, 1, 1 );
		case 3: OnPlayAnim(playerid,"STRIP", "strip_C", 4.1, 1, 1, 1, 1, 1 );
		case 4: OnPlayAnim(playerid,"STRIP", "strip_D", 4.1, 1, 1, 1, 1, 1 );
		case 5: OnPlayAnim(playerid,"STRIP", "strip_E", 4.1, 1, 1, 1, 1, 1 );
		case 6: OnPlayAnim(playerid,"STRIP", "strip_F", 4.1, 1, 1, 1, 1, 1 );
		case 7: OnPlayAnim(playerid,"STRIP", "strip_G", 4.1, 1, 1, 1, 1, 1 );
		case 8: OnPlayAnim(playerid,"STRIP","STR_A2B",4.1,1,1,1,1,1);
		case 9: OnPlayAnim(playerid,"STRIP","STR_B2C",4.1,1,1,1,1,1);
		case 10: OnPlayAnim(playerid,"STRIP","STR_C1",4.1,1,1,1,1,1);
		case 11: OnPlayAnim(playerid,"STRIP","STR_C2",4.1,1,1,1,1,1);
		case 12: OnPlayAnim(playerid,"STRIP","STR_Loop_A",4.1,1,1,1,1,1);
		case 13: OnPlayAnim(playerid,"STRIP","STR_Loop_B",4.1,1,1,1,1,1);
		case 14: OnPlayAnim(playerid,"STRIP","STR_Loop_C",4.1,1,1,1,1,1);
		default: SendSyntaxMessage(playerid, "/strip [1-14]");
	}
	return 1;
}

CMD:liftup(playerid, params[])
{
	OnPlayAnim(playerid, "CARRY", "liftup", 3.0, 0, 0, 0, 0, 0);
	return 1;
}

CMD:putdown(playerid, params[])
{
	OnPlayAnim(playerid, "CARRY", "putdwn", 3.0, 0, 0, 0, 0, 0);
	return 1;
}

CMD:stretch(playerid, params[])
{
	OnPlayAnim(playerid,"STRIP","PUN_HOLLER",4.1,1,0,0,1,0);
	return 1;
}

CMD:idle(playerid, params[])
{
	OnPlayAnim(playerid,"STRIP","PUN_LOOP",4.1,1,0,0,1,0);
	return 1;
}

CMD:batidle(playerid, params[])
{
	OnPlayAnim(playerid,"BASEBALL","Bat_IDLE",4.1,1,0,0,1,0);
	return 1;
}

CMD:aim(playerid, params[])
{
	new type;
	if(sscanf(params,"d",type)) return SendSyntaxMessage(playerid, "/aim [1-2]");
	switch(type)
	{
		case 1: OnPlayAnim(playerid, "SHOP", "ROB_Loop_Threat", 4.0, 1, 0, 0, 0, 0);
		case 2: OnPlayAnim(playerid,"PED","gang_gunstand",3.0,0,1,1,1,0);
		default: SendSyntaxMessage(playerid, "/aim [1-2]");
	}
	return 1;
}

CMD:lay(playerid, params[])
{
	new type;
	if(sscanf(params,"d",type)) return SendSyntaxMessage(playerid, "/lay [1-5]");
	switch(type)
	{
		case 1:	OnPlayAnim(playerid,"BEACH", "bather", 4.0, 1, 0, 0, 0, 0);
		case 2:	OnPlayAnim(playerid,"SUNBATHE","Lay_Bac_in",3.0,0,1,1,1,0);
		case 3:	OnPlayAnim(playerid,"BEACH","ParkSit_W_loop",3.0,0,1,1,1,0);
		case 4:	OnPlayAnim(playerid,"BEACH","SitnWait_loop_W",4.0, 1, 0, 0, 0, 0);
		case 5:	OnPlayAnim(playerid,"SUNBATHE","SBATHE_F_LieB2Sit",3.0,0,1,1,1,0);
		default: SendSyntaxMessage(playerid, "/lay [1-5]");
	}
	return 1;
}

CMD:crack(playerid, params[])
{
	new type;
	if(sscanf(params,"d",type)) return SendSyntaxMessage(playerid, "/crack [1-7]");
	switch(type)
	{
		case 1: OnPlayAnim(playerid,"CRACK","crckdeth2",3.0,1,1,1,1,0);
		case 2: OnPlayAnim(playerid,"CRACK","crckdeth4",3.0,0,1,1,1,0);
		case 3: OnPlayAnim(playerid,"CRACK","crckidle1",3.0,0,1,1,1,0);
		case 4: OnPlayAnim(playerid,"CRACK","crckidle2",3.0,0,1,1,1,0);
		case 5: OnPlayAnim(playerid,"CRACK","crckidle3",3.0,0,1,1,1,0);
		case 6: OnPlayAnim(playerid,"CRACK","crckdeth1",3.0,0,1,1,1,0);
		case 7: OnPlayAnim(playerid,"CRACK","crckdeth3",3.0,0,1,1,1,0);
		default: SendSyntaxMessage(playerid, "/crack [1-7]");
	}
	return 1;
}

CMD:reload(playerid, params[])
{
	OnPlayAnim(playerid,"TEC","TEC_reload",4.0,0,0,0,0,0);
	return 1;
}

CMD:bat(playerid, params[])
{
	new type;
	if(sscanf(params,"d",type)) return SendSyntaxMessage(playerid, "/bat [1-2]");
	switch(type)
	{
		case 1: OnPlayAnim(playerid,"CRACK","Bbalbat_Idle_02",4.0, 1, 0, 0, 0, 0);
		case 2: OnPlayAnim(playerid,"CRACK","Bbalbat_Idle_01",4.0, 1, 0, 0, 0, 0);
		default: SendSyntaxMessage(playerid, "/bat [1-2]");
	}
	return 1;
}

CMD:tapcig(playerid, params[])
{
	OnPlayAnim(playerid,"SMOKING","M_smk_tap",3.0,0,0,0,0,0);
	return 1;
}

CMD:fall(playerid, params[])
{
	OnPlayAnim(playerid,"PARACHUTE","FALL_skyDive_DIE",3.5,0,0,0,1,0);
	return 1;
}

CMD:laugh(playerid, params[])
{
	OnPlayAnim(playerid, "RAPPING", "Laugh_01", 4.0, 0, 0, 0, 0, 0);
	return 1;
}

CMD:vomit(playerid, params[])
{
	OnPlayAnim(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0);
	return 1;
}

CMD:inbedleft(playerid, params[])
{
	OnPlayAnim(playerid,"INT_HOUSE","BED_Loop_L",4.0,1,0,0,0,0);
	return 1;
}

CMD:inbedright(playerid, params[])
{
	OnPlayAnim(playerid,"INT_HOUSE","BED_Loop_R",4.0,1,0,0,0,0);
	return 1;
}

CMD:getarrested(playerid, params[])
{
	OnPlayAnim(playerid,"PED","IDLE_taxi",4.0,0,0,0,0,0);
	return 1;
}

CMD:cry(playerid, params[])
{
	OnPlayAnim(playerid,"GRAVEYARD","mrnf_loop",4.0,1,0,0,0,0);
	return 1;
}
CMD:sleepl(playerid)
{

	OnPlayAnim(playerid,"INT_HOUSE","BED_In_L",4.0,0,0,1,1,0);
	return 1;
}
CMD:sleepr(playerid)
{

	OnPlayAnim(playerid,"INT_HOUSE","BED_In_R",4.0,0,0,1,1,0);
	return 1;
}

CMD:cover(playerid, params[])
{
	OnPlayAnim(playerid, "ped", "cower", 3.0, 1, 0, 0, 0, 0);
	return 1;
}

CMD:dealerstance(playerid, params[])
{
	OnPlayAnim(playerid,"DEALER","DEALER_IDLE",4.0,1,0,0,0,0);
	return 1;
}

CMD:stance(playerid, params[])
{
	new type;
	if(sscanf(params,"d",type)) return SendSyntaxMessage(playerid, "/stance [1-11]");
	switch(type)
	{
		case 1: OnPlayAnim(playerid,"PED","WOMAN_IDLESTANCE",4.0,1,0,0,0,0);
		case 2: OnPlayAnim(playerid,"PED","CAR_HOOKERTALK",4.0,1,0,0,0,0);
		case 3: OnPlayAnim(playerid,"FAT","FatIdle",4.0,1,0,0,0,0);
		case 4: OnPlayAnim(playerid,"WUZI","Wuzi_Stand_Loop",4.0,1,0,0,0,0);
		case 5: OnPlayAnim(playerid,"GRAVEYARD","mrnm_loop",4.0,1,0,0,0,0);
		case 6: OnPlayAnim(playerid,"GRAVEYARD","prst_loopa",4.0,1,0,0,0,0);
		case 7: OnPlayAnim(playerid,"PED","idlestance_fat",4.0,1,0,0,0,0);
		case 8: OnPlayAnim(playerid,"PED","idlestance_old",4.0,1,0,0,0,0);
		case 9: OnPlayAnim(playerid,"PED","turn_l",4.0,1,0,0,0,0);
		case 10: OnPlayAnim(playerid,"BAR","Barcustom_loop",4.0,1,0,0,0,0);
		case 11: OnPlayAnim(playerid,"BAR","Barserve_loop",4.0,1,0,0,0,0);
		default: SendSyntaxMessage(playerid, "/stance [1-11]");
	}
	return 1;
}

CMD:yell(playerid, params[])
{
	new type;
	if(sscanf(params,"d",type)) return SendSyntaxMessage(playerid, "/yell [1-3]");
	switch(type)
	{
		case 1: OnPlayAnim(playerid,"ON_LOOKERS","shout_loop",3.0,1,0,0,0,0);
		case 2: OnPlayAnim(playerid,"ON_LOOKERS","shout_01",3.0,1,0,0,0,0);
		case 3: OnPlayAnim(playerid,"ON_LOOKERS","shout_02",3.0,1,0,0,0,0);
		default: SendSyntaxMessage(playerid, "/yell [1-3]");
	}
	return 1;
}

CMD:gsign(playerid, params[])
{
	new type;
	if(sscanf(params,"d",type))
		return SendSyntaxMessage(playerid, "/gsign [1-10]");

	switch(type)
	{
		case 1: OnPlayAnim(playerid,"GHANDS","gsign1",4.1,0,1,1,1,1);
		case 2: OnPlayAnim(playerid,"GHANDS","gsign1LH",4.1,0,1,1,1,1);
		case 3: OnPlayAnim(playerid,"GHANDS","gsign2",4.1,0,1,1,1,1);
		case 4: OnPlayAnim(playerid,"GHANDS","gsign2LH",4.1,0,1,1,1,1);
		case 5: OnPlayAnim(playerid,"GHANDS","gsign3",4.1,0,1,1,1,1);
		case 6: OnPlayAnim(playerid,"GHANDS","gsign3LH",4.1,0,1,1,1,1);
		case 7: OnPlayAnim(playerid,"GHANDS","gsign4",4.1,0,1,1,1,1);
		case 8: OnPlayAnim(playerid,"GHANDS","gsign4LH",4.1,0,1,1,1,1);
		case 9: OnPlayAnim(playerid,"GHANDS","gsign5",4.1,0,1,1,1,1);
		case 10: OnPlayAnim(playerid,"GHANDS","gsign5LH",4.1,0,1,1,1,1);
		default: SendSyntaxMessage(playerid, "/gsign [1-10]");
	}
	return 1;
}

CMD:rap(playerid, params[])
{
	new type;
	if(sscanf(params,"d",type)) return SendSyntaxMessage(playerid, "/rap [1-9]");
	switch(type)
	{
		case 1: OnPlayAnim(playerid,"RAPPING","RAP_A_Loop",4.0,1,0,0,0,0);
		case 2: OnPlayAnim(playerid,"RAPPING","RAP_C_Loop",4.0,1,0,0,0,0);
		case 3: OnPlayAnim(playerid,"GANGS","prtial_gngtlkD",4.0,1,0,0,1,1);
		case 4: OnPlayAnim(playerid,"GANGS","prtial_gngtlkH",4.0,1,0,0,1,1);
		case 5: OnPlayAnim(playerid,"GANGS","prtial_gngtlkF",4.0,1,0,0,1,1);
		case 6: OnPlayAnim(playerid,"GANGS","prtial_gngtlkG",4.0,1,0,0,1,1);
		case 7: OnPlayAnim(playerid,"PED","ATM",4.0,0,0,0,0,0);
		case 8: OnPlayAnim(playerid,"RAPPING","RAP_B_IN",3.0,0,1,1,1,0);
		case 9: OnPlayAnim(playerid,"GYMNASIUM","gym_tread_celebrate",4.1,0,1,1,1,0);
		default: SendSyntaxMessage(playerid, "/rap [1-9]");
	}
	return 1;
}

CMD:tired(playerid, params[])
{
	new type;
	if(sscanf(params,"d",type)) return SendSyntaxMessage(playerid, "/tired [1-2]");
	switch(type)
	{
		case 1: OnPlayAnim(playerid,"PED","IDLE_tired",3.0,1,0,0,0,0);
		case 2: OnPlayAnim(playerid,"FAT","IDLE_tired",4.0,0,0,1,1,0);
		default: SendSyntaxMessage(playerid, "/tired [1-2]");
	}
	return 1;
}

CMD:sit(playerid, params[])
{
	new type;
	if(sscanf(params,"d",type)) return SendSyntaxMessage(playerid, "/sit [1-7]");
	switch(type)
	{
		case 1: OnPlayAnim(playerid,"PED","SEAT_down",4.0,0,0,1,1,0);
		case 2: OnPlayAnim(playerid,"MISC","seat_lr",2.0,1,0,0,0,0);
		case 3: OnPlayAnim(playerid,"MISC","seat_talk_01",2.0,1,0,0,0,0);
		case 4: OnPlayAnim(playerid,"MISC","seat_talk_02",2.0,1,0,0,0,0);
		case 5: OnPlayAnim(playerid,"INT_OFFICE","OFF_Sit_Crash",4.0,1,0,1,1,0);
		case 6: OnPlayAnim(playerid,"INT_OFFICE","OFF_Sit_Drink",4.0,1,0,1,1,0);
		case 7: OnPlayAnim(playerid,"INT_OFFICE","OFF_Sit_Watch",4.0,0,0,1,1,0);
		default: SendSyntaxMessage(playerid, "/sit [1-7]");
	}
	return 1;
}

CMD:dance(playerid, params[])
{
	new type;
	if(IsPlayerInjured(playerid) || IsPlayerInAnyVehicle(playerid) || JackingEngine[playerid] != 0 || JackingLock[playerid] != 0) return 1;
	if(sscanf(params,"d",type)) return SendSyntaxMessage(playerid, "/dance [1-12]");
	switch(type)
	{
		case 1:	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE1);
		case 2: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE2);
		case 3: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE3);
		case 4: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE4);
		case 5: OnPlayAnim(playerid,"DANCING","bd_clap",4.1,1,1,1,1,1);
		case 6: OnPlayAnim(playerid,"DANCING","bd_clap1",4.1,1,1,1,1,1);
		case 7: OnPlayAnim(playerid,"DANCING","DAN_Down_A",4.1,1,1,1,1,1);
		case 8: OnPlayAnim(playerid,"DANCING","DAN_Left_A",4.1,1,1,1,1,1);
		case 9: OnPlayAnim(playerid,"DANCING","DAN_Loop_A",4.1,1,1,1,1,1);
		case 10: OnPlayAnim(playerid,"DANCING","DAN_Right_A",4.1,1,1,1,1,1);
		case 11: OnPlayAnim(playerid,"DANCING","DAN_Up_A",4.1,1,1,1,1,1);
		case 12: OnPlayAnim(playerid,"DANCING","dnce_M_a",4.1,1,1,1,1,1);
		default: SendSyntaxMessage(playerid, "/dance [1-12]");
	}
	return 1;
}

CMD:injured(playerid, params[])
{
	new type;
	if(sscanf(params,"d",type)) return SendSyntaxMessage(playerid, "/injured [1-2]");
	switch(type)
	{
		case 1: OnPlayAnim(playerid, "SWEET", "Sweet_injuredloop", 4.0,0,0,1,1,0);
		case 2: OnPlayAnim(playerid, "WUZI", "CS_Dead_Guy", 4.0, 1, 1, 1, 1, 0);
		default: SendSyntaxMessage(playerid, "/injured [1-2]");
	}
	return 1;
}

CMD:handsup(playerid, params[])
{
	if(pTemp[playerid][pTaserTime] || IsPlayerInjured(playerid) || IsPlayerInAnyVehicle(playerid) || JackingEngine[playerid] != 0)
		return 1;

	OnPlayAnim(playerid, "ROB_BANK","SHP_HandsUp_Scr", 4.0, 0, 1, 1, 1, 0);
	return 1;
}

CMD:deal(playerid, params[])
{
	new type;
	if(sscanf(params,"d",type)) return SendSyntaxMessage(playerid, "/deal [1-2]");
	switch(type)
	{
		case 1: OnPlayAnim(playerid, "DEALER", "DEALER_DEAL", 4.0, 0, 0, 0, 0, 0);
		case 2: OnPlayAnim(playerid, "DEALER","DEALER_IDLE", 3.0,0,1,1,1,0);
		default: SendSyntaxMessage(playerid, "/deal [1-2]");
	}
	return 1;
}

CMD:piss(playerid, params[])
{
	OnPlayAnim(playerid,"PAULNMAC","Piss_in",4.1,0,1,1,1,0);
	return 1;
}

CMD:riot(playerid, params[])
{
	OnPlayAnim(playerid,"RIOT","RIOT_ANGRY",4.0,0,0,0,0,0);
	return 1;
}

CMD:slapass(playerid, params[])
{
	OnPlayAnim(playerid, "SWEET", "sweet_ass_slap", 4.0, 0, 0, 0, 0, 0);
	return 1;
}

CMD:wave(playerid, params[])
{
	new type;
	if(sscanf(params,"d",type)) return SendSyntaxMessage(playerid, "/wave [1-4]");
	switch(type)
	{
		case 1: OnPlayAnim(playerid, "KISSING","gfwave2", 4.1,0,1,1,0,0);
		case 2: OnPlayAnim(playerid, "ON_LOOKERS","wave_loop", 4.1,1,1,1,0,0);
		case 3: OnPlayAnim(playerid,"CAMERA","camstnd_cmon",4.0,0,0,0,0,0);
		case 4: OnPlayAnim(playerid,"PED","endchat_01",4.1,0,1,1,0,0);
		default: SendSyntaxMessage(playerid, "/wave [1-4]");
	}
	return 1;
}

CMD:crossarms(playerid, params[])
{
	OnPlayAnim(playerid, "COP_AMBIENT", "Coplook_loop", 4.0, 0, 1, 1, 1, -1);
	return 1;
}

CMD:lean(playerid, params[])
{
	new type;
	if(sscanf(params,"d",type)) return SendSyntaxMessage(playerid, "/lean [1-3]");
	switch(type)
	{
		case 1: OnPlayAnim(playerid,"GANGS","leanIDLE",4.0,0,0,1,1,0);
		case 2: OnPlayAnim(playerid,"MISC","Plyrlean_loop",4.0,0,1,1,1,0);
		case 3: OnPlayAnim(playerid,"CAR_CHAT","car_talkm_loop",4.0,0,1,1,1,0);
		default: SendSyntaxMessage(playerid, "/lean [1-3]");
	}
	return 1;
}

CMD:basket(playerid, params[])
{
	new type;
	if(sscanf(params,"d",type)) return SendSyntaxMessage(playerid, "/basket [1-7]");
	switch(type)
	{
		case 1: OnPlayAnim(playerid,"BSKTBALL","BBALL_idleloop",4.0,1,0,0,0,0);
		case 2: OnPlayAnim(playerid,"BSKTBALL","BBALL_Jump_Shot",4.0,0,0,0,0,0);
		case 3: OnPlayAnim(playerid,"BSKTBALL","BBALL_pickup",4.0,0,0,0,0,0);
		case 4: OnPlayAnim(playerid,"BSKTBALL","BBALL_run",4.1,1,1,1,1,1);
		case 5: OnPlayAnim(playerid,"BSKTBALL","BBALL_def_loop",4.0,1,0,0,0,0);
		case 6: OnPlayAnim(playerid,"BSKTBALL","BBALL_Dnk",4.0,0,0,0,0,0);
		case 7: OnPlayAnim(playerid,"BSKTBALL","BBALL_walk",4.1,1,1,1,1,1);
		default: SendSyntaxMessage(playerid, "/basket [1-6]");
	}
	return 1;
}

CMD:lookout(playerid, params[])
{
	new type;
	if(sscanf(params,"d",type)) return SendSyntaxMessage(playerid, "/lookout [1-2]");
	switch(type)
	{
		case 1: OnPlayAnim(playerid,"SWAT","swt_wllpk_L",4.0,0,0,1,1,0);
		case 2: OnPlayAnim(playerid,"SWAT","swt_wllpk_R",4.0,0,0,1,1,0);
		default: SendSyntaxMessage(playerid, "/lookout [1-2]");
	}
	return 1;
}


CMD:dunk(playerid, params[])
{
	OnPlayAnim(playerid,"BSKTBALL","BBALL_Dnk",4.0,0,0,0,0,0);
	return 1;
}

CMD:win(playerid, params[])
{
	OnPlayAnim(playerid,"OTB","wtchrace_win",4.1,0,1,1,1,0);
	return 1;
}

CMD:walk(playerid, params[])
{
	if(0 == PlayerInfo[playerid][pWalk])
	    return SendErrorMessage(playerid, "???????? ?????? ??????? ? ??????????.");

	switch(PlayerInfo[playerid][pWalk])
	{
		case 1: OnPlayAnim(playerid,"PED","WALK_civi",4.1,1,1,1,1,1);
		case 2: OnPlayAnim(playerid,"PED","WALK_gang1",4.1,1,1,1,1,1);
		case 3: OnPlayAnim(playerid,"PED","WOMAN_walksexy",4.1,1,1,1,1,1);
		case 4: OnPlayAnim(playerid,"PED","WALK_armed",4.1,1,1,1,1,1);
		case 5: OnPlayAnim(playerid,"PED","WALK_csaw",4.1,1,1,1,1,1);
		case 6: OnPlayAnim(playerid,"PED","WALK_gang2",4.1,1,1,1,1,1);
		case 7: OnPlayAnim(playerid,"PED","WALK_drunk",4.1,1,1,1,1,1);
		case 8: OnPlayAnim(playerid,"PED","WALK_fat",4.1,1,1,1,1,1);
		case 9: OnPlayAnim(playerid,"PED","WALK_fatold",4.1,1,1,1,1,1);
		case 10: OnPlayAnim(playerid,"PED","WALK_old",4.1,1,1,1,1,1);
		case 11: OnPlayAnim(playerid,"PED","WALK_rocket",4.1,1,1,1,1,1);
		case 12: OnPlayAnim(playerid,"PED","WALK_shuffle",4.1,1,1,1,1,1);
		case 13: OnPlayAnim(playerid,"PED","WOMAN_walknorm",4.1,1,1,1,1,1);
		case 14: OnPlayAnim(playerid,"PED","WOMAN_walkpro",4.1,1,1,1,1,1);
		case 15: OnPlayAnim(playerid,"PED","WOMAN_walkbusy",4.1,1,1,1,1,1);
		case 16: OnPlayAnim(playerid,"PED","WOMAN_walknorm",4.1,1,1,1,1,1);
		case 17: OnPlayAnim(playerid,"PED","Walk_Wuzi",4.1,1,1,1,1,1);
	}
	return 1;
}

CMD:hnds(playerid,params[])
{
	if(sscanf(params,"d",params[1]))
	{
		SendSyntaxMessage(playerid, "/hnds [1-7]");
		return 1;
	}
	switch(params[1])
	{
		case 1: OnPlayAnim(playerid,"LOWRIDER","prtial_gngtlkB",4.1,0,1,1,1,1);
		case 2: OnPlayAnim(playerid,"LOWRIDER","prtial_gngtlkC",4.1,0,1,1,1,1);
		case 3: OnPlayAnim(playerid,"LOWRIDER","prtial_gngtlkD",4.1,0,1,1,1,1);
		case 4: OnPlayAnim(playerid,"LOWRIDER","prtial_gngtlkE",4.1,0,1,1,1,1);
		case 5: OnPlayAnim(playerid,"LOWRIDER","prtial_gngtlkF",4.1,0,1,1,1,1);
		case 6: OnPlayAnim(playerid,"LOWRIDER","prtial_gngtlkG",4.1,0,1,1,1,1);
		case 7: OnPlayAnim(playerid,"LOWRIDER","prtial_gngtlkH",4.1,0,1,1,1,1);
		default: SendSyntaxMessage(playerid, "/hnds [1-7]");
	}
	return 1;
}
CMD:smoking(playerid,params[])
{
	if(sscanf(params,"d",params[1]))
	{
		SendSyntaxMessage(playerid, "/smoking [1-4]");
		return 1;
	}
	switch(params[1])
	{
		case 1: OnPlayAnim(playerid, "SMOKING", "M_smklean_loop", 4.0, 1, 0, 0, 0, 0);
		case 2: OnPlayAnim(playerid, "SMOKING", "F_smklean_loop", 4.0, 1, 0, 0, 0, 0);
		case 3: OnPlayAnim(playerid, "SMOKING","M_smkstnd_loop", 4.0, 1, 0, 0, 0, 0);
		case 4: OnPlayAnim(playerid, "SMOKING","M_smk_out", 4.0, 0, 0, 0, 0, 0);
		default: SendSyntaxMessage(playerid, "/smoking [1-4]");
	}
	return 1;
}

CMD:eating(playerid)
{
	OnPlayAnim(playerid, "FOOD", "EAT_Burger", 4.1,1,1,1,1,1); // Eat Burger
	return 1;
}
CMD:sipdrink(playerid)
{
	OnPlayAnim(playerid, "GANGS", "drnkbr_prtl", 4.1,1,1,1,1,1);
	return 1;
}

CMD:chat(playerid)
{
	OnPlayAnim(playerid,"PED","IDLE_CHAT",4.0,1,0,0,1,1);
	return 1;
}
// Fucku
CMD:fuckyou(playerid)
{
	OnPlayAnim(playerid,"PED","fucku",4.0,0,0,0,0,0);
	return 1;
}
// TaiChi
CMD:taichi(playerid)
{
	OnPlayAnim(playerid,"PARK","Tai_Chi_Loop",4.0,1,0,0,0,0);
	return 1;
}

CMD:no(playerid)
{
	OnPlayAnim(playerid,"GANGS","Invite_No",4.0,0,0,0,0,0);
	return 1;
}
CMD:yes(playerid)
{
	OnPlayAnim(playerid,"GANGS","Invite_Yes",4.0,0,0,0,0,0);
	return 1;
}
CMD:crawl(playerid)
{
	OnPlayAnim(playerid,"PED","CAR_crawloutRHS",4.0,0,0,0,0,0);
	return 1;
}
CMD:push(playerid)
{
	OnPlayAnim(playerid,"GANGS","shake_cara",4.0,0,0,0,0,0);
	return 1;
}
CMD:superkick(playerid)
{
	OnPlayAnim(playerid,"POLICE","Door_Kick",4.0,0,0,0,0,0);
	return 1;
}
CMD:facepalm(playerid)
{
	OnPlayAnim(playerid,"MISC","plyr_shkhead",4.0,0,0,0,0,0);
	return 1;
}
CMD:balls(playerid)
{
	OnPlayAnim(playerid,"MISC","scratchballs_01",4.0,0,0,0,0,0);
	return 1;
}
CMD:lowbodypush(playerid)
{
	OnPlayAnim(playerid,"GANGS","shake_carSH",4.0,0,0,0,0,0);
	return 1;
}
CMD:spraying(playerid)
{
	OnPlayAnim(playerid,"SPRAYCAN","spraycan_full",4.0,0,0,0,0,0);
	return 1;
}
CMD:medic(playerid)
{
	OnPlayAnim(playerid,"MEDIC","CPR",4.0,0,0,0,0,0);
	return 1;
}
CMD:koface(playerid)
{
	OnPlayAnim(playerid,"PED","KO_shot_face",4.0,0,1,1,1,0);
	return 1;
}
CMD:kostomach(playerid)
{
	OnPlayAnim(playerid,"PED","KO_shot_stom",4.0,0,1,1,1,0);
	return 1;
}
CMD:lifejump(playerid)
{
	OnPlayAnim(playerid,"PED","EV_dive",4.0,0,1,1,1,0);
	return 1;
}
CMD:rollfall(playerid)
{
	OnPlayAnim(playerid,"PED","BIKE_fallR",4.0,0,1,1,1,0);
	return 1;
}
CMD:hoodfrisked(playerid)
{
	OnPlayAnim(playerid,"POLICE","crm_drgbst_01",1.0,0,1,1,1,0);
	return 1;
}
CMD:flip(playerid)
{
	OnPlayAnim(playerid,"PED","KD_left",4.1,0,1,1,1,0);
	return 1;
}
CMD:frontfall(playerid)
{
	//OnPlayAnim(playerid,"PED","KO_skid_back",4.1,0,1,1,1,0);
	OnPlayAnim(playerid,"PED","FLOOR_hit_f",4.1,0,1,1,1,0);
	return 1;
}

CMD:box(playerid)
{
	OnPlayAnim(playerid,"GYMNASIUM","GYMshadowbox",4.0,1,1,1,1,0);
	return 1;
}
CMD:chant(playerid)
{
	OnPlayAnim(playerid,"RIOT","RIOT_CHANT",4.0,1,1,1,1,0);
	return 1;
}
CMD:finger(playerid)
{
	OnPlayAnim(playerid,"RIOT","RIOT_FUKU",2.0,0,0,0,0,0);
	return 1;
}
CMD:gpunch(playerid)
{
	OnPlayAnim(playerid,"FIGHT_B","FightB_G",4.0,0,0,0,0,0);
	return 1;
}
CMD:gkick(playerid)
{
	OnPlayAnim(playerid,"FIGHT_D","FightD_G",4.0,0,0,0,0,0);
	return 1;
}
CMD:lowthrow(playerid)
{
	OnPlayAnim(playerid,"GRENADE","WEAPON_throwu",3.0,0,0,0,0,0);
	return 1;
}

CMD:bp(playerid)
{
	OnPlayAnim(playerid,"benchpress","gym_bp_celebrate",4.0,0,0,0,0,0);
	return 1;
}

CMD:taxir(playerid)
{
	OnPlayAnim(playerid,"MISC","Hiker_Pose",4.0,0,1,1,1,0);
	return 1;
}
CMD:taxil(playerid)
{
	OnPlayAnim(playerid,"MISC","Hiker_Pose_L",4.0,0,1,1,1,0);
	return 1;
}
CMD:gro(playerid)
{
	OnPlayAnim(playerid,"BEACH", "ParkSit_M_loop", 4.0, 1, 0, 0, 0, 0);
	return 1;
}
CMD:seat(playerid) //
{
	OnPlayAnim(playerid,"INT_HOUSE","LOU_In",4.0,0,0,1,1,0);
	return 1;
}

CMD:tatto(playerid)
{
	OnPlayAnim(playerid,"TATTOOS", "TAT_ArmR_Pose_P", 4.1, 0, 1, 1, 1, 0 );
	return 1;
}
CMD:bar(playerid,params[])
{
	OnPlayAnim(playerid,"BAR","Barserve_bottle",4.0,0,1,1,1,0);
	return 1;
}
CMD:stoptaxi(playerid)
{
	OnPlayAnim(playerid,"PED","IDLE_taxi",4.0,0,0,0,0,0);
	return 1;
}
CMD:police(playerid,params[])
{
	if(sscanf(params,"d",params[1]))
	{
		SendSyntaxMessage(playerid, "/police [1-4]");
		return 1;
	}
	switch(params[1])
	{
		case 1: OnPlayAnim(playerid,"POLICE","CopTraf_Away",3.0,1,0,0,1,0);
		case 2: OnPlayAnim(playerid,"POLICE","CopTraf_Come",3.0,1,0,0,1,0);
		case 3: OnPlayAnim(playerid,"POLICE","CopTraf_Left",3.0,1,0,0,1,0);
		case 4: OnPlayAnim(playerid,"POLICE","CopTraf_Stop",3.0,1,0,0,1,0);
		default: SendSyntaxMessage(playerid, "/police [1-4]");
	}
	return 1;
}

CMD:waiml(playerid)
{
	OnPlayAnim(playerid,"PED","Driveby_L",4.1,0,1,1,1,1);
	return 1;
}
CMD:waimr(playerid)
{
	OnPlayAnim(playerid,"PED","Driveby_R",4.1,0,1,1,1,1);
	return 1;
}
CMD:lookback(playerid)
{
	OnPlayAnim(playerid,"PED","flee_lkaround_01",4.0,0,0,0,0,0);
	return 1;
}
CMD:caim(playerid)
{
	//OnPlayAnim(playerid,"PED","IDLE_ROCKET",4.1,0,1,1,1,1);
	OnPlayAnim(playerid,"PED","IDLE_ROCKET",4.0,0,1,1,1,0);
	return 1;
}
CMD:creep(playerid)
{
	OnPlayAnim(playerid,"PED","Player_Sneak",4.1,1,1,1,1,1);
	return 1;
}
CMD:sroll(playerid)
{
	OnPlayAnim(playerid,"SWAT","JMP_Wall1m_180",4.1,0,1,1,1,0);
	return 1;
}
CMD:gesture(playerid)
{
	OnPlayAnim(playerid,"SWAT","swt_lkt",4.0,0,0,0,0,0);
	return 1;
}

CMD:agreement(playerid)
{
	OnPlayAnim(playerid,"COP_AMBIENT","Coplook_think",4.0,1,0,0,0,0);
	return 1;
}
CMD:bend(playerid)
{
	OnPlayAnim(playerid,"BAR","Barserve_order",4.0,0,0,0,0,0);
	return 1;
}
CMD:rod(playerid)
{
	OnPlayAnim(playerid,"benchpress","gym_bp_up_A",4.0,0,0,1,1,0);
	return 1;
}
CMD:tgro(playerid)
{
	OnPlayAnim(playerid,"CAMERA","camcrch_cmon",4.0,0,0,1,1,0);
	return 1;
}
CMD:cmouth(playerid)
{
	OnPlayAnim(playerid,"ON_LOOKERS","panic_in",4.0,0,0,1,1,0);
	return 1;
}
CMD:gog(playerid)
{
	OnPlayAnim(playerid,"goggles","goggles_put_on",4.1,0,1,1,1,1);
	return 1;
}
CMD:nfall(playerid)
{
	OnPlayAnim(playerid,"HEIST9","CAS_G2_GasKO",4.1,0,1,1,1,0);
	return 1;
}
CMD:hsit(playerid)
{
	OnPlayAnim(playerid,"INT_OFFICE","OFF_Sit_Bored_Loop",4.0,1,0,1,1,0);
	return 1;
}
CMD:csit(playerid)
{
	OnPlayAnim(playerid,"INT_OFFICE","OFF_Sit_Type_Loop",4.0,1,0,1,1,0);
	return 1;
}
CMD:bracing(playerid)
{
	OnPlayAnim(playerid,"PLAYIDLES","stretch",4.0,0,0,0,0,0);
	return 1;
}
CMD:pool(playerid)
{
	OnPlayAnim(playerid,"POOL","POOL_Long_Start",4.1,0,1,1,1,0);
	return 1;
}
CMD:search(playerid)
{
	OnPlayAnim(playerid,"ROB_BANK","CAT_Safe_Rob",4.0,1,0,0,0,0);
	return 1;
}
CMD:daim(playerid)
{
	OnPlayAnim(playerid,"RYDER","Van_Stand_Crate",3.0,0,1,1,1,0);
	return 1;
}
CMD:rhandl(playerid)
{
	OnPlayAnim(playerid,"SCRATCHING","scdlulp",4.0,0,0,1,1,0);
	return 1;
}
CMD:rhandr(playerid)
{
	OnPlayAnim(playerid,"SCRATCHING","scdrulp",4.0,0,0,1,1,0);
	return 1;
}
CMD:hstand(playerid)
{
	OnPlayAnim(playerid,"SCRATCHING","scdrdlp",4.0,0,0,1,1,0);
	return 1;
}
CMD:nlean(playerid)
{
	OnPlayAnim(playerid,"SHAMAL","SHAMAL_align",4.1,0,1,1,1,0);
	return 1;
}
CMD:shelter(playerid)
{
	OnPlayAnim(playerid,"SHOP","SHP_Duck_Fire",4.0,0,0,1,1,0);
	return 1;
}
CMD:wsit(playerid)
{
	OnPlayAnim(playerid,"SHOP","SHP_Gun_Duck",4.0,0,0,1,1,0);
	return 1;
}
CMD:waim(playerid)
{
	OnPlayAnim(playerid,"TEC","TEC_reload",4.1,0,1,1,1,1);
	return 1;
}
CMD:hangon(playerid)
{
	OnPlayAnim(playerid,"TRAIN","tran_ouch",4.0,0,0,1,1,0);
	return 1;
}

CMD:blowj(playerid)
{
	OnPlayAnim(playerid,"BLOWJOBZ", "BJ_COUCH_START_W", 4.1, 0, 1, 1, 1, 0 );
	return 1;
}
CMD:rseat(playerid)
{
	OnPlayAnim(playerid,"BLOWJOBZ", "BJ_COUCH_START_P", 4.1, 0, 1, 1, 1, 0 );
	return 1;
}
CMD:polwalk(playerid)
{
	OnPlayAnim(playerid,"POLICE","Cop_move_FWD",3.0,1,1,1,1,1);
	return 1;
}
CMD:wallow(playerid,params[])
{
	if(sscanf(params,"d",params[1]))
	{
		SendSyntaxMessage(playerid, "/wallow [1-2]");
		return 1;
	}
	switch(params[1])
	{
	case 1: OnPlayAnim(playerid,"MD_CHASE","MD_BIKE_Lnd_Roll",4.1,0,1,1,1,0);
	case 2: OnPlayAnim(playerid,"MD_CHASE","MD_BIKE_Lnd_Roll_F",4.1,0,1,1,1,0);
	default: SendSyntaxMessage(playerid, "/wallow [1-2]");
	}
	return 1;
}
CMD:nflip(playerid)
{
	OnPlayAnim(playerid,"PED","BIKE_fall_off",4.1,0,1,1,1,0);
	return 1;
}
CMD:csdead(playerid)
{
	OnPlayAnim(playerid,"WUZI","CS_Dead_Guy",4.1,1,1,1,1,0);
	return 1;
}
CMD:follow(playerid)
{
	OnPlayAnim(playerid,"WUZI","Wuzi_follow",4.1,0,1,1,1,1);
	return 1;
}
CMD:grnd(playerid)
{
	OnPlayAnim(playerid,"WUZI","Wuzi_grnd_chk",4.0,0,0,0,0,0);
	return 1;
}
CMD:copa(playerid)
{
	OnPlayAnim(playerid,"COP_AMBIENT","Copbrowse_in",4.1,0,1,1,1,0);
	return 1;
}
CMD:cmon(playerid)
{
	OnPlayAnim(playerid,"OTB","wtchrace_cmon",4.1,0,1,1,1,0);
	return 1;
}
CMD:lose(playerid)
{
	OnPlayAnim(playerid,"OTB","wtchrace_lose",4.1,0,1,1,1,0);
	return 1;
}

CMD:gunthreat(playerid)
{
	OnPlayAnim(playerid,"SHOP","SHP_Gun_Threat",4.1,0,1,1,1,0);
	return 1;
}
CMD:givecash(playerid)
{
	OnPlayAnim(playerid,"SHOP","SHP_Rob_GiveCash",4.1,0,1,1,1,0);
	return 1;
}
CMD:robr(playerid)
{
	OnPlayAnim(playerid,"SHOP","SHP_Rob_React",4.1,0,1,1,1,0);
	return 1;
}
CMD:serend(playerid)
{
	OnPlayAnim(playerid,"SHOP","SHP_Serve_End",4.1,0,1,1,1,0);
	return 1;
}
CMD:heist(playerid)
{
	OnPlayAnim(playerid,"HEIST9","Use_SwipeCard",4.0,0,0,0,0,0);
	return 1;
}

CMD:beckon(playerid,params[])
{
	if(sscanf(params,"d",params[1]))
	{
		SendSyntaxMessage(playerid, "/beckon [1-3]");
		return 1;
	}
	switch(params[1])
	{
		case 1: OnPlayAnim(playerid,"RYDER","RYD_Beckon_01",4.1,0,1,1,1,1);
		case 2: OnPlayAnim(playerid,"RYDER","RYD_Beckon_02",4.1,0,1,1,1,1);
		case 3: OnPlayAnim(playerid,"RYDER","RYD_Beckon_03",4.1,0,1,1,1,1);
		default: SendSyntaxMessage(playerid, "/beckon [1-3]");
	}
	return 1;
}
CMD:shotgun(playerid,params[])
{
	if(sscanf(params,"d",params[1]))
	{
		SendSyntaxMessage(playerid, "/shotgun [1-3]");
		return 1;
	}
	switch(params[1])
	{
		case 1: OnPlayAnim(playerid,"SHOTGUN","shotgun_crouchfire",4.1,0,1,1,1,1);
		case 2: OnPlayAnim(playerid,"SHOTGUN","shotgun_fire",4.1,0,1,1,1,1);
		case 3: OnPlayAnim(playerid,"SHOTGUN","shotgun_fire_poor",4.1,0,1,1,1,1);
		default: SendSyntaxMessage(playerid, "/shotgun [1-3]");
	}
	return 1;
}
CMD:colt(playerid,params[])
{
	if(sscanf(params,"d",params[1]))
	{
		SendSyntaxMessage(playerid, "/colt [1-3]");
		return 1;
	}
	switch(params[1])
	{
		case 1: OnPlayAnim(playerid,"COLT45","colt45_fire_2hands",4.1,0,1,1,1,1);
		case 2: OnPlayAnim(playerid,"COLT45","colt45_reload",4.1,0,1,1,1,1);
		case 3: OnPlayAnim(playerid,"COLT45","sawnoff_reload",4.1,0,1,1,1,1);
		default: SendSyntaxMessage(playerid, "/colt [1-3]");
	}
	return 1;
}
CMD:climb(playerid)
{
	OnPlayAnim(playerid,"PED","CLIMB_jump",4.0,0,0,1,1,0);
	return 1;
}
CMD:tlean(playerid)
{
	OnPlayAnim(playerid,"PED","DRIVE_BOAT",4.0,0,0,1,1,0);
	return 1;
}
CMD:pushup(playerid)
{
	OnPlayAnim(playerid,"PED","getup_front",4.0,1,0,1,1,0);
	return 1;
}
CMD:protection(playerid)
{
	OnPlayAnim(playerid,"PED","FightShB",4.0,0,1,1,1,1);
	return 1;
}
CMD:swallow(playerid)
{
	OnPlayAnim(playerid,"PED","gum_eat",4.0,0,0,0,0,0);
	return 1;
}
CMD:stand(playerid)
{
	OnPlayAnim(playerid,"PED","IDLE_HBHB",3.0,0,1,1,1,0);
	return 1;
}
CMD:pullhand(playerid)
{
	OnPlayAnim(playerid,"PED","Jetpack_Idle",3.0,0,1,1,1,0);
	return 1;
}
CMD:nlook(playerid)
{
	OnPlayAnim(playerid,"PED","roadcross_gang",4.0,0,0,0,0,0);
	return 1;
}
CMD:extend(playerid)
{
	OnPlayAnim(playerid,"PED","Shove_Partial",4.1,0,1,1,1,1);
	return 1;
}
CMD:car(playerid,params[])
{
	if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid,COLOR_LIGHTRED,"?? ?????? ???????????? ?????? ???????? ?????? ???????? ? ??????????.");
	if(sscanf(params,"d",params[1]))
	{
		SendSyntaxMessage(playerid, "/car [1-11]");
		return 1;
	}
	switch(params[1])
	{
		case 1: ApplyAnimation(playerid,"LOWRIDER","lrgirl_bdbnce",4.1,0,1,1,1,0,1);
		case 2: ApplyAnimation(playerid,"LOWRIDER","lrgirl_hair",4.1,0,1,1,1,0,1);
		case 3: ApplyAnimation(playerid,"LOWRIDER","lrgirl_idle_to_l0",4.1,0,1,1,1,0,1);
		case 4: ApplyAnimation(playerid,"PED","Tap_hand",4.1,0,1,1,1,0,1);
		case 5: ApplyAnimation(playerid,"PED","Tap_handP",4.1,0,1,1,1,0,1);
		case 6: ApplyAnimation(playerid,"LOWRIDER","lrgirl_l12_to_l0",4.1,0,1,1,1,0,1);
		case 7: ApplyAnimation(playerid,"LOWRIDER","lrgirl_l2_to_l3",4.1,0,1,1,1,0,1);
		case 8: ApplyAnimation(playerid,"PED","CAR_LB",4.1,0,1,1,1,0,1);
		case 9: ApplyAnimation(playerid,"PED","CAR_sitp",4.1,0,1,1,1,0,1);
		case 10: ApplyAnimation(playerid,"PED","CAR_sitpLO",4.1,0,1,1,1,0,1);
		case 11: ApplyAnimation(playerid,"CAR_CHAT","carfone_loopA",4.1,1,1,1,1,0,1);
		default: SendSyntaxMessage(playerid, "/car [1-11]");
	}
	return 1;
}

CMD:repcar(playerid,params[])
{
	if(sscanf(params,"d",params[1]))
	{
		SendSyntaxMessage(playerid, "/repcar [1-2]");
		return 1;
	}
	switch(params[1])
	{
		case 1: OnPlayAnim(playerid,"CAR","Fixn_Car_Loop",3.0,0,1,1,1,0);
		case 2: OnPlayAnim(playerid,"CAR","Fixn_Car_Out",3.0,0,1,1,1,0);
		default: SendSyntaxMessage(playerid, "/repcar [1-2]");
	}
	return 1;
}

CMD:onehand(playerid)
{
	OnPlayAnim(playerid,"PED","CLIMB_jump2fall",4.1,0,1,1,1,0);
	return 1;
}
CMD:backwalk(playerid)
{
	OnPlayAnim(playerid,"PED","gas_cwr",4.1,1,1,1,1,1);
	return 1;
}
CMD:mirro(playerid)
{
	OnPlayAnim(playerid,"CLOTHES","CLO_Pose_Hat",4.1,0,1,1,1,0);
	return 1;
}
CMD:hips(playerid)
{
	OnPlayAnim(playerid,"COP_AMBIENT","Coplook_shake",4.1,0,1,1,1,0);
	return 1;
}
CMD:pullo(playerid)
{
	OnPlayAnim(playerid,"AIRPORT","thrw_barl_thrw",4.1,0,1,1,1,0);
	return 1;
}
CMD:rtake(playerid)
{
	OnPlayAnim(playerid,"BAR","Barserve_give",4.0,0,0,0,0,0);
	return 1;
}
CMD:obalance(playerid)
{
	OnPlayAnim(playerid,"BD_FIRE","BD_Panic_02",4.1,0,1,1,1,0);
	return 1;
}
CMD:wobalance(playerid)
{
	OnPlayAnim(playerid,"BD_FIRE","BD_Panic_03",4.1,0,1,1,1,0);
	return 1;
}
CMD:taction(playerid)
{
	OnPlayAnim(playerid,"BD_FIRE","wash_up",4.0,0,0,0,0,0);
	return 1;
}
CMD:catch(playerid)
{
	OnPlayAnim(playerid,"MD_CHASE","MD_HANG_Loop",4.1,0,1,1,1,0);
	return 1;
}
CMD:despair(playerid)
{
	OnPlayAnim(playerid,"BSKTBALL","BBALL_react_miss",4.0,0,0,0,0,0);
	return 1;
}
CMD:rooting(playerid)
{
	OnPlayAnim(playerid,"BSKTBALL","BBALL_react_score",4.1,1,1,1,1,0);
	return 1;
}
CMD:spyglass(playerid)
{
	OnPlayAnim(playerid,"CAMERA","picstnd_take",4.1,0,1,1,1,0);
	return 1;
}
CMD:looksky(playerid)
{
	OnPlayAnim(playerid,"ON_LOOKERS","lkup_loop",4.1,0,1,1,1,0);
	return 1;
}
CMD:show(playerid,params[])
{
	if(sscanf(params,"d",params[1]))
	{
		SendSyntaxMessage(playerid, "/show [1-3]");
		return 1;
	}
	switch(params[1])
	{
		case 1: OnPlayAnim(playerid,"ON_LOOKERS","panic_point",4.1,0,1,1,1,0);
		case 2: OnPlayAnim(playerid,"ON_LOOKERS","panic_shout",4.1,0,1,1,1,0);
		case 3: OnPlayAnim(playerid,"ON_LOOKERS","point_loop",4.1,0,1,1,1,0);
		default: SendSyntaxMessage(playerid, "/show [1-3]");
	}
	return 1;
}
CMD:sh(playerid)
{
	OnPlayAnim(playerid,"ON_LOOKERS","shout_in",4.0,0,0,0,0,0);
	return 1;
}
CMD:crossfingers(playerid)
{
	OnPlayAnim(playerid,"CASINO","cards_loop",4.1,0,1,1,1,0);
	return 1;
}
CMD:delight(playerid)
{
	OnPlayAnim(playerid,"CASINO","manwinb",4.0,0,0,0,0,0);
	return 1;
}
CMD:hdelight(playerid)
{
	OnPlayAnim(playerid,"CASINO","manwind",4.0,0,0,0,0,0);
	return 1;
}
CMD:showtable(playerid)
{
	OnPlayAnim(playerid,"CASINO","Roulette_bet",4.1,0,1,1,1,0);
	return 1;
}
CMD:tfacepalm(playerid)
{
	OnPlayAnim(playerid,"CASINO","Roulette_lose",4.1,0,1,1,1,0);
	return 1;
}
CMD:tpull(playerid)
{
	OnPlayAnim(playerid,"CASINO","Slot_in",4.1,0,1,1,1,0);
	return 1;
}
CMD:fail(playerid)
{
	OnPlayAnim(playerid,"CASINO","Slot_lose_out",4.0,0,0,0,0,0);
	return 1;
}
CMD:joy(playerid)
{
	OnPlayAnim(playerid,"CASINO","Slot_win_out",4.0,0,0,0,0,0);
	return 1;
}
CMD:wear(playerid)
{
	OnPlayAnim(playerid,"CARRY","crry_prtial",4.1,0,1,1,1,1);
	return 1;
}
CMD:fsit(playerid)
{
	OnPlayAnim(playerid,"JST_BUISNESS","girl_02",4.1,0,1,1,1,0);
	return 1;
}
CMD:crushjump(playerid)
{
	OnPlayAnim(playerid,"DODGE","Crush_Jump",4.1,0,1,1,1,0);
	return 1;
}
CMD:scatch(playerid)
{
	OnPlayAnim(playerid,"FINALE","FIN_LegsUp_Loop",4.1,0,1,1,1,0);
	return 1;
}
CMD:lookfloor(playerid)
{
	OnPlayAnim(playerid,"FINALE","FIN_Cop1_Loop",4.1,0,1,1,1,0);
	return 1;
}
CMD:tramplefloor(playerid)
{
	OnPlayAnim(playerid,"FINALE","FIN_Cop1_Stomp",4.1,1,1,1,1,0);
	return 1;
}
CMD:swing(playerid)
{
	OnPlayAnim(playerid,"Freeweights","gym_free_B",4.1,0,1,1,1,0);
	return 1;
}
CMD:nbp(playerid)
{
	OnPlayAnim(playerid,"Freeweights","gym_free_celebrate",4.0,0,0,0,0,0);
	return 1;
}
CMD:takehead(playerid)
{
	OnPlayAnim(playerid,"HAIRCUTS","BRB_Cut",4.1,0,1,1,1,0);
	return 1;
}
CMD:readtable(playerid)
{
	OnPlayAnim(playerid,"SCRATCHING","sclng_r",4.1,0,1,1,1,0);
	return 1;
}
CMD:squat(playerid)
{
	OnPlayAnim(playerid,"TEC","TEC_crouchfire",4.1,0,1,1,1,0);
	return 1;
}
CMD:sprawl(playerid)
{
	OnPlayAnim(playerid,"TATTOOS","TAT_Idle_Loop_T",4.1,0,1,1,1,0);
	return 1;
}
CMD:throwmoney(playerid)
{
	OnPlayAnim(playerid,"STRIP","PUN_CASH",4.0,0,0,0,0,0);
	return 1;
}

CMD:faim(playerid)
{
	OnPlayAnim(playerid,"SWORD","sword_IDLE",4.1,0,1,1,1,0);
	return 1;
}

CMD:swingback(playerid)
{
	OnPlayAnim(playerid,"PED","getup",4.1, 0, 1, 1, 1, 0);
	return 1;
}
CMD:hands(playerid,params[])
{
	if(sscanf(params,"d",params[1]))
	{
		SendSyntaxMessage(playerid, "/hands [1-7]");
		return 1;
	}
	switch(params[1])
	{
		case 1: OnPlayAnim(playerid,"LOWRIDER","prtial_gngtlkB",4.1,0,1,1,1,1);
		case 2: OnPlayAnim(playerid,"LOWRIDER","prtial_gngtlkC",4.1,0,1,1,1,1);
		case 3: OnPlayAnim(playerid,"LOWRIDER","prtial_gngtlkD",4.1,0,1,1,1,1);
		case 4: OnPlayAnim(playerid,"LOWRIDER","prtial_gngtlkE",4.1,0,1,1,1,1);
		case 5: OnPlayAnim(playerid,"LOWRIDER","prtial_gngtlkF",4.1,0,1,1,1,1);
		case 6: OnPlayAnim(playerid,"LOWRIDER","prtial_gngtlkG",4.1,0,1,1,1,1);
		case 7: OnPlayAnim(playerid,"LOWRIDER","prtial_gngtlkH",4.1,0,1,1,1,1);
		default: SendSyntaxMessage(playerid, "/hands [1-7]");
	}
	return 1;
}
CMD:cellin(playerid)
{
	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
	return 1;
}

CMD:cellout(playerid)
{
	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
	return 1;
}

CMD:drunk(playerid)
{
	OnPlayAnim(playerid,"PED","WALK_DRUNK",4.1,1,1,1,1,1);
	return 1;
}
CMD:kicking(playerid)
{
	OnPlayAnim(playerid,"GANGS","shake_carK",4.0,0,0,0,0,0);
	return 1;
}
// Place a Bomb
CMD:bomb(playerid)
{
	ClearAnimations(playerid);
	OnPlayAnim(playerid, "BOMBER","BOM_Plant",4.0,0,0,0,0,0);
	return 1;
}
//=====================Animations=====================//
CMD:setstyle(playerid, params[])
{
	new option,
		secoption;

	if(sscanf(params,"iI(-1)", option, secoption))
		return SendSyntaxMessage(playerid, "/setstyle (1 - ????? ??????(/walk) | 2 - ????? ????????? | 3 - ????? ??? | 4 - ????? HUD)");

	if(option == 1)
	{
		new style;
		if(sscanf(params,"{d}d",style))
		{
			SendSyntaxMessage(playerid, "/setstyle 1 [????? ??????]");
			SCM(playerid, COLOR_WHITE, "????? ??????: 0 - ????????? ???????, 1, 2, 3, 4, 5, 6, 7, 8, 9");
			SCM(playerid, COLOR_WHITE, "????? ??????: 10, 11, 12, 13, 14, 15, 16, 17");
			return 1;
		}

		if(style < 0 || style > 17)
			return SCM(playerid, COLOR_LIGHTRED, "???????? ?????? ?? 0 ?? 17.");

		PlayerInfo[playerid][pWalk] = style;

		if (0 == style)
			SendClientMessage(playerid, COLOR_INFO, "?? ????????? ????? ???????.");
		else
			SendClientMessageEx(playerid, COLOR_INFO, "????? ??????? ??????? ?? #%i.", style);

		return 1;
	}
	else if(option == 2)
	{
		new style;
		if(sscanf(params,"{d}d",style))
		{
			SendSyntaxMessage(playerid, "/setstyle [????? ?????????]");
			SCM(playerid, COLOR_WHITE, "????? ?????????: 0 - ????????? ????????, 1, 2, 3, 4, 5, 6, 7, 8, 9.");
			return 1;
		}

		if(style < 0 || style > 9)
			return SCM(playerid, COLOR_LIGHTRED, "???????? ?????? ?? 0 ?? 9.");

		PlayerInfo[playerid][pTalk] = style;

		if (0 == style)
			SendClientMessage(playerid, COLOR_INFO, "?? ????????? ???????? ??? ?????????.");
		else
			SendClientMessageEx(playerid, COLOR_INFO, "????? ????????? ??????? ?? #%i.", style);

		return 1;
	}
	else if(option == 3)
	{
	    if(PlayerInfo[playerid][pPremium] < 1)
	        return SCM(playerid, COLOR_LIGHTRED, "???????? ????? ??? ????? ?????? ??? ??????? ??????? ????????.");

		new style;
		if(sscanf(params,"{i}i",style))
		{
			SendSyntaxMessage(playerid, "/setstyle [????? ???]");
			SCM(playerid, COLOR_WHITE, "????? ???: 1 - ???????, 2 - boxing, 3 - kungfu, 4 - kneehead, 5 - grabkick.");
			return 1;
		}

		if(style < 1 || style > 5)
			return SCM(playerid, COLOR_LIGHTRED, "???????? ?????? ?? 1 ?? 5.");

        SetPlayerFightingStyle(playerid, fight_id[style-1]);
        PlayerInfo[playerid][pFightStyle] = fight_id[style-1];

		SendClientMessageEx(playerid, COLOR_INFO, "?? ?????????? ????? ???: %s.", fight_name[style-1]);
		return 1;
	}
	else if(option == 4)
	{
	    if(PlayerInfo[playerid][pPremium] < 1)
			return SCM(playerid, COLOR_LIGHTRED, "???????? HUD ????? ?????? ??? ??????? ??????? ????????.");

		new style;
		if(sscanf(params,"{d}d",style))
		{
			SendSyntaxMessage(playerid, "/setstyle [????? HUD]");
			SCM(playerid, COLOR_WHITE, "?????: 1, 2, 3, 4.");
			return 1;
		}

		if(style < 1 || style > 4)
			return SCM(playerid, COLOR_LIGHTRED, "???????? ?????? ?? 1 ?? 4.");

        PlayerInfo[playerid][pHud] = style;
        HideRadioTextDraw(playerid);

        if(!(PlayerInfo[playerid][pSettings] & togHUD))
            ShowRadioTextDraw(playerid);
	}
	return 1;
}

CMD:meal(playerid, params[])
{
	if(isnull(params))
	{
		SendSyntaxMessage(playerid, "/meal [????????]");
		SCM(playerid, COLOR_LIGHTRED,"/meal order {FFFFFF}- ??????? ???? ? ???????.");
		SCM(playerid, COLOR_LIGHTRED,"/meal place {FFFFFF}- ?????????? ????? ?? ?????.");
		SCM(playerid, COLOR_LIGHTRED,"/meal pickup {FFFFFF}- ????????? ?????? ? ?????? ?? ?????.");
		SCM(playerid, COLOR_LIGHTRED,"/meal throw {FFFFFF}- ????????? ?????? ? ??????.");
		SCM(playerid, COLOR_LIGHTRED,"/meal config {FFFFFF}- ???????????? ???? ??? ?????????.");
		return 1;
	}

	if(CompareStrings(params, "order"))
	{
	    new bizid;

		if ((bizid = GetNearBizInside(playerid)) == -1)
  			return SendErrorMessage(playerid, "?? ?????? ?????????? ?????? ???????.");

		if (BizInfo[bizid][bizType] != BIZ_PIZZA && BizInfo[bizid][bizType] != BIZ_CLUCKIN && BizInfo[bizid][bizType] != BIZ_BURGER && BizInfo[bizid][bizType] != BIZ_DONUT)
		    return SendErrorMessage(playerid, "?? ?? ?????????? ? ?????????.");

		for(new i; i != 4; i++)
		    TextDrawShowForPlayer(playerid, TD_restaurant[i]);

		new mes[128],
			type = BizInfo[bizid][bizType] - BIZ_PIZZA;

		for(new i; i != max_product[type]; i++)
		{
		    format(mes, sizeof(mes), "%s~n~~r~Health: +%i~n~~r~Removes hunger~n~~p~Price: $%i~n~", name_order[type][i], 30 + (i * 10), BizInfo[bizid][bizProductPrice][i]);
			PlayerTextDrawSetString(playerid, TD_restaurant_prod[playerid][i], mes);
			PlayerTextDrawShow(playerid, TD_restaurant_prod[playerid][i]);
            PlayerTextDrawSetPreviewModel(playerid, TD_restaurant_prod[playerid][i + 4], model_order[type][i]);
            PlayerTextDrawShow(playerid, TD_restaurant_prod[playerid][i + 4]);
		}
		SelectTextDraw(playerid, 0x00cb77FF);
		SetPVarInt(playerid, #restaurant, 1);
		return 1;
	}
	else if(CompareStrings(params, "place"))
	{
        if(pTemp[playerid][pFoodStand] == 0)
			return SCM(playerid, COLOR_LIGHTRED,"? ??? ??? ? ????? ???????.");

		new dropid = -1;
        for(new i; i != MAX_FOOD_DROPS; i++)
        {
            if(FoodDrop[i][foodDropped] != 0)
                continue;

			dropid = i;
			break;
		}

		if(dropid == -1)
		    return SendErrorMessage(playerid, "?????????? ???????????? ?????????? ???????? ? ????.");

        RemovePlayerAttachedObject(playerid, ATTACH_HANDS);
        GetXYInFrontOfPlayer(playerid, FoodDrop[dropid][foodPosX], FoodDrop[dropid][foodPosY], FoodDrop[dropid][foodPosZ], 0.5);
		FoodDrop[dropid][foodPosZ] -= 0.1;
		FoodDrop[dropid][foodInt] = GetInterior(playerid);
		FoodDrop[dropid][foodVW] = GetWorld(playerid);
		FoodDrop[dropid][foodModel] = pTemp[playerid][pFoodStand];

  		FoodDrop[dropid][foodObject] =
			CreateDynamicObject(pTemp[playerid][pFoodStand], FoodDrop[dropid][foodPosX], FoodDrop[dropid][foodPosY], FoodDrop[dropid][foodPosZ], -25.300008, 23.200012, -16.699985, GetWorld(playerid), GetInterior(playerid));

		EditDynamicObject(playerid, FoodDrop[dropid][foodObject]);
		SetPVarInt(playerid, #edit_food, dropid+1);

        FoodDrop[dropid][foodDropped] = 1;
        FoodDrop[dropid][foodTime] = 15;

		OnPlayAnim(playerid,"CASINO","cards_win",4.1,0,0,0,0,0);
		pTemp[playerid][pFoodStand] = 0;

		SendSyntaxMessage(playerid, "?? ???????????? ??????? ???????. ??????? \"??????\" - ??????? ??????.");
		return 1;
	}
	else if(CompareStrings(params, "pickup"))
	{
	    if(pTemp[playerid][pFoodStand] != 0 || IsPlayerAttachedObjectSlotUsed(playerid, ATTACH_HANDS))
        	return SendErrorMessage(playerid, "???? ???? ??? ??????.");

		new dropid = DropFood_Nearest(playerid);
		if(dropid == -1)
			return SCM(playerid, COLOR_LIGHTRED, "????? ? ???? ??? ???????.");

		OnPlayAnim(playerid,"CARRY","crry_prtial",4.1,1,1,1,1,1);
		SetPlayerAttachedObject(playerid, ATTACH_HANDS, FoodDrop[dropid][foodModel], 5, 0.091998, 0.021999, 0.409, -104.9, 27.6, 0, 1, 1, 1);
        pTemp[playerid][pFoodStand] = FoodDrop[dropid][foodModel];

        FoodDrop[dropid][foodModel] = 0;
        FoodDrop[dropid][foodDropped] = 0;

        if(IsValidDynamicObject(FoodDrop[dropid][foodObject]))
            DestroyDynamicObject(FoodDrop[dropid][foodObject]);
		return 1;
	}
	else if(CompareStrings(params, "throw"))
	{
		if(pTemp[playerid][pFoodStand] == 0)
			return SCM(playerid, COLOR_LIGHTRED, "? ??? ??? ??????? ? ?????.");

		OnPlayAnim(playerid,"CASINO","cards_win",4.1,0,0,0,0,0);
		RemovePlayerAttachedObject(playerid, ATTACH_HANDS);
		pTemp[playerid][pFoodStand] = 0;
		return 1;
	}
	else if(CompareStrings(params, "config"))
	{
        new bizid;

		if ((bizid = GetNearBizInside(playerid)) == -1)
  			return SendErrorMessage(playerid, "?? ?????? ?????????? ?????? ?????? ???????.");

		if(BizInfo[bizid][bizOwnerID] != PlayerInfo[playerid][pID])
		    return SendErrorMessage(playerid, "?????? ?????? ?? ??????????? ???.");

		new mes[256];
		if(BizInfo[bizid][bizType] == BIZ_PIZZA)
		{
			format(mes, sizeof(mes), "{FFFFFF}???????? ???? ???????? #1 {AFAFAF}[Buster, $%i]\n{FFFFFF}???????? ???? ???????? #2 {AFAFAF}[Double D-Luxe, $%i]\n{FFFFFF}???????? ???? ???????? #3 {AFAFAF}[Full Rack, $%i]\n{FFFFFF}???????? ???? ???????? #4 {AFAFAF}[Salad Meal, $%i]",BizInfo[bizid][bizProductPrice][0],BizInfo[bizid][bizProductPrice][1],BizInfo[bizid][bizProductPrice][2],BizInfo[bizid][bizProductPrice][3]);
			Dialog_Show(playerid, ConfingPizza, DIALOG_STYLE_LIST, "{9ACD32}???????????? ?????????", mes, "???????", "?????");
		}
		if(BizInfo[bizid][bizType] == BIZ_CLUCKIN)
		{
			format(mes, sizeof(mes), "{FFFFFF}???????? ???? ???????? #1 {AFAFAF}[Clukin' Little Meal, $%i]\n{FFFFFF}???????? ???? ???????? #2 {AFAFAF}[Clukin' Big Meal, $%i]\n{FFFFFF}???????? ???? ???????? #3 {AFAFAF}[Clukin' Huge Meal, $%i]\n{FFFFFF}???????? ???? ???????? #4 {AFAFAF}[Salad Meal, $%i]",BizInfo[bizid][bizProductPrice][0],BizInfo[bizid][bizProductPrice][1],BizInfo[bizid][bizProductPrice][2],BizInfo[bizid][bizProductPrice][3]);
			Dialog_Show(playerid, ConfingCluckin, DIALOG_STYLE_LIST, "{9ACD32}???????????? ?????????", mes, "???????", "?????");
		}
		if(BizInfo[bizid][bizType] == BIZ_BURGER)
		{
			format(mes, sizeof(mes), "{FFFFFF}???????? ???? ???????? #1 {AFAFAF}[Moo Kids Meal, $%i]\n{FFFFFF}???????? ???? ???????? #2 {AFAFAF}[Beef Tower, $%i]\n{FFFFFF}???????? ???? ???????? #3 {AFAFAF}[Meat Stack, $%i]\n{FFFFFF}???????? ???? ???????? #4 {AFAFAF}[Salad Meal, $%i]",BizInfo[bizid][bizProductPrice][0],BizInfo[bizid][bizProductPrice][1],BizInfo[bizid][bizProductPrice][2],BizInfo[bizid][bizProductPrice][3]);
			Dialog_Show(playerid, ConfingBurger, DIALOG_STYLE_LIST, "{9ACD32}???????????? ?????????", mes, "???????", "?????");
		}
		if(BizInfo[bizid][bizType] == BIZ_DONUT)
		{
			format(mes, sizeof(mes), "{FFFFFF}???????? ???? ???????? #1 {AFAFAF}[Small portion, $%i]\n{FFFFFF}???????? ???? ???????? #2 {AFAFAF}[Medium portion, $%i]\n{FFFFFF}???????? ???? ???????? #3 {AFAFAF}[Large portion, $%i]",BizInfo[bizid][bizProductPrice][0],BizInfo[bizid][bizProductPrice][1],BizInfo[bizid][bizProductPrice][2]);
			Dialog_Show(playerid, ConfingPonchik, DIALOG_STYLE_LIST, "{9ACD32}???????????? ?????????", mes, "???????", "?????");
		}
		return 1;
	}
	else SendSyntaxMessage(playerid, "/meal [order/place/pickup/throw/config]");

	return 1;
}

CMD:buydrugs(playerid, params[])
{
	new faction = PlayerInfo[playerid][pFaction];
	if(PlayerInfo[playerid][pFaction] == 0)
	    return SendErrorMessage(playerid, "?? ?? ????????? ?????????? ??????????? ???????.");

	if(PlayerInfo[playerid][pSideJob] != JOB_DRUGDEALER)
	    return SendErrorMessage(playerid, "? ??? ??????????? ?????? ? ??????? ??????????.");

	if(Factions[faction][fType] != FACTION_GANG && Factions[faction][fType] != FACTION_MAFIA)
		return 1;

	if(!PlayerToPoint(2.0, playerid, 2705.23, -2550.89, 13.634))
	{
	    Waypoint_Set(playerid, 2705.23, -2550.89, 13.634);
	    return SendErrorMessage(playerid, "?? ?????? ?????????? ? ?????.");
	}

    Dialog_Show(playerid, BuyDrugs, DIALOG_STYLE_TABLIST, "??????? ??????????", "?????? ?????????\t50$ ?? ??.\n\
	???\t150$ ?? ?????.\n\
	??????\t100$ ?? ?????.\n\
	??????\t200$ ?? ?????.\n\
	???????\t50$ ?? ??.", "??????", "??????");
	return 1;
}

Dialog:BuyDrugs(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return 1;

	new drug_list_name[][] = {"?????? ?????????", "???", "??????", "??????", "???????"},
	    drug_list_price[] = {50, 150, 100, 200, 50};

	static const str_size[] = "{FFFFFF}?? ?????? ?????????? %s $%i ?? 1 ?????.\n????????? ?????????? ??? ????????????: 1 - 1000:";
	new mes[sizeof(str_size) - 4 + 7 + 3 + 1];
	format(mes, sizeof(mes), str_size, drug_list_name[listitem], drug_list_price[listitem]);
    Dialog_Show(playerid, BuyDrugsAccept, DIALOG_STYLE_INPUT, "??????? ??????????", mes, "???????", "??????");
    SetPVarInt(playerid, #select_law, listitem);
	return 1;
}

Dialog:BuyDrugsAccept(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return cmd::buydrugs(playerid, "");

	new amount = strval(inputtext);
	listitem = GetPVarInt(playerid, #select_law);
	if(amount < 0 || amount > 1000)
	    return SendErrorMessage(playerid, "???????? ?????????? ??????????: 1 - 1000.");

    new faction = PlayerInfo[playerid][pFaction];
	if(PlayerInfo[playerid][pFaction] == 0)
	    return SendErrorMessage(playerid, "?? ?? ????????? ?????????? ??????????? ???????.");

	if(PlayerInfo[playerid][pSideJob] != JOB_DRUGDEALER)
	    return SendErrorMessage(playerid, "? ??? ??????????? ?????? ? ??????? ??????????.");

	if(Factions[faction][fType] != FACTION_GANG && Factions[faction][fType] != FACTION_MAFIA)
		return 1;

    if(!PlayerToPoint(2.0, playerid, 2705.23, -2550.89, 13.634))
	{
	    Waypoint_Set(playerid, 2705.23, -2550.89, 13.634);
	    return SendErrorMessage(playerid, "?? ?????? ?????????? ? ?????.");
	}

	new drug_list[] = {INV_SEED_GANJA, INV_LSD, INV_HEROIN, INV_COCAINE, INV_EPHEDRINE},
	   	drug_price[] = {50, 150, 100, 200, 50};

	if(GetCash(playerid) < drug_price[listitem] * amount)
	    return SendNotCash(playerid);

	if(GivePlayerItem(playerid, drug_list[listitem], amount) == -1)
		return SendErrorMessage(playerid, "? ????????? ??? ?????.");

	SendClientMessageEx(playerid, COLOR_GREEN, "?? ????????? %i ????? %s ?? $%i. (????????? ? ?????????)", amount, inventory_items[drug_list[listitem]][itemName], drug_price[listitem] * amount);
	GiveCash(playerid, -drug_price[listitem] * amount);
	return 1;
}

CMD:buygun(playerid, params[])
{
    new bizid = -1;
	if((bizid = GetNearBizInside(playerid)) != -1 && BizInfo[bizid][bizType] == BIZ_AMMO)
	{
	    BuyGunMenu(playerid);
		return 1;
	}

	new faction = PlayerInfo[playerid][pFaction];
	if(PlayerInfo[playerid][pFaction] == 0)
	    return SendErrorMessage(playerid, "?? ?? ????????? ?????????? ??????????? ???????.");

	if(PlayerInfo[playerid][pSideJob] != JOB_GUNDEALER)
	    return SendErrorMessage(playerid, "? ??? ??????????? ?????? ? ??????? ??????.");

	if(Factions[faction][fType] != FACTION_GANG && Factions[faction][fType] != FACTION_MAFIA)
		return 1;

	if(!PlayerToPoint(2.0, playerid, 2705.23, -2550.89, 13.634))
	{
	    Waypoint_Set(playerid, 2705.23, -2550.89, 13.634);
	    return SendErrorMessage(playerid, "?? ?????? ?????????? ? ?????.");
	}

	new title[56];
	format(title, sizeof(title), "?? ????? ????? ??????? - %i ?????.", Factions[faction][fPoint]);
	Dialog_Show(playerid, BuyGunMain, DIALOG_STYLE_LIST, title, "- ??????\n- ???????", "???????", "??????");
	return 1;
}

Dialog:BuyAmmoLaw(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return cmd::buygun(playerid, "");

    new faction = PlayerInfo[playerid][pFaction],
        ammo = (listitem + 1) * 100,
        price = (listitem + 1) * 400;

	if(PlayerInfo[playerid][pFaction] == 0)
	    return SendErrorMessage(playerid, "?? ?? ????????? ?????????? ??????????? ???????.");

	if(PlayerInfo[playerid][pSideJob] != JOB_GUNDEALER)
	    return SendErrorMessage(playerid, "? ??? ??????????? ?????? ? ??????? ??????.");

	if(Factions[faction][fType] != FACTION_GANG && Factions[faction][fType] != FACTION_MAFIA)
		return 1;

    if(!PlayerToPoint(2.0, playerid, 2705.23, -2550.89, 13.634))
	{
	    Waypoint_Set(playerid, 2705.23, -2550.89, 13.634);
	    return SendErrorMessage(playerid, "?? ?????? ?????????? ? ?????.");
	}

    if(Factions[faction][fPoint]- (listitem+1) < 0)
    	return SendErrorMessage(playerid, "? ????? ??????? ?? ??????? ????? ??? ???????.");

	if(GetCash(playerid) < price)
	    return SendNotCash(playerid);

    if(GivePlayerItem(playerid, INV_AMMO, ammo) == -1)
		return SendErrorMessage(playerid, "? ????????? ??? ?????.");

	Factions[faction][fPoint] -= (listitem+1);
 	set_faction_int(faction, "point", Factions[faction][fPoint]);
	GiveCash(playerid, -price);

	SendClientMessageEx(playerid, COLOR_GREEN, "?? ????????? %i ??????(-?/-??) (????????? ? ?????????)", ammo);
	return 1;
}

Dialog:BuyGunLaw(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return cmd::buygun(playerid, "");

    new faction = PlayerInfo[playerid][pFaction];
	if(PlayerInfo[playerid][pFaction] == 0)
	    return SendErrorMessage(playerid, "?? ?? ????????? ?????????? ??????????? ???????.");

	if(PlayerInfo[playerid][pSideJob] != JOB_GUNDEALER)
	    return SendErrorMessage(playerid, "? ??? ??????????? ?????? ? ??????? ??????.");

	if(Factions[faction][fType] != FACTION_GANG && Factions[faction][fType] != FACTION_MAFIA)
		return 1;

	if(Factions[faction][fType] == FACTION_MAFIA)
	{
		new gun_list[] = {24, 22, 23, 25, 26, 27, 28, 32, 29, 30, 31, 33, 16, 18, INV_OPTICS, INV_SILENCER, INV_TOOLS},
	    	gun_point[] = {3, 3, 3, 4, 4, 4, 5, 5, 5, 7, 7, 10, 10, 4, 2, 2, 1},
	    	gun_price[] = {1800, 1000, 1500, 2400, 2100, 4000, 2000, 2500, 2800, 3500, 4300, 3800, 1000, 300, 1700, 500, 300},
	    	gun_ammo[] = {50, 50, 50, 30, 30, 30, 120, 120, 120, 150, 150, 15, 1, 1, 1, 1, 1};

        if(Factions[faction][fPoint]-gun_point[listitem] < 0)
		    return SendErrorMessage(playerid, "? ????? ??????? ?? ??????? ????? ??? ???????.");

        if(ValidWeaponForInventory(gun_list[listitem]) && PlayerInfo[playerid][pWeap][GetWeapSlot(gun_list[listitem])] != 0)
		    return SendErrorMessage(playerid, "? ??? ??? ???? ?????? ? ?????? ?????.");

		new mes[256];
		if(ValidWeaponForInventory(gun_list[listitem]))
		{
			format(mes, sizeof(mes), "{FFFFFF}?? ??????? ??? ?????? ?????????? %s ? %i ???????? ? ???? ?? %i ????? ? $%i?\n? ????? ??????? ????????? %i ?????????? ?????.",
			inventory_items[gun_list[listitem]][itemName], gun_ammo[listitem], gun_point[listitem], gun_price[listitem], Factions[faction][fPoint]-gun_point[listitem]);
		}
		else
		{
			format(mes, sizeof(mes), "{FFFFFF}?? ??????? ??? ?????? ?????????? %s ?? %i ????? ? $%i?\n? ????? ??????? ????????? %i ?????????? ?????.",
			inventory_items[gun_list[listitem]][itemName], gun_point[listitem], gun_price[listitem], Factions[faction][fPoint]-gun_point[listitem]);
		}
    	Dialog_Show(playerid, BuyGunAccept, DIALOG_STYLE_MSGBOX, "??????? ??????", mes, "??????", "?????");
	}
	else if(Factions[faction][fType] == FACTION_GANG)
	{
		new gun_list[] = {24, 22, 25, 26, 28, 32, 18, INV_TOOLS},
	    	gun_point[] = {3, 3, 4, 4, 5, 5, 4, 1},
	    	gun_price[] = {1800, 1000, 2400, 2100, 2000, 2500, 300, 300},
	    	gun_ammo[] = {50, 50, 30, 30, 120, 120, 1, 1};

        if(Factions[faction][fPoint]-gun_point[listitem] < 0)
		    return SendErrorMessage(playerid, "? ????? ??????? ?? ??????? ????? ??? ???????.");

        if(ValidWeaponForInventory(gun_list[listitem]) && PlayerInfo[playerid][pWeap][GetWeapSlot(gun_list[listitem])] != 0)
		    return SendErrorMessage(playerid, "? ??? ??? ???? ?????? ? ?????? ?????.");

		new mes[256];
		if(ValidWeaponForInventory(gun_list[listitem]))
		{
			format(mes, sizeof(mes), "{FFFFFF}?? ??????? ??? ?????? ?????????? %s ? %i ???????? ? ???? ?? %i ????? ? $%i?\n? ????? ??????? ????????? %i ?????????? ?????.",
			inventory_items[gun_list[listitem]][itemName], gun_ammo[listitem], gun_point[listitem], gun_price[listitem], Factions[faction][fPoint]-gun_point[listitem]);
		}
		else
		{
			format(mes, sizeof(mes), "{FFFFFF}?? ??????? ??? ?????? ?????????? %s ?? %i ????? ? $%i?\n? ????? ??????? ????????? %i ?????????? ?????.",
			inventory_items[gun_list[listitem]][itemName], gun_point[listitem], gun_price[listitem], Factions[faction][fPoint]-gun_point[listitem]);
		}
    	Dialog_Show(playerid, BuyGunAccept, DIALOG_STYLE_MSGBOX, "??????? ??????", mes, "??????", "?????");
	}
	SetPVarInt(playerid, #select_law, listitem);
	return 1;
}

Dialog:BuyGunAccept(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return cmd::buygun(playerid, "");

	listitem = GetPVarInt(playerid, #select_law);

    new faction = PlayerInfo[playerid][pFaction];
	if(PlayerInfo[playerid][pFaction] == 0)
	    return SendErrorMessage(playerid, "?? ?? ????????? ?????????? ??????????? ???????.");

	if(PlayerInfo[playerid][pSideJob] != JOB_GUNDEALER)
	    return SendErrorMessage(playerid, "? ??? ??????????? ?????? ? ??????? ??????.");

	if(Factions[faction][fType] != FACTION_GANG && Factions[faction][fType] != FACTION_MAFIA)
		return 1;

    if(!PlayerToPoint(2.0, playerid, 2705.23, -2550.89, 13.634))
	{
	    Waypoint_Set(playerid, 2705.23, -2550.89, 13.634);
	    return SendErrorMessage(playerid, "?? ?????? ?????????? ? ?????.");
	}

	if(Factions[faction][fType] == FACTION_MAFIA)
	{
		new gun_list[] = {24, 22, 23, 25, 26, 27, 28, 32, 29, 30, 31, 33, 16, 18, INV_OPTICS, INV_SILENCER, INV_TOOLS},
	    	gun_point[] = {3, 3, 3, 4, 4, 4, 5, 5, 5, 7, 7, 10, 10, 4, 2, 2, 1},
	    	gun_price[] = {1800, 1000, 1500, 2400, 2100, 4000, 2000, 2500, 2800, 3500, 4300, 3800, 1000, 300, 1700, 500, 300},
	    	gun_ammo[] = {50, 50, 50, 30, 30, 30, 120, 120, 120, 150, 150, 15, 1, 1, 1, 1, 1};

		if(Factions[faction][fPoint]-gun_point[listitem] < 0)
		    return SendErrorMessage(playerid, "? ????? ??????? ?? ??????? ????? ??? ???????.");

		if(GetCash(playerid) < gun_price[listitem])
		    return SendNotCash(playerid);

        if(ValidWeaponForInventory(gun_list[listitem]) && PlayerInfo[playerid][pWeap][GetWeapSlot(gun_list[listitem])] != 0)
		    return SendErrorMessage(playerid, "? ??? ??? ???? ?????? ? ?????? ?????.");

		if(ValidWeaponForInventory(gun_list[listitem]))
		{
		    ac_GivePlayerWeapon(playerid, gun_list[listitem], gun_ammo[listitem]);
		    SendClientMessageEx(playerid, COLOR_GREEN, "?? ????????? %s ? %i ??????(-?/-??) ? ????.", inventory_items[gun_list[listitem]][itemName], gun_ammo[listitem]);
		}
		else
		{
        	if(GivePlayerItem(playerid, gun_list[listitem], gun_ammo[listitem]) == -1)
				return SendErrorMessage(playerid, "? ????????? ??? ?????.");

			SendClientMessageEx(playerid, COLOR_GREEN, "?? ????????? %s.", inventory_items[gun_list[listitem]][itemName], gun_ammo[listitem]);
		}
        Factions[faction][fPoint] -= gun_point[listitem];
        set_faction_int(faction, "point", Factions[faction][fPoint]);
		GiveCash(playerid, -gun_price[listitem]);
	}
	else if(Factions[faction][fType] == FACTION_GANG)
	{
  		new gun_list[] = {24, 22, 25, 26, 28, 32, 18, INV_TOOLS},
	    	gun_point[] = {3, 3, 4, 4, 5, 5, 4, 1},
	    	gun_price[] = {1800, 1000, 2400, 2100, 2000, 2500, 300, 300},
	    	gun_ammo[] = {50, 50, 30, 30, 120, 120, 1, 1};

		if(Factions[faction][fPoint]-gun_point[listitem] < 0)
		    return SendErrorMessage(playerid, "? ????? ??????? ?? ??????? ????? ??? ???????.");

		if(GetCash(playerid) < gun_price[listitem])
		    return SendNotCash(playerid);

        if(ValidWeaponForInventory(gun_list[listitem]) && PlayerInfo[playerid][pWeap][GetWeapSlot(gun_list[listitem])] != 0)
		    return SendErrorMessage(playerid, "? ??? ??? ???? ?????? ? ?????? ?????.");

		if(ValidWeaponForInventory(gun_list[listitem]))
		{
		    ac_GivePlayerWeapon(playerid, gun_list[listitem], gun_ammo[listitem]);
		    SendClientMessageEx(playerid, COLOR_GREEN, "?? ????????? %s ? %i ??????(-?/-??) ? ????.", inventory_items[gun_list[listitem]][itemName], gun_ammo[listitem]);
		}
		else
		{
        	if(GivePlayerItem(playerid, gun_list[listitem], gun_ammo[listitem]) == -1)
				return SendErrorMessage(playerid, "? ????????? ??? ?????.");

			SendClientMessageEx(playerid, COLOR_GREEN, "?? ????????? %s.", inventory_items[gun_list[listitem]][itemName], gun_ammo[listitem]);
		}
        Factions[faction][fPoint] -= gun_point[listitem];
        set_faction_int(faction, "point", Factions[faction][fPoint]);
		GiveCash(playerid, -gun_price[listitem]);
	}
	return 1;
}

Dialog:BuyGunMain(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return 1;

    new faction = PlayerInfo[playerid][pFaction];
	if(PlayerInfo[playerid][pFaction] == 0)
	    return SendErrorMessage(playerid, "?? ?? ????????? ?????????? ??????????? ???????.");

	if(PlayerInfo[playerid][pSideJob] != JOB_GUNDEALER)
	    return SendErrorMessage(playerid, "? ??? ??????????? ?????? ? ??????? ??????.");

	if(Factions[faction][fType] != FACTION_GANG && Factions[faction][fType] != FACTION_MAFIA)
		return 1;


    new title[56];
	format(title, sizeof(title), "?? ????? ????? ??????? - %i ?????.", Factions[faction][fPoint]);

	if(listitem == 0)
	{
	    if(Factions[faction][fType] == FACTION_MAFIA)
		{
			new mes[481] = "\
			Desert Eagle\t-3 ????\t$1.800\n\
		 	9mm\t-3 ????\t$1.000\n\
			Silenced 9mm\t-3 ????\t$1.500\n\
		 	Shotgun\t-4 ????\t$2.400\n\
		 	Sawn-off Shotgun\t-4 ????\t$2.100\n\
		 	Combat Shotgun\t-4 ????\t$4.000\n\
	  		UZI\t-5 ?????\t$2.000\n\
			Tec-9\t-5 ?????\t$2.500\n\
		 	MP5\t-5 ?????\t$2.800\n";
		 	strcat(mes, "AK-47\t-7 ?????\t$3.500\n\
		 	M4\t-7 ?????\t$4.300\n\
		 	Rifle\t-10 ?????\t$3.800\n\
		 	Grenade\t-10 ?????\t$1000\n\
		 	???????? ????????\t-4 ????\t$300\n\
		 	?????????? ??????\t-2 ????\t$1700\n\
		 	?????????\t-2 ????\t$500\n\
		 	???????\t-1 ????\t$300");

			Dialog_Show(playerid, BuyGunLaw, DIALOG_STYLE_TABLIST, title, mes, "??????", "??????");
		}
		else
		{
		    Dialog_Show(playerid, BuyGunLaw, DIALOG_STYLE_TABLIST, title, "\
			Desert Eagle\t-3 ????\t$1.800\n\
		 	9mm\t-3 ????\t$1.000\n\
		 	Shotgun\t-4 ????\t$2.400\n\
		 	Sawn-off Shotgun\t-4 ????\t$2.100\n\
			UZI\t-5 ?????\t$2.000\n\
			Tec-9\t-5 ?????\t$2.500\n\
			???????? ????????\t-4 ????\t$300\n\
			???????\t-1 ????\t$300", "??????", "??????");
		}
	}
	else if(listitem == 1)
	{
	    Dialog_Show(playerid, BuyAmmoLaw, DIALOG_STYLE_TABLIST, title, "\
		100 ??.\t-1 ????\t$400\n\
	 	200 ??.\t-2 ????\t$800\n\
   		300 ??.\t-3 ????\t$1.200\n\
     	400 ??.\t-4 ????\t$1.600\n\
        500 ??.\t-5 ?????\t$2.000\n\
      	600 ??.\t-6 ?????\t$2.400\n", "??????", "??????");
	}
	return 1;
}

CMD:flist(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] == 0)
		return SCM(playerid, COLOR_LIGHTRED, "?? ?? ???????? ?? ???????.");

	SendClientMessageEx(playerid, COLOR_GREEN, "?????? ??????? %s ?? ???????:", Factions[PlayerInfo[playerid][pFaction]][fName]);
	foreach(Player, i)
	{
		if(IsPlayerLogged(i) == 0 || PlayerInfo[i][pFaction] != PlayerInfo[playerid][pFaction])
			continue;

		SendClientMessageEx(playerid, COLOR_GRAD2, "(ID: %i) %s - %s", i, GetNameEx(i), GetRankName(i));
	}
	return 1;
}

ALTX:departments("/d");
CMD:departments(playerid, params[])
{
    if(PlayerInfo[playerid][pMutedTime] > 0)
		return SCM(playerid, COLOR_LIGHTRED, "??? ????????? ??? ???????????? ????????.");

	new faction[23];

	if(isnull(params))
		return SendSyntaxMessage(playerid, "(/d)epartments [?????????]");

	if(Factions[PlayerInfo[playerid][pFaction]][fType] != FACTION_LEGAL)
		return SCM(playerid, COLOR_LIGHTRED, "??????? ????????????? ??? ??????????????? ????????.");

    if(!PlayerInfo[playerid][pOnDuty])
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???? ?? ????????? (/duty).");

    if(-1 == IsPlayerHasItem(playerid, INV_RADIO))
		return SCM(playerid, COLOR_LIGHTRED, "? ??? ??? ?????.");

	format(faction, sizeof(faction), "%s", GetInitials(Factions[PlayerInfo[playerid][pFaction]][fName]));

	for(new i = 1; i != MAX_FACTIONS; i++)
	{
	    if(Factions[i][fON] == 0 || Factions[i][fType] != FACTION_LEGAL)
	        continue;

        if(strlen(params) > MAXLEN)
		{
			new pos = MAXLEN;
			if(pos < MAXLEN-1) pos = MAXLEN;
			SendFactionMessage(i, COLOR_ALLDEPT, "** [%s] %s: %.*s ...", faction, GetNameWithMask(playerid), pos, params);
			SendFactionMessage(i, COLOR_ALLDEPT, "... %s **", params[pos]);
		}
		else
			SendFactionMessage(i, COLOR_ALLDEPT, "** [%s] %s: %s **", faction, GetNameWithMask(playerid), params);
	}

	if(strlen(params) > MAXLEN)
	{
		new pos = MAXLEN;
		if(pos < MAXLEN-1) pos = MAXLEN;
    	SendLocalMessage(5.0, playerid, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5, "(?????) %s ???????: %.*s ...", GetNameWithMask(playerid), pos, params);
		SendLocalMessage(5.0, playerid, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5, "... %s", params[pos]);
	}
	else
        SendLocalMessage(5.0, playerid, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5, "(?????) %s ???????: %s", GetNameWithMask(playerid), params);
	return 1;
}

ALTX:faction("/f");
CMD:faction(playerid, params[])
{
	new faction = PlayerInfo[playerid][pFaction];
    if(PlayerInfo[playerid][pMutedTime] > 0)
		return SCM(playerid, COLOR_LIGHTRED, "??? ????????? ??? ???????????? ????????.");

	if(isnull(params))
		return SendSyntaxMessage(playerid, "(/f)action [ooc chat]");

	if(PlayerInfo[playerid][pFaction] == 0)
		return SCM(playerid, COLOR_LIGHTRED, "?? ?? ???????? ?? ? ????? ?? ???????.");

	if(Factions[faction][fChatON] == 0 && !isLeader(playerid))
		return SCM(playerid, COLOR_WHITE, "??? ??? ??? ???????? ???????.");

	if(PlayerInfo[playerid][pSettings] & togFaction)
		return SCM(playerid, COLOR_LIGHTRED, "??????? ???????? ????? ??????????? ????????? (/togf).");

	if(Factions[faction][fType] == FACTION_LEGAL)
	{
		if(strlen(params) > MAXLEN)
		{
			new pos = MAXLEN;
			if(pos < MAXLEN-1) pos = MAXLEN;
			SendFactionMessageF(PlayerInfo[playerid][pFaction], COLOR_LSPDNEW, "** (( %s %s: %.*s ... )) **", GetRankName(playerid), GetNameEx(playerid), pos, params);
			SendFactionMessageF(PlayerInfo[playerid][pFaction], COLOR_LSPDNEW, "... %s )) **", params[pos]);
		}
		else
			SendFactionMessageF(PlayerInfo[playerid][pFaction], COLOR_LSPDNEW, "** (( %s %s: %s )) **", GetRankName(playerid), GetNameEx(playerid), params);
	}
	else
	{
		if(strlen(params) > MAXLEN)
		{
			new pos = MAXLEN;
			if(pos < MAXLEN-1) pos = MAXLEN;
			SendFactionMessageF(PlayerInfo[playerid][pFaction], COLOR_LSPDNEW, "** (( %s: %.*s ... )) **", GetNameEx(playerid), pos, params);
			SendFactionMessageF(PlayerInfo[playerid][pFaction], COLOR_LSPDNEW, "... %s )) **", params[pos]);
		}
		else
			SendFactionMessageF(PlayerInfo[playerid][pFaction], COLOR_LSPDNEW, "** (( %s: %s )) **", GetNameEx(playerid), params);
	}
	return 1;
}
CMD:showbadge(playerid, params[])
{
	new userid;
	if(PlayerInfo[playerid][pFaction] == 0 || Factions[PlayerInfo[playerid][pFaction]][fType] != FACTION_LEGAL)
		return SCM(playerid, COLOR_GREY, "?? ?? ???????? ? ??????? ?????????.");

	if(sscanf(params, "u", userid))
		return SendSyntaxMessage(playerid, "/showbadge [playerid/PartOfName]");

	if(!IsPlayerLogged(userid))
		return SendNotConnected(playerid);

	if(!PlayerNearPlayer(3.0, playerid, userid))
 		return SendNotNearPlayer(playerid);

	SCM(userid, COLOR_LSPDNEW, "_______________________");
	SendClientMessageEx(userid, COLOR_WHITE, Factions[PlayerInfo[playerid][pFaction]][fName]);
	SendClientMessageEx(userid, COLOR_WHITE, "%s - %s", GetRankName(playerid), GetNameWithMask(playerid));
	SendClientMessageEx(userid, COLOR_WHITE, "?????: %i", PlayerInfo[playerid][pBadgeNumber]);
	SCM(userid, COLOR_LSPDNEW, "_______________________");

	SendNearbyMessage(Range_Normal, playerid, COLOR_PURPLE, "* %s ?????????? ???? ????? %s", GetNameWithMask(playerid), GetNameWithMask(userid));
	return 1;
}

CMD:fchat(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] == 0)
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???????? ?? ???????.");

    if(!isLeader(playerid))
        return SCM(playerid, COLOR_LIGHTRED, "?? ?? ????? ???????.");

	new faction = PlayerInfo[playerid][pFaction];
	if(Factions[faction][fChatON] == 1)
	{
		SendFactionMessageF(faction, COLOR_LIGHTBLUE, " ** %s ????????(-?) ??? ???????.", GetNameEx(playerid));
		SCM(playerid, COLOR_LIGHTRED, "?? ????????? ??????????? ??? ???, ? ??????? ????? ??? ????? ?? ?????? ??????.");
		Factions[faction][fChatON] = 0;
	}
	else
	{
		SendFactionMessageF(faction, COLOR_LIGHTBLUE, " ** %s ???????(-?) ??? ???????.", GetNameEx(playerid));
		SCM(playerid, COLOR_LIGHTRED, "?? ???????? ??????????? ??? ??? ? ?????? ? ???? ????? ?????? ??? ????????? ???????.");
		Factions[faction][fChatON] = 1;
	}
	set_faction_int(faction, "chaton", Factions[faction][fChatON]);
	return 1;
}
CMD:invite(playerid, params[])
{
    if(PlayerInfo[playerid][pFaction] == 0)
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???????? ?? ???????.");

    if(!isLeader(playerid))
        return SCM(playerid, COLOR_LIGHTRED, "?? ?? ????? ???????.");

    if(Factions[PlayerInfo[playerid][pFaction]][fJoinRank] == 0)
		return SCM(playerid, COLOR_GREY, "??????????, ?????????? ????? ? ???????? ? ????? ?????????.");

	new userid;
	if(sscanf(params,"u",userid))
		return SendSyntaxMessage(playerid, "/invite [playerid/PartOfName]");

	if(!IsPlayerLogged(userid))
		return SendNotConnected(playerid);

	if(userid == playerid)
		return SCM(playerid, COLOR_LIGHTRED, "?????? ???? ??????.");

    if(PlayerInfo[userid][pFaction] != 0)
        return SCM(playerid, COLOR_LIGHTRED, "????? ???-?? ??????? ???.");

    if(pTemp[userid][pFactionPlayer] == playerid)
		return SendErrorMessage(playerid, "?? ??? ?????????? ?????? ???????? ?? ???????.");

	pTemp[userid][pFactionPlayer] = playerid;
	SetPVarInt(userid, #accept_time, gettime() + 30);

	SendClientMessageEx(userid, COLOR_LIGHTBLUE, "??? ?????????? ?????????????? ? %s, ?????????? ??????? %s. (??????? Y ????? ??????? ???????????)", Factions[PlayerInfo[playerid][pFaction]][fName], GetNameWithMask(playerid));
	SendClientMessageEx(playerid, COLOR_WHITE, "?? ????????? ??????????? ?????? %s ??? ????????????? ? %s.",GetNameWithMask(userid), Factions[PlayerInfo[playerid][pFaction]][fName]);
	return 1;
}

CMD:uninvite(playerid, params[])
{
    if(PlayerInfo[playerid][pFaction] == 0)
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???????? ?? ???????.");

    if(!isLeader(playerid))
        return SCM(playerid, COLOR_LIGHTRED, "?? ?? ????? ???????.");

    if(Factions[PlayerInfo[playerid][pFaction]][fJoinRank] == 0)
		return SCM(playerid, COLOR_GREY, "??????????, ?????????? ????? ? ???????? ? ????? ?????????.");

	new userid;
	if(sscanf(params,"u",userid))
		return SendSyntaxMessage(playerid, "/uninvite [playerid/PartOfName]");

	if(!IsPlayerLogged(userid))
		return SendNotConnected(playerid);

	if(userid == playerid)
		return SCM(playerid, COLOR_LIGHTRED, "?????? ???? ??????.");

    if(PlayerInfo[userid][pFaction] != PlayerInfo[playerid][pFaction])
        return SCM(playerid, COLOR_LIGHTRED, "????? ?? ??????? ? ????? ???????????.");

	SendClientMessageEx(userid, COLOR_LIGHTBLUE, "%s ????????(-?) ??? ?? ??????? %s ? ?? ?????? ? ??? ?? ????????.",GetNameEx(playerid),Factions[PlayerInfo[playerid][pFaction]][fName]);
	SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "?? ????????? ?????? %s ?? ??????? %s ? ?????? ?? ? ??? ?? ???????.", GetNameEx(userid), Factions[PlayerInfo[playerid][pFaction]][fName]);

    RemovePlayerFaction(userid);
	SendFactionMessageF(PlayerInfo[playerid][pFaction], COLOR_LIGHTBLUE, "[Faction] %s ??? ???????? ?? ??????? ??????? %s", GetNameEx(userid), GetNameEx(playerid));
	return 1;
}

CMD:giverank(playerid, params[])
{
    if(PlayerInfo[playerid][pFaction] == 0)
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???????? ?? ???????.");

    if(!isLeader(playerid))
        return SCM(playerid, COLOR_LIGHTRED, "?? ?? ????? ???????.");

    if(Factions[PlayerInfo[playerid][pFaction]][fJoinRank] == 0)
		return SCM(playerid, COLOR_GREY, "??????????, ?????????? ????? ? ????? ?????????.");

	new userid,
	    rank;

	if(sscanf(params,"ui",userid, rank))
		return SendSyntaxMessage(playerid, "/giverank [playerid/PartOfName] [????]");

	if(!IsPlayerLogged(userid))
		return SendNotConnected(playerid);

	if(userid == playerid)
		return SCM(playerid, COLOR_LIGHTRED, "?????? ???? ??????.");

    if(PlayerInfo[userid][pFaction] != PlayerInfo[playerid][pFaction])
        return SCM(playerid, COLOR_LIGHTRED, "????? ?? ??????? ? ????? ???????????.");

	if(rank < 1 || rank > Factions[PlayerInfo[playerid][pFaction]][fRanks])
	    return SCM(playerid, COLOR_LIGHTRED, "???????? ???? (/ranks).");

	PlayerInfo[userid][pRank] = rank;
	SendClientMessageEx(userid, COLOR_LIGHTBLUE, "%s ????????(-?) ??? ???? %s.", GetNameEx(playerid), GetRankName(userid));
	SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "?? ????????? %s ???? %s.", GetNameEx(userid), GetRankName(userid));
	return 1;
}

CMD:ranks(playerid, params[])
{
	new faction = PlayerInfo[playerid][pFaction];

	if(!isLeader(playerid))
		return SCM(playerid, COLOR_WHITE, "?? ?? ????? ???????.");

	new mes[512];

	for(new i; i != Factions[faction][fRanks]; i++)
	{
		format(mes, sizeof(mes), "%s\n%i. %s", mes, i+1, FactionRanks[faction][i]);
	}

	new title[32];
	format(title, sizeof(title), "????????????? ??????: %i", Factions[faction][fRanks]);
	Dialog_Show(playerid, None, DIALOG_STYLE_LIST, title, mes, ">>>", "");
	return 1;
}

CMD:color(playerid, params[])
{
	new faction = PlayerInfo[playerid][pFaction];
	if(PlayerInfo[playerid][pFaction] != LSPD && PlayerInfo[playerid][pFaction] != SASD)
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???? ???????????.");

    if(!PlayerInfo[playerid][pOnDuty])
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???? ?? ????????? (/duty).");

	if(PlayerInfo[playerid][pRank] < 5)
	    return SendErrorMessage(playerid, "??? ?????????? ?????? ???????.");

    if(GetPlayerColor(playerid) != RemoveAlpha(Factions[faction][fColor]))
	{
		SetPlayerColor(playerid, RemoveAlpha(Factions[faction][fColor]));
        SendClientMessageEx(playerid, Factions[faction][fColor], "?? ???????? ???? ????.");
	}
	else
	{
		SetPlayerColor(playerid, TEAM_HIT_COLOR);
        SendClientMessageEx(playerid, -1, "?? ???????? ???? ????.");
	}
	return 1;
}

CMD:duty(playerid, params[])
{
	new faction = PlayerInfo[playerid][pFaction];
	if(faction == 0 || Factions[faction][fType] != FACTION_LEGAL)
		return 1;

    if(0 == IsPlayerAtUniform(playerid) && 0 == IsPlayerAtSecondUniform(playerid))
	    return SendErrorMessage(playerid, "?? ?? ? ??????????/? ????????? ??????????.");

    Dialog_Show(playerid, DutyMenu, DIALOG_STYLE_LIST, "(/duty)", "- ????? ?? ??????\n- ?????\n- ??????????\n- ???????? ??????????\n- ???????? ????????", "???????", "??????");
	return 1;
}

Dialog:DutyMenu(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return 1;

    new faction = PlayerInfo[playerid][pFaction];
    if(faction == 0 || Factions[faction][fType] != FACTION_LEGAL)
		return 1;

	switch(listitem)
	{
	    case 0://duty
	    {
			if(CheckAdmin(playerid, ADMIN_LEVEL_1))
				return SCM(playerid, COLOR_LIGHTRED, "??????? ?????? ? ?????-?????????.");

		    if(pTemp[playerid][pTaser])
		    	return SendErrorMessage(playerid, "??????? ??????? ?????.");

		    if(pTemp[playerid][pPatrol])
		    	return SendErrorMessage(playerid, "??????? ??????? ?? ??????? (/patrol).");

            if(0 == IsPlayerAtUniform(playerid) && 0 == IsPlayerAtSecondUniform(playerid, 1))
    			return SendErrorMessage(playerid, "?? ?? ? ??????????.");

	        if(!PlayerInfo[playerid][pOnDuty])
			{
			    for(new i; i < MAX_WEAP; i++)
				{
				    PlayerInfo[playerid][pCopWeap][i] = PlayerInfo[playerid][pWeap][i];
				    PlayerInfo[playerid][pCopAmmo][i] = PlayerInfo[playerid][pAmmo][i];
				}
				ac_ResetPlayerWeapons(playerid);

				if(faction == LSPD || faction == SASD)
					SendNearbyMessage(Range_Normal, playerid, COLOR_PURPLE, "%s %s ???? ????? ?? ?????? ????????.", GetRankName(playerid), GetNameWithMask(playerid));

				PlayerInfo[playerid][pOnDuty] = 1;
		 		SetPlayerColor(playerid, RemoveAlpha(Factions[faction][fColor]));

		        SendFactionMessage(faction, COLOR_LSPDNEW, "** HQ: %s %s ????????(-?) ?? ?????????. **", GetRankName(playerid), GetNameEx(playerid));
                cmd::duty(playerid, "");
				return 1;
			}
			SendFactionMessage(faction, COLOR_LSPDNEW, "** HQ: %s %s ????????(-?) ?????????. **", GetRankName(playerid), GetNameEx(playerid));
			DestroyAllBort(playerid);
		    PlayerInfo[playerid][pChar] = 0;
			PlayerInfo[playerid][pSwatDuty] = 0;
			PlayerInfo[playerid][pOnDuty] = 0;
			for(new i; i < MAX_WEAP; i++)
			{
			    PlayerInfo[playerid][pWeap][i] = PlayerInfo[playerid][pCopWeap][i];
			    PlayerInfo[playerid][pAmmo][i] = PlayerInfo[playerid][pCopAmmo][i];
			    PlayerInfo[playerid][pCopWeap][i] = 0;
			    PlayerInfo[playerid][pCopAmmo][i] = 0;

			    if(i < MAX_WEAP-1 && IsPlayerAttachedObjectSlotUsed(playerid, i + 5))
		           	RemovePlayerAttachedObject(playerid, i + 5);
			}
			SetPlayerWeapons(playerid);
			SetPlayerColor(playerid, TEAM_HIT_COLOR);
			SetPlayerArmour(playerid, 0);
			SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
			cmd::duty(playerid, "");
	    }
	    case 1://skins
		{
		    if(!PlayerInfo[playerid][pOnDuty])
				return SCM(playerid, COLOR_LIGHTRED, "??? ????? ????? ??? ????? ????????? ?? ????????? (/duty).");

            if(0 == IsPlayerAtUniform(playerid) && 0 == IsPlayerAtSecondUniform(playerid, 1))
    			return SendErrorMessage(playerid, "?? ?? ? ??????????.");

            if(0 != PlayerInfo[playerid][pSwatDuty])
                return SendErrorMessage(playerid, "???????? ?????????? S.W.A.T., ?????? ??? ??????? ?????.");

			if(faction == LSPD || faction == SASD)
			    ShowModelSelectionMenu(playerid, "_", MODEL_SELECTION_UNIFORM, police_skins, sizeof(police_skins));
			else if(faction == LSFD)
			    ShowModelSelectionMenu(playerid, "_", MODEL_SELECTION_UNIFORM, fd_skins, sizeof(fd_skins));
		    else if(faction == DOCS)
			    ShowModelSelectionMenu(playerid, "_", MODEL_SELECTION_UNIFORM, docs_skins, sizeof(docs_skins));
		    else if(faction == CITY)
			    ShowModelSelectionMenu(playerid, "_", MODEL_SELECTION_UNIFORM, city_skins, sizeof(city_skins));

			else SendErrorMessage(playerid, "????? ??????? ?????????? ?????? ???????.");
		}
		case 2:
	    {
	        if(!PlayerInfo[playerid][pOnDuty])
				return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???? ?? ????????? (/duty).");

            if(0 == IsPlayerAtUniform(playerid) && 0 == IsPlayerAtSecondUniform(playerid))
    			return SendErrorMessage(playerid, "?? ?? ? ??????????.");

			if(faction == LSPD || faction == SASD)
			{
				Dialog_Show(playerid, LSPDArmoury, DIALOG_STYLE_LIST, "{8D8DFF}?????????? & ??????", "??????\nS.W.A.T ??????????", "???????", "?????");
				return 1;
			}
			else if(faction == DOCS)
			{
			    Dialog_Show(playerid, DOCSGUN, DIALOG_STYLE_LIST, "{8D8DFF}??????", "???????\n???????? ????????\nDesert Eagle\nShotgun\nSniper Rifle\n??????? ???????\n??????????\n????? ??? ??????", "???????", "?????");
			    return 1;
			}
			else if(faction == CITY)
			{
			    Dialog_Show(playerid, CITYGUN, DIALOG_STYLE_LIST, "{8D8DFF}??????", "Desert Eagle\nMP5\n?4\n????? ??? ??????", "???????", "?????");
			    return 1;
			}
			else if(faction == LSFD)
			{
		        Dialog_Show(playerid, FDArmoury, DIALOG_STYLE_LIST, "{8D8DFF}??????????", "?????????\n????????????\n????? ??? ??????????", "???????", "?????");
			    return 1;
			}
	    }
	    case 3:
	    {
	        if(!PlayerInfo[playerid][pOnDuty])
				return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???? ?? ????????? (/duty).");

	        if(faction != LSPD && faction != SASD && faction != CITY && faction != LSFD && faction != DOCS)
				return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???? ???????????/???????????.");

            if(0 == IsPlayerAtUniform(playerid) && 0 == IsPlayerAtSecondUniform(playerid))
    			return SendErrorMessage(playerid, "?? ?? ? ??????????.");

		    SCM(playerid, COLOR_WHITE, "?? ?????? ??????????.");
		    if(faction == LSFD)
				SetPlayerArmour(playerid, 50.0);
			else
			    SetPlayerArmour(playerid, 100.0);

            cmd::duty(playerid, "");
	    }
	    case 4:
	    {
	        if(!PlayerInfo[playerid][pOnDuty])
				return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???? ?? ????????? (/duty).");

            if(0 == IsPlayerAtUniform(playerid) && 0 == IsPlayerAtSecondUniform(playerid, 1))
    			return SendErrorMessage(playerid, "?? ?? ? ??????????.");

		    SCM(playerid, COLOR_WHITE, "?? ????????? ????????.");
		    SetPlayerHealth(playerid, 100.0);

		    cmd::duty(playerid, "");
	    }
	}
	return 1;
}

CMD:carfix(playerid,params[])
{
	if(IsPlayerAtCarfix(playerid) == 0)
	    return SendErrorMessage(playerid, "?? ?????? ?????????? ? ??????/?? ???? ???????????.");

	new vehicle = GetPlayerVehicleID(playerid);
	if(0 == vehicle || VehicleInfo[vehicle][carFaction] != PlayerInfo[playerid][pFaction])
		return SendErrorMessage(playerid, "?? ?? ?? ??????????? ??????????.");

	FixVehicle(vehicle);
	VehicleInfo[vehicle][carFuel] = 100;
	SCM(playerid, COLOR_GREEN, "???????????? ???????? ????????? ???????????????.");
	return 1;
}

ALTX:factionattach("/fa");
CMD:factionattach(playerid, params[])
{
	if(GetNextToySlot(playerid) == -1)
 		return SCM(playerid, COLOR_LIGHTRED, "??? ????? ??? ?????? ??????.");

	if(PlayerInfo[playerid][pFaction] != LSPD && PlayerInfo[playerid][pFaction] != SASD && PlayerInfo[playerid][pFaction] != DOCS && PlayerInfo[playerid][pFaction] != LSFD && PlayerInfo[playerid][pFaction] != CITY)
	    return 1;

    if(PlayerInfo[playerid][pFaction] == LSFD)
    	ShowModelSelectionMenu(playerid, "_", MODEL_SELECTION_FA, attach_fd_model, sizeof(attach_fd_model));
    else if(PlayerInfo[playerid][pFaction] == CITY)
    	ShowModelSelectionMenu(playerid, "_", MODEL_SELECTION_FA, attach_city_model, sizeof(attach_city_model));
	else
		ShowModelSelectionMenu(playerid, "_", MODEL_SELECTION_FA, attach_police_model, sizeof(attach_police_model));
	return 1;
}

CMD:door(playerid, params[])
{
	new id = -1;
	if((id = GetNearHouseInside(playerid)) != -1)
	{
		for(new i = 0; i < MAX_FURNITURE; i++)
		{
			if(!IsPlayerInRangeOfPoint(playerid, 2.0, HouseFurniture[id][i][fPosX], HouseFurniture[id][i][fPosY], HouseFurniture[id][i][fPosZ]) || 0 == HouseFurniture[id][i][fOn] || !isHouseDoor(HouseFurniture[id][i][fModel]))
			    continue;

			if(HouseFurniture[id][i][fOpened] == 0)
			{
				if(HouseFurniture[id][i][fLocked] == 1)
					return SCM(playerid, COLOR_GREY, "????? ???????.");

				MoveDynamicObject(HouseFurniture[id][i][fObject], HouseFurniture[id][i][fPosX], HouseFurniture[id][i][fPosY], HouseFurniture[id][i][fPosZ], 1.5, HouseFurniture[id][i][fPosRX], HouseFurniture[id][i][fPosRY], HouseFurniture[id][i][fPosRZ]-90.0);
				HouseFurniture[id][i][fOpened] = 1;
				return 1;
			}
			else
			{
				HouseFurniture[id][i][fOpened] = 0;
				MoveDynamicObject(HouseFurniture[id][i][fObject], HouseFurniture[id][i][fPosX], HouseFurniture[id][i][fPosY], HouseFurniture[id][i][fPosZ], 1.5, HouseFurniture[id][i][fPosRX], HouseFurniture[id][i][fPosRY], HouseFurniture[id][i][fPosRZ]);
				return 1;
			}
		}
		return 1;
	}
	return 1;
}

ALTX:open("/gate");
CMD:open(playerid, params[])
{
	new gate = -1;
	if((gate = Gate_Nearest(playerid)) == -1)
		return 1;

	switch(Gates[gate][gateFaction])
	{
	    case DOCS: if(PlayerInfo[playerid][pFaction] != LSPD && PlayerInfo[playerid][pFaction] != SASD && PlayerInfo[playerid][pFaction] != DOCS) return 1;
		default: if(Gates[gate][gateFaction] != 0 && Gates[gate][gateFaction] != PlayerInfo[playerid][pFaction]) return 1;
	}

    Gates[gate][gateOpened] = (Gates[gate][gateOpened] == 1)?(0):(1);
	if(Gates[gate][gateOpened] == 1)
		MoveDynamicObject(Gates[gate][gateObject], Gates[gate][gatePosX], Gates[gate][gatePosY], Gates[gate][gatePosZ], Gates[gate][gateSpeed], Gates[gate][gatePosRX], Gates[gate][gatePosRY], Gates[gate][gatePosRZ]);
	else
		MoveDynamicObject(Gates[gate][gateObject], Gates[gate][gateMoveX], Gates[gate][gateMoveY], Gates[gate][gateMoveZ], Gates[gate][gateSpeed], Gates[gate][gateMoveRX], Gates[gate][gateMoveRY], Gates[gate][gateMoveRZ]);

	if(Gates[gate][gateSound] != 0)
	    PlayerPlaySoundEx(playerid, Gates[gate][gateSound]);
	return 1;
}

CMD:pull(playerid, params[])
{
	new faction = PlayerInfo[playerid][pFaction],
		vehicle = GetPlayerVehicleID(playerid),
		userid,
		seat;

	if(faction != LSPD && faction != SASD && faction != LSFD)
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???? ???????????/???????????.");

    if(vehicle == 0 || IsABoat(vehicle) || IsABiker(vehicle))
		return SCM(playerid, COLOR_GREY, "?? ?????? ?????????? ? ??????????.");

	new maxseat = GetMaxPassengers(GetVehicleModel(vehicle));

	if(sscanf(params,"ud", userid, seat))
		return SendSyntaxMessage(playerid, "/pull [playerid/PartOfName] [???????(1-%i)]", maxseat);

	if(!IsPlayerLogged(userid))
		return SendNotConnected(playerid);

	if(seat > maxseat || seat < 1)
		return SendClientMessageEx(playerid, COLOR_WHITE, "ID ????????? ??????? 1-%i.", maxseat);

	if(userid == playerid)
		return SCM(playerid, COLOR_WHITE, "?????? ???? ??????????.");

	if(!PlayerNearPlayer(10.0, playerid, userid))
		return SendNotNearPlayer(playerid);

	if(IsPlayerInjured(userid))
		return SCM(playerid, COLOR_GREY, "?????? ?????????? ????????.");

	if(IsPlayerInAnyVehicle(userid))
	    return SendErrorMessage(playerid, "????? ????????? ? ??????????.");

    if(PutPlayerInVehicle(userid, vehicle, seat) == 0)
        return SendErrorMessage(playerid, "?? ??????? ???????? ?????? ? ?????????.");

	if(faction == LSFD)
	{
		StopPlayerAnims(userid);
		SendClientMessageEx(playerid, COLOR_LIGHTRED, "?? ?????????? %s ? ???????????? ????????.", GetNameEx(userid));
		SendClientMessageEx(userid, COLOR_LIGHTRED, "??? ????????? %s ? ???????????? ??????????.", GetNameEx(playerid));
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_LIGHTRED, "?? ???????? %s ? ???????????? ????????.", GetNameEx(userid));
		SendClientMessageEx(userid, COLOR_LIGHTRED, "??? ??????? %s ? ???????????? ????????.", GetNameEx(playerid));
	}
	return 1;
}

CMD:therapy(playerid, params[])
{
	new faction = PlayerInfo[playerid][pFaction],
		userid;

	if(faction != LSFD)
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???? ???????????.");

	if(PlayerInfo[playerid][pRank] < 3)
	    return SendErrorMessage(playerid, "???????? ? 3 ?????.");

	if(sscanf(params,"u",userid))
		return SendSyntaxMessage(playerid, "/therapy [playerid/PartOfName]");

	if(!IsPlayerLogged(userid))
		return SendNotConnected(playerid);

	if(!PlayerNearPlayer(3.0, playerid, userid))
		return SendNotNearPlayer(playerid);

	if(PlayerInfo[userid][pDependence] == 0)
		return SendErrorMessage(playerid, "? ?????? ??? ????????????????.");

    PlayerInfo[userid][pDependence] -= (PlayerInfo[userid][pDependence] < 20)?(PlayerInfo[userid][pDependence]):(20);
    PlayerTextDrawHide(userid, drug_effect[userid]);
    pTemp[userid][pDemolitionTime] = 0;
	SetPlayerCurrentTimeAndWeather(userid);

	SendClientMessageEx(playerid, COLOR_TOMATO, "%s %s ??????? ???? ???????????????? ?? 20 ???????.", GetRankName(playerid), GetNameWithMask(playerid));
    SendClientMessageEx(playerid, COLOR_TOMATO, "?? ???????? ???????????????? %s ?? 20 ???????.", GetNameWithMask(userid));
	return 1;
}

CMD:prescribe(playerid, params[])
{
	new faction = PlayerInfo[playerid][pFaction],
		userid,
		days;

	if(faction != LSFD)
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???? ???????????.");

	if(PlayerInfo[playerid][pRank] < 3)
	    return SendErrorMessage(playerid, "???????? ? 3 ?????.");

	if(sscanf(params,"uI(0)",userid, days))
		return SendSyntaxMessage(playerid, "/prescribe [playerid/PartOfName] [?????????? ???? 1-93]");

	if(!IsPlayerLogged(userid))
		return SendNotConnected(playerid);

	if(!PlayerNearPlayer(3.0, playerid, userid))
		return SendNotNearPlayer(playerid);

	if(PlayerInfo[userid][pPrescribe] < gettime())
	{
	    if(days < 1 || days > 93)
	        return SendErrorMessage(playerid, "???????? ???? ???????? ???????.");

	    PlayerInfo[playerid][pPrescribe] = gettime() + days * 86400;
	    SendClientMessageEx(userid, COLOR_TOMATO, "%s %s ????? ??? ?????? ?? ??????????? ?????????. (/showprescribe - ???????? ??????)", GetRankName(playerid), GetNameWithMask(playerid));
        SendClientMessageEx(playerid, COLOR_TOMATO, "?? ?????? %s ?????? ?? ??????????? ?????????.", GetNameWithMask(userid));
	}
	else
	{
	    PlayerInfo[userid][pPrescribe] = 0;
	    SendClientMessageEx(userid, COLOR_TOMATO, "%s %s ?????? ? ??? ?????? ?? ??????????? ?????????.", GetRankName(playerid), GetNameWithMask(playerid));
        SendClientMessageEx(playerid, COLOR_TOMATO, "?? ??????? ? %s ?????? ?? ??????????? ?????????.", GetNameWithMask(userid));
	}
	return 1;
}

CMD:showprescribe(playerid, params[])
{
    if(PlayerInfo[playerid][pPrescribe] < gettime())
        return SendErrorMessage(playerid, "? ??? ??? ??????? ?? ??????????? ?????????.");

    new userid;
	if(sscanf(params,"u",userid))
		return SendSyntaxMessage(playerid, "/showprescribe [playerid/PartOfName]");

	if(!IsPlayerLogged(userid))
		return SendNotConnected(playerid);

	if(!PlayerNearPlayer(3.0, playerid, userid))
		return SendNotNearPlayer(playerid);

    SCM(userid, COLOR_GREEN, "__________??????__________");
	SendClientMessageEx(userid, COLOR_WHITE, "???? ??????: %s, ???? ????????: %s", GetNameEx(playerid), PlayerInfo[playerid][pBirthdate]);
	SendClientMessage(userid, COLOR_WHITE, "??? ??????: All Saints General Hospital.");
	SendClientMessage(userid, COLOR_WHITE, "?????? ?? ????????????, ???????? ? ???????????? ??????????? ?????????.");
	SCM(userid, COLOR_GREEN, "_________________________________");

	new mes[128];
	format(mes, sizeof(mes), "?????????? ?????? %s.", GetNameWithMask(userid));
	cmd::ame(playerid, mes);
	return 1;
}

CMD:operation(playerid, params[])
{
	new faction = PlayerInfo[playerid][pFaction],
		userid;

	if(faction != LSFD)
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???? ???????????.");

	if(sscanf(params,"u",userid))
		return SendSyntaxMessage(playerid, "/operation [playerid/PartOfName]");

	if(!IsPlayerLogged(userid))
		return SendNotConnected(playerid);

	if(userid == playerid)
		return SCM(playerid, COLOR_LIGHTRED, "?????? ???? ???????? ??????????.");

	if(!PlayerNearPlayer(3.0, playerid, userid))
		return SendNotNearPlayer(playerid);

	if(IsPlayerInjured(userid) != 1)
		return SCM(playerid, COLOR_LIGHTRED, "????? ?? ????????? ? ?????? ???????.");

    ResetDamages(userid);
    SetPlayerHealth(userid, 100.0);
	StopPlayerAnims(userid);

	SendClientMessageEx(playerid, COLOR_TOMATO, "?? ?????? %s ?? ?????? ???????.", GetNameWithMask(userid));
	SendClientMessageEx(userid, COLOR_TOMATO, "%s %s ????? ??? ?? ?????? ???????.", GetRankName(playerid), GetNameWithMask(playerid));
	return 1;
}

CMD:hpc(playerid, params[])
{
	new faction = PlayerInfo[playerid][pFaction],
		id,
		vehicle = GetPlayerVehicleID(playerid);

	if(faction != LSFD)
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???? ???????????.");

	if(sscanf(params,"u",id))
		return SendSyntaxMessage(playerid, "/hpc [playerid/PartOfName]");

	if(!IsPlayerLogged(id))
		return SendNotConnected(playerid);

	if(VehicleInfo[vehicle][carFaction] != faction)
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ?????????? ? ?????????? ????? ???????????.");

	SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "?????????? - %s", GetFullDate());
	SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "?????? ???: %s, ???? ????????: %s, ?????????? ?????: %i.", GetNameEx(id), PlayerInfo[id][pBirthdate], PlayerInfo[id][pNumber]);

	new count;
    for(new i; i < MAX_HOUSES; i++)
	{
	    if(HouseInfo[i][hID] == 0 || HouseInfo[i][hOwnerID] != PlayerInfo[id][pID])
	        continue;

		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "??????????????? ?????: %s.", GetHouseZone(i));
		count++;
		if(count > 4) break;
	}

	if(0 == count)
        SCM(playerid, COLOR_LIGHTBLUE, "??????????????? ?????: Unknown.");

	return 1;
}

CMD:heal(playerid, params[])
{
	new id,
	    userid;

	if((id = GetNearHouseInside(playerid)) != -1 && PlayerInfo[playerid][pID] == HouseInfo[id][hOwnerID])
	{
	    if(HouseInfo[id][hHeal] == 0)
	        return SendErrorMessage(playerid, "? ???? ??? ???????.");

	    if(pTemp[playerid][pHealTime] > gettime())
	        return SendErrorMessage(playerid, "?? ??????? ???????????? ??????? ????? %i ??????.", pTemp[playerid][pHealTime]-gettime());

	    if(sscanf(params,"u", userid))
			return SendSyntaxMessage(playerid, "/heal [playerid/PartOfName]");

        if(!IsPlayerLogged(userid))
			return SendNotConnected(playerid);

        if(!PlayerNearPlayer(3.0, playerid, userid))
			return SendNotNearPlayer(playerid);

        if(PlayerInfo[userid][pInjured] == 2)
            return SendErrorMessage(playerid, "????? ?????.");

        if(GetPlayerHealthEx(userid) >= 100.0 && PlayerInfo[userid][pInjured] != 1)
			return SCM(playerid, COLOR_LIGHTRED, "????? ??????.");

		if(playerid != userid)
		{
        	SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "?? ???????????? ??????? (+%i HP) ?? ?????? %s. ????????? %i ??????, ????? ????? ???????????? ???????.",
			(HouseInfo[id][hHeal] * 20),
			GetNameWithMask(userid),
			40 + (HouseInfo[id][hHeal] * 20));

			SendClientMessageEx(userid, COLOR_LIGHTBLUE, "%s ??????????? ??????? ?? ???. (+%i HP)",
        	GetNameWithMask(playerid),
			(HouseInfo[id][hHeal] * 20));
		}
		else
		    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "?? ???????????? ??????? (+%i HP) ?? ????. ????????? %i ??????, ????? ????? ???????????? ???????.",
			(HouseInfo[id][hHeal] * 20),
			40 + (HouseInfo[id][hHeal] * 20));


		ResetDamages(userid);
        StopPlayerAnims(userid);

		pTemp[playerid][pHealTime] = gettime() + 40 + (HouseInfo[id][hHeal] * 20);

        new Float:hp;
		GetPlayerHealth(playerid, hp);
	    SetPlayerHealth(playerid, hp + float(HouseInfo[id][hHeal]) * 20.0);

		if(GetPlayerHealthEx(userid) > 100.0)
		    SetPlayerHealth(userid, 100.0);

		HouseInfo[id][hHealAmount]--;
		if(HouseInfo[id][hHealAmount] == 0)
		    HouseInfo[id][hHeal] = 0;
		Save_House(id);
		return 1;
	}

	new faction = PlayerInfo[playerid][pFaction];

	if(faction != LSPD && faction != SASD && faction != LSFD && faction != DOCS && faction != CITY)
		return SCM(playerid, COLOR_LIGHTRED, "?? ?? ? ????.");

	if(faction == LSFD) //FD Heal
	{
		if(sscanf(params,"u", userid))
			return SendSyntaxMessage(playerid, "/heal [playerid/PartOfName]");

		if(!PlayerInfo[playerid][pOnDuty])
			return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???? ?? ????????? (/duty).");

		if(!IsPlayerLogged(userid))
			return SendNotConnected(playerid);

		if(userid == playerid)
			return SCM(playerid, COLOR_LIGHTRED, "?? ?? ?????? ???????? ?????? ????.");

		if(!PlayerNearPlayer(3.0, playerid, userid))
			return SendNotNearPlayer(playerid);

		if(pTemp[userid][pHealPlayer] == playerid)
		    return SendErrorMessage(playerid, "?? ??? ?????????? ??????? ??????? ??????.");

		if(0 != IsPlayerInjured(userid))
		    return SendErrorMessage(playerid, "?????? ????? ? ?????? ???????/??????.");

		if(GetPlayerHealthEx(userid) >= 100.0)
			return SCM(playerid, COLOR_LIGHTRED, "????? ??????.");

		pTemp[userid][pHealPlayer] = playerid;
		SetPVarInt(userid, #accept_time, gettime() + 30);
		SendClientMessageEx(userid, COLOR_TOMATO, "%s ????? ???????? ???. (??????? Y ????? ??????? ???????????)", GetNameWithMask(playerid));
		SendClientMessageEx(playerid, COLOR_TOMATO, "?? ?????????? ??????? %s.", GetNameWithMask(userid));
	}
	return 1;
}
//==================================SAN=========================================
CMD:news(playerid,params[])
{
	if(PlayerInfo[playerid][pFaction] != SAN)
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???? ????????? ???????????.");

	if(PlayerInfo[playerid][pSettings] & togNews)
		return SCM(playerid, COLOR_LIGHTRED, "??????? ???????? ????? ????????? ?? SAN (/tognews).");

	if(pTemp[playerid][pNews] != 0)
		return SCM(playerid,COLOR_LIGHTRED,"?? ??? ? ?????. ??????????? /exitnews, ????? ???? ? ?????.");

	SCM(playerid,COLOR_WHITE,"?? ?????? ????????. ??????????? ????????? ??? ??? ??????? ? ????.");
	pTemp[playerid][pNews] = 1;
	return 1;
}

CMD:exitnews(playerid,params[])
{
	if(PlayerInfo[playerid][pFaction] != SAN)
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???? ????????? ???????????.");

	if(pTemp[playerid][pNews] == 0)
		return SCM(playerid,COLOR_LIGHTRED,"?? ?? ? ?????. ??????????? /news, ????? ????? ? ????.");

	SCM(playerid,COLOR_WHITE,"?? ????????? ????????.");
	pTemp[playerid][pNews] = 0;
	return 1;
}

CMD:interview(playerid, params[])
{
    if(PlayerInfo[playerid][pFaction] != SAN)
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???? ????????? ???????????.");

	new userid;
	if(sscanf(params,"u",userid))
		return SendSyntaxMessage(playerid, "/interview [playerid/PartOfName]");

	if(PlayerInfo[playerid][pSettings] & togNews)
		return SCM(playerid, COLOR_LIGHTRED, "??????? ???????? ????? ????????? ?? SAN (/tognews).");

	if(pTemp[playerid][pNews] == 0)
		return SCM(playerid,COLOR_LIGHTRED,"?? ?? ? ?????. ??????????? /news, ????? ????? ? ????.");

	if(userid == playerid)
		return SCM(playerid, COLOR_LIGHTRED, "?????? ?????????? ?????? ???? ?? ????????.");

	if(!PlayerNearPlayer(3.0, playerid, userid))
		return SendNotNearPlayer(playerid);

	if(pTemp[playerid][pInterviewPlayer] != INVALID_PLAYER_ID)
		return SCM(playerid, COLOR_LIGHTRED, "?????? ?????????? ?? ???????? ????? ??? ??? ??????????.");

	if(pTemp[userid][pInterviewPlayer] != INVALID_PLAYER_ID)
		return SCM(playerid, COLOR_LIGHTRED, "????? ??? ??????? ??????????? ?? ????????.");

    pTemp[userid][pInterviewPlayer] = playerid;
    SetPVarInt(userid, #accept_time, gettime() + 30);

    SendClientMessageEx(playerid, 0x33CCFFAA, "%s ??????? ??????????? ?? ????????, ????????.", GetNameWithMask(userid));
	SendClientMessageEx(userid, 0x33CCFFAA, "%s ?????????? ??? ?? ????????. (??????? Y ????? ??????? ???????????)", GetNameWithMask(playerid));
	return 1;
}

CMD:exitinterview(playerid, params[])
{
	if(pTemp[playerid][pInterview] != INVALID_PLAYER_ID)
	{
	    SCM(playerid, 0x33CCFFAA, "?? ????????? ????????.");
	    pTemp[playerid][pInterview] = INVALID_PLAYER_ID;
	    return 1;
	}

    if(PlayerInfo[playerid][pFaction] != SAN)
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???? ????????? ???????????.");

	new userid;
	if(sscanf(params,"u", userid))
		return SendSyntaxMessage(playerid, "/exitinterview [playerid/PartOfName]");

	if(!IsPlayerLogged(userid))
		return SendNotConnected(playerid);

	if(!PlayerNearPlayer(3.0, playerid, userid))
		return SendNotNearPlayer(playerid);

	if(pTemp[userid][pInterview] == INVALID_PLAYER_ID)
		return SCM(playerid, COLOR_LIGHTRED, "?? ?? ????????? ???????? ? ???? ???????.");

    SendClientMessageEx(playerid, 0x33CCFFAA, "?? ????????? ???????? ? %s.", GetNameWithMask(userid));
	SendClientMessageEx(userid, 0x33CCFFAA, "%s ???????? ? ???? ????????.", GetNameWithMask(playerid));

	pTemp[userid][pInterview] = INVALID_PLAYER_ID;
	return 1;
}

ALTX:government("/gov");
CMD:government(playerid, params[])
{
    if(PlayerInfo[playerid][pMutedTime] > 0)
		return SCM(playerid, COLOR_LIGHTRED, "??? ????????? ??? ???????????? ????????.");

	if(isnull(params))
		return SendSyntaxMessage(playerid, "(/gov)ernment [?????????]");

	new faction = PlayerInfo[playerid][pFaction],
		rank = PlayerInfo[playerid][pRank];

    if(faction == 0 || Factions[faction][fType] != FACTION_LEGAL)
		return SCM(playerid, COLOR_GREY, "?? ?? ???????? ? ??????? ?????????.");

	if(!isLeader(playerid) && rank != Factions[faction][fRanks]-1)
		return SCM(playerid, COLOR_LIGHTRED, "???????? ??? ??????? ??????? ????.");

	if(PlayerInfo[playerid][pSettings] & togGov)
		return SCM(playerid, COLOR_LIGHTRED, "??????? ???????? ????? ????????????????? ???????? (/toggov).");

	foreach(Player, i)
	{
		if(0 == IsPlayerLogged(i) || (PlayerInfo[i][pSettings] & togGov))
		    continue;

		if(strlen(params) > MAXLEN)
		{
			new pos = MAXLEN;
			if(pos < MAXLEN-1) pos = MAXLEN;
			SendClientMessageEx(i, COLOR_LSPD, "[?????????? ?????????????] %.*s ...", pos, params);
			SendClientMessageEx(i, COLOR_LSPD, "[?????????? ?????????????] ... %s", params[pos]);
		}
		else
			SendClientMessageEx(i, COLOR_LSPD, "[?????????? ?????????????] %s", params);
	}
	return 1;
}

CMD:toll(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] != LSPD && PlayerInfo[playerid][pFaction] != SASD)
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???? ???????????.");

    if(!PlayerInfo[playerid][pOnDuty])
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???? ?? ????????? (/duty).");

	if(isnull(params))
	{
	    SendSyntaxMessage(playerid, "/toll [open, close, id]");
	    SCM(playerid, COLOR_GRAD2, "[close] - ????????? ??? ?????????.");
	    SCM(playerid, COLOR_GRAD2, "[open] - ????????? ??? ?????????.");
	    SCM(playerid, COLOR_GRAD2, "[0] ?????????/????????? ????????? ? ??????? Richman.");
	    SCM(playerid, COLOR_GRAD2, "[1] ?????????/????????? ????????? Flint County.");
		SCM(playerid, COLOR_GRAD2, "[2] ?????????/????????? ????????? ?????????????? ? Las Venturas.");
		SCM(playerid, COLOR_GRAD2, "[3] Blueberry(??????) - ?????????/????????? ????????? ?? ?????? ????? ? Blueberry.");
		SCM(playerid, COLOR_GRAD2, "[4] Blueberry(?????) - ?????????/????????? ????????? ?? ????? ????? ? Blueberry.");
		return 1;
	}

	if(L_a_RequestAllowedCop > gettime())
 		return SendErrorMessage(playerid, "??? ????? ????????? %i ??????.", L_a_RequestAllowedCop - gettime());

    if(CompareStrings(params, "open"))
	{
	    if(PlayerInfo[playerid][pRank] < 10)
			return SCM(playerid, COLOR_LIGHTRED, "?????? ??????? ???????? ? 10 ?????.");

	    for(new i; i != MAX_TOLLS; i++)
			aTolls[i][E_tLocked] = 0;

        SendFactionMessage(LSPD, COLOR_LSPDNEW, "** HQ: %s %s ?????? ??? ?????? ? ?????? ??? ?????????. **", GetRankName(playerid), GetNameEx(playerid));
        L_a_RequestAllowedCop = gettime() + TOLL_DELAY_COP;
		return 1;
	}
	else if(CompareStrings(params, "close"))
	{
	    if(PlayerInfo[playerid][pRank] < 10)
			return SCM(playerid, COLOR_LIGHTRED, "?????? ??????? ???????? ? 10 ?????.");

		for(new i; i != MAX_TOLLS; i++)
		{
		    aTolls[i][E_tLocked] = 1;
		    Toll_CloseToll(i);
		}

		SendFactionMessage(LSPD, COLOR_LSPDNEW, "** HQ: %s %s ?????? ??? ?????? ? ?????? ??? ?????????. **", GetRankName(playerid), GetNameEx(playerid));
        L_a_RequestAllowedCop = gettime() + TOLL_DELAY_COP;
		return 1;
	}

	new id = strval(params);

	if(id < 0 || id > 4)
	    return SendSyntaxMessage(playerid, "/toll [????? ?????????]");

    if(PlayerInfo[playerid][pRank] < 4)
		return SCM(playerid, COLOR_LIGHTRED, "?????? ??????? ???????? ?? 2 ?????.");

    if(0 == IsPlayerInRangeOfPoint(playerid, TOLL_OPEN_DISTANCE, toll_gate_pos[id][0], toll_gate_pos[id][1], toll_gate_pos[id][2]) && 0 == IsPlayerInRangeOfPoint(playerid, TOLL_OPEN_DISTANCE, toll_gate_pos[id+1][0], toll_gate_pos[id+1][1], toll_gate_pos[id+1][2]))
		return SendErrorMessage(playerid, "?? ?????? ?????????? ????? ???? ??????????.");

	new toll_name[5][28] =
		{"??????? Richman", "Flint County", "?????????????? Las Venturas", "?? ?????? ????? Blueberry", "?? ????? ????? Blueberry"};

	if(aTolls[id][E_tLocked] == 0)
	{
		aTolls[id][E_tLocked] = 1;
		Toll_CloseToll(id);
		aTolls[id+1][E_tLocked] = 1;
		Toll_CloseToll(id+1);
		SendFactionMessage(LSPD, COLOR_LSPDNEW, "** HQ: %s %s ?????? ??? ?????? ? ?????? ????????? %s. **", GetRankName(playerid), GetNameEx(playerid), toll_name[id]);
	}
	else
	{
		aTolls[id][E_tLocked] = 0;
		aTolls[id+1][E_tLocked] = 0;
		SendFactionMessage(LSPD, COLOR_LSPDNEW, "** HQ: %s %s ?????? ??? ?????? ? ?????? ????????? %s. **", GetRankName(playerid), GetNameEx(playerid), toll_name[id]);
	}
	L_a_RequestAllowedCop = gettime() + TOLL_DELAY_COP;
	return 1;
}

CMD:apb(playerid, params[])
{
	new action[24],
		secoption[153],
		tmp[2][128],
		faction = PlayerInfo[playerid][pFaction];

	if(faction != LSPD && faction != SASD)
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???? ???????? ???????.");

    if(!PlayerInfo[playerid][pOnDuty])
			return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???? ?? ????????? (/duty).");

    if (sscanf(params, "s[24]S()[153]", action, secoption))
	{
		SendSyntaxMessage(playerid, "/apb [????????]");
		SCM(playerid, 0xAFAFAFFF, "[????????]:{FFFFFF} create, clear, show, edit, list");
		return 1;
	}

	if(CompareStrings(action, "list"))
	{
	    new count;
	    for(new i = 1; i != MAX_APBS; i++)
	    {
	        if(ApbInfo[i][apbOn] == 0) continue;

	        if(strlen(ApbInfo[i][apbCharge]) > 64)
	            SendClientMessageEx(playerid, COLOR_LIGHTRED, "APB %i:{FFFFFF} %.64s ... (%s)", i, ApbInfo[i][apbCharge], ApbInfo[i][apbSuspect]);
	        else
				SendClientMessageEx(playerid, COLOR_LIGHTRED, "APB %i:{FFFFFF} %s (%s)", i, ApbInfo[i][apbCharge], ApbInfo[i][apbSuspect]);

			count ++;
	    }
	    if(count == 0)
			return SendErrorMessage(playerid, "APB ??????? ?? ???????.");

		return 1;
	}
	else if(CompareStrings(action, "show"))
	{
		new number;

		if(sscanf(secoption,"i", number))
			return SendSyntaxMessage(playerid, "/apb show [????? APB]");

		if(0 == ApbInfo[number][apbOn])
			return SendErrorMessage(playerid, "APB ??????? ?? ???????.");

		SCM(playerid, -1, "____________________________________");
		SendClientMessageEx(playerid, COLOR_LIGHTRED, "?????????????:{FFFFFF} %s", ApbInfo[number][apbSuspect]);
		if(strlen(ApbInfo[number][apbCharge]) > 64)
		{
		    SendClientMessageEx(playerid, COLOR_LIGHTRED, "????????:{FFFFFF} %.64s ...", ApbInfo[number][apbCharge]);
		    SendClientMessageEx(playerid, -1, "... %s", ApbInfo[number][apbCharge][64]);
		}
		else
			SendClientMessageEx(playerid, COLOR_LIGHTRED, "????????:{FFFFFF} %s", ApbInfo[number][apbCharge]);
        SendClientMessageEx(playerid, COLOR_LIGHTRED, "???????:{FFFFFF} %s, %s.", ApbInfo[number][apbOfficer], (ApbInfo[number][apbFaction] == LSPD)?("LSPD"):("SASD"));
		SCM(playerid, -1, "____________________________________");
	}
	else if(CompareStrings(action, "clear"))
	{
		new number;

		if(sscanf(secoption,"i", number))
			return SendSyntaxMessage(playerid, "/apb clear [????? APB]");

		if(0 == ApbInfo[number][apbOn])
			return SendErrorMessage(playerid, "APB ??????? ?? ???????.");

		SendClientMessageEx(playerid, COLOR_LIGHTRED, "?? ???????? APB ??????? ????? %i.", number);

		SendFactionMessage(LSPD, COLOR_LSPDNEW, "* HQ: %s %s ?????? APB ??????? ????? %i.", GetRankName(playerid), GetNameEx(playerid), number);
		SendFactionMessage(SASD, COLOR_LSPDNEW, "* HQ: %s %s ?????? APB ??????? ????? %i.", GetRankName(playerid), GetNameEx(playerid), number);

		new query[128];
		mysql_format(dbHandle, query, sizeof(query), "DELETE FROM `apbs` WHERE `id` = %i", ApbInfo[number][apbID]);
		mysql_tquery(dbHandle, query);

		ApbInfo[number][apbOn] = 0;
		ApbInfo[number][apbID] = 0;
	}
	else if(CompareStrings(action, "edit"))
	{
		new number,
			info[153];

		if(sscanf(secoption,"is[153]", number, info))
			return SendSyntaxMessage(playerid, "/apb edit [????? APB] [?????????????/????????]");

		if(0 == ApbInfo[number][apbOn])
			return SendErrorMessage(playerid, "APB ??????? ?? ??????.");

        if(strfind(info, "/", true) == -1)
			return SendErrorMessage(playerid, "?? ?????? ?????? \"/\".");

		SendClientMessageEx(playerid, COLOR_LIGHTRED, "?? ???????? APB ??????? ????? %i.", number);

		explode(tmp, info, "/");

		format(ApbInfo[number][apbSuspect], MAX_PLAYER_NAME, "%s", tmp[0]);
		format(ApbInfo[number][apbCharge], 128, "%s", tmp[1]);
		ApbInfo[number][apbFaction] = faction;

		SendFactionMessage(LSPD, COLOR_LSPDNEW, "* HQ: %s %s ??????? APB ????? %i.", GetRankName(playerid), GetNameEx(playerid), number);
		SendFactionMessage(SASD, COLOR_LSPDNEW, "* HQ: %s %s ??????? APB ????? %i.", GetRankName(playerid), GetNameEx(playerid), number);

		new query[128 + 128];
		mysql_format(dbHandle,query, sizeof(query), "UPDATE `apbs` SET `charge` = '%s', `suspect` = '%e' WHERE `id` = %i", tmp[1], tmp[0], ApbInfo[number][apbID]);
		mysql_tquery(dbHandle, query);
		return 1;
	}
	else if(CompareStrings(action, "create"))
	{
		new info[153];

		if(sscanf(secoption,"s[153]", info))
			return SendSyntaxMessage(playerid, "/apb create [?????????????/????????]");

        if(strfind(info, "/", true) == -1)
			return SendErrorMessage(playerid, "?? ?????? ?????? \"/\".");

		new apb = -1;
		for(new i = 1; i != MAX_APBS; i++)
		{
			if(ApbInfo[i][apbOn] != 0) continue;
			apb = i;
			break;
		}

		if(apb == -1)
		    return SendErrorMessage(playerid, "??? ????? ??? ????? APB ???????.");

		SendClientMessageEx(playerid, COLOR_LIGHTRED, "?? ??????? APB ??????? ????? %i.", apb);

		explode(tmp, info, "/");

		format(ApbInfo[apb][apbOfficer], MAX_PLAYER_NAME, "%s", GetNameEx(playerid));
		format(ApbInfo[apb][apbSuspect], MAX_PLAYER_NAME, "%s", tmp[0]);
		format(ApbInfo[apb][apbCharge], 128, "%s", tmp[1]);
		ApbInfo[apb][apbFaction] = faction;

		SendFactionMessage(LSPD, COLOR_LSPDNEW, "* HQ: %s %s ??????? ????? APB ???????, ????? %i.", GetRankName(playerid), GetNameEx(playerid), apb);
		SendFactionMessage(SASD, COLOR_LSPDNEW, "* HQ: %s %s ??????? ????? APB ???????, ????? %i.", GetRankName(playerid), GetNameEx(playerid), apb);

        new query[128 + 128];
		mysql_format(dbHandle,query, sizeof(query), "INSERT INTO `apbs` (faction, charge, suspect, officer) VALUES(%i, '%s', '%s', '%s')", faction, tmp[1], tmp[0], GetNameEx(playerid));
		mysql_tquery(dbHandle, query, "ApbCreate", "i", apb);
		return 1;
	}
	return 1;
}

forward ApbCreate(apb);
public ApbCreate(apb)
{
	ApbInfo[apb][apbID] = cache_insert_id();
	ApbInfo[apb][apbOn] = 1;
	return 1;
}

//=========Factions=========//
CMD:changebadges(playerid, params[])
{
	new faction = PlayerInfo[playerid][pFaction];
	if(Factions[faction][fType] == FACTION_MAFIA || Factions[faction][fType] == FACTION_GANG)
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???? ??????? ??????????????? ???????.");

	if(PlayerInfo[playerid][pRank] < 11)
		return SCM(playerid, COLOR_LIGHTRED,"???????? ? 11 ?????.");

    new userid,
        badge;

    if (sscanf(params, "ui", userid, badge))
	    return SendSyntaxMessage(playerid, "/changebadges [playerid/PartOfName] [text]");

    if(!IsPlayerLogged(userid))
		return SendNotConnected(playerid);

	if(badge < 1 || badge > 9999999)
	    return SendErrorMessage(playerid, "???????? ?????.");

	PlayerInfo[userid][pBadgeNumber] = badge;
	SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "?? ???????? %s ????? ?????? ?? %i.", GetNameEx(userid), badge);
	SendClientMessageEx(userid, COLOR_LIGHTBLUE, "%s ??????? ??? ????? ?????? ?? %i.", GetNameEx(playerid), badge);
	return 1;
}

CMD:towcars(playerid, params[])
{
	if(!isLeader(playerid))
		return SCM(playerid, COLOR_LIGHTRED,"?? ?? ????? ???????.");

	new faction = PlayerInfo[playerid][pFaction];
    SendFactionMessageF(faction, COLOR_LIGHTRED, "%s %s ??????????? ???? ?????????????? ????????? ???????.", GetRankName(playerid), GetNameEx(playerid));

    new vehicle,
	    occupied[MAX_VEHICLES char];

    foreach(Player, i)
	{
	    if((vehicle = GetPlayerVehicleID(i)) == 0 || VehicleInfo[vehicle][carFaction] != faction)
	        continue;

		occupied{vehicle} = 1;
	}

	foreach(new i:Vehicle)
	{
		if(occupied{i} == 1 || VehicleInfo[i][carFaction] != faction)
			continue;

		RespawnVehicle(i);
	}
	return 1;
}

CMD:checkplate(playerid, params[])
{
	new faction = PlayerInfo[playerid][pFaction];

	if(faction != LSPD && faction != SASD)
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???? ???????????.");

	if(!PlayerInfo[playerid][pOnDuty])
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???? ?? ????????? (/duty).");

	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???? ????? ? ???????????? ?????????.");

	new vehicle;
	if((vehicle = GetNearVehicle(playerid, 2.5)) == 0)
	    return SendErrorMessage(playerid, "????? ? ???? ??? ???????????? ???????.");

	if(VehicleInfo[vehicle][carRegistered] == 0)
        SendClientMessageEx(playerid, COLOR_GREEN, "???.????? ????????????? ???????? %s: ?? ????????????????.", VehicleNames[GetVehicleModel(vehicle)-400]);
	else
		SendClientMessageEx(playerid, COLOR_GREEN, "???.????? ????????????? ???????? %s: %s.", VehicleNames[GetVehicleModel(vehicle)-400], VehicleInfo[vehicle][carPlate]);
	return 1;
}

CMD:siren(playerid, params[])
{
    new faction = PlayerInfo[playerid][pFaction],
		vehicle = GetPlayerVehicleID(playerid),
		model = GetVehicleModel(vehicle),
		siren_id;

	if(faction != CITY && faction != LSPD && faction != LSFD && faction != SASD && faction != DOCS)
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???? ???????????/??????????? ??????/???????????/?????????????.");

    if (VehicleInfo[vehicle][carFaction] != PlayerInfo[playerid][pFaction])
		    return SendErrorMessage(playerid, "?? ?????? ???? ? ????????? ??????????.");

	if (sscanf(params, "i", siren_id))
	    return SendSyntaxMessage(playerid, "/siren [1-3]");

	if(siren_id < 1 || siren_id > 3)
		return SendErrorMessage(playerid, "???????????? ID ??????: 1-3.");

	if(siren_id == 1)
	{
		if(IsValidDynamicObject(VehicleInfo[vehicle][carSiren][0]))
		{
		    SCM(playerid, -1, "?????? ?????.");
			DestroyDynamicObject(VehicleInfo[vehicle][carSiren][0]);
			VehicleInfo[vehicle][carSiren][0] = INVALID_OBJECT_ID;
		    return 1;
		}

		if(model != 560 && model != 541 && model != 525 && model != 426 && model != 579 && model != 415 && model != 554 && model != 546 && model != 566 && model != 561 && model != 547 && model != 482)
			return SendErrorMessage(playerid, "?????? ????? ????????? ?????? ?? Sultan/Bullet/Towtruck/Premier/Huntley/Cheetah/Yosemite/Intruder/Tahoma/Stratum/Primo/Burrito.");

	    VehicleInfo[vehicle][carSiren][0] = CreateDynamicObject((model != 525)?(18646):(19419), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1, 300.0);
		switch(model)
	    {
	        case 560: AttachDynamicObjectToVehicle(VehicleInfo[vehicle][carSiren][0], vehicle, 0.571924, 0.068632, 0.860007, 0.000000, 0.000000, -181.148086);
	        case 541: AttachDynamicObjectToVehicle(VehicleInfo[vehicle][carSiren][0], vehicle, 0.442310, -0.091429, 0.670001, 0.000000, -2.299999, -178.874786);
	        case 426: AttachDynamicObjectToVehicle(VehicleInfo[vehicle][carSiren][0], vehicle, 0.570416, -0.012622, 0.890005, 0.000000, 0.000000, -91.267646);
	        case 525: AttachDynamicObjectToVehicle(VehicleInfo[vehicle][carSiren][0], vehicle, 0.0, -0.485, 1.36, 0.000000, 0.000000, 180.0);
	        case 579: AttachDynamicObjectToVehicle(VehicleInfo[vehicle][carSiren][0], vehicle, 0.640568, -0.021741, 1.260003, 0.000000, 0.000000, -90.153976);
	        case 415: AttachDynamicObjectToVehicle(VehicleInfo[vehicle][carSiren][0], vehicle, 0.424245, -0.241412, 0.640021, 3.000001, -3.499999, -181.499969);
	        case 554: AttachDynamicObjectToVehicle(VehicleInfo[vehicle][carSiren][0], vehicle, 0.734659, 0.117240, 1.059349, -4.199999, 0.000000, -87.859664);
	        case 546: AttachDynamicObjectToVehicle(VehicleInfo[vehicle][carSiren][0], vehicle, 0.591740, -0.153342, 0.870005, 0.000000, 0.000000, -269.351074);
	        case 566: AttachDynamicObjectToVehicle(VehicleInfo[vehicle][carSiren][0], vehicle, 0.660138, 0.024635, 0.869999, 0.000000, 0.000000, -88.731002);
	        case 561: AttachDynamicObjectToVehicle(VehicleInfo[vehicle][carSiren][0], vehicle, 0.428671, 0.080074, 0.850004, -2.799999, 0.000000, -88.665367);
	        case 547: AttachDynamicObjectToVehicle(VehicleInfo[vehicle][carSiren][0], vehicle, 0.530513, 0.002143, 0.916606, -3.899999, 0.000000, -89.768531);
	        case 482: AttachDynamicObjectToVehicle(VehicleInfo[vehicle][carSiren][0], vehicle, 0.515804, 0.702674, 0.950006, 0.000000, 0.000000, -92.038864);
	    }
	    Streamer_Update(playerid, STREAMER_TYPE_OBJECT);
	    return SCM(playerid, -1, "?????? ???????????.");
	}
	else if(siren_id == 2)
	{
	    if(IsValidDynamicObject(VehicleInfo[vehicle][carSiren][1]))
		{
		    SCM(playerid, -1, "?????? ?????.");
			DestroyDynamicObject(VehicleInfo[vehicle][carSiren][1]);
			VehicleInfo[vehicle][carSiren][1] = INVALID_OBJECT_ID;
		    return 1;
		}

	    if(model != 560 && model != 426 && model != 579 && model != 566 && model != 561 && model != 547 && model != 546)
			return SendErrorMessage(playerid, "?????? ????? ????????? ?????? ?? Sultan/Premier/Huntley/Tahoma/Stratum/Primo/Intruder.");

        VehicleInfo[vehicle][carSiren][1] = CreateDynamicObject(19419, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1, 300.0);
        switch(model)
	    {
	        case 560: AttachDynamicObjectToVehicle(VehicleInfo[vehicle][carSiren][1], vehicle, 0.000000, -1.289999, 0.394999, 0.000000, 0.000000, 0.000000);
	        case 426: AttachDynamicObjectToVehicle(VehicleInfo[vehicle][carSiren][1], vehicle, 0.000000, -1.669998, 0.349999, 0.000000, 0.000000, 0.000000);
	        case 579: AttachDynamicObjectToVehicle(VehicleInfo[vehicle][carSiren][1], vehicle, 0.005192, -2.445963, 0.521951, 0.000000, 0.000000, -359.884796);
	        case 566: AttachDynamicObjectToVehicle(VehicleInfo[vehicle][carSiren][1], vehicle, 0.009878, -1.681756, 0.400007, 0.000000, 0.000000, -0.010757);
	        case 561: AttachDynamicObjectToVehicle(VehicleInfo[vehicle][carSiren][1], vehicle, -0.004864, -2.317730, 0.249995, 0.000000, 0.000000, -0.192703);
	        case 547: AttachDynamicObjectToVehicle(VehicleInfo[vehicle][carSiren][1], vehicle, -0.001344, -1.571307, 0.400003, 0.000000, 0.000000, -0.468620);
	        case 546: AttachDynamicObjectToVehicle(VehicleInfo[vehicle][carSiren][1], vehicle, 0.014445, -1.771190, 0.340004, 0.000000, 0.000000, -359.851013);
	    }
	    Streamer_Update(playerid, STREAMER_TYPE_OBJECT);
		return SCM(playerid, -1, "?????? ???????????.");
	}
	else if(siren_id == 3)
	{
	    if(IsValidDynamicObject(VehicleInfo[vehicle][carSiren][2]))
		{
		    SCM(playerid, -1, "?????? ?????.");
			DestroyDynamicObject(VehicleInfo[vehicle][carSiren][2]);
			VehicleInfo[vehicle][carSiren][2] = INVALID_OBJECT_ID;

			DestroyDynamicObject(VehicleInfo[vehicle][carSiren][3]);
			VehicleInfo[vehicle][carSiren][3] = INVALID_OBJECT_ID;

			DestroyDynamicObject(VehicleInfo[vehicle][carSiren][4]);
			VehicleInfo[vehicle][carSiren][4] = INVALID_OBJECT_ID;
		    return 1;
		}

	    if(model != 541 && model != 415 && model != 560)
			return SendErrorMessage(playerid, "?????? ????? ????????? ?????? ?? Bullet/Cheetah/Sultan.");

        if(model == 541)
		{
			VehicleInfo[vehicle][carSiren][2] = CreateDynamicObject(19620, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1, 300.0);
			AttachDynamicObjectToVehicle(VehicleInfo[vehicle][carSiren][2], vehicle, 0.000000, 0.000000, 0.659999, 0.000000, 0.000000, -359.823394);
			VehicleInfo[vehicle][carSiren][3] = CreateDynamicObject(19797, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1, 300.0);
			AttachDynamicObjectToVehicle(VehicleInfo[vehicle][carSiren][3], vehicle, 0.006984, -2.280384, -0.190001, 0.000000, 0.000000, -359.824523);
			VehicleInfo[vehicle][carSiren][4] = CreateDynamicObject(19797, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1, 300.0);
			AttachDynamicObjectToVehicle(VehicleInfo[vehicle][carSiren][4], vehicle, -0.007443, 2.430286, -0.070001, 0.000000, 0.000000, -180.024566);
		}
		if(model == 415)
		{
			VehicleInfo[vehicle][carSiren][2] = CreateDynamicObject(19620, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1, 300.0);
			AttachDynamicObjectToVehicle(VehicleInfo[vehicle][carSiren][2], vehicle, 0.000475, -0.270263, 0.630008, 0.000000, 0.000000, -359.899139);
			VehicleInfo[vehicle][carSiren][3] = CreateDynamicObject(19797, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1, 300.0);
			AttachDynamicObjectToVehicle(VehicleInfo[vehicle][carSiren][3], vehicle, -0.005538, 2.660761, -0.210004, 0.000000, 0.000000, -180.099121);
			VehicleInfo[vehicle][carSiren][4] = CreateDynamicObject(19797, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1, 300.0);
			AttachDynamicObjectToVehicle(VehicleInfo[vehicle][carSiren][4], vehicle, 0.003255, -2.460503, -0.140003, 0.000000, 0.000000, 0.266403);
		}
		if(model == 560)
		{
			VehicleInfo[vehicle][carSiren][2] = CreateDynamicObject(19620, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1, 300.0);
			AttachDynamicObjectToVehicle(VehicleInfo[vehicle][carSiren][2], vehicle, -0.000927, 0.110103, 0.870014, 0.000000, 0.000000, -359.517333);
			VehicleInfo[vehicle][carSiren][3] = CreateDynamicObject(19797, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1, 300.0);
			AttachDynamicObjectToVehicle(VehicleInfo[vehicle][carSiren][3], vehicle, 0.004800, -2.370894, 0.105430, 0.000000, 0.000000, -359.912292);
			VehicleInfo[vehicle][carSiren][4] = CreateDynamicObject(19797, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1, 300.0);
			AttachDynamicObjectToVehicle(VehicleInfo[vehicle][carSiren][4], vehicle, -0.003252, 2.561954, 0.050001, 0.000000, 0.000000, -179.912200);
		}
		Streamer_Update(playerid, STREAMER_TYPE_OBJECT);
		return SCM(playerid, -1, "?????? ???????????.");
	}
	return 1;
}

CMD:licenseweapon(playerid, params[])
{
    new userid,
		price;

	if(sscanf(params,"ui",userid, price))
		return SendSyntaxMessage(playerid, "/licenseweapon [playerid/PartOfName] [?????????]");

	if(PlayerInfo[playerid][pFaction] != LSPD)
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???????? ? LSPD.");

	if(PlayerInfo[playerid][pAuthwep] != 1)
        return SCM(playerid, COLOR_LIGHTRED, "? ??? ??? ?????????? ???????? ???????? ?? ??????.");

	if(price < 1 || price > 10000)
	    return SendErrorMessage(playerid, "???????????? ?????????.");

	if(!IsPlayerLogged(userid))
		return SendNotConnected(playerid);

	if(!PlayerNearPlayer(3.0, playerid, userid))
		return SendNotNearPlayer(playerid);

    if(PlayerInfo[userid][pWepLic] != 0)
        return SCM(playerid, COLOR_LIGHTRED, "? ?????? ??? ???? ???????? ?? ??????.");

	if(pTemp[userid][pWepPlayer] == playerid)
		return SendErrorMessage(playerid, "?? ??? ?????????? ?????? ?????????? ????????.");

	pTemp[userid][pWepPlayer] = playerid;
	pTemp[userid][pWepPrice] = price;
	SetPVarInt(userid, #accept_time, gettime() + 30);
	SendClientMessageEx(userid, COLOR_LIGHTBLUE, "%s %s ?????????? ??? ?????????? ???????? ?? ?????? ?? $%i. (??????? Y ????? ?????? ????????)", GetRankName(playerid), GetNameEx(playerid), price);
	SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "?? ?????????? %s ?????????? ???????? ?? ?????? ?? $%i.", GetNameEx(userid), price);
	return 1;
}

CMD:authweapon(playerid, params[])
{
    new userid;
	if(sscanf(params,"u",userid))
		return SendSyntaxMessage(playerid, "/authweapon [playerid/PartOfName]");

	if(PlayerInfo[playerid][pFaction] != LSPD)
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???????? ? LSPD.");

	if(!isLeader(playerid))
        return SCM(playerid, COLOR_LIGHTRED, "?? ?? ????? ???????.");

	if(!IsPlayerLogged(userid))
		return SendNotConnected(playerid);

	if(!PlayerNearPlayer(3.0, playerid, userid))
		return SendNotNearPlayer(playerid);

    if(PlayerInfo[userid][pFaction] != PlayerInfo[playerid][pFaction])
        return SCM(playerid, COLOR_LIGHTRED, "????? ?? ??????? ? ????? ???????????.");

	if(PlayerInfo[userid][pAuthwep] == 0)
	{
		PlayerInfo[userid][pAuthwep] = 1;
		SendClientMessageEx(userid, COLOR_LIGHTBLUE, "%s %s ?????(-?) ?????????? ???????? ???????? ?? ??????.", GetRankName(playerid), GetNameEx(playerid));
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "?? ?????? ?????????? ???????? ???????? ?? ?????? %s.", GetNameEx(userid));
		return 1;
	}
	PlayerInfo[userid][pAuthwep] = 0;
	SendClientMessageEx(userid, COLOR_LIGHTBLUE, "%s %s ??????(-?) ?????????? ???????? ???????? ?? ??????", GetRankName(playerid), GetNameEx(playerid));
	SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "?? ??????? ?????????? ???????? ???????? ?? ?????? %s.", GetNameEx(userid));
	return 1;
}

CMD:authswat(playerid, params[])
{
	new userid;
	if(sscanf(params,"u",userid))
		return SendSyntaxMessage(playerid, "/authswat [playerid/PartOfName]");

	if(PlayerInfo[playerid][pFaction] != LSPD && PlayerInfo[playerid][pFaction] != SASD)
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???? ???????????.");

    if(!isLeader(playerid))
        return SCM(playerid, COLOR_LIGHTRED, "?? ?? ????? ???????.");

	if(!IsPlayerLogged(userid))
		return SendNotConnected(playerid);

	if(!PlayerNearPlayer(3.0, playerid, userid))
		return SendNotNearPlayer(playerid);

    if(PlayerInfo[userid][pFaction] != PlayerInfo[playerid][pFaction])
        return SCM(playerid, COLOR_LIGHTRED, "????? ?? ??????? ? ????? ???????????.");

	if(PlayerInfo[userid][pSwat] == 0)
	{
		PlayerInfo[userid][pSwat] = 1;
		SendClientMessageEx(userid, COLOR_LIGHTBLUE, "%s %s ?????(-?) ?????????? ?????????? ?????? ??????? S.W.A.T", GetRankName(playerid), GetNameEx(playerid));
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "?? ?????? ?????????? %s S.W.A.T.", GetNameEx(userid));
		return 1;
	}
	PlayerInfo[userid][pSwat] = 0;
	SendClientMessageEx(userid, COLOR_LIGHTBLUE, "%s %s ??????(-?) ?????????? ?????????? ?????? ??????? S.W.A.T", GetRankName(playerid), GetNameEx(playerid));
	SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "?? ??????? ?????????? %s S.W.A.T.", GetNameEx(userid));
	return 1;
}

CMD:impound(playerid, params[])
{
    new faction = PlayerInfo[playerid][pFaction],
		vehicle = GetPlayerVehicleID(playerid);

	if(faction != LSPD && faction != SASD)
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???? ???????????.");

	if(!PlayerInfo[playerid][pOnDuty])
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???? ?? ????????? (/duty).");

	if(!IsATowTruck(vehicle))
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ?????????? ? ??????????.");

    if(!IsTrailerAttachedToVehicle(vehicle))
		return SCM(playerid, COLOR_LIGHTRED, "? ?????????? ?????? ?? ??????????.");

	new trailer = GetVehicleTrailer(vehicle);
	if(VehicleInfo[trailer][carOwnerID] == 0)
		return SCM(playerid, COLOR_GREY, "?????????? ?? ?????-??????? ????? ?????? ?????? ?????????.");

	if(!PlayerToPoint(300.0, playerid, -1209.9501,-1064.3761,128.2656))
		return SCM(playerid, COLOR_LIGHTRED, "?? ??????? ?????? ?? ?????-???????.");


	DetachTrailerFromVehicle(vehicle);
	GetVehiclePos(trailer, VehicleInfo[trailer][carParkX], VehicleInfo[trailer][carParkY], VehicleInfo[trailer][carParkZ]);
    GetVehicleZAngle(trailer, VehicleInfo[trailer][carParkA]);

	SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "%s - ????????? ?? ?????-???????.", VehicleNames[GetVehicleModel(trailer)-400]);

	VehicleEngine(trailer, false);
	Save_Car(trailer);

	foreach(Player, i)
	{
	    if(0 == IsPlayerLogged(i) || PlayerInfo[i][pCarKey] != trailer)
	        continue;

		SendClientMessageEx(i, COLOR_LIGHTBLUE,  "??? %s ??? ?????????? ? ????????? ?? ?????-??????? %s %s.", VehicleNames[GetVehicleModel(trailer)-400], GetRankName(playerid), GetNameEx(playerid));
		break;
	}
	return 1;
}

CMD:ptow(playerid, params[])
{
	new faction = PlayerInfo[playerid][pFaction],
		vehicle = GetPlayerVehicleID(playerid);

	if(faction != LSPD && faction != SASD)
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???? ???????????.");

	if(!PlayerInfo[playerid][pOnDuty])
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???? ?? ????????? (/duty).");

	if(!IsATowTruck(vehicle))
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ?????????? ? ??????????.");

    if(IsTrailerAttachedToVehicle(vehicle))
	{
		DetachTrailerFromVehicle(vehicle);
		return SCM(playerid, COLOR_LIGHTRED, "????? ???????????? ???????????? ???????? ???? ????????.");
	}

	new vehid;
    if(sscanf(params,"i", vehid))
		return SendSyntaxMessage(playerid, "/ptow [?? ??????????]");

	if(vehid < 1 || vehid > MAX_VEHICLES-1)
	    return 1;

    if(GetNearVehicle(playerid, 14.0, vehid) == 0)
		return SendErrorMessage(playerid, "?????? ????????? ????? ?????????? ????? ? ????? ???????????.");

    if(IsABoat(vehid) || IsAPlane(vehid) || IsAHelicopter(vehid) || IsABiker(vehid))
		return SCM(playerid, COLOR_GREY,"?????? ????????? ?????? ????????.");

    AttachTrailerToVehicle(vehid, vehicle);
	SendClientMessageEx(playerid, COLOR_GREEN, "?? ???????? - %s. ??????????? /ptow - ????????.", VehicleNames[GetVehicleModel(vehid)-400]);
	return 1;
}

CMD:cctv(playerid, params[])
{
	new id,
		faction = PlayerInfo[playerid][pFaction];

	if(faction != LSPD && faction != SASD)
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???? ???????????.");

	if(sscanf(params,"d", id))
	{
		SendSyntaxMessage(playerid, "/cctv [?? ??????]");
		SCM(playerid, COLOR_LIGHTBLUE, "|_____________?????? ??????????_____________|");
		for(new i = 0; i < MAX_CCTV; i++)
		{
		    if(0 == CCTVInfo[i][tvObjectOn])
		        continue;

			SendClientMessageEx(playerid, COLOR_GREY, "[?????? %i]: %s.", i, CCTVInfo[i][tvName]);
		}
		return 1;
	}

    if(0 == IsPlayerInRangeOfPoint(playerid, 5.0, 2828.8884,-945.7372,1040.2319))
        return SendErrorMessage(playerid, "?????? ??????? ?????????? ?????.");

	if(id < 0 || id > MAX_CCTV-1 || !CCTVInfo[id][tvObjectOn])
		return SendErrorMessage(playerid, "?????? ID: %i ?? ??????????.", id);

    if(pTemp[playerid][pCCTV] == 0)
		SavePlayerPos(playerid);

	pTemp[playerid][pCCTV] = 1;
	TogglePlayerSpectating(playerid, 1);
	AttachCameraToDynamicObject(playerid, CCTVInfo[id][tvObject]);

	SCM(playerid, COLOR_WHITE, "{FFFF00}HINT{FFFFFF}: ??????????? ???? ??? ?????????? ???????, /exitcctv ??? ?????? ?? ?????? ?????????.");
	return 1;
}

CMD:exitcctv(playerid, params[])
{
	if(pTemp[playerid][pCCTV] == 0)
		return SCM(playerid, COLOR_LIGHTRED, "?? ?? ?????????? ????? ??????.");

	TogglePlayerSpectating(playerid, 0);
	return 1;
}

ALTX:createspike("/cs");
CMD:createspike(playerid, params[])
{
	new faction = PlayerInfo[playerid][pFaction];
	if(faction != LSPD && faction != SASD)
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???? ???????????.");

	if(!PlayerInfo[playerid][pOnDuty])
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???? ?? ????????? (/duty).");

	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
		return SendErrorMessage(playerid, "?? ?? ?????? ?????????? ? ??????????.");

	if(GetWorld(playerid) != 0 || GetInterior(playerid) != 0)
	    return SendErrorMessage(playerid, "?? ?????? ?????????? ?? ?????.");

	new Float:x,
		Float:y,
		Float:z,
		Float:a,
		location[MAX_ZONE_NAME];

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);

	if(CreateStrip(x, y, z, a) == -1)
	    return SendErrorMessage(playerid, "?????????? ???????????? ?????????? ?????.");

	GetPlayer2DZone(playerid, location, MAX_ZONE_NAME);

	SendFactionMessage(LSPD, COLOR_LSPD, "* HQ: %s %s ????????? ???? ?? ?????? %s.", GetRankName(playerid), GetNameEx(playerid), location);
	SendFactionMessage(SASD, COLOR_LSPD, "* HQ: %s %s ????????? ???? ?? ?????? %s.", GetRankName(playerid), GetNameEx(playerid), location);
	return 1;
}

ALTX:removespike("/rems");
CMD:removespike(playerid, params[])
{
	new faction = PlayerInfo[playerid][pFaction];
	if(faction != LSPD && faction != SASD)
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???? ???????????.");

	if(!PlayerInfo[playerid][pOnDuty])
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???? ?? ????????? (/duty).");

	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
		return SendErrorMessage(playerid, "?? ?? ?????? ?????????? ? ??????????.");

	for(new i; i != MAX_SPIKE; i++)
	{
	    if(SpikeInfo[i][sCreated] == 0 || !IsPlayerInRangeOfPoint(playerid, 4.0, SpikeInfo[i][sX], SpikeInfo[i][sY], SpikeInfo[i][sZ]))
	        continue;

		SendClientMessageEx(playerid, COLOR_GREEN, "???? ID: %i ???????.", i);
		SpikeInfo[i][sCreated] = 0;
		SpikeInfo[i][sX] = 0.0;
		SpikeInfo[i][sY] = 0.0;
		SpikeInfo[i][sZ] = 0.0;
		DestroyDynamicObject(SpikeInfo[i][sObject]);
	    break;
	}
	return 1;
}

ALTX:removeallspikes("/ras");
CMD:removeallspikes(playerid, params[])
{
	new faction = PlayerInfo[playerid][pFaction];
	if(faction != LSPD && faction != SASD)
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???? ???????????.");

	if(!PlayerInfo[playerid][pOnDuty])
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???? ?? ????????? (/duty).");

	for(new i; i != MAX_SPIKE; i++)
	{
	    if(SpikeInfo[i][sCreated] == 0)
	        continue;

        SpikeInfo[i][sCreated] = 0;
		SpikeInfo[i][sX] = 0.0;
		SpikeInfo[i][sY] = 0.0;
		SpikeInfo[i][sZ] = 0.0;
		DestroyDynamicObject(SpikeInfo[i][sObject]);
	}

	SendFactionMessage(LSPD, COLOR_LSPD, "* HQ: ??? ???? ?? ??????? ???? ??????? %s %s", GetRankName(playerid), GetNameEx(playerid));
	SendFactionMessage(SASD, COLOR_LSPD, "* HQ: ??? ???? ?? ??????? ???? ??????? %s %s", GetRankName(playerid), GetNameEx(playerid));
	return 1;
}

CMD:revoke(playerid, params[])
{
	new userid,
		type[24],
		faction = PlayerInfo[playerid][pFaction];

	if(faction != LSPD && faction != SASD)
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???? ???????????.");

    if(!PlayerInfo[playerid][pOnDuty])
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???? ?? ????????? (/duty).");

	if(sscanf(params,"us[24]", userid, type))
		return SendSyntaxMessage(playerid, "/revoke [playerid/PartOfName] [carlicense, flylicense, weapons]");

	if(userid == playerid)
		return SCM(playerid, COLOR_LIGHTRED, "???????? ? ????? ?????????.");

	if(!IsPlayerLogged(userid))
		return SendNotConnected(playerid);

	if(!PlayerNearPlayer(4.0, playerid, userid))
		return SendNotNearPlayer(playerid);

	if(CompareStrings(type, "carlicense"))
	{
	    if(PlayerInfo[userid][pCarLic] == 0)
	        return SendErrorMessage(playerid, "? ?????? ??? ????????????? ?????????????.");

		new mes[128];
		format(mes, sizeof(mes), "???????? ? %s ???????????? ?????????????.", GetNameWithMask(userid));
		cmd::me(playerid, mes);

		SendClientMessageEx(userid, COLOR_WHITE, "???? ???????????? ????????????? ???? ???????? %s.", GetNameWithMask(playerid));
		PlayerInfo[userid][pCarLic] = 0;
		return 1;
	}
	if(CompareStrings(type, "flylicense"))
	{
	    if(PlayerInfo[userid][pFlyLic] == 0)
	        return SendErrorMessage(playerid, "? ?????? ??? ???????? ?? ??????.");

	    new mes[128];
		format(mes, sizeof(mes), "???????? ? %s ???????? ?? ??????.", GetNameWithMask(userid));
		cmd::me(playerid, mes);

		SendClientMessageEx(userid, COLOR_WHITE, "???? ???????? ?? ?????? ???? ???????? %s.", GetNameWithMask(playerid));
		PlayerInfo[userid][pFlyLic] = 0;
		return 1;
	}
	if(CompareStrings(type, "weapons"))
	{
		if(PlayerInfo[userid][pWeap][0] == 0 && PlayerInfo[userid][pWeap][1] == 0 && PlayerInfo[userid][pWeap][2] == 0 && PlayerInfo[userid][pWeap][3] == 0)
		    return SendErrorMessage(playerid, "? ?????? ??? ??????");

	    new mes[128];
		format(mes, sizeof(mes), "???????? ? %s ??????.", GetNameWithMask(userid));
		cmd::me(playerid, mes);

		SendClientMessageEx(userid, COLOR_WHITE, "???? ?????? ???? ???????? %s.", GetNameWithMask(playerid));
		ac_ResetPlayerWeapons(userid);
		return 1;
	}
	SendSyntaxMessage(playerid, "/revoke [playerid/PartOfName] [carlicense, weplicense, flylicense, weapons]");
	return 1;
}

CMD:detain(playerid, params[])
{
	new userid,
		faction = PlayerInfo[playerid][pFaction];

	if(faction != LSPD && faction != SASD && faction != DOCS)
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???? ???????????/??????????? ??????.");

	if(sscanf(params,"u", userid))
		return SendSyntaxMessage(playerid, "/detain [playerid/PartOfName]");

	if(userid == playerid)
		return SCM(playerid, COLOR_LIGHTRED, "?????? ???????????? ?? ????.");

	if(!PlayerInfo[playerid][pOnDuty])
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???? ?? ????????? (/duty).");

	if(!IsPlayerInAnyVehicle(playerid))
		return SendNotInVehicle(playerid);

	if(!IsPlayerLogged(userid))
		return SendNotConnected(playerid);

	if(!PlayerNearPlayer(10.0, playerid, userid))
		return SendNotNearPlayer(playerid);

	if(!IsPlayerInAnyVehicle(userid) || VehicleInfo[GetPlayerVehicleID(userid)][carFaction] != PlayerInfo[playerid][pFaction])
		return SCM(playerid, COLOR_LIGHTRED, "????? ?? ????????? ? ??????????? ??????????.");

	new mes[128];
	if(IsPlayerFreeze(userid) == 0)
	{
		format(mes, sizeof(mes), "????????? ??? ????? %s.", GetNameWithMask(userid));
		FreezePlayer(userid);
	}
	else
	{
		format(mes, sizeof(mes), "%s ????????????? ??? ?????.", GetNameWithMask(userid));
		UnFreezePlayer(userid);
	}
	cmd::me(playerid, mes);
	return 1;
}

CMD:arrest(playerid, params[])
{
	new userid,
		time,
		info[128],
		faction = PlayerInfo[playerid][pFaction];

	if(faction != LSPD && faction != SASD)
		return SendErrorMessage(playerid, "?? ?????? ???? ???????????.");

	if(sscanf(params,"uds[128]", userid, time, info))
		return SendSyntaxMessage(playerid, "/arrest [playerid/PartOfName] [?????(??????)] [???????]");

	if(!PlayerInfo[playerid][pOnDuty])
		return SendErrorMessage(playerid, "?? ?????? ????????? ?? ?????????.");

	new arrestid = 0;
	if((arrestid = GetArrestID(playerid)) == 0)
        return SendErrorMessage(playerid, "?? ?????? ?????????? ? ?????!");

	if(!IsPlayerLogged(userid))
		return SendNotConnected(playerid);

	if(!PlayerNearPlayer(3.0, playerid, userid))
		return SendNotNearPlayer(playerid);

    if(userid == playerid)
		return SendErrorMessage(playerid, "?? ?? ?????? ???????????? ?????? ???????? ?? ????.");

    if(PlayerInfo[userid][pJailed])
		return SendErrorMessage(playerid, "????? ??? ????????? ??? ???????.");

	if(time < 1 || time > 60)
		return SCM(playerid, COLOR_GRAD2, "????? ?????? ?? ????? ????????? 60 ????? ??? ???? ????? 1 ??????.");

    Add_Arrest(playerid, userid, time);
	PlayerInfo[userid][pJailed] = arrestid;
	PlayerInfo[userid][pJailTime] = time * 60;
	PlayerInfo[userid][pArrested]++;
	PutPlayerInPrison(userid);
	SendErrorMessage(userid, "?? ???? ??????????. ?????: %s ?????.", FormatNumber(time));
	return 1;
}

CMD:prison(playerid, params[])
{
	new userid,
		time,
		info[128],
		faction = PlayerInfo[playerid][pFaction];

	if(faction != LSPD && faction != SASD && faction != DOCS)
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???? ???????????/??????????? ??????.");

	if(sscanf(params,"uds[128]", userid, time, info))
		return SendSyntaxMessage(playerid, "/prison [playerid/PartOfName] [?????(??????)] [???????]");

	if(!PlayerInfo[playerid][pOnDuty])
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ????????? ?? ?????????.");

	if(!PlayerToPoint(5.0, playerid, 241.6535,-315.2582,947.9460))
		return SCM(playerid, COLOR_LIGHTRED, "?? ?? ? ??????.");

	if(!IsPlayerLogged(userid))
		return SendNotConnected(playerid);

	if(!PlayerNearPlayer(3.0, playerid, userid))
		return SendNotNearPlayer(playerid);

	if(time < 1 || time > 1000)
		return SCM(playerid, COLOR_GRAD2, "????? ?? ????? ????????? 1,000 ????? ??? ???? ????? 1 ??????.");

	if(userid == playerid)
		return SCM(playerid, COLOR_LIGHTRED, "?? ?? ?????? ???????????? ?????? ???????? ?? ????.");

	PlayerInfo[userid][pPrisoned] = random(sizeof(prison_sadoc));
	PlayerInfo[userid][pJailed] = PRISON_JAIL;
	PlayerInfo[userid][pJailTime] = time * 60;
	PlayerInfo[userid][pIsolateTime] = 0;

	SendClientMessageEx(userid, COLOR_LIGHTRED, "?? ???? ???????? ? ??????. ?????: %s ?????.", FormatNumber(time));
	SendClientMessageEx(userid, COLOR_GRAD2, "??????: ??? ????? ???????????? - A%i(/myprisonnumber).", PlayerInfo[userid][pPrisoned]+100);
	return 1;
}

CMD:free(playerid, params[])
{
	new userid;

	if(PlayerInfo[playerid][pFaction] != DOCS)
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???? ??????????? ??????.");

	if(sscanf(params,"u", userid))
		return SendSyntaxMessage(playerid, "/free [playerid/PartOfName]");

	if(!PlayerInfo[playerid][pOnDuty])
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ????????? ?? ?????????.");

	if(!PlayerToPoint(30.0, playerid, 555.5505,-474.4340,915.6733))
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????????? ?? ? ??????.");

	if(!IsPlayerLogged(userid))
		return SendNotConnected(playerid);

	if(!PlayerNearPlayer(3.0, playerid, userid))
		return SendNotNearPlayer(playerid);

	if(userid == playerid)
		return SCM(playerid, COLOR_LIGHTRED, "?? ?? ?????? ???????????? ?????? ???????? ?? ????.");

	if(PlayerInfo[userid][pJailed] != PRISON_JAIL)
		return SCM(playerid, COLOR_LIGHTRED, "????? ????????? ?? ? ??????.");

	if(PlayerInfo[playerid][pRank] < 6)
		return SCM(playerid, COLOR_LIGHTRED, "?? ?? ?????? ????????? ???????????? ?? ??????.");

	SetPlayerPosEx(userid, 135.2682,1947.4398,19.3663);
	SetInterior(userid, 0);
	SetWorld(userid, 0);

	PlayerInfo[userid][pIsolateTime] = 0;
	PlayerInfo[userid][pJailTime] = 0;
	PlayerInfo[userid][pJailed] = 0;

	if(IsValidDynamic3DTextLabel(PrisonLabel[userid]))
	{
		DestroyDynamic3DTextLabel(PrisonLabel[userid]);
  		PrisonLabel[userid] = Text3D:INVALID_3DTEXT_ID;
	}

	GameTextForPlayer(userid,"~g~Freedom~n~~w~Try to be a better citizen",5000,1);
	SendClientMessageEx(userid, COLOR_LIGHTRED, "?? ???????? ???????? ?? %s %s.", GetRankName(playerid), GetNameEx(playerid));
	return 1;
}

CMD:bort(playerid, params[])
{
    new faction = PlayerInfo[playerid][pFaction];

	if(faction != LSPD && faction != SASD && faction != DOCS && faction != LSFD && faction != CITY)
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???? ???????????/??????????? ??????/??????????.");

    if(IsPlayerInAnyVehicle(playerid))
		return SendErrorMessage(playerid, "?? ?? ?????? ?????????? ? ??????????.");

    if(!PlayerInfo[playerid][pOnDuty])
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???? ?? ????????? (/duty).");

	if(faction == LSFD)
    	ShowModelSelectionMenu(playerid, "_", MODEL_SELECTION_BORT, bort_list_fd, sizeof(bort_list_fd));
    else if(faction == CITY)
        ShowModelSelectionMenu(playerid, "_", MODEL_SELECTION_BORT, bort_list_city, sizeof(bort_list_city));
	else
     	ShowModelSelectionMenu(playerid, "_", MODEL_SELECTION_BORT, bort_list, sizeof(bort_list));
	return 1;
}

ALTX:bortlist("/bl");
CMD:bortlist(playerid, params[])
{
    new faction = PlayerInfo[playerid][pFaction];

	if(faction != LSPD && faction != SASD && faction != DOCS && faction != LSFD && faction != CITY)
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???? ???????????/??????????? ??????/??????????.");

    if(IsPlayerInAnyVehicle(playerid))
		return SendErrorMessage(playerid, "?? ?? ?????? ?????????? ? ??????????.");

    if(!PlayerInfo[playerid][pOnDuty])
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???? ?? ????????? (/duty).");

    new count,
		str[512] = "- ??????? ??? ???????\n";

    for (new i = 0; i != MAX_BORTES; i ++)
	{
		if(BortInfo[playerid][i][bortOn] == 0) continue;
        format(str, sizeof(str), "%s%i: %s\n", str, i+1, BortInfo[playerid][i][bortName]);
        count++;
	}

	if(!count)
	    return SendErrorMessage(playerid, "? ??? ??? ????????? ???????? ????????.");

	Dialog_Show(playerid, BortList, DIALOG_STYLE_LIST, "??????", str, "???????", "??????");
	return 1;
}

Dialog:BortList(playerid, response, listitem, inputtext[])
{
	if(!response) return 1;

	if(0 == listitem)
	{
		SendServerMessage(playerid, "??? ????????? ??????? ??????? ???????.");
	    DestroyAllBort(playerid);
	    return 1;
	}
	new count;

	for (new i = 0; i != MAX_BORTES; i ++)
	{
		if (BortInfo[playerid][i][bortOn] == 0) continue;
  		if(count == listitem-1)
      	{
       		Dialog_Show(playerid, BortListChoose, DIALOG_STYLE_LIST, BortInfo[playerid][i][bortName], "????????????? ??????\n??????? ??????", "???????", "?????");
         	SetPVarInt(playerid, #select_bort, i+1);
			return 1;
   		}
    	count++;
	}
	SendErrorMessage(playerid, "?????? ?? ??????.");
	return 1;
}

Dialog:BortListChoose(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return cmd::bortlist(playerid, "");

    new bort = GetPVarInt(playerid, #select_bort)-1;
    DeletePVar(playerid, #select_bort);

	if(bort < 0)
		return SendErrorMessage(playerid, "?????? ?? ??????.");

	if(listitem == 0)
	{
	    if(BortInfo[playerid][bort][bortOn] == 0)
     		return SendErrorMessage(playerid, "?????? ??????? ?? ?????? ????????????? ?? ??????.");

		new Float: x, Float: y, Float: z;
		GetDynamicObjectPos(BortInfo[playerid][bort][bortObject], x, y, z);

		if(GetPlayerDistanceFromPoint(playerid, x, y, z) > 10.0)
  			return SendErrorMessage(playerid, "?????? ??????? ?? ?????? ????????????? ??????.");

		if(IsPlayerInAnyVehicle(playerid))
			return SendErrorMessage(playerid, "?? ?? ?????? ?????????? ? ??????????.");

    	if(!PlayerInfo[playerid][pOnDuty])
			return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???? ?? ????????? (/duty).");

		EditDynamicObject(playerid, BortInfo[playerid][bort][bortObject]);
		pTemp[playerid][pEditBort] = bort+1;
	    return 1;
	}
    if(!BortInfo[playerid][bort][bortOn])
    	return SendErrorMessage(playerid, "?????? ??????? ?? ?????? ??????? ?? ??????.");

	BortInfo[playerid][bort][bortOn] = 0;

	if (IsValidDynamicObject(BortInfo[playerid][bort][bortObject]))
	{
		DestroyDynamicObject(BortInfo[playerid][bort][bortObject]);
 		BortInfo[playerid][bort][bortObject] = INVALID_OBJECT_ID;
	}
	SendServerMessage(playerid, "?????? \"%s\" ??????? ??????.", BortInfo[playerid][bort][bortName]);

	for (new i = 0; i != MAX_BORTES; i ++)
	{
		if(BortInfo[playerid][i][bortOn] == 0) continue;
		cmd::bortlist(playerid, "");
		break;
	}

	return 1;
}

stock GetCarsignPosition(vehicle, &Float:x, &Float:y, &Float:z)
{
    new modelid = GetVehicleModel(vehicle);
	for(new i = 0; i < sizeof(CarSignPosition); i++)
	{
	    if(modelid != CarSignPosition[i][Model])
	        continue;

        x = CarSignPosition[i][positionX];
		y = CarSignPosition[i][positionY];
		z = CarSignPosition[i][positionZ];
		break;
	}
	return 1;
}
//==============================================================================
CMD:carsign(playerid,params[])
{
	new vehicle = GetPlayerVehicleID(playerid),
		string[128];

	if(!IsDriver(playerid))
		return SendNotInVehicle(playerid);

	if(isnull(params))
		return SendSyntaxMessage(playerid, "/carsign [text]");

	if(IsABicycle(vehicle))
		return SCM(playerid, COLOR_LIGHTRED, "?? ???? ????????? ?????? ?????????? ????????????? ????!");

	if(strlen(params) > 84)
		return SCM(playerid, COLOR_LIGHTRED, "?????? ??????? ?????? 84 ????????.");

	if(strlen(params) > 28)
	{
		new pos = 28,
			string1[30],
			string2[30],
			string3[30];

		if(pos < 28-1) pos = 28;
		if(strlen(params[pos]) > 28)
		{
			format(string1, sizeof(string1), "%.*s", pos, params);
			format(string2, sizeof(string2), "%.*s", pos, params[pos]);
			format(string3, sizeof(string3), "%.*s", pos, params[pos+pos]);
			format(string, sizeof(string), "%s\n%s\n%s", string1, string2, string3);
		}
		else
		{
			format(string1, sizeof(string1), "%.*s", pos, params);
			format(string2, sizeof(string2), "%s", params[pos]);
			format(string, sizeof(string), "%s\n%s", string1, string2);
		}
	}
	else
		format(string, sizeof(string), "%s",params);

	if(PlayerInfo[playerid][pCarKey] == vehicle)
	{
		if(-1 == IsPlayerHasItem(playerid, INV_SIGN))
			return SCM(playerid, COLOR_LIGHTRED, "? ??? ??? ?????????????? ?????!");

		if(PlayerInfo[playerid][pCarKey] != vehicle)
			return SCM(playerid, COLOR_LIGHTRED, "????????????? ???? ????? ?????????? ?????? ?? ???? ?????? ?????????.");

		SendSyntaxMessage(playerid, "/remove_carsign  - ?????? ????????????? ????.");
		if(!IsValidDynamic3DTextLabel(veicolo_callsign_testo[vehicle]))
		{
		    new Float: x,
	        	Float: y,
	        	Float: z;
        	GetCarsignPosition(vehicle, x, y, z);
			veicolo_callsign_testo[vehicle] = CreateDynamic3DTextLabel(string,0x33AA33FF, -x, y, z, 20.0, INVALID_PLAYER_ID, vehicle, 1, -1, 0);
		}
		else
			UpdateDynamic3DTextLabelText(veicolo_callsign_testo[vehicle], 0x33AA33FF, string);

		return 1;
	}

	new faction = PlayerInfo[playerid][pFaction];

	if(faction != LSPD && faction != SASD && faction != LSFD && faction != CITY && faction != DOCS)
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???? ???????????/???????????, ???? ???? ? ????? ??????.");

	if(!PlayerInfo[playerid][pOnDuty])
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???? ?? ????????? (/duty).");

	if(VehicleInfo[vehicle][carFaction] != faction)
	    return SendErrorMessage(playerid, "?????? ????????? ?? ??????????? ????? ???????????.");

	SendSyntaxMessage(playerid, "/remove_carsign  - ?????? ????????????? ????.");
	if(!IsValidDynamic3DTextLabel(veicolo_callsign_testo[vehicle]))
	{
	    new Float: x,
	        Float: y,
	        Float: z;
        GetCarsignPosition(vehicle, x, y, z);
		veicolo_callsign_testo[vehicle] = CreateDynamic3DTextLabel(string,0xFFFFFFFF, -x, y, z, 40.0, INVALID_PLAYER_ID, vehicle, 1, -1, 0);
	}
	else
		UpdateDynamic3DTextLabelText(veicolo_callsign_testo[vehicle], 0xFFFFFFFF, string);
	return 1;
}

CMD:remove_carsign(playerid,params[])
{
    if(!IsDriver(playerid))
		return SendNotInVehicle(playerid);

	new vehicle = GetPlayerVehicleID(playerid);

    if(IsValidDynamic3DTextLabel(veicolo_callsign_testo[vehicle]))
	{
		DestroyDynamic3DTextLabel(veicolo_callsign_testo[vehicle]);
        veicolo_callsign_testo[vehicle] = Text3D:INVALID_3DTEXT_ID;
	}
	return 1;
}

CMD:zond(playerid, params[])
{

	if(pTemp[playerid][pZond] != 0)
	    return SetPlayerZond(playerid, 0);

    if(PlayerInfo[playerid][pFaction] != LSPD && PlayerInfo[playerid][pFaction] != SASD)
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???? ???????????/??????????? ??????.");

    if(!PlayerInfo[playerid][pSwatDuty])
    	return SCM(playerid,COLOR_LIGHTRED,"?????? ??????? ???????? S.W.A.T.");

	SetPlayerZond(playerid, 1);
	return 1;
}

CMD:flashbang(playerid, params[])
{
    if(PlayerInfo[playerid][pFaction] != LSPD && PlayerInfo[playerid][pFaction] != SASD)
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???? ???????????/??????????? ??????.");

    if(!PlayerInfo[playerid][pSwatDuty])
    	return SCM(playerid,COLOR_LIGHTRED,"?????? ??????? ???????? S.W.A.T.");

    new id = -1;

	if((id = GetNearBizOutside(playerid)) != -1 && (BizInfo[id][bizType] != BIZ_AUTOSALON && BizInfo[id][bizType] != BIZ_ADVERT && BizInfo[id][bizType] != BIZ_TUNING && BizInfo[id][bizType] != BIZ_LICENSE && BizInfo[id][bizType] != BIZ_BOATSALON && BizInfo[id][bizType] != BIZ_FLYSALON))
	{
	    if(BizInfo[id][bizLocked] == 1)
			return GameTextForPlayer(playerid, "~r~Locked", 5000, 1);

		SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_LSPDNEW, "* %s %s ??????????? ???????????? ???????.", GetRankName(playerid), GetNameEx(playerid));
		cmd::me(playerid, "???? ? ????? ??????????? ???????????? ??????? ?????? ??????.");
		foreach(Player, i)
		{
		    if(!IsPlayerLogged(i) || 0 == IsPlayerBizInside(i, id)) continue;
		    SCM(i, COLOR_TOMATO, "[ ! ] {FFFFFF}?? ???? ????????? ???????????? ????????.");
			GameTextForPlayer(i, "~r~!!! YOU WERE FLASHBANGED !!!~n~~n~~n~!!! YOU WERE FLASHBANGED !!!~n~~n~~n~!!! YOU WERE FLASHBANGED !!!", 12000, 3);

            SetPlayerWeather(i, 36);
			SetPlayerTime(i, 22, 0);
			StopPlayerAnims(i);
			FreezePlayer(i);
			SetPlayerDrunkLevel(i, 50000);

			pTemp[i][pFlashTime] = 15;
		}
		return 1;
	}
	if((id = GetNearHouseOutside(playerid)) != -1)
	{
	    if(HouseInfo[id][hLocked] == 1)
			return GameTextForPlayer(playerid, "~r~Locked", 5000, 1);

        SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_LSPDNEW, "* %s %s ??????????? ???????????? ???????.", GetRankName(playerid), GetNameEx(playerid));
		cmd::me(playerid, "???? ? ????? ??????????? ???????????? ??????? ?????? ??????.");
		foreach(Player, i)
		{
		    if(!IsPlayerLogged(i) || 0 == IsPlayerHouseInside(i, id)) continue;
		    SCM(i, COLOR_TOMATO, "[ ! ] {FFFFFF}?? ???? ????????? ???????????? ????????.");
			GameTextForPlayer(i, "~r~!!! YOU WERE FLASHBANGED !!!~n~~n~~n~!!! YOU WERE FLASHBANGED !!!~n~~n~~n~!!! YOU WERE FLASHBANGED !!!", 12000, 3);

            SetPlayerWeather(i, 36);
			SetPlayerTime(i, 22, 0);
			StopPlayerAnims(i);
			FreezePlayer(i);
			SetPlayerDrunkLevel(i, 50000);

			pTemp[i][pFlashTime] = 15;
		}
		return 1;
	}

	SendErrorMessage(playerid, "??????????? ? ????? ? ???/??????.");
	return 1;
}

CMD:patrol(playerid, params[])
{
    new faction = PlayerInfo[playerid][pFaction];
	if(faction != LSPD && faction != SASD)
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???? ???????????.");

	if(pTemp[playerid][pPatrol])
	{
	    new id = pTemp[playerid][pPatrol]-1;
	    pTemp[playerid][pPatrol] = 0;

	    if(id < 0 || id > MAX_PATROL || PatrolInfo[GetPatrolID(playerid)][id][patrulExists] == 0)
	        return 1;

        if(PatrolInfo[GetPatrolID(playerid)][id][patrulOfficer][0] == playerid) PatrolInfo[GetPatrolID(playerid)][id][patrulOfficer][0] = INVALID_PLAYER_ID;
        if(PatrolInfo[GetPatrolID(playerid)][id][patrulOfficer][1] == playerid) PatrolInfo[GetPatrolID(playerid)][id][patrulOfficer][1] = INVALID_PLAYER_ID;

		if(PatrolInfo[GetPatrolID(playerid)][id][patrulOfficer][0] == INVALID_PLAYER_ID && PatrolInfo[GetPatrolID(playerid)][id][patrulOfficer][0] == INVALID_PLAYER_ID)
		    PatrolInfo[GetPatrolID(playerid)][id][patrulExists] = 0;

	    SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_LSPDNEW, "[DISP] %s %s ????? ?? ??????? ??? ??????????? %s", GetRankName(playerid), GetNameEx(playerid), PatrolInfo[GetPatrolID(playerid)][id][patrulName]);
		return 1;
	}

    if(!PlayerInfo[playerid][pOnDuty])
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???? ?? ????????? (/duty).");

	if(isnull(params))
	    return SendSyntaxMessage(playerid, "/patrol [??????????]");

	for(new i; i != MAX_PATROL; i++)
	{
	    if(PatrolInfo[GetPatrolID(playerid)][i][patrulExists] == 0 || 0 == CompareStrings(params, PatrolInfo[GetPatrolID(playerid)][i][patrulName]))
	        continue;

		if(PatrolInfo[GetPatrolID(playerid)][i][patrulOfficer][0] != INVALID_PLAYER_ID && PatrolInfo[GetPatrolID(playerid)][i][patrulOfficer][1] != INVALID_PLAYER_ID)
	        return SendErrorMessage(playerid, "?????? ??????? ??? ?????????????.");

        if(PatrolInfo[GetPatrolID(playerid)][i][patrulOfficer][0] == INVALID_PLAYER_ID) PatrolInfo[GetPatrolID(playerid)][i][patrulOfficer][0] = playerid;
        else PatrolInfo[GetPatrolID(playerid)][i][patrulOfficer][1] = playerid;

		pTemp[playerid][pPatrol] = i+1;
		SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_LSPDNEW, "[DISP] %s %s ????????????? ? ??????? ??? ??????????? %s", GetRankName(playerid), GetNameEx(playerid), PatrolInfo[GetPatrolID(playerid)][i][patrulName]);
		return 1;
	}

	new id = -1;
	for(new i; i != MAX_PATROL; i++)
	{
	    if(PatrolInfo[GetPatrolID(playerid)][i][patrulExists] != 0)
	        continue;

		id = i;
		break;
	}

	if(id == -1)
	    return SendErrorMessage(playerid, "?????????? ???????????? ?????????? ????????.");

    pTemp[playerid][pPatrol] = id+1;
    PatrolInfo[GetPatrolID(playerid)][id][patrulExists] = 1;
    format(PatrolInfo[GetPatrolID(playerid)][id][patrulName], 32, "%s", params);
    PatrolInfo[GetPatrolID(playerid)][id][patrulOfficer][0] = playerid;
    PatrolInfo[GetPatrolID(playerid)][id][patrulOfficer][1] = INVALID_PLAYER_ID;
    SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_LSPDNEW, "[DISP] %s %s ????? ? ??????? ??? ??????????? %s", GetRankName(playerid), GetNameEx(playerid), PatrolInfo[GetPatrolID(playerid)][id][patrulName]);
	return 1;
}

CMD:meg(playerid, params[])
{
    new vehicle = GetPlayerVehicleID(playerid);
	if(PlayerInfo[playerid][pFaction] != LSPD && PlayerInfo[playerid][pFaction] != SASD)
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???? ???????????.");

	if(VehicleInfo[vehicle][carFaction] != PlayerInfo[playerid][pFaction])
		return SCM(playerid, COLOR_LIGHTRED, "???????? ?????? ? ?????????? LSPD/SASD.");

	new type;
	if(sscanf(params,"i",type))
	{
	    new _mes[447] = "1. This is the Los Santos Police Department; Stay where you all are!\n2. This is Buzzard 1, we are taking ground fire!\n3. Four bangers in blue 4door heading back into South Central.\n";
	    strcat(_mes, "4. Mayday, mayday! Buzzard 1 is going down!\n5. This is the LSPD do not, HEY! WHAT THE FUCK? TOO LOW, YOU'LL KILL US ALL!\n6. LSPD, stop right... are you insane? You'll kill us all!\n7. This is the Los Santos Police Department; Everybody stay where you are!");
	    Dialog_Show(playerid, MPCarVoice, DIALOG_STYLE_LIST, "{8D8DFF}???????", _mes, "???????", "??????");
	    return SendSyntaxMessage(playerid, "/meg [?? ????? 1 - 7]");
	}
	MegaphoneSoundVoice(playerid, type);
	return 1;
}

Dialog:MPCarVoice(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return 1;

    MegaphoneSoundVoice(playerid, listitem + 1);
	return 1;
}

stock MegaphoneSoundVoice(playerid, type)
{
    if(type < 1 || type > 7)
		return 1;

	new police_car_sound[7] =
		{15800,15811,15812,15819,15824,15825,15855};

 	PlayerPlaySoundEx(playerid, police_car_sound[type-1]);
	return 1;
}

CMD:lift(playerid, params[])
{
	if(0 == IsPlayerInRangeOfPoint(playerid, 2.0, 2268.0640,2448.2449,3.5313) && 0 == IsPlayerInRangeOfPoint(playerid, 2.0, 2781.0559,-1056.2823,1028.4969) && 0 == IsPlayerInRangeOfPoint(playerid, 2.0, 2874.6665,-940.6707,1035.9259) && 0 == IsPlayerInRangeOfPoint(playerid, 2.0, 2872.8813,-1072.9934,1037.1782))
		return 1;

	Dialog_Show(playerid, LSPDElevator, DIALOG_STYLE_LIST, "????", "- ?????\n- ?????? ????\n- ?????? ????\n- ?????????? ???", "???????", "??????");
	return 1;
}

Dialog:LSPDElevator(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return 1;

    if(0 == IsPlayerInRangeOfPoint(playerid, 2.0, 2268.0640,2448.2449,3.5313) && 0 == IsPlayerInRangeOfPoint(playerid, 2.0, 2781.0559,-1056.2823,1028.4969) && 0 == IsPlayerInRangeOfPoint(playerid, 2.0, 2874.6665,-940.6707,1035.9259) && 0 == IsPlayerInRangeOfPoint(playerid, 2.0, 2872.8813,-1072.9934,1037.1782))
		return 1;

	new world_list[]
		= {2, 1, 2, 3};

	switch(listitem)
	{
	    case 0: SetPlayerPosEx(playerid, 2268.0640,2448.2449,3.5313), SetPlayerFacingAngle(playerid, 181.2476);
	    case 1: SetPlayerPosEx(playerid, 2780.9036,-1056.2358,1028.4969), SetPlayerFacingAngle(playerid, 87.9492);
	    case 2: SetPlayerPosEx(playerid, 2873.9063,-940.8126,1035.9259), SetPlayerFacingAngle(playerid, 84.3340);
	    case 3: SetPlayerPosEx(playerid, 2872.7168,-1072.2004,1037.1770), SetPlayerFacingAngle(playerid, 0.2384);
	}
	SetWorld(playerid, world_list[listitem]);
	SetInterior(playerid, (listitem == 0)?(0):(1));
	return 1;
}

CMD:cuff(playerid, params[])
{
	new userid,
		faction = PlayerInfo[playerid][pFaction];

	if(faction != LSPD && faction != SASD && faction != DOCS && faction != CITY)
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???? ???????????/??????????? ??????.");

	if(sscanf(params,"u",userid))
		return SendSyntaxMessage(playerid, "/cuff [playerid/PartOfName]");

	if(!PlayerInfo[playerid][pOnDuty])
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???? ?? ????????? (/duty).");

	if(!IsPlayerLogged(userid))
		return SendNotConnected(playerid);

	if(!PlayerNearPlayer(3.0, playerid, userid))
		return SendNotNearPlayer(playerid);

	if(userid == playerid)
		return SCM(playerid, COLOR_LIGHTRED, "?????? ???? ??????!");

	if(pTemp[userid][pCuffed] != 0)
		return SCM(playerid, COLOR_LIGHTRED, "????? ??? ? ??????????.");

	if(0 != pTemp[userid][pTaserTime])
	    return SCM(playerid, COLOR_LIGHTRED, "????? ??????? ??? ??? ????????!");

	GameTextForPlayer(userid, "~r~Cuffed", 2500, 3);
	pTemp[userid][pCuffed] = 1;

	SendClientMessageEx(userid, COLOR_LIGHTBLUE, "%s ????????(-?) ??? ? ?????????.", GetNameWithMask(playerid));
	SendClientMessageEx(playerid, COLOR_WHITE, "?? ????????? ? ????????? %s.", GetNameWithMask(userid));

	SetPlayerAttachedObject(userid, ATTACH_HANDS, 19418,6,0.003999,0.028000,-0.018000,-12.900005,0.000000,-65.100006,0.878000,1.890999,1.652001);
	SetPlayerSpecialAction(userid, SPECIAL_ACTION_CUFFED);
	return 1;
}

CMD:uncuff(playerid, params[])
{
	new userid,
		faction = PlayerInfo[playerid][pFaction];

	if(faction != LSPD && faction != SASD && faction != DOCS && faction != CITY)
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???? ???????????/??????????? ??????.");

	if(sscanf(params,"u", userid))
		return SendSyntaxMessage(playerid, "/uncuff [playerid/PartOfName]");

	if(!PlayerInfo[playerid][pOnDuty])
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???? ?? ????????? (/duty).");

	if(!IsPlayerLogged(userid))
		return SendNotConnected(playerid);

	if(!PlayerNearPlayer(3.0, playerid, userid))
		return SendNotNearPlayer(playerid);

	if(userid == playerid)
		return SCM(playerid, COLOR_LIGHTRED, "?????? ????? ?????? ????.");

	if(pTemp[userid][pCuffed] == 0)
		return SCM(playerid, COLOR_LIGHTRED, "????? ?? ? ??????????.");

	pTemp[userid][pCuffed] = 0;
	SendClientMessageEx(userid, COLOR_LIGHTBLUE, "%s ????(-?) ? ??? ?????????.", GetNameWithMask(playerid));
	SendClientMessageEx(playerid, COLOR_WHITE, "?? ????? ????????? ? %s.", GetNameWithMask(userid));

	RemovePlayerAttachedObject(userid, ATTACH_HANDS);
	SetPlayerSpecialAction(userid, SPECIAL_ACTION_NONE);
	return 1;
}

CMD:ram(playerid,params[])
{
	if(PlayerInfo[playerid][pFaction] != LSPD && PlayerInfo[playerid][pFaction] != SASD)
	    return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???? ???????????.");

	new slot;
	if(sscanf(params,"d",slot))
		return SendSyntaxMessage(playerid, "/ram [????????]"), SCM(playerid, COLOR_GREY, "????????: 1 - ??????? ???????? | 2 - ?????? | 3 - ???????? ? ??????? C4");

    if(PlayerInfo[playerid][pRank] < 4)
		return SCM(playerid, COLOR_LIGHTRED, "?????? ??? ?????? ???????? ? 4 ?????.");

	if(slot < 1 || slot > 3)
	    return SendErrorMessage(playerid, "????????: 1 - ??????? ???????? | 2 - ?????? | 3 - ???????? ? ??????? C4");

	if(pTemp[playerid][pRamType] != 0)
	    return SendErrorMessage(playerid, "?? ??? ???????????, ???? ????????? C4 ?? ?????.");

    new location[MAX_ZONE_NAME];
	GetPlayer2DZone(playerid, location, MAX_ZONE_NAME);

	new id = -1;
	if((id = GetNearHouseOutside(playerid)) != -1)
	{
	    if(HouseInfo[id][hOwnerID] == 0)
			return SCM(playerid, COLOR_LIGHTRED, "??? ??????????? ???????????.");

		if(HouseInfo[id][hLocked] == 0 || HouseInfo[id][hDDoor] != 0)
			return SCM(playerid, COLOR_LIGHTRED, "????? ??? ???????.");

		switch(slot)
		{
		    case 1:
		    {
				cmd::ame(playerid, "?????????? ??????? ????? ? ??????? ???????.");
				ApplyAnimation(playerid,"OTB","betslp_lkabt", 4.0, 1, 0, 0, 0, 0);

				pTemp[playerid][pRamType] = slot;
				pTemp[playerid][pRamTime] = 30;
				pTemp[playerid][pRamHouse] = id;
				pTemp[playerid][pRamBiz] = -1;
			}
			case 2:
			{
			    cmd::ame(playerid, "???????? ????? ? ????.");
				ApplyAnimation(playerid,"FIGHT_E","FightKick_B",4.1,0,1,1,1,1);

				HouseInfo[id][hLocked] = 0;
				HouseInfo[id][hDDoor] = 1;
				Save_House(id);
				UpdateHouseDoor(id);

				GameTextForPlayer(playerid, "~w~You knocked door~n~Use ~r~/enter", 1000, 1);

				new query[128];
				format(query, sizeof(query), "%s [MYSQL: %i | IP: %s] ????? ????? (/ram) ??? [H_MYSQL: %i]",
				GetName(playerid), PlayerInfo[playerid][pID], GetPlayerIP(playerid), HouseInfo[id][hID]);
			    insert_log(query, RAM_LOG, 5, playerid);
			}
			case 3:
			{
			    cmd::ame(playerid, "????????????? C4 ?? ?????.");
				OnPlayAnim(playerid, "BOMBER","BOM_Plant",4.0,0,0,0,0,0);

                pTemp[playerid][pRamObj] = CreateDynamicObject(1654, HouseInfo[id][hPosX], HouseInfo[id][hPosY], HouseInfo[id][hPosZ]-0.8, 0, 0, 90);
				pTemp[playerid][pRamType] = slot;
				pTemp[playerid][pRamTime] = 10;
				pTemp[playerid][pRamHouse] = id;
				pTemp[playerid][pRamBiz] = -1;
			}
		}
		return 1;
	}
	else if((id = GetNearBizOutside(playerid)) != -1)
	{
	    if(BizInfo[id][bizType] == BIZ_GAS_STATION || BizInfo[id][bizType] == BIZ_AUTOSALON || BizInfo[id][bizType] == BIZ_BOATSALON || BizInfo[id][bizType] == BIZ_FLYSALON || BizInfo[id][bizType] == BIZ_TUNING || BizInfo[id][bizType] == BIZ_ADVERT || BizInfo[id][bizType] == BIZ_LICENSE)
			return 1;

        if(BizInfo[id][bizOwnerID] == 0)
			return SCM(playerid, COLOR_LIGHTRED, "?????? ??????????? ???????????.");

		if(BizInfo[id][bizLocked] == 0 || BizInfo[id][bizDDoor] != 0)
			return SCM(playerid, COLOR_LIGHTRED, "????? ??? ???????.");

		switch(slot)
		{
		    case 1:
		    {
				cmd::ame(playerid, "?????????? ??????? ????? ? ??????? ???????.");
				ApplyAnimation(playerid,"OTB","betslp_lkabt", 4.0, 1, 0, 0, 0, 0);

				pTemp[playerid][pRamType] = slot;
				pTemp[playerid][pRamTime] = 30;
				pTemp[playerid][pRamHouse] = -1;
				pTemp[playerid][pRamBiz] = id;
			}
			case 2:
			{
			    cmd::ame(playerid, "???????? ????? ? ????.");
				ApplyAnimation(playerid,"FIGHT_E","FightKick_B",4.1,0,1,1,1,1);

				BizInfo[id][bizLocked] = 0;
				BizInfo[id][bizDDoor] = 1;
				Save_Business(id);
				UpdateBusinessDoor(id);

				GameTextForPlayer(playerid, "~w~You knocked door~n~Use ~r~/enter", 1000, 1);

				new query[128];
				format(query, sizeof(query), "%s [MYSQL: %i | IP: %s] ????? ????? (/ram) ?????? [B_MYSQL: %i]",
				GetName(playerid), PlayerInfo[playerid][pID], GetPlayerIP(playerid), BizInfo[id][bizID]);
			    insert_log(query, RAM_LOG, 6, playerid);
			}
			case 3:
			{
			    cmd::ame(playerid, "????????????? C4 ?? ?????.");
				OnPlayAnim(playerid, "BOMBER","BOM_Plant",4.0,0,0,0,0,0);

                pTemp[playerid][pRamObj] = CreateDynamicObject(1654, BizInfo[id][bizPosX], BizInfo[id][bizPosY], BizInfo[id][bizPosZ]-0.8, 0, 0, 90);
				pTemp[playerid][pRamType] = slot;
				pTemp[playerid][pRamTime] = 10;
				pTemp[playerid][pRamHouse] = -1;
				pTemp[playerid][pRamBiz] = id;
			}
		}
		return 1;
	}
	return 1;
}

CMD:frisk(playerid, params[])
{
	new userid;

	if(sscanf(params,"u", userid))
		return SendSyntaxMessage(playerid, "/frisk [playerid/PartOfName]");

	if(!IsPlayerLogged(userid))
		return SendNotConnected(playerid);

	if(userid == playerid)
		return SendErrorMessage(playerid, "?????? ???????? ?????? ????.");

	if(!PlayerNearPlayer(3.0, playerid, userid))
		return SendNotNearPlayer(playerid);

	if(pTemp[userid][pFriskPlayer] == playerid)
		return SendErrorMessage(playerid, "?? ??? ?????????? ????? ??????.");

	if(PlayerInfo[playerid][pFaction] == LSPD || PlayerInfo[playerid][pFaction] == SASD)
	    return ShowFriskPlayer(playerid, userid);

    SendServerMessage(playerid, "????????? ???? ????? ?????? ??? ???????? ???? ??????????? ?? ?????.");
	SendServerMessage(userid, "????? %s ????? ??? ????????, /friskapprove, ????? ??????? ????????.",GetNameEx(playerid));
	SendServerMessage(userid, "??????????? /cancelfrisk, ????? ????????? ???????????.");
	pTemp[userid][pFriskPlayer] = playerid;
    SetPVarInt(userid, #accept_time, gettime() + 30);
	return 1;
}

CMD:friskapprove(playerid, params[])
{
	if(pTemp[playerid][pFriskPlayer] == INVALID_PLAYER_ID)
		return SendErrorMessage(playerid, "??? ????? ?? ????????? ???????? ?????.");

	new userid = pTemp[playerid][pFriskPlayer];
	pTemp[playerid][pFriskPlayer] = INVALID_PLAYER_ID;

	if(!PlayerNearPlayer(3.0, playerid, userid))
		return SendNotNearPlayer(playerid);

	SendServerMessage(playerid, "?? ????????? ?????? %s ???????? ????? ??? ?????.",GetNameEx(userid));
	ShowFriskPlayer(userid, playerid);
	return 1;
}

CMD:cancelfrisk(playerid, params[])
{
	if(pTemp[playerid][pFriskPlayer] == INVALID_PLAYER_ID)
		return SendErrorMessage(playerid, "??? ????? ?? ????????? ???????? ?????.");

	new userid = pTemp[playerid][pFriskPlayer];
	pTemp[playerid][pFriskPlayer] = INVALID_PLAYER_ID;

	SendServerMessage(playerid, "?? ????????? ??????????? %s ?? ?????????? ??????.",GetNameWithMask(userid));
	SendServerMessage(userid, "????? %s ????????(-?) ???? ??????????? ?? ?????????? ??????.",GetNameWithMask(playerid));
	return 1;
}

CMD:setplate(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] != LSPD && PlayerInfo[playerid][pFaction] != SASD)
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???? ???????????.");

    new vehicleid = GetPlayerVehicleID(playerid);
    if(vehicleid == 0 || VehicleInfo[vehicleid][carFaction] != PlayerInfo[playerid][pFaction])
		return SCM(playerid, COLOR_LIGHTRED, "?? ?? ?? ??????????? ??????????.");

    new plate[24];
    format(plate, sizeof(plate), "%s", GetVehicleNumber());

	new query[128];
	mysql_format(dbHandle, query, sizeof(query), "SELECT `plate` FROM `cars` WHERE `plate` = '%e'", plate);
	mysql_tquery(dbHandle, query, "PoliceSetPlate", "iis", playerid, vehicleid, plate);
	return 1;
}

forward PoliceSetPlate(playerid, vehicleid, plate[]);
public PoliceSetPlate(playerid, vehicleid, plate[])
{
	if(cache_num_rows())
	    return SendErrorMessage(playerid, "???????? ???? ??????????, ????????? ????? ???????.");

    format(VehicleInfo[vehicleid][carPlate], 24, "%s", plate);
	SetVehicleNumberPlate(vehicleid, VehicleInfo[vehicleid][carPlate]);
	RespawnVehicle(vehicleid, 1);
	Save_Car(vehicleid);

	SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "?? ???????? %s ???????? ????. ????? ?????: %s", VehicleNames[GetVehicleModel(vehicleid)-400], VehicleInfo[vehicleid][carPlate]);
	return 1;
}
//


ALTX:megaphone("/m");
CMD:megaphone(playerid, params[])
{
	new faction = PlayerInfo[playerid][pFaction];
	new vehicle = GetPlayerVehicleID(playerid);

    if(faction != LSPD && faction != SASD && faction != LSFD && faction != DOCS && faction != CITY)
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???? ? ??????????????? ???????.");

	if(vehicle == 0 || VehicleInfo[vehicle][carFaction] != PlayerInfo[playerid][pFaction])
	    return SendErrorMessage(playerid, "?? ?????? ?????????? ?? ??????????? ??????????.");

	if(isnull(params))
		return SendSyntaxMessage(playerid, "(/m)egaphone [????? ?????????]");

	SendNearbyMessage(Range_VLong, playerid, COLOR_YELLOWG, "[ %s %s:o< %s ]", GetRankName(playerid), GetNameWithMask(playerid), params);
	return 1;
}

CMD:taser(playerid, params[])
{
	new faction = PlayerInfo[playerid][pFaction];

	if(faction != LSPD && faction != SASD && faction != DOCS)
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???? ???????????/??????????? ??????.");

	if(!PlayerInfo[playerid][pOnDuty])
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???? ?? ????????? (/duty).");

	if(0 == pTemp[playerid][pTaser])
	{
	    pTemp[playerid][pTaser] = 1;
	    GivePlayerWeapon(playerid, 23, 10);
	    cmd::ame(playerid, "??????? ???????????? c ???????????? ?????.");
	    return 1;
	}

	SetPlayerWeapons(playerid);
    pTemp[playerid][pTaser] = 0;
    cmd::ame(playerid, "??????? ???????????? ?? ??????????? ????.");
	return 1;
}

ALTX:rubberbullets("/rb");
CMD:rubberbullets(playerid, params[])
{
	new faction = PlayerInfo[playerid][pFaction];

	if(faction != LSPD && faction != SASD && faction != DOCS)
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???? ???????????/??????????? ??????.");

	if(!PlayerInfo[playerid][pOnDuty])
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???? ?? ????????? (/duty).");

	if(pTemp[playerid][pRubber])
	{
		pTemp[playerid][pRubber] = 0;

		if(PlayerInfo[playerid][pSex] == 1)
			cmd::me(playerid, "???????????? ?? ????? ???????? ?????????? ????????????.");
		else
			cmd::me(playerid, "????????????? ?? ????? ???????? ?????????? ????????????.");
		return 1;
	}

	if(0 == PlayerHoldingWeapon(playerid, 25))
	    return SCM(playerid, COLOR_GREY, "?? ?????? ??????? ? ????? Shotgun.");

	pTemp[playerid][pRubber] = 1;

	if(PlayerInfo[playerid][pSex] == 1)
		cmd::me(playerid, "???????????? ?? ????? ???????? ???????????? ????????????.");
	else
		cmd::me(playerid, "????????????? ?? ????? ???????? ???????????? ????????????.");
	return 1;
}

CMD:mdc(playerid, params[])
{
	new vehicle = GetPlayerVehicleID(playerid);
	if(PlayerInfo[playerid][pFaction] != LSPD && PlayerInfo[playerid][pFaction] != SASD && PlayerInfo[playerid][pFaction] != LSFD)
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???? ???????????/???????????.");

	if(VehicleInfo[vehicle][carFaction] != PlayerInfo[playerid][pFaction] && 0 == IsPlayerInRangeOfPoint(playerid, 50.0, 2781.0559,-1056.2823,1028.4969) && 0 == IsPlayerInRangeOfPoint(playerid, 50.0, 2874.6665,-940.6707,1035.9259))
		return SCM(playerid, COLOR_LIGHTRED, "???????? ?????? ? ??????????? ??????? ??? ? ?????????? LSPD/SASD/LSFD.");

	if(PlayerInfo[playerid][pFaction] == LSPD || PlayerInfo[playerid][pFaction] == SASD)
	{
		if(!PlayerInfo[playerid][pOnDuty])
			return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???? ?? ????????? (/duty).");

		new title[56];
		format(title, sizeof(title), "{8D8DFF}Police Database - ???????????: %s", GetNameEx(playerid));
		Dialog_Show(playerid, MainMDC, DIALOG_STYLE_LIST, title, "????? ?? ?????\n???????????? ?????????\n???????? ?????????????? ?? ????????\n?????? ?????????? ?? ??????????\n???????? ?????? 911\n????????? ??????\n???????? ???????\n???????? ???????? ?? ??????", "???????", "???????");
		return 1;
	}

	if(PlayerInfo[playerid][pFaction] == LSFD)
	    return Get_Calls(playerid);

	return 1;
}
CMD:trace(playerid, params[])
{
	new faction = PlayerInfo[playerid][pFaction];
	if(faction != LSPD && faction != SASD)
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???? ???????????.");

    if(!PlayerInfo[playerid][pOnDuty])
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???? ?? ????????? (/duty).");

	new vehicle = GetPlayerVehicleID(playerid);

	if(!IsPlayerInAnyVehicle(playerid))
		return SendNotInVehicle(playerid);

	if(VehicleInfo[vehicle][carFaction] != faction)
		return SCM(playerid, COLOR_LIGHTRED, "?? ?? ? ????????? ??????????.");

	new trace,
	    targetid;

	if(sscanf(params,"d", trace))
		return SendSyntaxMessage(playerid, "/trace [????? ????????]");

	if(pTemp[playerid][pTracePlayer] != INVALID_PLAYER_ID)
		return SCM(playerid, COLOR_LIGHTRED, "??????? ??????? ?? ??????? (/traceoff).");

	if(trace == PlayerInfo[playerid][pNumber])
		return SCM(playerid, COLOR_LIGHTRED, "?????? ????????? ?????? ????.");

    if((targetid = GetNumberOwner(trace)) == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "SYSTEM ERROR: ????????? ????? ?? ?????? ? ???? ??????.");

    if(PlayerInfo[targetid][pJailed] != 0)
		return SCM(playerid, COLOR_LSPDNEW, "SYSTEM ERROR: ???????? ????? ?????? ????????? ??? ???????.");

	SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_LSPDNEW, "** HQ: %s %s ??????????? ????? ???????? %i. **", GetRankName(playerid), GetNameEx(playerid), trace);

	Dialog_Show(playerid, ShowTrace, DIALOG_STYLE_MSGBOX, "{8D8DFF}??????? ????????????", "{B4B5B7}???????? ????????????...", "???????", "");

	pTemp[playerid][pTracePlayer] = targetid;
	pTemp[playerid][pTraceStage] = 0;

	new Float:x,
		Float:y,
		Float:z;
	if(GetWorld(targetid) || GetInterior(targetid))
	{
		x = PlayerInfo[targetid][pLocationPos][0];
		y = PlayerInfo[targetid][pLocationPos][1];
		z = PlayerInfo[targetid][pLocationPos][2];
	}
	else GetPlayerPos(targetid, x, y, z);

	pTemp[playerid][pTraceDist][0] = GetDistanceBetweenPoints(x, y, z, 1459.3712, -783.0401, 93.6459);
	pTemp[playerid][pTraceDist][1] = GetDistanceBetweenPoints(x, y, z, 2667.2908, -1957.5245, 13.5469);
	pTemp[playerid][pTraceDist][2] = GetDistanceBetweenPoints(x, y, z, 923.6055, -1893.5146, 1.5319);
	return 1;
}
CMD:traceoff(playerid, params[])
{
	if(pTemp[playerid][pTracePlayer] == INVALID_PLAYER_ID)
		return SCM(playerid, COLOR_LIGHTRED, "?? ?? ?????????? ? ??????? ????????.");

	if(pTemp[playerid][pTraceGZ] != -1)
		GangZoneDestroy(pTemp[playerid][pTraceGZ]);
    pTemp[playerid][pTraceGZ] = -1;

    pTemp[playerid][pTracePlayer] = INVALID_PLAYER_ID;
    pTemp[playerid][pTraceStage] = 0;
    SendClientMessage(playerid, COLOR_GREEN, "?? ????? ?? ??????? ????????.");
	return 1;
}
CMD:isolate(playerid, params[])
{
	new userid,
		time;

	if(PlayerInfo[playerid][pFaction] != DOCS)
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???? ??????????? ??????.");

	if(sscanf(params,"uI(0)", userid, time))
		return SendSyntaxMessage(playerid, "/isolate [playerid/PartOfName] [?????(??????)]");

	if(!PlayerInfo[playerid][pOnDuty])
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ????????? ?? ?????????.");

	if(!PlayerToPoint(50.0, playerid, -1774.4573,-488.8803,621.1163))
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????????? ?? ? ?????????.");

	if(!IsPlayerLogged(userid))
		return SendNotConnected(playerid);

	if(!PlayerNearPlayer(3.0, playerid, userid))
		return SendNotNearPlayer(playerid);

	if(userid == playerid)
		return SCM(playerid, COLOR_LIGHTRED, "?? ?? ?????? ???????????? ?????? ???????? ?? ????.");

	if(PlayerInfo[userid][pIsolateTime])
	{
	    SendErrorMessage(playerid, "?? ????????? ?? ????????? %s.", GetNameEx(userid));
		SendErrorMessage(userid, "?? ???? ???????? ?? ?????????.");


		PlayerInfo[userid][pPrisoned] = random(sizeof(prison_sadoc));
		new mes[5];
		format(mes, sizeof(mes), "A%i", PlayerInfo[userid][pPrisoned]+100);
        UpdateDynamic3DTextLabelText(PrisonLabel[userid], 0x00FF00FF, mes);
		SendClientMessageEx(userid, COLOR_GRAD2, "??????: ??? ????? ???????????? - A%i(/myprisonnumber).", PlayerInfo[userid][pPrisoned]+100);

        PlayerInfo[userid][pIsolateTime] = 0;
		foreach(Player, i)
		{
			if(!IsPlayerLogged(i) || PlayerInfo[i][pJailed] != PRISON_JAIL)
				continue;

			SendErrorMessage(i, "[??????] %s %s ???????? ?? ????????? %s.", GetRankName(playerid), GetNameEx(playerid), GetNameEx(userid));
		}
	    return 1;
	}

	if(time < 1 || time > 360)
		return SCM(playerid, COLOR_GRAD2, "????? ?? ????? ????????? 360 ????? ??? ???? ????? 1 ??????.");

    SendErrorMessage(playerid, "?? ???????? ? ???????? %s.", GetNameEx(userid));
	SendErrorMessage(userid, "?? ???? ???????? ? ????????.");

	PlayerInfo[userid][pPrisoned] = random(sizeof(prison_sadoc));
	SendClientMessageEx(userid, COLOR_GRAD2, "??????: ??? ????? ???????????? - B%i(/myprisonnumber).", PlayerInfo[userid][pPrisoned]+100);

	PlayerInfo[userid][pIsolateTime] = 60 * time;
	PutPlayerInPrison(userid);

	foreach(Player, i)
	{
		if(!IsPlayerLogged(i) || PlayerInfo[i][pJailed] != PRISON_JAIL) continue;
		SendErrorMessage(i, "[??????] %s %s ??????? ? ???????? %s.", GetRankName(playerid), GetNameEx(playerid), GetNameEx(userid));
	}
	return 1;
}
//=================================Police Commands=================================//
CMD:fine(playerid, params[])
{
	new amount,
		reason[64],
		userid,
		faction = PlayerInfo[playerid][pFaction];

	if(faction != LSPD && faction != SASD)
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???? ???????????.");

	if(sscanf(params,"uds[64]", userid, amount, reason))
		return SendSyntaxMessage(playerid, "/fine [playerid/PartOfName] [????? ??????($1-$5.000)] [???????]");

	if(!PlayerInfo[playerid][pOnDuty])
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???? ?? ????????? (/duty).");

	if(!IsPlayerLogged(userid))
		return SendNotConnected(playerid);

	if(!PlayerNearPlayer(3.0, playerid, userid))
		return SendNotNearPlayer(playerid);

	if(strlen(reason) < 1 || strlen(reason) > 63)
	    return SendErrorMessage(playerid, "????? ??????? ?????? ???? ?? ????? 63 ????????.");

	if(amount < 1 || amount > 5000)
		return SCM(playerid, COLOR_LIGHTRED, "????? ?????? ?? ????? ???? ?????? $1 ? ?????? $5.000.");

	if(GivePlayerTicket(playerid, userid, amount, reason) == 0)
	    return SCM(playerid, COLOR_LIGHTRED, "? ?????? ???????????? ?????????? ???????.");

	new mes[128];
	format(mes, sizeof(mes), "??????? %s ???????? ????????? ?? ????? $%s ???????: \"%s\".", GetNameWithMask(userid), FormatNumber(amount), reason);
	cmd::ame(playerid, mes);

	SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "?? ???????? ???????? ????????? \"%s\" ?? ????? $%s %s.", reason, FormatNumber(amount), GetNameWithMask(userid));
	SendClientMessageEx(userid, COLOR_LIGHTBLUE, "[ ! ] %s %s ??????? ??? ????? ?? ????? $%s, ???????: \"%s\".", GetRankName(playerid), GetNameWithMask(playerid), FormatNumber(amount), reason);
	SendClientMessageEx(userid, COLOR_GREY, "??? ????????? ?????? ??????? ??????????? \"/fines\".");
	return 1;
}

ALTX:vehiclefine("/vfine");
CMD:vehiclefine(playerid, params[])
{
	new amount,
		vehicle,
		reason[64],
		faction = PlayerInfo[playerid][pFaction];

	if(faction != LSPD && faction != SASD)
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???? ???????? ???????.");

	if(sscanf(params,"iis[64]", vehicle, amount, reason))
		return SendSyntaxMessage(playerid, "/vehiclefine [?? ??????????] [????? ??????($1-$5.000)] [???????]");

	if(!PlayerInfo[playerid][pOnDuty])
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???? ?? ????????? (/duty).");

	if(0 == GetNearVehicle(playerid, 5.0, vehicle))
	    return SendErrorMessage(playerid, "?? ?????? ?????????? ????? ? ???????????.");

	if(VehicleInfo[vehicle][carRegistered] != 1)
	    return SendErrorMessage(playerid, "?????? ????????? ?? ???????????????.");

	if(strlen(reason) < 1 || strlen(reason) > 63)
	    return SendErrorMessage(playerid, "????? ??????? ?????? ???? ?? ????? 63 ????????.");

	if(amount < 1 || amount > 5000)
		return SCM(playerid, COLOR_LIGHTRED, "????? ?????? ?? ????? ???? ?????? $1 ? ?????? $5.000.");

	if(GiveVehicleTicket(playerid, vehicle, amount, reason) == 0)
	    return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???????????? ???????? ???????????? ?????????? ???????.");

	new mes[128];
	format(mes, sizeof(mes), "??????? ???????? ????????? ?? %s ?? ????? $%s.", VehicleNames[GetVehicleModel(vehicle)-400], FormatNumber(amount));
	cmd::ame(playerid, mes);

    new userid = GetVehicleOwner(vehicle);
    if(userid != INVALID_PLAYER_ID)
    {
	    SendClientMessageEx(userid, COLOR_LIGHTBLUE, "[ ! ] %s %s ??????? ????? ?? ??? ????????? \"%s\" ?? ????? $%s, ???????: \"%s\".", GetRankName(playerid), GetNameEx(playerid), VehicleNames[GetVehicleModel(vehicle)-400], FormatNumber(amount), reason);
		SCM(userid, COLOR_GREY, "??? ????????? ?????? ??????? ?? ???????????? ???????? ??????????? \"/vehiclefines\".");
	}
	SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"?? ???????? ???????? ????????? \"%s\" ?? %s ?? ????? $%s.", reason, VehicleNames[GetVehicleModel(vehicle)-400], FormatNumber(amount));
	return 1;
}

CMD:checkfines(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] != LSPD && PlayerInfo[playerid][pFaction] != SASD)
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???? ???????????.");

    if(!PlayerInfo[playerid][pOnDuty])
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???? ?? ????????? (/duty).");

    new userid;
	if(sscanf(params,"u",userid))
			return SendSyntaxMessage(playerid, "/checkfines [playerid/PartOfName]");

	if(!IsPlayerLogged(userid))
		return SendNotConnected(playerid);

	if(!PlayerNearPlayer(3.0, playerid, userid))
		return SendNotNearPlayer(playerid);

    new count,
	    string[512];

    for(new i; i != MAX_PLAYER_TICKETS; i++)
	{
        pTemp[playerid][pTicketListed][i] = -1;
	    if(!pTickets[userid][i][tID])
	        continue;

        pTemp[playerid][pTicketListed][count] = i;
		format(string, sizeof(string), "%s\n????? #%i ["EMBED_LIGHTBLUE"$%s"EMBED_WHITE"] ???????? '%.11s...'",
			string,
			count+1,
			FormatNumber(pTickets[userid][i][tAmount]),
			pTickets[userid][i][tReason]
		);
		count++;
	}

	if(count == 0)
		return SCM(playerid, COLOR_LIGHTRED, "? ?????? ??? ???????????? ???????.");

    SetPVarInt(playerid, #tickets_show, userid);
	Dialog_Show(playerid, PlayerFinesShow, DIALOG_STYLE_LIST, "?????? ???????:", string, "???????", "???????");
	return 1;
}

CMD:checkvfines(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] != LSPD && PlayerInfo[playerid][pFaction] != SASD)
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???? ???????????.");

    if(!PlayerInfo[playerid][pOnDuty])
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???? ?? ????????? (/duty).");

	new vehicle;
    if(isnull(params))
		return SendSyntaxMessage(playerid, "/checkvfines [???.????? ????????????? ????????(/checkplate)]");

	if(strlen(params) > 12)
	    return SendErrorMessage(playerid, "??????? ????????????? ?????? ?? ??????????.");

    if((vehicle = FindVehicleByPlate(params)) == 0)
		return SCM(playerid, COLOR_LIGHTRED, "???????????? ???????? ?? ???? ???????.");

	new count,
	    string[512];

	for(new i; i != MAX_CAR_TICKETS; i++)
	{
 		pTemp[playerid][pTicketListed][i] = -1;
   		if(vTickets[vehicle][i][tID] == 0)
			continue;

		pTemp[playerid][pTicketListed][count] = i;
  		format(string, sizeof(string), "%s\n????? #%i ["EMBED_LIGHTBLUE"$%s"EMBED_WHITE"] ???????? '%.11s...'",
			string,
			count+1,
			FormatNumber(vTickets[vehicle][i][tAmount]),
			vTickets[vehicle][i][tReason]
		);
		count++;
	}

	if(count == 0)
 		return SendErrorMessage(playerid, "?????? ???????????? ???????? ?? ????? ???????.");

	SetPVarInt(playerid, #tickets_show, vehicle);
	Dialog_Show(playerid, ShowVehicleFines, DIALOG_STYLE_LIST, "?????? ???????:", string, "???????", "???????");
	return 1;
}

CMD:fines(playerid, params[])
{
	new count,
	    string[512];

    for(new i; i != MAX_PLAYER_TICKETS; i++)
	{
        pTemp[playerid][pTicketListed][i] = -1;
	    if(!pTickets[playerid][i][tID])
	        continue;

        pTemp[playerid][pTicketListed][count] = i;
		format(string, sizeof(string), "%s\n????? #%i ["EMBED_LIGHTBLUE"$%s"EMBED_WHITE"] ???????? '%.11s...'",
			string,
			count+1,
			FormatNumber(pTickets[playerid][i][tAmount]),
			pTickets[playerid][i][tReason]
		);
		count++;
	}

	if(count == 0)
		return SCM(playerid, COLOR_LIGHTRED, "? ??? ??? ???????????? ???????.");

	Dialog_Show(playerid, PlayerFines, DIALOG_STYLE_LIST, "?????? ???????:", string, "???????", "???????");
	return 1;
}

CMD:optics(playerid, params[])
{
    if(IsPlayerHoldingWeapon(playerid) && GetPlayerWeapon(playerid) == 33)
 	{
  		if(!HasWeapon(playerid, 33))
    		return 1;

		if(IsPlayerHasItem(playerid, INV_OPTICS) == -1)
			return SendErrorMessage(playerid, "? ??? ??? ??????????? ???????.");

        RemovePlayerItem(playerid, INV_OPTICS, 1);

		new weap = PlayerInfo[playerid][pWeap][2],
  			ammo = PlayerInfo[playerid][pAmmo][2];

		ResetPlayerWeaponID(playerid, weap);
  		ac_GivePlayerWeapon(playerid, 34, ammo);
    	ApplyAnimation(playerid, "RIFLE", "rifle_load", 4.1, 0, 0, 0, 0, 0, 1);
		return 1;
	}
 	else if(IsPlayerHoldingWeapon(playerid) && GetPlayerWeapon(playerid) == 34)
  	{
   		if(!HasWeapon(playerid, 34))
     		return 1;

		if(GivePlayerItem(playerid, INV_OPTICS, 1) == -1)
  			return SendErrorMessage(playerid, "? ????????? ??? ????? ??? ??????????? ???????.");

		new weap = PlayerInfo[playerid][pWeap][2],
  			ammo = PlayerInfo[playerid][pAmmo][2];

		ResetPlayerWeaponID(playerid, weap);
  		ac_GivePlayerWeapon(playerid, 33, ammo);
    	ApplyAnimation(playerid, "RIFLE", "rifle_load", 4.1, 0, 0, 0, 0, 0, 1);
    	SCM(playerid, COLOR_GREEN, "?? ????? ?????????? ??????. (????????? ? ?????????)");
     	return 1;
    }

    SendErrorMessage(playerid, "? ??? ? ????? ?????? ???? ????? ? ???????? ??? ??????? ?????.");
	return 1;
}

CMD:silencer(playerid, params[])
{
    if(pTemp[playerid][pTaser])
		return SendErrorMessage(playerid, "??????? ?????.");

	if(IsPlayerHoldingWeapon(playerid) && GetPlayerWeapon(playerid) == 22)
 	{
  		if(!HasWeapon(playerid, 22))
    		return 1;

		if(IsPlayerHasItem(playerid, INV_SILENCER) == -1)
			return SendErrorMessage(playerid, "? ??? ??? ?????????.");

        RemovePlayerItem(playerid, INV_SILENCER, 1);

		new weap = PlayerInfo[playerid][pWeap][1],
  			ammo = PlayerInfo[playerid][pAmmo][1];

		ResetPlayerWeaponID(playerid, weap);
  		ac_GivePlayerWeapon(playerid, 23, ammo);
    	ApplyAnimation(playerid, "COLT45", "colt45_reload", 4.1, 0, 0, 0, 0, 0, 1);
		return 1;
	}
 	else if(IsPlayerHoldingWeapon(playerid) && GetPlayerWeapon(playerid) == 23)
  	{
   		if(!HasWeapon(playerid, 23))
     		return 1;

		if(GivePlayerItem(playerid, INV_SILENCER, 1) == -1)
  			return SendErrorMessage(playerid, "? ????????? ??? ????? ??? ?????????.");

		new weap = PlayerInfo[playerid][pWeap][1],
  			ammo = PlayerInfo[playerid][pAmmo][1];

		ResetPlayerWeaponID(playerid, weap);
  		ac_GivePlayerWeapon(playerid, 22, ammo);
    	ApplyAnimation(playerid, "COLT45", "colt45_reload", 4.1, 0, 0, 0, 0, 0, 1);
    	SCM(playerid, COLOR_GREEN, "?? ????? ?????????. (????????? ? ?????????)");
     	return 1;
    }

	SendErrorMessage(playerid, "? ??? ? ????? ?????? ???? ???????? ? ?????????? ??? ??????? ????????.");
	return 1;
}

CMD:factionjob(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] == 0)
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???????? ? ??????????? ??????? ?????/?????.");

	if(Factions[PlayerInfo[playerid][pFaction]][fType] != FACTION_GANG && Factions[PlayerInfo[playerid][pFaction]][fType] != FACTION_MAFIA)
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???? ? ??????????? ??????? ?????/?????.");

    if(!isLeader(playerid))
    	return SCM(playerid, COLOR_LIGHTRED, "??????? ???????? ?????? ?????? ??????????? ????? ??? ?????.");

	new userid,
		level;

	if(sscanf(params,"ud", userid, level))
		return SendSyntaxMessage(playerid, "/factionjob [playerid/PartOfName] [0 - ??????? ?????? | 1 - ?????? ? ??????? ?????????? | 2 - ?????? ? ??????? ??????]");

	if(!IsPlayerLogged(userid))
		return SendNotConnected(playerid);

	if(PlayerInfo[userid][pFaction] != PlayerInfo[playerid][pFaction])
		return SCM(playerid, COLOR_LIGHTRED, "????? ?? ??????? ? ????? ???????????.");

    if(level > 2 || level < 0)
		return SCM(playerid, COLOR_LIGHTRED, "??? ???????? ???????? ?????? 0, 1, 2.");

	if(level == 0)
	{
	    if(PlayerInfo[userid][pSideJob] == 0)
	        return SendErrorMessage(playerid, "? ?????? ?? ???? ??????? ?? ? ????? ?? ?????.");

		SendClientMessageEx(userid,COLOR_LIGHTBLUE,"????? ??????? %s ?????? ? ??? ?????? ? ?????? %s.", GetNameEx(playerid), GetJobName(PlayerInfo[userid][pSideJob]));
		SendClientMessageEx(playerid,COLOR_LIGHTBLUE,"?? ??????? ? %s ?????? ? ?????? %s.", GetNameEx(userid), GetJobName(PlayerInfo[userid][pSideJob]));
        PlayerInfo[userid][pSideJob] = 0;
		return 1;
	}

    PlayerInfo[userid][pSideJob] = level + 3;
	SendClientMessageEx(userid,COLOR_LIGHTBLUE,"????? ??????? %s ????? ??? ?????? ? ?????? %s.", GetNameEx(playerid), GetJobName(PlayerInfo[userid][pSideJob]));
	SendClientMessageEx(playerid,COLOR_LIGHTBLUE,"?? ?????? %s ?????? ? ?????? %s.", GetNameEx(userid), GetJobName(PlayerInfo[userid][pSideJob]));
	return 1;
}

/*CMD:licenseplatejob(playerid, params[])
{
	if(!PlayerToPoint(4.0, playerid, 2520.3499, -1486.5232, 23.9993))
	    return SCM(playerid, COLOR_LIGHTRED, "?? ?? ?? ?????? ?????.");

	if(PlayerInfo[playerid][pJob] != JOBLESS)
		return SCM(playerid, COLOR_WHITE, "? ??? ??? ???? ??????, ??????? /quitjob ????? ?????????.");

	if(PlayerInfo[playerid][pFaction] == 0)
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???????? ? ??????????? ??????? ?????/?????.");

	if(Factions[PlayerInfo[playerid][pFaction]][fType] != FACTION_GANG && Factions[PlayerInfo[playerid][pFaction]][fType] != FACTION_MAFIA)
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???? ? ??????????? ??????? ?????/?????.");

	PlayerInfo[playerid][pJob] = LICENSEPLATE;
	JobMessage(playerid, "~y~YOU HAVE JOINED THE LICENSE PLATE JOB.", 8);
	return 1;
}

CMD:licensejob(playerid, params[])
{
	if(!PlayerToPoint(4.0, playerid, 2520.3499, -1486.5232, 23.9993))
	    return SCM(playerid, COLOR_LIGHTRED, "?? ?? ?? ?????? ?????.");

	if(PlayerInfo[playerid][pJob] != JOBLESS)
		return SCM(playerid, COLOR_WHITE, "? ??? ??? ???? ??????, ??????? /quitjob ????? ?????????.");

	if(PlayerInfo[playerid][pFaction] == 0)
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???????? ? ??????????? ??????? ?????/?????.");

	if(Factions[PlayerInfo[playerid][pFaction]][fType] != FACTION_GANG && Factions[PlayerInfo[playerid][pFaction]][fType] != FACTION_MAFIA)
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???? ? ??????????? ??????? ?????/?????.");

	PlayerInfo[playerid][pJob] = LICENSE;
	JobMessage(playerid, "~y~YOU HAVE JOINED THE LICENSE JOB.", 8);
	return 1;
}*/

CMD:taxi(playerid, params[])
{
	new option[11],
		secoption,
		vehicle = GetPlayerVehicleID(playerid);

	if(PlayerInfo[playerid][pJob] != JOB_TAXI)
		return SCM(playerid, COLOR_LIGHTRED, "?? ?? ???????.");

	if(sscanf(params,"s[11]D(-1)", option, secoption))
	{
		SendSyntaxMessage(playerid, "/taxi [????????]");
		SCM(playerid, COLOR_GREY, "????????: duty | fare | accept ");
		return 1;
	}

	if(!IsDriver(playerid))
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ?????????? ? ?????????? Taxi ??? Cabbie ??? ????????.");

	if(!IsATaxi(vehicle))
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ?????????? ? ?????????? Taxi ??? Cabbie.");

	if(CompareStrings(option, "duty"))
	{
		if(TaxiDuty[playerid])
		{
			SCM(playerid, COLOR_YELLOWG, "[TAXI] ?? ???? ? ????????? ? ?????? ??? ?????? ??????????.");
			SendClientMessageEx(playerid, COLOR_YELLOWG, "[TAXI] ??? ???? ????????? ????? $%i.", TaxiMade[playerid]);

			GiveCash(playerid, TaxiMade[playerid]);

			SetPlayerColor(playerid, TEAM_HIT_COLOR);
			TaxiDuty[playerid] = false;
			TaxiMade[playerid] = 0;
			TaxiMoney[playerid] = 0;
			TaxiPassenger[playerid] = INVALID_PLAYER_ID;
			return 1;
		}

		SendClientMessageEx(playerid, COLOR_YELLOWG, "[TAXI] ?? ????? ?? ????????? ? ?????? ????????? ??????. ???? ?? ??????: $%i/5??????.", TaxiFare[playerid]);
		SetPlayerColor(playerid, TAXI_DUTY);
		TaxiDuty[playerid] = true;
		TaxiMoney[playerid] = 0;
		TaxiMade[playerid] = 0;
		TaxiPassenger[playerid] = INVALID_PLAYER_ID;

		foreach(Player, i)
		{
		    if(0 == IsPlayerLogged(i) || 0 == IsPlayerInVehicle(i, vehicle) || GetPlayerState(i) != PLAYER_STATE_PASSENGER)
		        continue;

            TaxiPassenger[playerid] = i;
            SendClientMessageEx(i, COLOR_YELLOWG, "[TAXI] ?? ???? ? ????? ? %s. ?????: $%i/5??????.", GetNameEx(playerid), TaxiFare[playerid]);
			break;
		}
		return 1;
	}

	else if(CompareStrings(option, "fare"))
	{
		new fare;
		if(sscanf(params,"{s[11]}d",fare))
			return SendSyntaxMessage(playerid, "/taxi fare [?????????]");

		if(fare < 0 || fare > 25)
			return SCM(playerid, COLOR_LIGHTRED, "????? ?? ????? ???? ?????? $0 ? ?? ?????? $25.");

		if(0 != IsPlayerLogged(TaxiPassenger[playerid]))
		    return SendErrorMessage(playerid, "???????? ???????, ?????? ??? ??????? ?????.");

		SendClientMessageEx(playerid,COLOR_YELLOWG,"[TAXI] ?? ?????????? ???? ?? ?????? ?? $%i/5 ??????.", fare);
		TaxiFare[playerid] = fare;
	}

	else if(CompareStrings(option, "accept"))
	{
		new id,
			Float:x,
			Float:y,
			Float:z;

		if(sscanf(params,"{s[11]}u",id))
			return SendSyntaxMessage(playerid, "/taxi accept [playerid/PartOfName]");

		if(!TaxiDuty[playerid])
			return SCM(playerid, COLOR_LIGHTRED, "??? ????, ????? ??????? ????? ??? ????? ????????? ?? ????????? (/taxi duty).");

		if(!IsPlayerLogged(id))
			return SendNotConnected(playerid);

		if(GetPVarInt(id, "NeedTaxi") == 0)
			return SCM(playerid, COLOR_LIGHTRED, "???? ????? ?? ??????? ?????, ???? ????? ??? ???-?? ??????.");

		SendClientMessageEx(id, COLOR_YELLOWG, "%s ??????(-?) ??? ?????. ?????: $%i/5 ??????.", GetNameEx(playerid), TaxiFare[playerid]);
		SendClientMessageEx(playerid, COLOR_YELLOWG, "?? ??????? ????? ?? %s.", GetNameEx(id));

		GetPlayerPos(id, x, y, z);
		Waypoint_Set(playerid, x, y, z, 3.0);
		DeletePVar(id, "NeedTaxi");
	}
	return 1;
}

CMD:takejob(playerid, params[])
{
	for(new i = 0; i != MAX_JOBS; i++)
	{
		if(JobsInfo[i][jobOn] != 1 || !PlayerToPoint(2.0, playerid, JobsInfo[i][jobX], JobsInfo[i][jobY], JobsInfo[i][jobZ]) || GetWorld(playerid) != JobsInfo[i][jobVW] || GetInterior(playerid) != JobsInfo[i][jobInt])
		    continue;

		if(JobsInfo[i][jobType] == JOB_PIZZA)
		{
		    if(PlayerInfo[playerid][pSideJob] != JOBLESS)
				return SCM(playerid, COLOR_LIGHTRED, "? ??? ??? ???? ?????? ??????, ??????? /quitsidejob ????? ?????????.");

			PlayerInfo[playerid][pSideJob] = JOB_PIZZA;
			SCM(playerid, -1, "?? ?????????? ?? ?????? ??????????? ?????. ????????? ????? - /pizzajob");
		    return 1;
		}

		if(PlayerInfo[playerid][pJob] != JOBLESS)
			return SCM(playerid, COLOR_LIGHTRED, "? ??? ??? ???? ??????, ??????? /quitjob ????? ?????????.");

		if(JobsInfo[i][jobType] == JOB_TAXI && !PlayerInfo[playerid][pTaxiLic])
		    return SCM(playerid, -1, "? ??? ??????????? ???????? ????????. ??? ?? ????????? ?????????? ? ?????????.");

		PlayerInfo[playerid][pJob] = JobsInfo[i][jobType];
		PlayerInfo[playerid][pCareer] = 0;

		if(JobsInfo[i][jobType] == JOB_MECHANIC)
		    SCM(playerid, -1, "?? ?????????? ?? ?????? ????????. ?????? ? ?????? - /jobhelp");

		else if(JobsInfo[i][jobType] == JOB_TAXI)
		    SCM(playerid, -1, "?? ?????????? ?? ?????? ? ???????? ?????. ?????? ? ?????? - /jobhelp");

        else if(JobsInfo[i][jobType] == JOB_TRUCKER)
        {
		    SCM(playerid, -1, "?? ?????????? ?? ?????? ?????????????. ?????? ? ?????? - /jobhelp");
		}
		return 1;
	}
	return 1;
}

CMD:quitjob(playerid, params[])
{
	new job = PlayerInfo[playerid][pJob];
	if(job == JOBLESS)
		return SCM(playerid, COLOR_LIGHTRED, "?? ???????????.");

	if(PlayerInfo[playerid][pPremium] < 2 && PlayerInfo[playerid][pCareer] < 2)
	    return SendErrorMessage(playerid, "?? ?????? ????????? ? ?????? ?????? ????? ??? ???? ????? ????, ??? ??????????.");

	SendClientMessageEx(playerid, COLOR_WHITE, "?? ???????? ??????? ?????? %s%s", GetJobName(job), (job == JOB_TRUCKER)?(", ??? ???? ???????."):("."));
	PlayerInfo[playerid][pJob] = 0;
	PlayerInfo[playerid][pCareer] = 0;
	return 1;
}

CMD:quitsidejob(playerid, params[])
{
	new job = PlayerInfo[playerid][pSideJob];
	if(job == JOBLESS)
		return SCM(playerid, COLOR_LIGHTRED, "? ??? ??? ?????????????? ??????.");

	SendClientMessageEx(playerid, COLOR_WHITE, "?? ???????? ??????? ?????? %s.", GetJobName(job));
	PlayerInfo[playerid][pSideJob] = 0;
	return 1;
}

public OnPlayerLeaveCheckpoint(playerid)
{
	return 1;
}

CMD:takepizza(playerid, params[])
{
	if(0 == pTemp[playerid][pPizzaBoy])
	    return SendErrorMessage(playerid, "?? ?? ?????????? ?????.");

    if(IsPlayerAttachedObjectSlotUsed(playerid, ATTACH_HANDS))
        return SendErrorMessage(playerid, "???? ???? ??? ??????.");

	new vehicle = GetPlayerVehicleID(playerid);
	if(vehicle != 0)
	    return SendErrorMessage(playerid, "?? ?????? ?????????? ??? ??????????.");

    if((vehicle = GetNearVehicle(playerid, 3.0)) == 0 || GetVehicleModel(vehicle) != 448)
		return SendErrorMessage(playerid, "?? ?????? ?????????? ????? ?????? ? ??????.");

    SetPlayerAttachedObject(playerid, ATTACH_HANDS, 19571, 6, -0.157999, -0.002000, -0.169000, -21.999990, 87.000022, 0.000000, 1.186000, 1.000000, 1.170000);
  	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
  	InfoMSG(playerid, "PRESS \" ~r~ENTER ~w~\" KEY TO DROP PIZZA.", 8);
	return 1;
}

CMD:pizzajob(playerid, params[])
{
	if(pTemp[playerid][pPizzaBoy])
	{
	    pTemp[playerid][pPizzaBoy] = 0;
	    SendClientMessage(playerid, COLOR_GREEN, "?? ?????????? ?????????? ?????. ????? ????? ????? ???????? ????? ??? ??????.");
	    DisableWaypoint(playerid);
	    SetPVarInt(playerid, #pizza_time, gettime() + 120);
	    return 1;
	}

	if(GetPVarInt(playerid, #pizza_time) > gettime())
	    return SendErrorMessage(playerid, "[text]: ??????? ???, ???????? ?????.");

	if(0 == IsDriver(playerid) || GetVehicleModel(GetPlayerVehicleID(playerid)) != 448)
		return SendErrorMessage(playerid, "?? ?????? ?????????? ?? ????? ??????.");

	new i,
	    houseid = random(MAX_HOUSES);

	while(i == 0)
	{
	    if(HouseInfo[houseid][hID] == 0 || HouseInfo[houseid][hPosInt] != 0 || HouseInfo[houseid][hPosVW] != 0)
	    	houseid = random(MAX_HOUSES);
		else
		{
		    i = 1;
		    pTemp[playerid][pPizzaBoy] = houseid+1;
		    SendClientMessageEx(playerid, COLOR_GREEN, "[text]: ????? ?????. ?????? ????? ?? ??????: %s, %i", GetHouseZone(houseid), houseid);
            SendClientMessageEx(playerid, -1, "??????????? /takepizza - ????? ????? ????? ? ????.");
			Waypoint_Set(playerid, HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ]);
		    return 1;
		}
	}
	return 1;
}

CMD:jobhelp(playerid, params[])
{
	if(PlayerInfo[playerid][pJob] == JOBLESS)
		return SCM(playerid, COLOR_LIGHTRED, "?? ???????????.");

	if(PlayerInfo[playerid][pJob] == JOB_MECHANIC)
	{
		static const str_size[] = "{ffffff}?? ????????? ?????????. ???? ??????: %i.\n\n/refill - ????????? ?????????.\n/repair - ???????? ?????????.\n/paintcar - ????????? ?????????.\n/buycomp - ?????? ??????????.\n/mycomp - ?????? ?????????? ??????????? ? ??????????.\n/attach - ????????????? ?????????.";
		new mes[sizeof(str_size) - 2 + 1 + 12];
		format(mes, sizeof(mes), str_size, PlayerInfo[playerid][pCareer]);

		Dialog_Show(playerid, None, DIALOG_STYLE_MSGBOX, "??????? ??????", mes, "?????", "");
	}
	else if(PlayerInfo[playerid][pJob] == JOB_TAXI)
	{
	    static const str_size[] = "{ffffff}?? ????????? ?????????. ???? ??????: %i.\n\n/taxi duty - ??????/????????? ??????.\n/taxi fare - ???????? ?????.\n/taxi accept - ??????? ?????.";
		new mes[sizeof(str_size) - 2 + 1 + 12];
		format(mes, sizeof(mes), str_size, PlayerInfo[playerid][pCareer]);

		Dialog_Show(playerid, None, DIALOG_STYLE_MSGBOX, "??????? ??????", mes, "?????", "");
	}
	else if(PlayerInfo[playerid][pJob] == JOB_TRUCKER)
	{
		new mes[512];
		format(mes, sizeof(mes), "{ffffff}?? ????????? ??????????????. ???? ??????: %i.\n\n/cargo - ?????? ? ???????.\n/trailer - ?????????? ?????????.\n/tpda - ???? ?????????????.\n/industry - ?????????? ? ???????????.\n\n", PlayerInfo[playerid][pCareer]);
        switch(PlayerInfo[playerid][pCareer])
		{
		    case 0..11: strcat(mes, "????????? ?????????: Picador, Sadler, Bobcat, Walton, Yosemite.");
			case 12..23: strcat(mes, "????????? ?????????: Picador, Sadler, Bobcat, Walton, Yosemite, Pony, Topfun Van, Burrito.");
		    case 24..31: strcat(mes, "????????? ?????????: Picador, Sadler, Bobcat, Walton, Yosemite, Pony, Topfun Van, Burrito, Rumpo, Boxville.");
		    case 32..47:
			{
				strcat(mes, "????????? ?????????: Picador, Sadler, Bobcat, Walton, Yosemite, Pony, Topfun Van, Burrito, Rumpo, Boxville.\n");
                strcat(mes, "Benson, Mule, DFT-30, Parker, Securicar.");
			}
			case 48..58:
			{
				strcat(mes, "????????? ?????????: Picador, Sadler, Bobcat, Walton, Yosemite, Pony, Topfun Van, Burrito, Rumpo, Boxville.\n");
                strcat(mes, "Benson, Mule, DFT-30, Parker, Securicar, Yankee, Flatbed.");
			}
			default:
			{
				strcat(mes, "????????? ?????????: Picador, Sadler, Bobcat, Walton, Yosemite, Pony, Topfun Van, Burrito, Rumpo, Boxville.\n");
                strcat(mes, "Benson, Mule, DFT-30, Parker, Securicar, Yankee, Flatbed, ????????.");
			}
		}
		Dialog_Show(playerid, CmdServer2, DIALOG_STYLE_MSGBOX, "??????? ??????", mes, "?????", "???????");
	}
	return 1;
}

CMD:paintcar(playerid, params[])
{
	new userid,
		color1,
		color2;

	if(PlayerInfo[playerid][pJob] != JOB_MECHANIC)
		return SCM(playerid, COLOR_LIGHTRED, "?? ?? ???????.");

	if(!IsDriver(playerid))
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???? ? ?????????? ? ???????? ????????.");

	if(!IsATowTruck(GetPlayerVehicleID(playerid)))
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ?????????? ? ??????????.");

	if(sscanf(params,"udd", userid, color1, color2))
		return SendSyntaxMessage(playerid, "/paintcar [playerid/PartOfName] [???? 1] [???? 2](/colorlist)");

	if(color1 > 255 || color2 > 255 || color1 < 0 || color2 < 0)
		return SCM(playerid, COLOR_LIGHTRED, "???? ID ????? ???? ?? 0 ?? 255.");

	if(userid == playerid)
		return SCM(playerid, COLOR_LIGHTRED, "?????? ???? ?????? ????????? ?????? ????????.");

	if(!IsPlayerLogged(userid))
		return SendNotConnected(playerid);

	if(!PlayerNearPlayer(6.0, playerid, userid))
		return SendNotNearPlayer(playerid);

	if(!IsDriver(userid))
		return SCM(playerid, COLOR_LIGHTRED, "????? ?????? ?????????? ? ??????????.");

	new vehicle = GetPlayerVehicleID(userid);

	if(VehicleInfo[vehicle][carFaction] != 0)
		return SCM(playerid, COLOR_LIGHTRED, "?????? ????????? ??????????? ??????????????? ?????????.");

	if(VehicleInfo[GetPlayerVehicleID(playerid)][carComps] < 45)
		return SCM(playerid, COLOR_LIGHTRED, "??? ????????? ??????? 45 ??????????? ??? ??????????.");

    if(pTemp[userid][pServePlayer] == playerid && pTemp[userid][pServeType] == 4)
	    return SendErrorMessage(playerid, "?? ??? ?????????? %s ???? ??????.", GetNameEx(userid));

	new mes[128];
    format(mes, sizeof(mes), "?????????? %s ???????? %s.", GetNameWithMask(userid), VehicleNames[GetVehicleModel(vehicle)-400]);
	cmd::me(playerid, mes);

	SendClientMessageEx(userid, COLOR_INFO, "%s ?????????? ??? ??????????? ?????? ??????. (??????? Y ????? ??????? ???????????)", GetNameWithMask(playerid));

	SetPVarInt(playerid, "color1", color1);
	SetPVarInt(playerid, "color2", color2);
	pTemp[userid][pServePlayer] = playerid;
 	pTemp[userid][pServeType] = 4;
 	SetPVarInt(userid, #accept_time, gettime() + 30);
	return 1;
}

CMD:attach(playerid, params[])
{
	new userid,
	    vehicle = GetPlayerVehicleID(playerid);

	if(PlayerInfo[playerid][pJob] != JOB_MECHANIC)
		return SCM(playerid, COLOR_LIGHTRED, "?? ?? ???????.");

	if(!IsDriver(playerid) || !IsATowTruck(vehicle))
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???? ? ?????????? ? ???????? ????????.");

	if(IsTrailerAttachedToVehicle(vehicle))
	{
		DetachTrailerFromVehicle(vehicle);
		return SCM(playerid, COLOR_LIGHTRED, "????? ???????????? ???????????? ???????? ???? ????????.");
	}

	if(sscanf(params,"u", userid))
		return SendSyntaxMessage(playerid, "/attach [playerid/PartOfName]");

	if(userid == playerid)
		return SCM(playerid, COLOR_LIGHTRED, "?????? ???? ?????? ????????? ?????? ????????.");

	if(!IsPlayerLogged(userid))
		return SendNotConnected(playerid);

	if(!PlayerNearPlayer(8.0, playerid, userid))
		return SendNotNearPlayer(playerid);

	if(!IsPlayerInAnyVehicle(userid))
		return SCM(playerid, COLOR_LIGHTRED, "????? ?????? ?????????? ? ??????????.");

	if(pTemp[userid][pServePlayer] == playerid && pTemp[userid][pServeType] == 5)
	    return SendErrorMessage(playerid, "?? ??? ?????????? %s ???? ??????.", GetNameEx(userid));

	new vehid = GetPlayerVehicleID(userid);
    if(IsABoat(vehid) || IsAPlane(vehid) || IsAHelicopter(vehid) || IsABiker(vehid))
		return SCM(playerid, COLOR_GREY,"?????? ????????? ?????? ????????.");

    new mes[128];
    format(mes, sizeof(mes), "?????????? %s ?????????? %s.", GetNameWithMask(userid), VehicleNames[GetVehicleModel(vehid)-400]);
	cmd::me(playerid, mes);

	SendClientMessageEx(userid, COLOR_INFO, "%s ?????????? ??? ?????????? ??????????. (??????? ?? ?????? ? ??????? Y ????? ??????? ???????????)", GetNameWithMask(playerid));

	SetPVarInt(userid, #tow_car, vehid);
	pTemp[userid][pServePlayer] = playerid;
	pTemp[userid][pServeType] = 5;
	SetPVarInt(userid, #accept_time, gettime() + 30);
	return 1;
}

CMD:repair(playerid, params[])
{
	new userid,
		type,
		vehid = GetPlayerVehicleID(playerid);

	if(PlayerInfo[playerid][pJob] != JOB_MECHANIC)
		return SCM(playerid, COLOR_LIGHTRED, "?? ?? ???????.");

	if(!IsDriver(playerid) || !IsATowTruck(vehid))
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???? ? ?????????? ? ???????? ????????.");

	if(sscanf(params,"ui",userid, type))
	{
		SendSyntaxMessage(playerid, "/repair [playerid/PartOfName] [???]");
		SCM(playerid, 0xC0C0C0FF, "??? 1: {FFFFFF}??????????? ????????? (( ?????????? HP ))");
		SCM(playerid, 0xC0C0C0FF, "??? 2: {FFFFFF}?????? ?????? (( ?????????? ?????? ))");
		SCM(playerid, 0xC0C0C0FF, "??? 3: {FFFFFF}?????????????? ?????????? (( ?????????? ????????? ))");
		return 1;
	}

	if(type < 1 || type > 3)
	{
	    SCM(playerid, 0xC0C0C0FF, "??? 1: {FFFFFF}??????????? ????????? (( ?????????? HP ))");
		SCM(playerid, 0xC0C0C0FF, "??? 2: {FFFFFF}?????? ?????? (( ?????????? ?????? ))");
		SCM(playerid, 0xC0C0C0FF, "??? 3: {FFFFFF}?????????????? ?????????? (( ?????????? ????????? ))");
	    return 1;
	}

	if(userid == playerid)
		return SCM(playerid, COLOR_LIGHTRED, "?????? ???? ?????? ????????? ?????? ????????.");

	if(!IsPlayerLogged(userid))
		return SendNotConnected(playerid);

	if(!PlayerNearPlayer(6.0, playerid, userid))
		return SendNotNearPlayer(playerid);

	if(!IsDriver(userid))
		return SCM(playerid, COLOR_LIGHTRED, "????? ?????? ?????????? ? ??????????.");

	new vehicle = GetPlayerVehicleID(userid);
	if(VehicleInfo[vehicle][carFaction] != 0 && type != 1 && type != 2)
		return SCM(playerid, COLOR_LIGHTRED, "?????? ????????? ??????????? ??????????????? ??????????.");

    if(pTemp[userid][pServePlayer] == playerid && (pTemp[userid][pServeType] > 0 && pTemp[userid][pServeType] < 4))
	    return SendErrorMessage(playerid, "?? ??? ?????????? %s ???? ??????.", GetNameEx(userid));

	if(type == 1)
	{
		if(VehicleInfo[vehid][carComps] < 75)
			return SCM(playerid, COLOR_LIGHTRED, "??? ????????? ??????? 75 ??????????? ??? ??????? ?????????.");

		new mes[128];
    	format(mes, sizeof(mes), "?????????? %s ?????? ????????? %s.", GetNameWithMask(userid), VehicleNames[GetVehicleModel(vehicle)-400]);
		cmd::me(playerid, mes);

		SendClientMessageEx(userid, COLOR_INFO, "%s ?????????? ??? ?????? ?????????. (??????? Y ????? ??????? ???????????)", GetNameWithMask(playerid));
	}
	else if(type == 2)
	{
	    if(VehicleInfo[vehid][carComps] < 75)
			return SCM(playerid, COLOR_LIGHTRED, "??? ????????? ??????? 75 ??????????? ??? ??????? ?????????.");

		new mes[128];
    	format(mes, sizeof(mes), "?????????? %s ???????? ?????? %s.", GetNameWithMask(userid), VehicleNames[GetVehicleModel(vehicle)-400]);
		cmd::me(playerid, mes);

		SendClientMessageEx(userid, COLOR_INFO, "%s ?????????? ??? ???????? ??????. (??????? Y ????? ??????? ???????????)", GetNameWithMask(playerid));
	}
	else if(type == 3)
	{
		if(VehicleInfo[vehid][carComps] < 75)
			return SCM(playerid, COLOR_LIGHTRED, "??? ????????? ??????? 75 ??????????? ??? ??????????? ?????????????????? ?????????.");

		if(VehicleInfo[vehicle][carEngine] >= 20.0)
			return SCM(playerid, COLOR_LIGHTRED, "????????? ??????? ?????????? ?? ????????? ? ??????? ( > 20%%).");

        new mes[128];
    	format(mes, sizeof(mes), "?????????? %s ?????? ????????? %s.", GetNameWithMask(userid), VehicleNames[GetVehicleModel(vehicle)-400]);
		cmd::me(playerid, mes);

		SendClientMessageEx(userid, COLOR_INFO, "%s ?????????? ??? ?????? ???????????? ?????????. (??????? Y ????? ??????? ???????????)", GetNameWithMask(playerid));
	}

	pTemp[userid][pServePlayer] = playerid;
	pTemp[userid][pServeType] = type;
	SetPVarInt(userid, #accept_time, gettime() + 30);
	return 1;
}

CMD:buycomp(playerid, params[])
{
	new amount;
	if(PlayerInfo[playerid][pJob] != JOB_MECHANIC)
		return SCM(playerid, COLOR_LIGHTRED, "?? ?? ???????.");

	if(!IsDriver(playerid))
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???? ? ?????????? ? ???????? ????????.");

	if(!IsATowTruck(GetPlayerVehicleID(playerid)))
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ?????????? ? ??????????.");

	if(!PlayerToPoint(6.0, playerid, 2430.4412,-2454.9304,13.6250))
	{
		Waypoint_Set(playerid, 2430.4412,-2454.9304,13.6250, 8.0);
		return SCM(playerid, COLOR_LIGHTRED, "??????????????? ??? ??????? ???????????.");
	}

	if(sscanf(params,"d",amount))
	{
		SendSyntaxMessage(playerid, "/buycomp [??????????]");
		SCM(playerid, COLOR_LIGHTRED, "?? ?? ?????? ?????? ?????? 1 ? ?????? 300.");
		SCM(playerid, COLOR_WHITE, "???? ?? ???? ????????? ?????????? $1.");
		return 1;
	}

	if(amount < 1 || amount > 300)
		return SCM(playerid, COLOR_LIGHTRED, "?? ?? ?????? ?????? ?????? 1 ? ?????? 300.");

    if(VehicleInfo[GetPlayerVehicleID(playerid)][carComps] >= 300)
	    return SendErrorMessage(playerid, "? ?????????? ???????????? ?????????? ???????????.");

	if(VehicleInfo[GetPlayerVehicleID(playerid)][carComps] + amount > 300)
	    return SendErrorMessage(playerid, "?? ?????? ?????????? ?????? %i ???????????.", 300 - VehicleInfo[GetPlayerVehicleID(playerid)][carComps]);

	if(GetCash(playerid) < amount)
		return SendClientMessageEx(playerid, COLOR_LIGHTRED, "??? ??????? ??? ????? $%i.", amount);

	GiveCash(playerid, -amount);
	SendClientMessageEx(playerid, COLOR_GREEN, "* ?? ????????? %i ??????????? ?? $%i.", amount, amount);
	JobMessage(playerid, "~w~YOU'VE BOUGHT SOME PRODUCTS FOR YOUR TRUCK.", 6);
	VehicleInfo[GetPlayerVehicleID(playerid)][carComps] += amount;
	return 1;
}

CMD:mycomp(playerid, params[])
{
	if(PlayerInfo[playerid][pJob] != JOB_MECHANIC)
		return SCM(playerid, COLOR_LIGHTRED, "?? ?? ???????.");

	if(!IsDriver(playerid))
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???? ? ?????????? ? ???????? ????????.");

	if(!IsATowTruck(GetPlayerVehicleID(playerid)))
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ?????????? ? ??????????.");

    SendClientMessageEx(playerid, COLOR_GREEN, "* ? ?????????? %i ???????????.", VehicleInfo[GetPlayerVehicleID(playerid)][carComps]);
	return 1;
}

CMD:refill(playerid, params[])
{
	new userid,
		price;

	if(PlayerInfo[playerid][pJob] != JOB_MECHANIC)
		return SCM(playerid, COLOR_LIGHTRED, "?? ?? ???????.");

	if(!IsDriver(playerid))
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???? ? ?????????? ? ???????? ????????.");

	if(!IsATowTruck(GetPlayerVehicleID(playerid)))
		return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ?????????? ? ??????????.");

	if(sscanf(params,"ud",userid,price))
		return SendSyntaxMessage(playerid, "/refill [playerid/PartOfName] [????]");

	if(userid == playerid)
		return SCM(playerid, COLOR_LIGHTRED, "?????? ???? ?????? ????????? ?????? ????????.");

	if(!IsPlayerLogged(userid))
		return SendNotConnected(playerid);

	if(!PlayerNearPlayer(6.0, playerid, userid))
		return SendNotNearPlayer(playerid);

	if(!IsDriver(userid))
		return SCM(playerid, COLOR_LIGHTRED, "????? ?????? ?????????? ? ??????????.");

    new vehicle = GetPlayerVehicleID(userid);
    if(VehicleInfo[vehicle][carFuel] >= 100)
		return SCM(playerid, COLOR_LIGHTRED, "??? ?????.");

	if(price < 1 || price > 500)
	    return SendErrorMessage(playerid, "????????? ???????? - $1 ?? $500.");

    new mes[128];
    format(mes, sizeof(mes), "?????????? ????????? ????????? %s ?? $%i.", GetNameWithMask(userid), price);
	cmd::me(playerid, mes);

	SendClientMessageEx(userid, COLOR_INFO, "%s ?????????? ??? ????????? ????????? ?? $%i. (??????? Y ????? ??????? ???????????)", GetNameWithMask(playerid), price);
	RefillPrice[userid] = price;
	RefillOffer[userid] = playerid;
	return 1;
}

ALTX:setspawn("/spawnpoint");
CMD:setspawn(playerid, params[])
{
	new type;

	if(sscanf(params,"d",type))
		return SendSyntaxMessage(playerid, "/setspawn [0 - ??????? ?????, 1 - ???, 2 - ???????, 3 - ????????? ?????]");

	if(type > 3 || type < 0)
		return SendSyntaxMessage(playerid, "/setspawn [0 - ??????? ?????, 1 - ???, 2 - ???????, 3 - ????????? ?????]");

	if(type == 0)
	{
	    Dialog_Show(playerid, SelectSpawn, DIALOG_STYLE_LIST, "{8D8DFF}???????? ????? ??????", "\
		???????? ???-??????\n\
		??????? ?????\n\
		????? ??????????\n\
		??????? ??????", "???????", "??????");
		return 1;
	}
	else if(type == 1)
	{
        Dialog_Show(playerid, ChangeHouseSpawn, DIALOG_STYLE_INPUT, "{"COL_TITLE"}[???????? ???]", "??????? ID ???? ? ??????? ?? ?????? ??????????. ?????? ID ???? ????? ? ??????? /property.", "???????","??????");
	}
	else if(type == 2)
	{
		if(PlayerInfo[playerid][pFaction] == 0)
			return SCM(playerid, COLOR_LIGHTRED, "?? ?? ???????? ?? ???????.");

		SCM(playerid, COLOR_YELLOWG, "?????? ?? ?????? ?????????? ?? ???????? ???????.");
		PlayerInfo[playerid][pSpawnType] = -1;
	}
	else if(type == 3)
	{
		SCM(playerid, COLOR_YELLOWG, "?????? ?? ?????? ?????????? ?? ????? ?????????? ??????.");
		PlayerInfo[playerid][pSpawnType] = -2;
	}
	return 1;
}

Dialog:SelectSpawn(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return 1;

    SCM(playerid, COLOR_YELLOWG, "?????? ?? ?????? ?????????? ? ??????? ?????.");
	PlayerInfo[playerid][pSpawnType] = 0;
	PlayerInfo[playerid][pSpawnPoint] = listitem+1;
	return 1;
}

CMD:opentoll(playerid, params[])
{
	new tollid = -1;

	for(new i; i != MAX_TOLLS; i++)
	{
	    if(0 == IsPlayerInRangeOfPoint(playerid, TOLL_OPEN_DISTANCE, toll_gate_pos[i][0], toll_gate_pos[i][1], toll_gate_pos[i][2]))
	        continue;

		tollid = i;
		break;
	}

	if(tollid == -1)
	    return 1;

    if(aTolls[tollid][E_tOpenTime] > 0)
		return SendClientMessage(playerid, COLOR_LIGHTRED, "???????? ??? ??????, ????????? ???? ?? ?????????.");

	if(!PlayerInfo[playerid][pOnDuty])
	{
		if(aTolls[tollid][E_tLocked])
		    return SendClientMessage(playerid, COLOR_FADE1, "???????? ???????: ? ????? ????????, ?? ? ?? ???? ?????????? ???. ????????? ?????.");

		if(GetCash(playerid) < TOLL_COST)
		    return SendClientMessage(playerid, COLOR_FADE1, "???????? ???????: ?? ?????? ????? ???????? $15.");

		GiveCash(playerid, -TOLL_COST);
		cmd::ame(playerid, "???????? $15 ?? ??????.");
	}

	SendClientMessage(playerid, COLOR_FADE1, "???????? ???????: ???????, ??????? ??????.");
	SendClientMessage(playerid, COLOR_LIGHTRED, "? ??? ???? 6 ??????, ????? ???????? ????????.");
	Toll_OpenToll(tollid);
	return 1;
}

CMD:plant(playerid, params[])
{
    if(IsPlayerHasItem(playerid, INV_SEED_GANJA) == -1)
        return SendErrorMessage(playerid, "? ??? ??? ????? ?????????.");

	if(Plant_Nearest(playerid, 2.0) != -1)
		return SCM(playerid, COLOR_GREY, "?? ?????? ??????? ?????? ? ??????? ????????.");

	if(pTemp[playerid][pPlantTime] > 0)
		return SCM(playerid, COLOR_LIGHTRED, "?? ??? ??????? ???? ?????????.");

	pTemp[playerid][pPlantTime] = 15;
	FreezePlayer(playerid);
	OnPlayAnim(playerid, "BOMBER","BOM_Plant_Loop", 4.0, 1, 0, 0, 0, 0);
	SCM(playerid, COLOR_YELLOW2, "?? ?????? ?????? ???? ?????????. ???? ?????? ?????????? ???????, ?? ??????????? /stop.");
	return 1;
}

CMD:checkplant(playerid, params[])
{
	new plant = -1;
	if((plant = Plant_Nearest(playerid)) == -1)
		return SCM(playerid, COLOR_LIGHTRED, "?? ?? ?????????? ????? ? ?????????.");

    new time =
		CropsInfo[plant][pGrowTime] - gettime();

	if(CropsInfo[plant][pGrowTime] > gettime())
		SendClientMessageEx(playerid, COLOR_LIGHTGREEN, "???????? ??????? ?? %.0f ?????????.", float(time) / (float(CropsInfo[plant][pGrowTime]) / 100.0), '%');
	else
	    SendClientMessage(playerid, COLOR_LIGHTGREEN, "?????? ???????? ??? ???????.");
	return 1;
}

CMD:takeplant(playerid, params[])
{
    new plant = -1;
	if((plant = Plant_Nearest(playerid)) == -1)
		return SCM(playerid, COLOR_LIGHTRED, "?? ?? ?????????? ????? ? ?????????.");

	if(CropsInfo[plant][pGrowTime] > gettime())
		return SCM(playerid, COLOR_LIGHTRED, "??? ???????? ?? ???????.");

	if(GivePlayerItem(playerid, INV_GANJA, 5) == -1)
	    return SendErrorMessage(playerid, "? ????????? ??? ?????.");

	SendClientMessage(playerid, COLOR_WHITE, "?? ??????? 3 ?????????? ?????????.");
	DestroyCrop(plant);
	OnPlayAnim(playerid, "BOMBER","BOM_Plant_Loop", 4.0, 0, 0, 0, 0, 0);
	SendNearbyMessage(Range_Normal, playerid, COLOR_PURPLE, "* %s ?????? ??? ?????? ???? ?????????.", GetNameWithMask(playerid));
	return 1;
}
/* =================== TesterCommands =================== */
CMD:testerhelp(playerid, params[])
{
	if(PlayerInfo[playerid][pTester] == 0) return SendErrorMessage(playerid,"? ??? ???????????? ???? ??? ????????????? ???????.");
	SCM(playerid, COLOR_WHITE, "[TESTER]: {C3C3C3}/tduty /(t)chat /togtchat /freeze /unfreeze /an");
	return 1;
}

CMD:tduty(playerid, params[])
{
	if(PlayerInfo[playerid][pTester] < 1)
	    return SendErrorMessage(playerid,"Nu ai voie sa folosesti aceasta comanda");

    if(IsAdminDuty(playerid))
        return SendErrorMessage(playerid, "Nu esti on-duty in cadrul echipei administrative.");

	if(IsTesterDuty(playerid) == 1)
	{
	    //StaffMSG(Helper_DUTY, "AdmCmd: %s este de acum disponibil.", GetAccName(playerid));
	    pTemp[playerid][pTesterDuty] = 0;
		SetPlayerColor(playerid, TEAM_HIT_COLOR);
	}
	else
	{
		pTemp[playerid][pTesterDuty] = 1;
		//StaffMSG(Helper_DUTY, "AdmCmd: %s nu mai este disponibil.", GetAccName(playerid));
		//SetPlayerColor(playerid, Helper_DUTY);
	}
	return 1;
}


ALTX:tchat("/t");
CMD:tchat(playerid, params[])
{
	if(!IsTester(playerid) && !CheckAdmin(playerid, ADMIN_LEVEL_1))
	    return SendErrorMessage(playerid,"Nu ai voie sa folosesti aceasta comanda");

    if(PlayerInfo[playerid][pSettings] & togTester)
        return SendErrorMessage(playerid, "???????? ?????? ??? (/togtchat).");

	if(isnull(params))
		return SendSyntaxMessage(playerid, "/(t)chat [text]");

	new prefix[16] = "TESTER";

	if(PlayerInfo[playerid][pAdmin] > 0)
		prefix = "ADMIN";

	new mes[128];
	if(strlen(params) > MAXLEN)
	{
		new pos = MAXLEN;
		if(pos < MAXLEN-1) pos = MAXLEN;
		format(mes, sizeof(mes), "* [%s] %s(%i): %.*s ...", prefix, GetAccName(playerid), playerid, pos, params);
		SendStaffMessage(COLOR_LIGHTGREEN, mes);
		format(mes, sizeof(mes), "... %s", params[pos]);
		SendStaffMessage(COLOR_LIGHTGREEN, mes);
	}
	else
	{
		format(mes, sizeof(mes), "* [%s] %s(%i): %s", prefix, GetAccName(playerid), playerid, params);
		SendStaffMessage(COLOR_LIGHTGREEN, mes);
	}
	return 1;
}

CMD:togtchat(playerid, params[])
{
	if(!IsTester(playerid) && !CheckAdmin(playerid, ADMIN_LEVEL_1))
	    return SendErrorMessage(playerid,"Nu ai voie sa folosesti aceasta comanda");

    if(PlayerInfo[playerid][pSettings] & togTester)
	{
    	SCM(playerid, COLOR_YELLOWG, "?? ???????? ??? ????????.");
		PlayerInfo[playerid][pSettings] &= ~togTester;
	}
	else
	{
		SCM(playerid, COLOR_YELLOWG, "?? ????????? ??? ????????.");
		PlayerInfo[playerid][pSettings] |= togTester;
	}
	return 1;
}
/* =================== AdminCommands =================== */
CMD:askq(playerid, params[])
{
	if(isnull(params))
		return SendSyntaxMessage(playerid, "/askq [????? ???????]");

	SendClientMessageEx(playerid, COLOR_WHITE,"????? ???????: %s",params);
	SCM(playerid, COLOR_HELPS, "???? ????????? ?????????? ????????! ??????????, ???????? ?????? ?? ???? ??????.");

    if(strlen(params) > MAXLEN)
	{
		new pos = MAXLEN;
		if(pos < MAXLEN-1) pos = MAXLEN;
		foreach(Player, i)
		{
		    if(0 == IsPlayerLogged(i) || (!CheckAdmin(i, 1) && !IsTester(i)) || (PlayerInfo[i][pSettings] & togService))
				continue;

			SendClientMessageEx(i, 0x00FFFFFF, "[SUPPORT] %s (ID: %i) ?????(-?) ??????: %.*s ...", GetNameEx(playerid), playerid, pos, params);
			SendClientMessageEx(i, 0x00FFFFFF, "... %s", params[pos]);
		}
	}
	else
	{
	    foreach(Player, i)
		{
		    if(0 == IsPlayerLogged(i) || (!CheckAdmin(i, 1) && !IsTester(i)) || (PlayerInfo[i][pSettings] & togService))
				continue;

			SendClientMessageEx(i, 0x00FFFFFF, "[SUPPORT] %s (ID: %i) ?????(-?) ??????: %s", GetNameEx(playerid), playerid, params);
		}
	}
	return 1;
}

CMD:report(playerid, params[])
{
	if(isnull(params))
		return SendSyntaxMessage(playerid, "/report [????? ??????]");

	if(pTemp[playerid][pReportTime] > gettime())
		return SendErrorMessage(playerid, "?? ??????? ???????? ? ?????? ????? %i ??????.", pTemp[playerid][pReportTime] - gettime());

    pTemp[playerid][pReportTime] = gettime() + 60;
	SendClientMessageEx(playerid, COLOR_WHITE,"????? ??????: %s", params);
	SCM(playerid, COLOR_HELPS, "???? ?????? ?????????? ????????????? ???????. ??????????, ???????? ??????.");

    if(strlen(params) > MAXLEN)
	{
		new pos = MAXLEN;
		if(pos < MAXLEN-1) pos = MAXLEN;
		foreach(Player, i)
		{
		    if(0 == IsPlayerLogged(i) || !CheckAdmin(i, 1) || (PlayerInfo[i][pSettings] & togService))
				continue;

			SendClientMessageEx(i, 0xFF8C00FF, "[REPORT] %s (ID: %i) ?????(-?) ??????: %.*s ...", GetNameEx(playerid), playerid, pos, params);
			SendClientMessageEx(i, 0xFF8C00FF, "... %s", params[pos]);
		}
	}
	else
	{
	    foreach(Player, i)
		{
		    if(0 == IsPlayerLogged(i) || !CheckAdmin(i, 1) || (PlayerInfo[i][pSettings] & togService))
				continue;

			SendClientMessageEx(i, 0xFF8C00FF, "[REPORT] %s (ID: %i) ?????(-?) ??????: %s", GetNameEx(playerid), playerid, params);
		}
	}
	return 1;
}

CMD:request(playerid, params[])
{
	if(isnull(params))
		return SendSyntaxMessage(playerid, "/request [????? ???????]");

	if(request_time > gettime())
	    return SendErrorMessage(playerid, "????????? %i ??????.", request_time - gettime());

	request_time = gettime() + 60;
	SendClientMessageEx(playerid, COLOR_WHITE,"????? ???????: %s", params);
	SCM(playerid, COLOR_HELPS, "???? ??????? ?????????? ????????????? ???????. ??????????, ???????? ??????.");

	if(strlen(params) > MAXLEN)
	{
		new pos = MAXLEN;
		if(pos < MAXLEN-1) pos = MAXLEN;
		foreach(Player, i)
		{
		    if(0 == IsPlayerLogged(i) || !CheckAdmin(i, 1) || (PlayerInfo[i][pSettings] & togService))
				continue;

			SendClientMessageEx(i, 0xFF8C00FF, "[REQUEST] %s (ID: %i) ????????(-?) ??????: %.*s ...", GetNameEx(playerid), playerid, pos, params);
			SendClientMessageEx(i, 0xFF8C00FF, "... %s", params[pos]);
		}
	}
 	else
	{
	    foreach(Player, i)
		{
		    if(0 == IsPlayerLogged(i) || !CheckAdmin(i, 1) || (PlayerInfo[i][pSettings] & togService))
				continue;

			SendClientMessageEx(i, COLOR_HELPS, "[REQUEST] %s (ID: %i) ????????(-?) ??????: %s", GetNameEx(playerid), playerid, params);
		}
	}
	return 1;
}

CMD:demolition(playerid, params[])
{
	new time = strval(params);
	if(isnull(params))
	    return 1;

    PlayerInfo[playerid][pDemolition] = time;
	SendClientMessageEx(playerid, -1, "????? ?????: %i ???.", time);
	return 1;
}
CMD:demtime(playerid, params[])
{
	new time = strval(params);
	if(isnull(params))
	    return 1;

    pTemp[playerid][pDemolitionTime] = gettime() + time;
	SendClientMessageEx(playerid, -1, "????????? ??: %i ???.", time);
	return 1;
}

ALTX:ah("/ahelp");
CMD:ah(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] == 0)
		return SendErrorMessage(playerid, "? ??? ???????????? ???? ??? ????????????? ???????.");

	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		SCM(playerid, COLOR_WHITE, "[Level 1]: {C3C3C3}/aduty /adminchat /an /aooc /announce /aame /setinterior /setworld  /masked /gotols");
		SCM(playerid, COLOR_WHITE, "[Level 1]: {C3C3C3}/kick /skick /ajail /afree /warn /offban /ban /unban /banip /unbanip /mute /unmute /checkcars");
		SCM(playerid, COLOR_WHITE, "[Level 1]: {C3C3C3}/clearchat /teles /tp /gethere /goto /freeze /unfreeze /slap /getip /getstats /getproperty /healplayer ");
		SCM(playerid, COLOR_WHITE, "[Level 1]: {C3C3C3}/removevehicle /gotocar /getcar /spec /specoff /disarm /togservice");
		SCM(playerid, COLOR_WHITE, "[Level 1]: {C3C3C3}/plantinfo /removeplant /aprison /checkcar /checkprop /dmlog /near /removebox /checkinv");
	}
	if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		SCM(playerid, COLOR_WHITE, "[Level 2]: {C3C3C3}/up /down /getincar /policer /afire /removefire /aengine /fillveh /rtc /rtcall");
	}
	if(PlayerInfo[playerid][pAdmin] >= 3)
	{
		SCM(playerid, COLOR_WHITE, "[Level 3]: {C3C3C3}/setskin /sethp /setarmour /showpm /showpmoff /showpms /nopms /telecmds /aveh /mark /gotomark /settime /weather /weatherall");
	}
	if(PlayerInfo[playerid][pAdmin] >= 4)
	{
		SCM(playerid, COLOR_WHITE, "[Level 4]: {C3C3C3}/go /govw /goint /x /y /z /noooc");
	}
	if(PlayerInfo[playerid][pAdmin] >= 5)
	{
		SCM(playerid, COLOR_WHITE, "[Level 5]: {C3C3C3}/itemlist /giveitem /givegun /getgun /changename /acceptname");
		SCM(playerid, COLOR_WHITE, "[Level 5]: {C3C3C3}/factioncmds /vehiclecmds /garagecmds /housecmds /businesscmds /apartcmds /doorcmds");
	}
	if(PlayerInfo[playerid][pAdmin] >= 6)
	{
		SCM(playerid, COLOR_WHITE, "[Level 6]: {C3C3C3}/makeadmin /makepremium /maketester /removetester /changefight /jetpack");
		SCM(playerid, COLOR_WHITE, "[Level 6]: {C3C3C3}/alock /asetplate /givemoney /setmoney");
		SCM(playerid, COLOR_WHITE, "[Level 6]: {C3C3C3}/objectcmds /foodstandcmds /labelcmds");
		SCM(playerid, COLOR_WHITE, "[Level 6]: {C3C3C3}/atmcmds /towercmds /cctvcmds /gatecmds /jobcmds /gmx");
	}
	if(PlayerInfo[playerid][pAdmin] >= 7)
	{
		SCM(playerid, COLOR_WHITE, "[Level 7]: {C3C3C3}/mysqllog");
	}
	return 1;
}
CMD:mysqllog(playerid, params[])
{
    if(!CheckAdmin(playerid, 7))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	mysqllog = (mysqllog == true)?(false):(true);

	if(mysqllog == false)
		SCM(playerid, COLOR_GREEN, "Mysql ??? ?????? ????????.");
	else
	    SCM(playerid, COLOR_GREEN, "Mysql ??? ?????? ???????.");
	return 1;
}
//=========================================================1 ???????===========================================
CMD:aduty(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 1)
	    return  SCM(playerid,COLOR_LIGHTRED,"Nu ai gradul administrativ necesar.");

	/*if(PlayerInfo[playerid][pOnDuty])
		return SCM(playerid, COLOR_LIGHTRED, "?????????? ????????? ?? ?????-????????? ???????? ? ??????? ??????.");
	*/

	if(!IsAdminDuty(playerid))
	{
		pTemp[playerid][pAdminDuty] = 1;
		pTemp[playerid][pDMLog] = 1;
		AMSG(0x008080FF, "AdmCmd: %s este de acum admin duty.", GetAccName(playerid));
		SetPlayerHealth(playerid, 100);
		pTemp[playerid][pInvulnerable] = 999999999;
		SetPlayerColor(playerid,TEAM_ADMIN_COLOR);
		server_admins++;
		return 1;
	}
	else
	{
		AMSG(0x008080FF, "AdmCmd: %s nu mai este admin duty.", GetAccName(playerid));
		SetPlayerHealth(playerid, 100);
		pTemp[playerid][pInvulnerable] = 0;
		pTemp[playerid][pAdminDuty] = 0;
		SetPlayerColor(playerid, TEAM_HIT_COLOR);

		if(pTemp[playerid][pDMLog] == 1)
		{
			ClearKillFeed(playerid);
			pTemp[playerid][pDMLog] = 0;
		}
		server_admins--;
	}
	return 1;
}

ALTX:adminchat("/a");
CMD:adminchat(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_1))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	if(isnull(params))
		return SendSyntaxMessage(playerid, "/(a)dminchat [text]");

	if(strlen(params) > MAXLEN)
	{
		new pos = MAXLEN;
		if(pos < MAXLEN-1) pos = MAXLEN;
		foreach(Player, i)
		{
		    if(0 == IsPlayerLogged(i) || !CheckAdmin(i, 1))
				continue;

			SendClientMessageEx(i, COLOR_YELLOWG, "* [ADMIN, L: %i] %s(%i): %.*s ...", PlayerInfo[playerid][pAdmin], GetAccName(playerid), playerid, pos, params);
			SendClientMessageEx(i, COLOR_YELLOWG, "... %s", params[pos]);
		}
	}
	else
		AMSG(COLOR_YELLOWG, "* [ADMIN, L: %i] %s(%i): %s", PlayerInfo[playerid][pAdmin], GetAccName(playerid), playerid, params);

	return 1;
}
CMD:an(playerid,params[])
{
	new userid,
		text[128];

	if(sscanf(params,"us[128]", userid, text))
		return SendSyntaxMessage(playerid,"/an [playerid/PartOfName] [text]");

	if(!IsTester(playerid) && !CheckAdmin(playerid, ADMIN_LEVEL_1))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	if(!IsPlayerLogged(userid))
		return SendNotConnected(playerid);

	if(userid == playerid)
		return SCM(playerid, COLOR_LIGHTRED, "?????? ???????? ?????? ????.");

    new mes[256];
	if(strlen(text) > MAXLEN)
	{
	    new pos = MAXLEN;
		if(pos < MAXLEN-1) pos = MAXLEN;

		format(mes, sizeof(mes), "%s ???????? ???: %s", GetAccName(playerid), text);
		SendClientMessageEx(userid, 0x00CC99AA, "%.*s", pos, mes);
		SendClientMessageEx(userid, 0x00CC99AA, "... %s", mes[pos]);

		format(mes, sizeof(mes), "[ANSWER]: %s ???????(-?) %s (ID: %i): %s", GetAccName(playerid), GetNameEx(userid), userid, text);
		StaffMSG(0x00CC99AA, "%.*s", pos, mes);
		StaffMSG(0x00CC99AA, "... %s", mes[pos]);
	}
	else
	{
	    format(mes, sizeof(mes), "%s ???????? ???: %s", GetAccName(playerid), text);
		SendClientMessage(userid, 0x00CC99AA, mes);

		StaffMSG(0x00CC99AA, "[ANSWER]: %s ???????(-?) %s (ID: %i): %s", GetAccName(playerid), GetNameEx(userid), userid, text);
	}
	return 1;
}

ALTX:aooc("/ao");
CMD:aooc(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_1))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	if(isnull(params))
		return SendSyntaxMessage(playerid, "/aooc [admin ooc chat]");

	new mes[128];
	if(strlen(params) > MAXLEN)
	{
		new pos = MAXLEN;
		if(pos < MAXLEN-1) pos = MAXLEN;
		format(mes, sizeof(mes), "[AOOC] %s: %.*s ...", GetAccName(playerid), pos, params);
		SCMALL(0xF97804FF,mes);
		format(mes, sizeof(mes), "... %s", params[pos]);
		SCMALL(0xF97804FF,mes);
	}
	else
	{
		format(mes, sizeof(mes), "[AOOC] %s: %s", GetAccName(playerid), params);
		SCMALL(0xF97804FF, mes);
	}
	return 1;
}
CMD:noooc(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_4)) return SendErrorMessage(playerid,"? ??? ???????????? ???? ??? ????????????? ???????.");
	if (!noooc)
	{
		noooc = true;
		SCMALL(COLOR_GRAD2, "   OOC ???????? ???????????????!");
	}
	else
	{
		noooc = false;
		SCMALL(COLOR_GRAD2, "   OOC ??????? ???????????????!");
	}
	return 1;
}
CMD:announce(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_1))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	if(isnull(params))
		return SendSyntaxMessage(playerid, "/announce [text]");

    new mes[128];
    format(mes, sizeof(mes), "~y~%s: ~w~%s", GetName(playerid), params);
    foreach (new i : Player)
	{
	    if(0 == IsPlayerLogged(i) || GetWorld(playerid) != GetWorld(i))
     		continue;

		GameTextForPlayer(i, mes, 5000, 4);
	}
	return 1;
}

CMD:setinterior(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return SendErrorMessage(playerid,"? ??? ???????????? ???? ??? ????????????? ???????.");
	new pid, int;
	if(sscanf(params,"ud",pid,int)) return SendSyntaxMessage(playerid, "/setinterior [playerid/PartOfName] [ID ?????????]");
	if(!IsPlayerLogged(pid)) return SendNotConnected(playerid);
	SendClientMessageEx(pid, COLOR_WHITE, "????????????? %s ???????(-?) ??? ???????? ?? %i.", GetAccName(playerid), int);
	AMSG(COLOR_LIGHTRED, "AdmCmd: %s ???????(-?) %s ???????? ?? %i.", GetAccName(playerid), GetName(pid), int);
	SetInterior(pid, int);
	return 1;
}
CMD:setworld(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return SendErrorMessage(playerid,"? ??? ???????????? ???? ??? ????????????? ???????.");
	new pid, wid;
	if(sscanf(params,"ud",pid,wid)) return SendSyntaxMessage(playerid, "/setworld [playerid/PartOfName] [ID ???????????? ????]");
	if(!IsPlayerLogged(pid)) return SendNotConnected(playerid);
	SendClientMessageEx(pid, COLOR_WHITE, "????????????? %s ????????(-?) ??? ??????????? ??? ?? %i.", GetAccName(playerid), wid);
	AMSG(COLOR_LIGHTRED, "AdmCmd: %s ??????(-?) %s ??????????? ??? ?? %i.", GetAccName(playerid), GetName(pid), wid);
	SetWorld(pid, wid);
	return 1;
}
CMD:getworld(playerid, params[])
{
	new id;
	if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return SendErrorMessage(playerid,"? ??? ???????????? ???? ??? ????????????? ???????.");
	if(sscanf(params,"u",id)) return SendSyntaxMessage(playerid, "/getworld [playerid/PartOfName]");
	if(!IsPlayerLogged(id)) return SendNotConnected(playerid);
	SendClientMessageEx(playerid, COLOR_WHITE, "??????????? ??? ?????? %s: %i.", GetName(id), GetWorld(id));
	return 1;
}
CMD:masked(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_1))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	SCM(playerid, COLOR_YELLOWG, "_________ ?????? ? ?????? ?????? _________");
	foreach(Player, i)
	{
		if(!IsPlayerLogged(i) || !maskOn{i}) continue;
		SendClientMessageEx(playerid, COLOR_WHITE, "* %s - %s [ID:%i]", GetNameWithMask(i), GetName(i), i);
	}
	SCM(playerid, COLOR_YELLOWG, "__________________________________________");
	return 1;
}
CMD:sethp(playerid, params[])
{
	new userid,
		hp;

	if(!CheckAdmin(playerid, ADMIN_LEVEL_3))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	if(sscanf(params,"ud", userid, hp))
		return SendSyntaxMessage(playerid, "/sethp [playerid/PartOfName] [????????(1-100)]");

	if(!IsPlayerLogged(userid))
		return SendNotConnected(playerid);

    if(IsPlayerInjured(userid))
    	return SendErrorMessage(playerid, "????? ? ?????? ???????/?????? ??????????? /healplayer");

	if(hp < 1 || hp > 100)
	    return SendErrorMessage(playerid, "????????: 1-100.");

	SendClientMessageEx(userid, COLOR_WHITE,"????????????? %s ?????????(-?) ??? %iHP.", GetAccName(playerid), hp);
	SetPlayerHealth(userid, hp);

	AMSG(COLOR_LIGHTRED, "AdmCmd: %s ?????????(-?) %s %iHP.", GetAccName(playerid), GetNameEx(userid), hp);
	return 1;
}
CMD:setarmour(playerid, params[])
{
	new userid,
		armour;

	if(!CheckAdmin(playerid, ADMIN_LEVEL_3))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	if(sscanf(params,"ud", userid, armour))
		return SendSyntaxMessage(playerid, "/setarmour [playerid/PartOfName] [armour(1-100)]");

	if(!IsPlayerLogged(userid))
		return SendNotConnected(playerid);

	SendClientMessageEx(userid, COLOR_WHITE,"????????????? %s ?????????(-?) ??? ?????????? ?? %iHP.", GetAccName(playerid), armour);
    SetPlayerArmour(userid, armour);

	AMSG(COLOR_LIGHTRED, "AdmCmd: %s ?????????(-?) %s ?????????? ?? %iHP.", GetAccName(playerid), GetNameEx(userid), armour);
	return 1;
}
CMD:setskin(playerid, params[])
{
	new targetid,
		skinid;

	if(!CheckAdmin(playerid, ADMIN_LEVEL_3))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	if(sscanf(params,"ui", targetid, skinid))
		return SendSyntaxMessage(playerid, "/setskin [playerid/PartOfName] [ID ????(0 - 311)]");

	if(!IsPlayerLogged(targetid))
		return SendNotConnected(playerid);

	if(skinid < 1 || skinid == 74 || skinid > 311)
		return SCM(playerid, COLOR_LIGHTRED, "ID ????? ?????? ???? ? ?????????: 1 - 311 ? ????? 74!");

	SetSkin(targetid, skinid);
	SendClientMessageEx(targetid, COLOR_WHITE, "????????????? %s ???????(-?) ??? ???? ?? ID %i.", GetAccName(playerid), skinid);

	AMSG(COLOR_LIGHTRED, "AdmCmd: %s ???????(-?) %s ???? ?? ID %i.", GetAccName(playerid), GetNameEx(targetid), skinid);
	return 1;
}
CMD:gotols(playerid)
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_1))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	SetPlayerPosEx(playerid, 1529.6, -1691.2, 13.3);
	SetInterior(playerid, 0);
	SetWorld(playerid, 0);

	AMSG(COLOR_LIGHTRED, "AdmCmd: %s ???????????????? ? ??? ??????.", GetAccName(playerid));
	return 1;
}

CMD:kick(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 1)
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	new userid,
		reason[128];

	if(sscanf(params,"us[128]", userid, reason))
		return SendSyntaxMessage(playerid, "/kick [playerid/PartOfName] [???????]");

	if(!IsPlayerLogged(userid))
		return SendNotConnected(playerid);

	new mes[128];
	format(mes, sizeof(mes), "[/kick] %s ??? ?????? ??????????????? %s, ???????: %s",GetName(userid), GetAccName(playerid), reason);
	insert_log(mes, ADMIN_LOG, 3, userid);

	format(mes, sizeof(mes), "AdmCmd: %s ??? ?????? ??????????????? %s, ???????: %s",GetName(userid), GetAccName(playerid), reason);
	SendClientMessageByAdmin(COLOR_LIGHTRED, mes);

	if(PlayerInfo[userid][pAdmin] && PlayerInfo[playerid][pAdmin] < 6)
	    KickEx(playerid);

	KickEx(userid);
	return 1;
}
CMD:skick(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_1))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

    new userid,
		reason[128];

	if(sscanf(params,"us[128]", userid, reason))
		return SendSyntaxMessage(playerid, "/skick [playerid/PartOfName] [???????]");

	if(!IsPlayerLogged(userid))
		return SendNotConnected(playerid);

	new mes[128];
	AMSG(COLOR_LIGHTRED, "AdmCmd: %s ?????? %s.", GetAccName(playerid), GetNameEx(userid));

 	format(mes, sizeof(mes), "[/skick] %s ??? ?????? ??????????????? %s, ???????: %s", GetName(userid), GetAccName(playerid), reason);
	insert_log(mes, ADMIN_LOG, 4);

	if(PlayerInfo[userid][pAdmin] && PlayerInfo[playerid][pAdmin] < 6)
 		KickEx(playerid);

	KickEx(userid);
	return 1;
}

CMD:offjail(playerid, params[])
{
	new username[MAX_PLAYER_NAME + 1],
 		reason[32],
 		time;

    if(!CheckAdmin(playerid, 1))
 		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	if(sscanf(params,"s[32]ds[32]", username, time, reason))
		return SendSyntaxMessage(playerid,"/offjail [??? ?????????] [????? ? ???????] [???????]");

    if(!IsValidPlayerName(username))
    	return SendErrorMessage(playerid, "???????? ??? ?????????.");

    if(time <= 0)
		return SCM(playerid, COLOR_LIGHTRED, "????? ?? ????? ???? ?????? 0.");

    foreach (new i : Player)
	{
	    if(0 == IsPlayerLogged(i) || !CompareStrings(username, GetName(i)))
	        continue;

	    SendErrorMessage(playerid, "?????? ????? ????????? ? ????: %s [ID: %i]", GetName(i), i);
		return 1;
	}

	new query[128];
	mysql_format(dbHandle, query,sizeof(query),"UPDATE `users` SET `ajailed` = '1', `ajailtime` = '%i' WHERE `name` = '%e'", time * 60, username);
	mysql_tquery(dbHandle, query, "OnPlayerOfflineJail", "dsds", playerid, username, time, reason);
	return 1;
}

CMD:ajail(playerid, params[])
{
	if(!CheckAdmin(playerid, 1))
 		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	new targetid,
		time,
		reason[128];

	if(sscanf(params,"uds[128]",targetid,time,reason))
		return SendSyntaxMessage(playerid,"/ajail [playerid/PartOfName] [????? ? ???????] [???????]");

	if(!IsPlayerLogged(targetid))
		return SendNotConnected(playerid);

	if(time <= 0)
		return SCM(playerid, COLOR_LIGHTRED, "????? ?? ????? ???? ?????? 0.");


	PlayerInfo[targetid][pAJailed] = 1;
	PlayerInfo[targetid][pAJailTime] = time*60;
	SetInterior(targetid, 18);
	SetWorld(targetid, playerid + 100);
	SetPlayerPosEx(targetid, -219.4580,1410.6747,27.7734);
	SetSpawnInfoEx(targetid, -219.4580,1410.6747,27.7734);
	ac_ResetPlayerWeapons(targetid);

	SendClientMessageEx(targetid, COLOR_WHITE, "?? ???? ?????????? ? ?????-?????? ??????????????? %s ?? %i ?????(?), ???????: %s.", GetAccName(playerid), time, reason);

	new mes[128];
	format(mes, sizeof(mes), "AdmCmd: %s ????????? ? ?????-?????? ??????????????? %s ?? %i ?????(?), ???????: %s", GetName(targetid), GetAccName(playerid), time, reason);
    SendClientMessageByAdmin(COLOR_LIGHTRED, mes);

	format(mes, sizeof(mes), "[/ajail] %s ????????? ? ?????-?????? ??????????????? %s ?? %i ?????(?), ???????: %s", GetName(targetid), GetAccName(playerid), time, reason);
	insert_log(mes, ADMIN_LOG, 1, targetid);
	return 1;
}
CMD:afree(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_1))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	new targetid;
	if(sscanf(params,"u",targetid))
		return SendSyntaxMessage(playerid,"/afree [playerid/PartOfName]");

	if(!IsPlayerLogged(targetid))
		return SendNotConnected(playerid);

	if(PlayerInfo[targetid][pJailed] == 0 && PlayerInfo[targetid][pAJailed] == 0)
	    return SendErrorMessage(playerid, "????? ?? ? ?????????? ? ??????/????? ??????.");

	PlayerInfo[targetid][pJailed] = 0;
	PlayerInfo[targetid][pIsolateTime] = 0;
	PlayerInfo[targetid][pJailTime] = 0;
	PlayerInfo[targetid][pAJailed] = 0;
	PlayerInfo[targetid][pAJailTime] = 0;

	if(IsValidDynamic3DTextLabel(PrisonLabel[targetid]))
	{
		DestroyDynamic3DTextLabel(PrisonLabel[targetid]);
  		PrisonLabel[targetid] = Text3D:INVALID_3DTEXT_ID;
	}

	SendClientMessageEx(targetid, COLOR_WHITE, "?? ???? ???????? ?? ??????/?????-?????? ??????????????? %s.", GetAccName(playerid));
	AMSG(COLOR_LIGHTRED, "AdmCmd: %s ???????? ?? ??????/?????-?????? %s.", GetAccName(playerid), GetName(targetid));

	SetInterior(targetid, 0);
	SetWorld(targetid, 0);
	SetPlayerPosEx(targetid, 1540.3586,-1684.2240,13.5504);
 	SetSpawnInfoEx(targetid, 1642.2006, -2334.4751, -2.6797, 1.0);
	return 1;
}

CMD:warn(playerid, params[])
{
	new userid,
		reason[128];

	if(!CheckAdmin(playerid, ADMIN_LEVEL_1))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	if(sscanf(params,"us[125]", userid, reason))
		return SendSyntaxMessage(playerid, "/warn [playerid/PartOfName] [???????]");

	if(!IsPlayerLogged(userid))
		return SendNotConnected(playerid);

    new mes[128],
        query[256];

	PlayerInfo[userid][pWarns]++;
	if(PlayerInfo[userid][pWarns] >= 3)
	{
		format(mes,sizeof(mes),"AdmCmd: %s ??????? ??????????????? %s, ???????: %s (3 ??????????????)", GetNameEx(userid), GetAccName(playerid),reason,PlayerInfo[userid][pWarns]);
        SendClientMessageByAdmin(COLOR_LIGHTRED, mes);

		mysql_format(dbHandle, query, sizeof(query), "INSERT INTO `bans` (name, admin, reason, date) VALUES ('%s', '%s', '%e', '%s')", GetAccName(userid), GetAccName(playerid), reason, GetFullDate());
		mysql_tquery(dbHandle, query);

		format(query, sizeof(query), "[/ban] %s ??? ??????? ??????????????? %s. ???????: %s", GetAccName(userid), GetAccName(playerid), reason);
		insert_log(query, ADMIN_LOG, 12);

		KickEx(userid);
		return 1;
	}
	SendClientMessageEx(userid, -1, "?? ???????? ?????????????? ?? %s, ????? ??????????????: %i/3.", GetAccName(playerid), PlayerInfo[userid][pWarns]);

    format(query, sizeof(query), "[/warn] %s ??????? ?????????????? ?? %s. ???????: %s", GetAccName(userid), GetAccName(playerid), reason);
	insert_log(query, ADMIN_LOG, 16);

    format(mes, sizeof(mes), "AdmCmd: %s (%s) ??????? ?????????????? ?? ?????????????? %s, ???????: %s (%i/3)", GetNameEx(userid), GetAccName(userid), GetAccName(playerid),reason,PlayerInfo[userid][pWarns]);
    SendClientMessageByAdmin(COLOR_LIGHTRED, mes);
	return 1;
}

CMD:block(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_1))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	new id,
		reason[64];

	if(sscanf(params,"us[64]",id, reason))
		return SendSyntaxMessage(playerid, "/block [playerid/PartOfName] [???????]");

	if(!IsPlayerLogged(id))
		return SendNotConnected(playerid);

	if(strlen(reason) > 63)
	    return SendErrorMessage(playerid, "?????????? ???????? ??????? ?? ????? 63.");

	new mes[128];
    format(mes, sizeof(mes), "AdmCmd: ???????? %s ??? ???????????? ??????????????? %s, ???????: %s.", GetNameEx(id), GetAccName(playerid), reason);
	SendClientMessageByAdmin(COLOR_LIGHTRED, mes);

    new query[256];
	mysql_format(dbHandle, query, sizeof(query), "UPDATE `users` SET `block_name`='%e', `block_reason` ='%e', `status` = '3' WHERE `id` = '%i'", GetAccName(playerid), reason, PlayerInfo[id][pID]);
	mysql_tquery(dbHandle, query);

    KickEx(id);
	return 1;
}

CMD:offblock(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_1))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	new name[MAX_PLAYER_NAME],
		reason[64];

	if(sscanf(params,"s[24]s[64]", name, reason))
		return SendSyntaxMessage(playerid, "/offblock [??? ?????????] [???????]");

    if(!IsValidPlayerName(name))
    	return SendErrorMessage(playerid, "???????? ??? ?????????.");

	if(strlen(reason) > 63)
	    return SendErrorMessage(playerid, "?????????? ???????? ??????? ?? ????? 63.");

    foreach (Player, i)
	{
	    if(0 == IsPlayerLogged(i) || !CompareStrings(GetName(i), name))
	        continue;

		SendErrorMessage(playerid, "???????? ?????????? ? ???? - %s (ID: %i)", GetNameEx(i), i);
		return 1;
	}

	new query[128];
	mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `users` WHERE `name` = '%e'", name);
	mysql_tquery(dbHandle, query, "OfflineBlockPlayer", "iss", playerid, name, reason);
	return 1;
}

forward OfflineBlockPlayer(playerid, account[], reason[]);
public OfflineBlockPlayer(playerid, account[], reason[])
{
    if(cache_num_rows() == 0)
	    return SendErrorMessage(playerid, "???????? \"%s\" ?? ?????? ? ???? ??????.", account);

	new status = cache_get_field_content_int(0, "status");

	if(status == 3)
	    return SendErrorMessage(playerid, "???????? \"%s\" ??? ????????????.", account);

    if(status != 1)
    	return SendErrorMessage(playerid, "???????? \"%s\" ?????? ???? ???????????.", account);

	new query[128];
	mysql_format(dbHandle, query, sizeof(query), "UPDATE `users` SET `block_name`='%e', `block_reason` ='%e', `status` = '3' WHERE `name` = '%e'", GetAccName(playerid), reason, account);
	mysql_tquery(dbHandle, query);

	new mes[128];
    format(mes, sizeof(mes), "AdmCmd: ???????? %s (offline) ??? ???????????? ??????????????? %s, ???????: %s.", account, GetAccName(playerid), reason);
	SendClientMessageByAdmin(COLOR_LIGHTRED, mes);
	return 1;
}


CMD:unblock(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_1))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	new name[MAX_PLAYER_NAME];
	if(sscanf(params,"s[24]",name))
		return SendSyntaxMessage(playerid, "/unblock [??? ?????????]");

    new query[128];
	mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `users` WHERE `name` = '%e'", name);
	mysql_tquery(dbHandle, query, "UnBlockPlayer", "is", playerid, name);
	return 1;
}

forward UnBlockPlayer(playerid, account[]);
public UnBlockPlayer(playerid, account[])
{
	if(cache_num_rows() == 0)
	    return SendErrorMessage(playerid, "???????? \"%s\" ?? ?????? ? ???? ??????.", account);

	if(cache_get_field_content_int(0, "status") != 3)
	    return SendErrorMessage(playerid, "???????? \"%s\" ?? ????????????.", account);

    AMSG(COLOR_LIGHTRED, "AdmCmd: ???????? %s ??? ????????????? ??????????????? %s.", account, GetAccName(playerid));

    new query[128];
	mysql_format(dbHandle, query, sizeof(query), "UPDATE `users` SET `status` = '1' WHERE `name` = '%e'", account);
	mysql_tquery(dbHandle, query);
	return 1;
}

CMD:offban(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_1))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	new name[MAX_PLAYER_NAME],
		reason[64];

	if(sscanf(params,"s[24]s[64]", name, reason))
		return SendSyntaxMessage(playerid, "/offban [??? ????????????] [???????]");

    if(!IsValidPlayerName(name))
    	return SendErrorMessage(playerid, "???????? ??? ????????????.");

	if(strlen(reason) > 63)
	    return SendErrorMessage(playerid, "?????????? ???????? ??????? ?? ????? 63.");

    foreach (Player, i)
	{
	    if(0 == IsPlayerLogged(i) || !CompareStrings(GetAccName(i), name))
	        continue;

		SendErrorMessage(playerid, "???????????? \"%s\" ????????? ? ???? ??? ?????????? %s (ID: %i)", name, GetNameEx(i), i);
		return 1;
	}

	new query[156];
	mysql_format(dbHandle, query, sizeof(query), "SELECT *, (SELECT `id` FROM `bans` WHERE `name` = '%e') as banid FROM `accounts` WHERE `login` = '%e'", name, name);
	mysql_tquery(dbHandle, query, "OfflineBanPlayer", "iss", playerid, name, reason);
	printf("%s", query);
	return 1;
}

forward OfflineBanPlayer(playerid, account[], reason[]);
public OfflineBanPlayer(playerid, account[], reason[])
{
    if(cache_num_rows() == 0)
	    return SendErrorMessage(playerid, "???????????? \"%s\" ?? ?????? ? ???? ??????.", account);

	if(cache_get_field_content_int(0, "banid") != 0)
	    return SendErrorMessage(playerid, "???????????? \"%s\" ??? ???????.", account);

	new admin = cache_get_field_content_int(0, "admin");
	new userid = cache_get_field_content_int(0, "id");

	if(admin > PlayerInfo[playerid][pAdmin])
	    return AMSG(COLOR_LIGHTRED, "AdmCmd: %s (ID: %i) ????????? ???????? (offline) %s ? ????????: %s.", GetAccName(playerid), account, reason);

    new query[256];
	mysql_format(dbHandle, query, sizeof(query), "INSERT INTO `bans` (name, admin, reason, date) VALUES ('%e', '%s', '%e', '%s')", account, GetAccName(playerid), reason, GetFullDate());
	mysql_tquery(dbHandle, query);

    format(query, sizeof(query), "[/offban] %s ??? ??????? ??????????????? %s. ???????: %s", account, GetAccName(playerid), reason);
	insert_log(query, ADMIN_LOG, 13, INVALID_PLAYER_ID, userid);

	new mes[128];
    format(mes, sizeof(mes), "AdmCmd: %s (offline) ??? ??????? ??????????????? %s, ???????: %s.", account, GetAccName(playerid), reason);
	SendClientMessageByAdmin(COLOR_LIGHTRED, mes);
	return 1;
}


CMD:ban(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_1))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	new id,
		reason[64];

	if(sscanf(params,"us[64]",id, reason))
		return SendSyntaxMessage(playerid, "/ban [playerid/PartOfName] [???????]");

	if(!IsPlayerLogged(id))
		return SendNotConnected(playerid);

	if(strlen(reason) > 63)
	    return SendErrorMessage(playerid, "?????????? ???????? ??????? ?? ????? 63.");

	new mes[128];
    format(mes, sizeof(mes), "AdmCmd: %s (%s) ??? ??????? ??????????????? %s, ???????: %s.", GetNameEx(id), GetAccName(id), GetAccName(playerid), reason);
	SendClientMessageByAdmin(COLOR_LIGHTRED, mes);

	new query[256];
	mysql_format(dbHandle, query, sizeof(query), "INSERT INTO `bans` (name, admin, reason, date) VALUES ('%s', '%s', '%e', '%s')", GetAccName(id), GetAccName(playerid), reason, GetFullDate());
	mysql_tquery(dbHandle, query);

	format(query, sizeof(query), "[/ban] %s ??? ??????? ??????????????? %s. ???????: %s", GetAccName(id), GetAccName(playerid), reason);
	insert_log(query, ADMIN_LOG, 12);

	if(PlayerInfo[id][pAdmin] && PlayerInfo[playerid][pAdmin] < 6)
	{
	    mysql_format(dbHandle, query, sizeof(query), "INSERT INTO `bans` (name, admin, reason, date) VALUES ('%s', '%s', '%s', '%s')", GetAccName(playerid), "????-?????", "??????? ????????????? ??????????????", GetFullDate());
		mysql_tquery(dbHandle, query);
	}

    KickEx(id);
	return 1;
}

CMD:unban(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_1))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	new name[MAX_PLAYER_NAME];
	if(sscanf(params,"s[24]",name))
		return SendSyntaxMessage(playerid, "/unban [??? ????????????]");

    new query[128];
	mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `bans` WHERE `name` = '%e'", name);
	mysql_tquery(dbHandle, query, "UnBanPlayer", "is", playerid, name);
	return 1;
}

forward UnBanPlayer(playerid, account[]);
public UnBanPlayer(playerid, account[])
{
	if(cache_num_rows() == 0)
	    return SendErrorMessage(playerid, "???????????? \"%s\" ?? ????????????.", account);

    AMSG(COLOR_LIGHTRED, "AdmCmd: %s ??? ???????? ??????????????? %s.", account, GetAccName(playerid));

    new query[128];
	mysql_format(dbHandle, query, sizeof(query), "DELETE FROM `bans` WHERE `name` = '%e'", account);
	mysql_tquery(dbHandle, query);

	new mes[128];
	format(mes, sizeof(mes), "[/unban] %s ??? ???????? ??????????????? %s", account, GetAccName(playerid));
	insert_log(mes, ADMIN_LOG, 6);
	return 1;
}

CMD:banip(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_1))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	new ip[24],
	    reason[64];

	if(sscanf(params,"s[24]s[64]",ip))
		return SendSyntaxMessage(playerid, "/banip [IP] [???????]");

	if(!IsAnIP(ip))
	    return SendErrorMessage(playerid, "???????????? ?????? IP.");

	if(strlen(reason) > 63)
	    return SendErrorMessage(playerid, "?????????? ???????? ??????? ?? ????? 63.");

    new query[128];
	mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `bans` WHERE `ip` = '%e'", ip);
	mysql_tquery(dbHandle, query, "BanAnIP", "iss", playerid, ip, reason);
	return 1;
}

forward BanAnIP(playerid, ip[], reason[]);
public BanAnIP(playerid, ip[], reason[])
{
	if(cache_num_rows() != 0)
	    return SendErrorMessage(playerid, "IP \"%s\" ??? ????????????.", ip);

    AMSG(COLOR_LIGHTRED, "AdmCmd: %s ????????????(-?) IP ?????: %s.", GetAccName(playerid), ip);

	new pIP[24];
	foreach(Player, i)
	{
		GetPlayerIp(i, pIP, sizeof(pIP));
		if(0 == IsPlayerLogged(i) || !CompareStrings(ip, pIP))
		    continue;

		SendErrorMessage(i, "??? IP: %s ??? ???????????? ?? ???? ???????.", ip);
		KickEx(i);
	}

    new query[256];
	mysql_format(dbHandle, query, sizeof(query), "INSERT INTO `bans` (admin, reason, date, ip) VALUES ('%s', '%e', '%s', '%e')", GetAccName(playerid), reason, GetFullDate(), ip);
	mysql_tquery(dbHandle, query);
	return 1;
}

CMD:unbanip(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_1))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	new ip[24];
	if(sscanf(params,"s[24]",ip))
		return SendSyntaxMessage(playerid, "/unbanip [IP]");

	if(!IsAnIP(ip))
	    return SendErrorMessage(playerid, "???????????? ?????? IP.");

    new query[128];
	mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `bans` WHERE `ip` = '%e'", ip);
	mysql_tquery(dbHandle, query, "UnBanAnIP", "is", playerid, ip);

	return 1;
}

forward UnBanAnIP(playerid, ip[]);
public UnBanAnIP(playerid, ip[])
{
	if(cache_num_rows() == 0)
	    return SendErrorMessage(playerid, "IP \"%s\" ?? ????????????.", ip);

    AMSG(COLOR_LIGHTRED, "AdmCmd: %s ?????????????(-?): IP %s.", GetAccName(playerid), ip);

	new query[128];
	mysql_format(dbHandle, query, sizeof(query), "DELETE FROM `bans` WHERE `ip` = '%e'", ip);
	mysql_tquery(dbHandle, query);

	new mes[128];
	format(mes, sizeof(mes), "[/unbanip] IP: %s ??? ?????????????? ??????????????? %s", ip, GetAccName(playerid));
	insert_log(mes, ADMIN_LOG, 7);
	return 1;
}

CMD:mute(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_1))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

    new userid,
		time,
		mreason[64];

	if(sscanf(params,"uds[128]", userid, time, mreason))
		return SendSyntaxMessage(playerid, "/mute [playerid/PartOfName] [?????(? ???????)] [???????]");

	if(!IsPlayerLogged(userid))
		return SendNotConnected(playerid);

	if(time < 1 || time > 99999)
	    return SendErrorMessage(playerid, "????? ?? 1 ?? 99999.");

	if(strlen(mreason) > 63)
	    return SendErrorMessage(playerid, "????? ??????? ?? 63 ????????.");

	PlayerInfo[userid][pMutedTime] = time*60;

	new mes[128];
	format(mes, sizeof(mes), "AdmCmd: %s ??? ???????? ??????????????? %s ?? %i ?????(?). ???????: %s", GetNameEx(userid), GetAccName(playerid), time, mreason);
	SendClientMessageByAdmin(COLOR_LIGHTRED, mes);
	return 1;
}
CMD:unmute(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_1))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

    new userid;
	if(sscanf(params,"u", userid))
		return SendSyntaxMessage(playerid, "/unmute [playerid/PartOfName]");

	if(!IsPlayerLogged(userid))
		return SendNotConnected(playerid);

	if(PlayerInfo[userid][pMutedTime] == 0)
	    return SendErrorMessage(playerid, "? ?????? ??? ????.");

	PlayerInfo[userid][pMutedTime] = 0;

	new mes[128];
	format(mes, sizeof(mes), "AdmCmd: %s ??? ?????????? ?? ????? ??????????????? %s.", GetNameEx(userid), GetAccName(playerid));
	SendClientMessageByAdmin(COLOR_LIGHTRED, mes);
	return 1;
}
CMD:clearchat(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_1))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	for(new i = 0; i <= 50; i++)
	{
		SCMALL(COLOR_WHITE, " ");
	}

	new mes[128];
	format(mes, sizeof(mes), "??? ?????? ??????????????? %s.", GetAccName(playerid));
	SCMALL(COLOR_WHITE, mes);
	return 1;
}
CMD:tp(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_1))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	new telestring[1550], part[40];
	format(telestring, sizeof(telestring), "{FFFFFF}%s", OrTeleports[0]);
	for(new OrT = 1; OrT < sizeof(OrTeleports); OrT++)
	{
		format(part, sizeof(part), "\n%s", OrTeleports[OrT]);
		strcat(telestring, part, sizeof(telestring));
	}
	Dialog_Show(playerid, Teles, DIALOG_STYLE_LIST, "???????? ?????, ???? ?????? ?????????????????", telestring, "????????", "?????");
	return 1;
}
CMD:gethere(playerid, params[])
{
	new userid;
	if(!CheckAdmin(playerid, ADMIN_LEVEL_1))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	if(sscanf(params,"u", userid))
		return SendSyntaxMessage(playerid, "/gethere [playerid/PartOfName]");

	if(!IsPlayerLogged(userid))
		return SendNotConnected(playerid);

    if(GetPlayerState(userid) == PLAYER_STATE_SPECTATING)
        return SendErrorMessage(playerid, "????? ? ?????? ??????.");

    SendPlayerToPlayer(userid, playerid);
	SendClientMessageEx(userid, COLOR_WHITE,"????????????? %s ??????????????(-?) ??? ? ????.", GetAccName(playerid));

	AMSG(COLOR_LIGHTRED, "AdmCmd: %s ??????????????(-?) ? ???? %s.", GetAccName(playerid), GetNameEx(userid));
	return 1;
}
CMD:goto(playerid, params[])
{
	new userid;
	if(!CheckAdmin(playerid, ADMIN_LEVEL_1))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	if(sscanf(params,"u",userid))
		return SendSyntaxMessage(playerid, "/goto [playerid/PartOfName]");

	if(!IsPlayerLogged(userid))
		return SendNotConnected(playerid);

    if(GetPlayerState(userid) == PLAYER_STATE_SPECTATING)
        return SendErrorMessage(playerid, "????? ? ?????? ??????.");

    SendPlayerToPlayer(playerid, userid);

	AMSG(COLOR_LIGHTRED, "AdmCmd: %s ???????????????? ? %s.", GetAccName(playerid), GetNameEx(userid));
	return 1;
}
CMD:freeze(playerid, params[])
{
	if(!IsTester(playerid) && !CheckAdmin(playerid, 1))
 		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	new userid;

	if(sscanf(params,"u", userid))
		return SendSyntaxMessage(playerid, "/freeze [playerid/PartOfName]");

	if(!IsPlayerLogged(userid))
		return SendNotConnected(playerid);

	new prefix[16] = "????????";
	if(PlayerInfo[playerid][pAdmin] > 0) prefix = "???????????????";

	SendClientMessageEx(userid, COLOR_WHITE,"?? ???? ?????????? %s %s.", prefix, GetAccName(playerid));

	StaffMSG(COLOR_LIGHTRED, "AdmCmd: %s ?????????(-?) %s.", GetAccName(playerid), GetNameEx(userid));

	FreezePlayer(userid);
	return 1;
}

CMD:unfreeze(playerid, params[])
{
	if(!IsTester(playerid) && !CheckAdmin(playerid, 1))
	    return SendErrorMessage(playerid,"Nu ai voie sa folosesti aceasta comanda");

    new userid;

	if(sscanf(params,"u", userid))
		return SendSyntaxMessage(playerid, "/unfreeze [playerid/PartOfName]");

	if(!IsPlayerLogged(userid))
		return SendNotConnected(playerid);

	new prefix[16] = "????????";
	if(PlayerInfo[playerid][pAdmin] > 0) prefix = "???????????????";

	SendClientMessageEx(userid, COLOR_WHITE,"?? ???? ??????????? %s %s.", prefix, GetAccName(playerid));

	StaffMSG(COLOR_LIGHTRED, "AdmCmd: %s ??????????(-?) %s.", GetAccName(playerid), GetNameEx(userid));

	UnFreezePlayer(userid);
	return 1;
}
CMD:slap(playerid, params[])
{
	new userid,
		Float:slx,
		Float:sly,
		Float:slz;

	if(!CheckAdmin(playerid, ADMIN_LEVEL_1))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	if(sscanf(params,"u", userid))
		return SendSyntaxMessage(playerid, "/slap [playerid/PartOfName]");

	if(!IsPlayerLogged(userid))
		return SendNotConnected(playerid);

	GetPlayerPos(userid, slx, sly, slz);
	SetPlayerPosEx(userid, slx, sly, slz+10, 0);
	PlayerPlaySound(userid, 1130, slx, sly, slz+10);

	SendClientMessageEx(userid, COLOR_WHITE,"????????????? %s ??? ?????????(-?).",GetAccName(playerid));
	AMSG(COLOR_LIGHTRED, "AdmCmd: %s ?????????(-?) %s.", GetAccName(playerid), GetNameEx(userid));
	return 1;
}
CMD:getip(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_1))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	new ip[24],
		userid;

	if(sscanf(params,"u", userid))
		return SendSyntaxMessage(playerid, "/getip [playerid/PartOfName]");

	if(!IsPlayerLogged(userid))
		return SendNotConnected(playerid);

	GetPlayerIp(userid, ip, sizeof(ip));
	SendClientMessageEx(playerid, COLOR_WHITE, "IP ????? %s: %s.", GetName(userid), ip);
	return 1;
}

CMD:getstats(playerid, params[])
{
	new userid;
	if(!CheckAdmin(playerid, ADMIN_LEVEL_1))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	if(sscanf(params,"u", userid))
		return SendSyntaxMessage(playerid, "/getstats [playerid/PartOfName]");

	if(!IsPlayerLogged(userid))
		return SendNotConnected(playerid);

	ShowStats(playerid, userid);
	AMSG(COLOR_LIGHTRED, "AdmCmd: %s ????????(-?) ??????? /getstats ? %s.", GetAccName(playerid), GetNameEx(userid));
	return 1;
}

CMD:getproperty(playerid, params[])
{
	new userid;
	if(!CheckAdmin(playerid, ADMIN_LEVEL_1))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	if(sscanf(params,"u", userid))
		return SendSyntaxMessage(playerid, "/getproperty [playerid/PartOfName]");

	if(!IsPlayerLogged(userid))
		return SendNotConnected(playerid);

	ShowProperty(playerid, userid);
	AMSG(COLOR_LIGHTRED, "AdmCmd: %s ????????(-?) ??????? /getproperty ? %s.", GetAccName(playerid), GetNameEx(userid));
	return 1;
}

CMD:healplayer(playerid, params[])
{
	new userid;
	if(!CheckAdmin(playerid, ADMIN_LEVEL_1))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	if(sscanf(params,"u",userid))
		return SendSyntaxMessage(playerid, "/healplayer [playerid/PartOfName] (?????? ??? ??? ??????)");

	if(!IsPlayerLogged(userid))
		return SendNotConnected(playerid);

	if(!IsPlayerInjured(userid))
        return SendErrorMessage(playerid, "????? ?? ????????? ? ?????? ???????/??????.");

	SetPlayerHealth(userid, 100.0);

	ResetDamages(userid);
	StopPlayerAnims(userid);

	SendClientMessageEx(userid, -1, "????????????? %s ????????(-?) ??? ?? ????.", GetAccName(playerid));

	AMSG(COLOR_LIGHTRED, "AdmCmd: %s ????????(-?) ?? ???? %s.", GetAccName(playerid), GetNameEx(userid));
	return 1;
}

CMD:gotocar(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_1))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

    new vehicle,
		Float:x,
		Float:y,
		Float:z;
	if(sscanf(params,"d",vehicle))
		return SendSyntaxMessage(playerid, "/gotocar [ID ??????????]");

	if(0 == IsValidVehicle(vehicle))
		return SCM(playerid, COLOR_LIGHTRED, "????????????? ???????? ??? ????? ID ?? ??????????.");

	GetVehiclePos(vehicle, x, y, z);
	SetPlayerPosEx(playerid, x+1, y+1, z);
	SetWorld(playerid, GetVehicleVirtualWorld(vehicle));
	SetInterior(playerid, GetVehicleInterior(vehicle));

	AMSG(COLOR_LIGHTRED, "AdmCmd: %s ????????????????(-???) ? ????????????? ???????? ID %i.", GetAccName(playerid), vehicle);
	return 1;
}

CMD:getcar(playerid, params[])
{
	new vehicle,
		Float:x,
		Float:y,
		Float:z,
		interior = GetInterior(playerid),
		vw = GetWorld(playerid);

	if(!CheckAdmin(playerid, ADMIN_LEVEL_1))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	if(sscanf(params,"d",vehicle))
		return SendSyntaxMessage(playerid, "/getcar [ID ??????????]");

	if(0 == IsValidVehicle(vehicle))
		return SCM(playerid, COLOR_LIGHTRED, "????????????? ???????? ??? ????? ID ?? ??????????.");

	if(IsPlayerInVehicle(playerid, vehicle))
	    return SendErrorMessage(playerid, "?? ??? ?????????? ? ?????? ??????????.");

    GetXYInFrontOfPlayer(playerid, x, y, z, 5.0);
	foreach(Player, i)
	{
	    if(0 == IsPlayerLogged(i) || IsPlayerInVehicle(i, vehicle) == 0)
	        continue;

		SetPlayerCoords(i, x, y, z);
		SetInterior(i, interior);
		SetWorld(i, vw);
	}

	SetVehiclePos(vehicle, x, y, z);
	SetVehicleVirtualWorld(vehicle, vw);
	LinkVehicleToInterior(vehicle, interior);

	AMSG(COLOR_LIGHTRED, "AdmCmd: %s ??????????????(-?) ? ???? ???????????? ???????? ID %i.", GetAccName(playerid), vehicle);
	return 1;
}

CMD:fixveh(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_1))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

    new vehicle;
	if(sscanf(params,"d",vehicle))
		return SendSyntaxMessage(playerid, "/fixveh [ID ??????????]");

	if(0 == IsValidVehicle(vehicle))
		return SCM(playerid, COLOR_LIGHTRED, "????????????? ???????? ??? ????? ID ?? ??????????.");

	FixVehicle(vehicle);
	AMSG(COLOR_LIGHTRED, "AdmCmd: %s ???????(-?) ???????????? ???????? ID %i.", GetAccName(playerid), vehicle);
	return 1;
}

ALTX:spec("/spy");
CMD:spec(playerid, params[])
{
	if(!CheckAdmin(playerid, 1))
	    return SendErrorMessage(playerid,"Nu ai voie sa folosesti aceasta comanda");

	new userid;
	if(sscanf(params,"u", userid))
		return SendSyntaxMessage(playerid, "/spec [playerid/PartOfName]");

	if(userid == playerid)
 		return SendErrorMessage(playerid, "?????? ?????? ?????? ?? ?????.");

	if(!IsPlayerLogged(userid))
		return SendNotConnected(playerid);

	if(pTemp[playerid][pSpecPlayer] == INVALID_PLAYER_ID)
		SavePlayerPos(playerid);

	pTemp[playerid][pSpecPlayer] = userid;
    TogglePlayerSpectating(playerid, 1);

	if(IsPlayerInAnyVehicle(userid)) PlayerSpectateVehicle(playerid, GetPlayerVehicleID(userid));
	else PlayerSpectatePlayer(playerid, userid);

	SetInterior(playerid,GetInterior(userid));
	SetWorld(playerid, GetWorld(userid));
	return 1;
}

CMD:specoff(playerid, params[])
{
	if(!CheckAdmin(playerid, 1))
 		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	if(pTemp[playerid][pSpecPlayer] == INVALID_PLAYER_ID)
		return SendErrorMessage(playerid, "?? ?? ? ?????? ????????.");

    //SetSpawnInfoEx(playerid, 0, PlayerInfo[playerid][pPosX],PlayerInfo[playerid][pPosY],PlayerInfo[playerid][pPosZ]);
	TogglePlayerSpectating(playerid, 0);
	return 1;
}

CMD:plantinfo(playerid, params[])
{
	new plant = -1;
	if(!CheckAdmin(playerid, ADMIN_LEVEL_1))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	if((plant = Plant_Nearest(playerid)) == -1)
		return SCM(playerid, COLOR_LIGHTRED, "?? ?? ?????????? ????? ? ?????????.");

	SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "ID ????????: %i, ???????: %s.", plant, CropsInfo[plant][pPlanter]);
	return 1;
}

ALTX:removeplant("/rplant");
CMD:removeplant(playerid, params[])
{
    new plant;
	if(!CheckAdmin(playerid, ADMIN_LEVEL_1))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	if(sscanf(params,"d",plant)) return SendSyntaxMessage(playerid, "/removeplant [ID ????????]");

	if(plant < 0 || plant > MAX_PLANTS-1 || 0 == CropsInfo[plant][pPlanted])
		return SCM(playerid, COLOR_LIGHTRED, "???????? ??? ???? ID ?? ??????????.");

	SendClientMessageEx(playerid, COLOR_LIGHTRED, "?? ??????? ???????? ??? ID: %i", plant);
	DestroyCrop(plant);
	return 1;
}

CMD:aprison(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_1))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	new userid,
		time,
		reason[128];

	if(sscanf(params,"uds[128]", userid, time, reason))
		return SendSyntaxMessage(playerid,"/aprison [playerid/PartOfName] [????? ? ???????] [???????]");

	if(!IsPlayerLogged(userid))
		return SendNotConnected(playerid);

	if(time < 1 || time > 99999)
		return SCM(playerid, COLOR_LIGHTRED, "????? ?? ????? ???? ????? 1 ? ?? ????? 99999 ?????.");

	new mes[128];
	format(mes, sizeof(mes), "AdmCmd: %s ??? ??????? ? ?????? ??????????????? %s ?? %s ?????, ???????: %s", GetNameEx(userid), GetAccName(playerid), FormatNumber(time), reason);
    SendClientMessageByAdmin(COLOR_LIGHTRED, mes);

	PlayerInfo[userid][pPrisoned] = random(sizeof(prison_sadoc));
	PlayerInfo[userid][pJailed] = PRISON_JAIL;
	PlayerInfo[userid][pJailTime] = time*60;

    SendClientMessageEx(userid, COLOR_YELLOWG, "?? ???? ???????? ? ?????? ??????????????? %s. ?????: %s ?????.", GetAccName(playerid), FormatNumber(time));
    SendClientMessageEx(userid, COLOR_GRAD2, "??????: ??? ????? ???????????? - A%i(/myprisonnumber).", PlayerInfo[userid][pPrisoned]+100);

	SpawnPlayer(userid);
	return 1;
}
CMD:checkinv(playerid, params[])
{
    if(!CheckAdmin(playerid, ADMIN_LEVEL_1))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	new title[56],
		userid;

	if(sscanf(params,"u", userid))
		return SendSyntaxMessage(playerid, "/checkinv [playerid/PartOfName]");

	if(!IsPlayerLogged(userid))
		return SendNotConnected(playerid);

	new mes[MAX_INVENTORY * 32] = "{ffffff}???????\t{ffffff}??????????";
	for(new i; i != MAX_INVENTORY; i++)
	{
	    if(PlayerInfo[userid][pInv][i] == 0)
			format(mes, sizeof(mes), "%s\n{C3C3C3}?????? ????\t", mes);
		else
			format(mes, sizeof(mes), "%s\n%s\t%i", mes, inventory_items[PlayerInfo[userid][pInv][i]][itemName], PlayerInfo[userid][pInvAmount][i]);
	}
	format(title, sizeof(title), "????????? - %s", GetNameEx(userid));
	Dialog_Show(playerid, None, DIALOG_STYLE_TABLIST_HEADERS, title, mes, "???????", "");
	return 1;
}
CMD:checkcar(playerid, params[])
{
    if(!CheckAdmin(playerid, ADMIN_LEVEL_1))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	new title[56],
		vehicle;

	if(sscanf(params,"d",vehicle))
		return SendSyntaxMessage(playerid, "/checkcar [id ??????????]");

    if(!IsValidVehicle(vehicle))
	    return SendErrorMessage(playerid, "????????? ?? ??????.");

	if(IsADontTrunk(vehicle) || IsAPlane(vehicle) || IsABiker(vehicle) || IsAHelicopter(vehicle) || IsABoat(vehicle) || IsABicycle(vehicle))
		return SCM(playerid, COLOR_LIGHTRED, "? ????? ?????????? ??? ?????????.");

	new mes[MAX_VEHICLE_INVENTORY * 32] = "{ffffff}???????\t{ffffff}??????????";
	for(new i; i != MAX_VEHICLE_INVENTORY; i++)
	{
	    if(VehicleInfo[vehicle][carInv][i] == 0)
			format(mes, sizeof(mes), "%s\n{C3C3C3}?????? ????\t", mes);
		else
			format(mes, sizeof(mes), "%s\n%s\t%i", mes, inventory_items[VehicleInfo[vehicle][carInv][i]][itemName], VehicleInfo[vehicle][carInvAmount][i]);
	}

	format(title, sizeof(title), "{F5DEB3}%s | ????????: %s", VehicleNames[GetVehicleModel(vehicle)-400], VehicleInfo[vehicle][carOwner]);
    Dialog_Show(playerid, None, DIALOG_STYLE_TABLIST_HEADERS, title, mes, "???????", "");
	return 1;
}
CMD:checkprop(playerid, params[])
{
	new house;

	if(!CheckAdmin(playerid, ADMIN_LEVEL_1))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	if(sscanf(params,"d",house))
		return SendSyntaxMessage(playerid, "/checkprop [id ????]");

    if(house < 0 || house > MAX_HOUSES || 0 == HouseInfo[house][hID])
		return SCM(playerid, COLOR_LIGHTRED, "???? ??? ???? ID ?? ??????????.");

	new mes[MAX_HOUSE_INVENTORY * 32] = "{ffffff}???????\t{ffffff}??????????";
	for(new i = 0; i < MAX_HOUSE_INVENTORY; i++)
	{
		if(HouseInfo[house][hInv][i] == 0)
			format(mes, sizeof(mes), "%s\n{C3C3C3}?????? ????\t", mes);
		else
			format(mes, sizeof(mes), "%s\n%s\t%i", mes, inventory_items[HouseInfo[house][hInv][i]][itemName], HouseInfo[house][hInvAmount][i]);
	}

	new housename[MAX_PLAYER_NAME + 24];
	format(housename, sizeof(housename), "{F5DEB3}???????? ????: %s", HouseInfo[house][hOwner]);
	Dialog_Show(playerid, None, DIALOG_STYLE_TABLIST_HEADERS, housename, mes, "???????", "");
	return 1;
}
stock ClearKillFeed(playerid = INVALID_PLAYER_ID)
{
	if((playerid != INVALID_PLAYER_ID) && (0 == IsPlayerConnected(playerid)))
		return 0;
	goto L_start;
	{
		new dummy[16/(cellbits/charbits)];
		#emit const.pri dummy
	}
	#if __Pawn < 0x030A
		SendDeathMessage(0, 0, 0),
		SendDeathMessageToPlayer(0, 0, 0, 0);
	#endif
	L_start:
	const SDM_MAGIC_ID = INVALID_PLAYER_ID-1;
	new i = 5;
	#emit    push.c    SDM_MAGIC_ID
	#emit    push.c    SDM_MAGIC_ID
	if(playerid == INVALID_PLAYER_ID)
	{
		#emit    push.c    12
		do{
			#emit    sysreq.c    SendDeathMessage
		}while(--i != 0);
		#emit    stack    12
	}
	else
	{
		#emit    push.s    playerid
		#emit    push.c    16
		do{
			#emit    sysreq.c    SendDeathMessageToPlayer
		}while(--i != 0);
		#emit    stack    16
	}
	return 1;
}
CMD:dmlog(playerid,params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_1)) return SendErrorMessage(playerid,"? ??? ???????????? ???? ??? ????????????? ???????.");
	if(pTemp[playerid][pDMLog] == 0)
	{
		SCM(playerid,COLOR_WHITE,"?? ???????? ??-???.");
		pTemp[playerid][pDMLog] = 1;
	}
	else if(pTemp[playerid][pDMLog] == 1)
	{
		SCM(playerid,COLOR_WHITE,"?? ????????? ??-???.");
		ClearKillFeed(playerid);
		pTemp[playerid][pDMLog] = 0;
	}
	return 1;
}

//===========================================2 ???????=================================================
CMD:up(playerid, params[])
{
	new amount, Float:x, Float:y, Float:z;
	if(!CheckAdmin(playerid, ADMIN_LEVEL_2)) return SendErrorMessage(playerid,"? ??? ???????????? ???? ??? ????????????? ???????.");
	if(sscanf(params,"d",amount)) return SendSyntaxMessage(playerid, "/up [blocks]");
	GetPlayerPos(playerid, x, y ,z);
	SetPlayerPosEx(playerid, x, y, z+amount);
	return 1;
}
CMD:down(playerid, params[])
{
	new amount, Float:x, Float:y, Float:z;
	if(!CheckAdmin(playerid, ADMIN_LEVEL_2)) return SendErrorMessage(playerid,"? ??? ???????????? ???? ??? ????????????? ???????.");
	if(sscanf(params,"d",amount)) return SendSyntaxMessage(playerid, "/down [blocks]");
	GetPlayerPos(playerid, x, y ,z);
	SetPlayerPosEx(playerid, x, y, z-amount);
	return 1;
}

CMD:getincar(playerid, params[])
{
	new vehicle;
	if(!CheckAdmin(playerid, ADMIN_LEVEL_2))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	if(sscanf(params,"d",vehicle))
		return SendSyntaxMessage(playerid, "/getincar [ID ??????????]");

	if(!IsValidVehicle(vehicle))
		return SCM(playerid, COLOR_LIGHTRED, "????????????? ???????? ??? ????? ID ?? ??????????.");

	PutPlayerInVehicle(playerid, vehicle, 0);
	AMSG(COLOR_LIGHTRED, "AdmCmd: %s ????????????????(-???) ? ???????????? ???????? ID %i.", GetAccName(playerid), vehicle);
	return 1;
}
CMD:policer(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_2))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	SCMALL(COLOR_LIGHTBLUE, "<< ????????????? ???????? ??????? ??????????? ?? >>");
	AMSG(COLOR_LIGHTRED, "AdmCmd: %s ????????(-?) ??????? ??????????? ???????????? ???????.", GetAccName(playerid));

	new vehicle,
	    occupied[MAX_VEHICLES char];

    foreach(Player, i)
	{
	    if((vehicle = GetPlayerVehicleID(i)) == 0 || (VehicleInfo[vehicle][carFaction] != LSPD && VehicleInfo[vehicle][carFaction] != SASD))
	        continue;

		occupied{vehicle} = 1;
	}

	foreach(new i:Vehicle)
	{
		if((VehicleInfo[i][carFaction] != LSPD && VehicleInfo[i][carFaction] != SASD) || occupied{i} == 1)
			continue;

		RespawnVehicle(i);
	}
	return 1;
}

CMD:afire(playerid,params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_2))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	if(GetPVarInt(playerid, #crt_fire) == 0)
	{
	    SetPVarInt(playerid, #crt_fire, 1);

		SCM(playerid,COLOR_WHITE,"?? ????? ? ????? ???????? ???????.");
		SCM(playerid,COLOR_WHITE,"????????? ? ?? ????? ??? ?????? ?????????? ?????.");

		AMSG(COLOR_LIGHTRED, "AdmCmd: %s ????? ? ????? ???????? ???????.", GetAccName(playerid));

  		ac_ResetPlayerWeapons(playerid);
  		GivePlayerWeapon(playerid, 24, 500);
		return 1;
	}

	SCM(playerid, COLOR_WHITE,"?? ????? ?? ?????? ???????? ???????. ??? ???????? ???? ??????? ??????????? \"/removefire\".");

	AMSG(COLOR_LIGHTRED, "AdmCmd: %s ????? ?? ?????? ???????? ???????.", GetAccName(playerid));

	ac_ResetPlayerWeapons(playerid);
	DeletePVar(playerid, #crt_fire);
 	return 1;
}

ALTX:removefire("/rfire");
CMD:removefire(playerid,params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_2))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	for(new i; i != MAX_FIRES; i++)
	{
	    if(FiresInfo[i][fireOn] == 0)
	        continue;

		DeleteFire(i);
	}
	AMSG(COLOR_LIGHTRED, "AdmCmd: %s ?????(-?) ??? ?????? ? ???????.", GetAccName(playerid));
	return 1;
}
CMD:aengine(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_2))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	if(!IsPlayerInAnyVehicle(playerid))
	    return SendNotInVehicle(playerid);

	new vehicleid = GetPlayerVehicleID(playerid);
	ToggleVehicleEngine(vehicleid, playerid);
	AMSG(COLOR_LIGHTRED, "AdmCmd: %s ????????(-?) ??????? /aengine ? ????????????? ???????? ID: %i.", GetAccName(playerid), vehicleid);
	return 1;
}
CMD:fillveh(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_2)) return SendErrorMessage(playerid,"? ??? ???????????? ???? ??? ????????????? ???????.");
	AMSG(COLOR_LIGHTRED, "AdmCmd: %s ????????(-?) ???? ????????? ?? ???????.", GetAccName(playerid));

	foreach(new i:Vehicle)
        VehicleInfo[i][carFuel] = 100;

	return 1;
}

CMD:rtc(playerid, params[])
{
	new vehicle;
	if(!CheckAdmin(playerid, ADMIN_LEVEL_2))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	if(sscanf(params,"d",vehicle))
		return SendSyntaxMessage(playerid, "/rtc [id ??????????]");

    if(0 == IsValidVehicle(vehicle))
		return SCM(playerid, COLOR_LIGHTRED, "????????????? ???????? ??? ????? ID ?? ??????????.");

	if(!VehicleEmpty(vehicle))
		return SCM(playerid, COLOR_GREY, "???? ????????? ????????????.");

	if(VehicleInfo[vehicle][carOwnerID] != 0)
	{
	    new userid = GetVehicleOwner(vehicle);
	    if(userid != INVALID_PLAYER_ID)
	    {
	    	SendClientMessageEx(userid, COLOR_LIGHTRED, "AdmCmd: %s ??????????? ??? %s.", GetAccName(playerid), VehicleNames[GetVehicleModel(vehicle)-400]);
			PlayerInfo[userid][pCarKey] = 0;
			VehicleInfo[vehicle][carOwnerPlayer] = INVALID_PLAYER_ID;
		}
		AMSG(COLOR_LIGHTRED, "AdmCmd: %s ???????????(-?) ???????????? ???????? ID: %i.", GetAccName(playerid), vehicle);
		Save_Car(vehicle);
		DestroyVehicle(vehicle);
	}
    else
	{
		AMSG(COLOR_LIGHTRED, "AdmCmd: %s ???????????(-?) ???????????? ???????? ID: %i", GetAccName(playerid), vehicle);
		RespawnVehicle(vehicle);
	}
	return 1;
}

CMD:rtcall(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_2))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	AMSG(COLOR_LIGHTRED, "AdmCmd: %s ???????????(-?) ???? ???????????????? ????????? ?? ???????.", GetAccName(playerid));

    new vehicle,
	    occupied[MAX_VEHICLES char];

    foreach(Player, i)
	{
	    if((vehicle = GetPlayerVehicleID(i)) == 0)
	        continue;

		occupied{vehicle} = 1;
	}

	for(new i = 1; i < MAX_VEHICLES; i++)
	{
		if(!IsValidVehicle(i) || occupied{i} == 1)
			continue;

		if(VehicleInfo[i][carOwnerID] != 0)
		{
		    new userid = GetVehicleOwner(i);
		    if(userid != INVALID_PLAYER_ID)
		    {
		    	SendClientMessageEx(userid, COLOR_LIGHTRED, "AdmCmd: %s ??????????? ??? %s.", GetAccName(playerid), VehicleNames[GetVehicleModel(i)-400]);
				PlayerInfo[userid][pCarKey] = 0;
				VehicleInfo[i][carOwnerPlayer] = INVALID_PLAYER_ID;
			}
			Save_Car(i);
			DestroyVehicle(i);
		}
	    else
			RespawnVehicle(i);
	}
	return 1;
}
//===========================================3 ???????=======================================
CMD:showpm(playerid, params[])
{
	new userid;
	if(!CheckAdmin(playerid, ADMIN_LEVEL_3))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	if(sscanf(params,"u", userid))
		return SendSyntaxMessage(playerid, "/showpm [playerid/PartOfName]");

	if(!IsPlayerLogged(userid))
		return SendNotConnected(playerid);

    pTemp[playerid][pPMPlayer] = userid;
	SendClientMessageEx(playerid, COLOR_WHITE,"?? ?????????????? PM %s , \"/showpmoff\" ??? ?????????.", GetNameEx(userid));
	return 1;
}
CMD:showpmoff(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_3))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	if(pTemp[playerid][pPMPlayer] == INVALID_PLAYER_ID)
		return SCM(playerid, COLOR_LIGHTRED, "?? ?? ?????????? PM.");

	SendClientMessageEx(playerid, COLOR_WHITE,"?? ?????????? ???????? PM ? %s.", GetNameEx(pTemp[playerid][pPMPlayer]));
	pTemp[playerid][pPMPlayer] = INVALID_PLAYER_ID;
	return 1;
}

CMD:showpms(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_3))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	SCM(playerid, COLOR_WHITE, "?? ?????????????? PM ? ????? ???????, \"/nopms\" ??? ?????????.");
	SetPVarInt(playerid, #spypm_all, 1);
	return 1;
}

CMD:nopms(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_3))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	if(GetPVarInt(playerid, #spypm_all) == 0)
		return SCM(playerid, COLOR_LIGHTRED, "?? ?? ?????????? PM.");

	SCM(playerid, COLOR_WHITE, "?? ?????????? ???????? PM.");
	DeletePVar(playerid, #spypm_all);
	return 1;
}

CMD:telecmds(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_3)) return SendErrorMessage(playerid,"? ??? ???????????? ???? ??? ????????????? ???????.");
	SCM(playerid, COLOR_WHITE, "[Level 3]: {C3C3C3}/teles /maketele /removetele");
	return 1;
}

CMD:teles(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_1))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	new string[1500];
	for(new i = 0; i < MAX_INTERIORS; i++)
	{
		if(0 == AdminTeles[i][telesOn] || 3 != AdminTeles[i][telesType])
			continue;

		format(string, sizeof(string), "%s\n<%i>{66FF66}%s" ,string, i, AdminTeles[i][telesMapName]);
	}
	Dialog_Show(playerid, AdminTeles, DIALOG_STYLE_LIST,"????????", string, "????????","??????");
	return 1;
}

ALTX:makehouseint("/mhouseint");
CMD:makehouseint(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_3))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	new mapname[32],
		type;

	if(sscanf(params,"is[32]", type, mapname))
		return SendSyntaxMessage(playerid, "/makehouseint [??? ????: 1-?????????, 2-???????, 3-???????] [???????? ????]");

	if(type < 1 || type > 3)
	    return SendErrorMessage(playerid, "??? ????: 1-?????????, 2-???????, 3-???????.");

    if(strlen(mapname) < 1 || strlen(mapname) > 32)
	    return SendErrorMessage(playerid, "?????????? ???????? 1-32.");

	new id = -1;
	for(new i = 0; i < MAX_INTERIORS; i++)
	{
	    if(0 != AdminTeles[i][telesOn])
			continue;

		id = i;
		break;
	}

	if(id == -1)
	    return SendErrorMessage(playerid, "????????? ?????? ??????????.");

	GetPlayerPos(playerid, AdminTeles[id][telesPosX], AdminTeles[id][telesPosY], AdminTeles[id][telesPosZ]);
	AdminTeles[id][telesInt] = GetInterior(playerid);
	AdminTeles[id][telesType] = type-1;
	format(AdminTeles[id][telesMapName], 32, "%s", mapname);
    AdminTeles[id][telesOn] = 1;

	AddTeleToFile(playerid, id, mapname, AdminTeles[id][telesInt], AdminTeles[id][telesPosX], AdminTeles[id][telesPosY], AdminTeles[id][telesPosZ], type-1);
 	SendClientMessageEx(playerid,COLOR_GREEN,"????? ???????? (%s) ID: %i ??????.", AdminTeles[id][telesMapName], id);
	return 1;
}

ALTX:makebizint("/mbizint");
CMD:makebizint(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_3))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	new mapname[32];

	if(sscanf(params,"s[32]", mapname))
		return SendSyntaxMessage(playerid, "/makebizint [???????? ?????????]");

	if(strlen(mapname) < 1 || strlen(mapname) > 32)
	    return SendErrorMessage(playerid, "?????????? ???????? 1-32.");

	new id = -1;
	for(new i = 0; i < MAX_INTERIORS; i++)
	{
	    if(0 != AdminTeles[i][telesOn])
			continue;

		id = i;
		break;
	}

	if(id == -1)
	    return SendErrorMessage(playerid, "????????? ?????? ??????????.");

	GetPlayerPos(playerid, AdminTeles[id][telesPosX], AdminTeles[id][telesPosY], AdminTeles[id][telesPosZ]);
	AdminTeles[id][telesInt] = GetInterior(playerid);
	AdminTeles[id][telesType] = 4;
	format(AdminTeles[id][telesMapName], 32, "%s", mapname);
    AdminTeles[id][telesOn] = 1;

	AddTeleToFile(playerid, id, mapname, AdminTeles[id][telesInt], AdminTeles[id][telesPosX], AdminTeles[id][telesPosY], AdminTeles[id][telesPosZ], 4);
 	SendClientMessageEx(playerid,COLOR_GREEN,"????? ???????? (%s) ID: %i ??????.", AdminTeles[id][telesMapName], id);
	return 1;
}

ALTX:maketele("/mtele");
CMD:maketele(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_3))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	new mapname[32];

	if(sscanf(params,"s[32]", mapname))
		return SendSyntaxMessage(playerid, "/maketele [???????? ????? ?????????]");

	if(strlen(mapname) < 1 || strlen(mapname) > 32)
	    return SendErrorMessage(playerid, "?????????? ???????? 1-32.");

	new id = -1;
	for(new i = 0; i < MAX_INTERIORS; i++)
	{
	    if(0 != AdminTeles[i][telesOn])
			continue;

		id = i;
		break;
	}

	if(id == -1)
	    return SendErrorMessage(playerid, "????????? ?????? ??????????.");

	GetPlayerPos(playerid, AdminTeles[id][telesPosX], AdminTeles[id][telesPosY], AdminTeles[id][telesPosZ]);
	AdminTeles[id][telesInt] = GetInterior(playerid);
	AdminTeles[id][telesType] = 3;
	format(AdminTeles[id][telesMapName], 32, "%s", mapname);
	AdminTeles[id][telesOn] = 1;

	AddTeleToFile(playerid, id, mapname, AdminTeles[id][telesInt], AdminTeles[id][telesPosX], AdminTeles[id][telesPosY], AdminTeles[id][telesPosZ], 3);
 	SendClientMessageEx(playerid,COLOR_GREEN,"????? ???????? (%s) ID: %i ??????.", AdminTeles[id][telesMapName], id);
	return 1;
}

ALTX:removetele("/rtele");
CMD:removetele(playerid,params[])
{
	new teleid;
	if(!CheckAdmin(playerid, ADMIN_LEVEL_3))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	if(sscanf(params,"d",teleid))
		return SendSyntaxMessage(playerid, "/removetele [ID Teleport]");

	if(AdminTeles[teleid][telesOn] == 0)
	    return SendErrorMessage(playerid, "???????? ? ????? ID ?? ??????????.");

    new query[128];
	mysql_format(dbHandle, query, sizeof(query), "DELETE FROM `ateles` WHERE `id` = %i", AdminTeles[teleid][aID]);
	mysql_tquery(dbHandle, query);

	SendClientMessageEx(playerid, COLOR_GREEN, "?? ??????? ???????? ID %i.", teleid);

	AdminTeles[teleid][telesOn] = 0;
	AdminTeles[teleid][telesType] = 0;
	return 1;
}

CMD:aveh(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_3))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	new model,
		color1,
		color2,
		Float:x,
		Float:y,
		Float:z,
		Float:a,
		Float: distance = 5.0;

	if(sscanf(params, "iI(0)I(0)", model, color1, color2))
		return  SendSyntaxMessage(playerid, "/aveh [??????] [????1] [????2]");

	if(model == 520 || model == 425 || model == 432 || model == 447 || model == 476)
		return SendErrorMessage(playerid, "?????? ??? ??????? ???????? ?? ???????.");

	if(model < 400 || model > 611)
		return SCM(playerid,COLOR_LIGHTRED, "??????: 400 - 611.");

	if(color1 > 255 || color1 < 0 || color2 > 255 || color2 < 0)
		return SCM(playerid, COLOR_LIGHTRED, "????: 0 - 255.");

	GetPlayerPos(playerid, x, y ,z);
	GetPlayerFacingAngle(playerid, a);
  	x += (distance * floatsin(-a, degrees));
    y += (distance * floatcos(-a, degrees));
	a += 90.0;
	if(a > 360.0) a -= 360.0;

	new vehicle = CreateVehicle(model, x, y, z, a, color1, color2, -1);

	if(vehicle == INVALID_VEHICLE_ID)
	    return SendErrorMessage(playerid, "???????????? ???????? ?? ???? ???????.");

	SetVehicleHealth(vehicle, 1000.0);
	SetVehicleNumberPlate(vehicle, GetVehicleNumber());

	SetVehicleVirtualWorld(vehicle, GetWorld(playerid));
	LinkVehicleToInterior(vehicle, GetInterior(playerid));

    VehicleInfo[vehicle][carDriver] = INVALID_PLAYER_ID;
	VehicleInfo[vehicle][carFuel] = 100;
	VehicleInfo[vehicle][carAdmin] = 1;
	VehicleInfo[vehicle][carColor1] = color1;
	VehicleInfo[vehicle][carColor2] = color2;

	AMSG(COLOR_LIGHTRED, "AdmCmd: %s ??????(-?) ???????????? ???????? ID: %i (??????: %i(%s)).", GetAccName(playerid), vehicle, model, VehicleNames[model-400]);
	return 1;
}

CMD:mark(playerid, params[])
{
	new Float:x, Float:y, Float:z, interior, world;
	if(!CheckAdmin(playerid, ADMIN_LEVEL_3)) return SendErrorMessage(playerid,"? ??? ???????????? ???? ??? ????????????? ???????.");
	interior = GetInterior(playerid);
	world = GetWorld(playerid);
	GetPlayerPos(playerid, x, y, z);
	SetPVarInt(playerid, "MarkedSpot", 1);
	SetPVarFloat(playerid, "MarkX", x);
	SetPVarFloat(playerid, "MarkY", y);
	SetPVarFloat(playerid, "MarkZ", z);
	SetPVarInt(playerid, "MarkInterior", interior);
	SetPVarInt(playerid, "MarkWorld", world);
	SCM(playerid, -1, "????? ???????????, \"/gotomark\" ??? ?????????.");
	return 1;
}

CMD:gotomark(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_3)) return SendErrorMessage(playerid,"? ??? ???????????? ???? ??? ????????????? ???????.");
	if(GetPVarInt(playerid, "MarkedSpot") == 0) return SCM(playerid, COLOR_LIGHTRED, "????? ?? ???????????. ??????????? \"/mark\".");
	SetPlayerPosEx(playerid, GetPVarFloat(playerid, "MarkX"), GetPVarFloat(playerid, "MarkY"), GetPVarFloat(playerid, "MarkZ"));
	SetWorld(playerid, GetPVarInt(playerid, "MarkWorld"));
	SetInterior(playerid, GetPVarInt(playerid, "MarkInterior"));
	SCM(playerid, COLOR_WHITE, "?? ???? ???????????????.");
	return 1;
}
CMD:settime(playerid, params[])
{
	new time;
	if(!CheckAdmin(playerid, ADMIN_LEVEL_3))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	if(sscanf(params, "d", time))
		return SendSyntaxMessage(playerid, "/settime [text] (0-23)");

	SetWorldTime(time);
	AMSG(COLOR_LIGHTRED, "AdmCmd: %s ?????????(-?) ????? %i:00.", GetAccName(playerid), time);
	return 1;
}
CMD:weather(playerid, params[])
{
	new weather;
	if(!CheckAdmin(playerid, ADMIN_LEVEL_3))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	if(sscanf(params, "d", weather))
		return SendSyntaxMessage(playerid, "/weather [??????]");

	if(weather < 0||weather > 45)
		return SCM(playerid, COLOR_LIGHTRED, "?????? ?? 0 ?? 45!");

	SetPlayerWeather(playerid, weather);
	AMSG(COLOR_LIGHTRED, "AdmCmd: %s ?????????(-?) ???? ?????? ID %i.", GetAccName(playerid), weather);
	return 1;
}

CMD:weatherall(playerid, params[])
{
	new weather;
	if(!CheckAdmin(playerid, ADMIN_LEVEL_3))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	if(sscanf(params, "d", weather))
		return SendSyntaxMessage(playerid, "/weatherall [??????]");

	if(weather < 0||weather > 45)
		return SCM(playerid, COLOR_LIGHTRED, "?????? ?? 0 ?? 45!");

    server_weather = weather;
	SetWeather(server_weather);

	AMSG(COLOR_LIGHTRED, "AdmCmd: %s ?????????(-?) ???? ?????? ID %i.", GetAccName(playerid), weather);
	return 1;
}
//===========================================4 ???????=======================================
CMD:getwi(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_4))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	SendClientMessageEx(playerid, COLOR_GREEN, "VW: %i. Interior: %i", GetWorld(playerid), GetInterior(playerid));
	return 1;
}

CMD:govw(playerid, params[])
{
	new vw;
	if(!CheckAdmin(playerid, ADMIN_LEVEL_4))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	if(sscanf(params,"i",vw))
		return SendSyntaxMessage(playerid, "/govw [??????????? ???]");

	if(vw < 0)
	    return 1;

	SetWorld(playerid, vw);

	SendClientMessageEx(playerid, COLOR_GREEN, "??? ??????????? ???: %i.", vw);
	return 1;
}

CMD:goint(playerid, params[])
{
	new interior;
	if(!CheckAdmin(playerid, ADMIN_LEVEL_4))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	if(sscanf(params,"i",interior))
		return SendSyntaxMessage(playerid, "/goint [????????]");

	if(interior < 0)
	    return 1;

	SetInterior(playerid, interior);
	SendClientMessageEx(playerid, COLOR_GREEN, "??? ????????: %i.", interior);
	return 1;
}

CMD:go(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_4)) return SendErrorMessage(playerid,"? ??? ???????????? ???? ??? ????????????? ???????.");
	new Float:x,
		Float:y,
		Float:z,
		interior,
		vw;

	if(sscanf(params,"fffI(0)I(0)", x, y ,z, interior, vw))
		return SendSyntaxMessage(playerid, "/go [x] [y] [z] [Interior] [Virtual World]");

	SetPlayerPosEx(playerid, x, y ,z);
	SetInterior(playerid, interior);
 	SetWorld(playerid, vw);
	return 1;
}

CMD:x(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_4))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	new Float: coord;
	if(sscanf(params,"f", coord))
		return SendSyntaxMessage(playerid, "/x [Pos X]");

	new Float: x,
		Float: y,
		Float: z;

	GetPlayerPos(playerid, x, y, z);
	SetPlayerPosEx(playerid, x + coord, y, z);
	return 1;
}
CMD:y(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_4))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	new Float: coord;
	if(sscanf(params,"f", coord))
		return SendSyntaxMessage(playerid, "/y [Pos Y]");

	new Float: x,
		Float: y,
		Float: z;

	GetPlayerPos(playerid, x, y, z);
	SetPlayerPosEx(playerid, x, y + coord, z);
	return 1;
}
CMD:z(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_4))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	new Float: coord;
	if(sscanf(params,"f", coord))
		return SendSyntaxMessage(playerid, "/z [Pos Z]");

	new Float: x,
		Float: y,
		Float: z;

	GetPlayerPos(playerid, x, y, z);
	SetPlayerPosEx(playerid, x, y, z + coord);
	return 1;
}

//===========================================5 ???????=======================================
CMD:factioncmds(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_5))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	SCM(playerid, COLOR_WHITE, "[Level 5]: {C3C3C3}/makefaction /removefaction /editfaction /factions /makeleader /removeleader");
	return 1;
}

ALTX:removefaction("/rfaction");
CMD:removefaction(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_5))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	new id;
	if(sscanf(params,"i", id))
	    return SendSyntaxMessage(playerid, "/removefaction [ID ???????]");

    if(id < 1 || id > MAX_FACTIONS-1 || Factions[id][fON] == 0)
		return SCM(playerid, COLOR_LIGHTRED, "??????? ??? ???? ID ?? ??????????.");

	if(id == LSPD || id == LSFD || id == SASD || id == DOCS || id == SAN || id == CITY)
	    return SendErrorMessage(playerid, "?????? ??????? ????????? ???????.");

    if(IsValidDynamicPickup(Factions[id][fPickUp]))
		DestroyDynamicPickup(Factions[id][fPickUp]);

    new query[128];
	mysql_format(dbHandle, query, sizeof(query), "DELETE FROM `factions` WHERE `id` = %i", Factions[id][fID]);
	mysql_tquery(dbHandle, query);

	mysql_format(dbHandle, query, sizeof(query), "UPDATE `users` SET `char`=0,`swat`=0,`swat_duty`=0,`duty`=0,`faction`=0,`rank`=0,`sidejob`=0 WHERE `faction`=%i", id);
	mysql_tquery(dbHandle, query);

	foreach(Player, i)
	{
	    if(0 == IsPlayerLogged(i) || PlayerInfo[i][pFaction] != id)
	        continue;

		RemovePlayerFaction(i);
	}

	SendClientMessageEx(playerid, COLOR_GREEN, "?? ??????? ??????? %s ID: %i.", Factions[id][fName], id);
    Factions[id][fON] = 0;
    Factions[id][fID] = 0;
	return 1;
}

ALTX:makefaction("/mfaction");
CMD:makefaction(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_5))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	new factionid = -1,
		name[32],
		type;

	if(sscanf(params,"is[32]", type, name))
	{
		SendSyntaxMessage(playerid, "/makefaction [???] [???????? ???????]");
		SCM(playerid, COLOR_WHITE, "?????????: ???: 1 - ???. ??????? | 2 - ????? | 3 - ????? | 4 - ?????");
		return 1;
	}

    for(new i = 1; i != MAX_FACTIONS; i++)
	{
	    if(Factions[i][fON] != 0)
	        continue;

		factionid = i;
		break;
	}

	if(factionid == -1)
		return SCM(playerid, COLOR_LIGHTRED, "?????????? ???????????? ?????????? ???????.");

	if(strlen(name) < 1 || strlen(name) > 30)
		return SCM(playerid, COLOR_LIGHTRED, "???????? ??????? ????? ????????? ?? ????? 30 ????????.");

	if(type < 1 || type > 4)
	    return SendErrorMessage(playerid, "???: 1 - ???. ??????? | 2 - ????? | 3 - ????? | 4 - ?????");

	format(Factions[factionid][fName], 32, "%s", name);
 	Factions[factionid][fColor] = 0xFFFFFF00;
	Factions[factionid][fType] = type;
	Factions[factionid][fRanks] = 5;
	Factions[factionid][fChatON] = 1;
	Factions[factionid][fON] = 1;
	Factions[factionid][fJoinRank] = 1;
    Factions[factionid][fPointTime] = 604800 + gettime();

    if(type == FACTION_MAFIA)
   		Factions[factionid][fPoint] = 40;
   	else
    	Factions[factionid][fPoint] = 30;

	for(new i; i != 20; i++)
    	FactionRanks[factionid][i] = "None";

    SendClientMessageEx(playerid, COLOR_GREEN, "?? ??????? ??????? ??????? ID: %i. /editfaction - ???????? ???????.", factionid);
	AddFactionToFile(factionid, name, 0xFFFFFF00, type, 5, Factions[factionid][fPointTime]);
	return 1;
}

CMD:editfaction(playerid, params[])
{
    if(!CheckAdmin(playerid, ADMIN_LEVEL_5))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

    new id,
		parametrs[12],
		arg[36];

	if (sscanf(params, "is[12]S()[36]", id, parametrs, arg))
	{
	    SendSyntaxMessage(playerid, "/editfaction [ID ???????] [????????] [????????]");
	    return SendClientMessage(playerid, 0xECA129FF, "?????????: {ffffff}spawn, color, name, ranks, joinrank, rankname, type, uniform");
	}

	if(id < 1 || id > MAX_FACTIONS-1 || Factions[id][fON] == 0)
		return SCM(playerid, COLOR_LIGHTRED, "??????? ??? ???? ID ?? ??????????.");

	if(0 == strcmp(parametrs, "spawn"))
	{
	    GetPlayerPos(playerid, Factions[id][fPosX], Factions[id][fPosY], Factions[id][fPosZ]);
		Factions[id][fSpawnInt] = GetInterior(playerid);
		Factions[id][fSpawnVW] = GetWorld(playerid);

	    new query[128 + 56];
	    mysql_format(dbHandle, query, sizeof(query), "UPDATE `factions` SET `spawnx` = %f, `spawny` = %f, `spawnz` = %f, `spawnint` = %i, `spawnvw`=%i WHERE `id` = %i", Factions[id][fPosX], Factions[id][fPosY], Factions[id][fPosZ], Factions[id][fSpawnInt], Factions[id][fSpawnVW], Factions[id][fID]);
		mysql_tquery(dbHandle, query);

		SendClientMessageEx(playerid,COLOR_GREEN,"?? ?????????? ??????? %s[ID: %i] ??????? ??? ?????? ?? ???? ?????.", Factions[id][fName], id);
		SendClientMessageEx(playerid,COLOR_GREEN,"X: %f, Y: %f, Z: %f. ????????: %i. ????. ???: %i",Factions[id][fPosX], Factions[id][fPosY], Factions[id][fPosZ], Factions[id][fSpawnInt], Factions[id][fSpawnVW]);
	    return 1;
	}
	else if(0 == strcmp(parametrs, "color"))
	{
	    new color;

	    if (sscanf(arg, "h", color))
	        return SendSyntaxMessage(playerid, "/editfaction color [hex ????]");

        Factions[id][fColor] = color;

		SendClientMessageEx(playerid, -1, "?? ??????? ???????? {%06x}???? {FFFFFF}??????? ID: %i.", color >>> 8, id);

	    new query[128];
		mysql_format(dbHandle, query, sizeof(query), "UPDATE `factions` SET `color` = %i WHERE `id` = %i", color, Factions[id][fID]);
		mysql_tquery(dbHandle, query);
	    return 1;
	}
	else if(0 == strcmp(parametrs, "name"))
	{
	    if(isnull(arg))
	        return SendSyntaxMessage(playerid, "/editfaction name [???????? ???????]");

	    if(strlen(arg) > 31)
			return SCM(playerid, COLOR_LIGHTRED, "???????? ??????? ?? ????? ????????? ????? 31 ????????.");

        SendClientMessageEx(playerid, COLOR_GREEN, "?? ??????? ??????? %s[ID: %i] ???????? ?? \"%s\".", Factions[id][fName], id, arg);
		format(Factions[id][fName], 32, "%s", arg);

	    new query[128 + 32];
		mysql_format(dbHandle, query, sizeof(query), "UPDATE `factions` SET `name` = '%e' WHERE `id` = %i", arg, Factions[id][fID]);
		mysql_tquery(dbHandle, query);
	    return 1;
	}
	else if(0 == strcmp(parametrs, "ranks"))
	{
	    if(isnull(arg))
	        return SendSyntaxMessage(playerid, "/editfaction ranks [?????????? ??????]");

	    if(strval(arg) < 1 || strval(arg) > 20)
			return SCM(playerid, COLOR_LIGHTRED, "????????? ?????: 1 - 20.");


        Factions[id][fRanks] = strval(arg);
		SendClientMessageEx(playerid,COLOR_GREEN,"?? ???????? ??????? %s[ID: %i] ???????????? ???? %i.",Factions[id][fName], id, strval(arg));

	    new query[128];
		mysql_format(dbHandle, query, sizeof(query), "UPDATE `factions` SET `ranks` = %i WHERE `id` = %i", strval(arg), Factions[id][fID]);
		mysql_tquery(dbHandle, query);
	    return 1;
	}
	else if(0 == strcmp(parametrs, "type"))
	{
	    if(isnull(arg) || strval(arg) < 1 || strval(arg) > 4)
			return SendSyntaxMessage(playerid, "/editfaction type [???: 1 - ??? ??????? | 2 - ????? | 3 - ????? | 4 - ?????]");

		new type_fr[4][15] =
			{"???. ?????????", "?????", "?????", "?????"};

        Factions[id][fType] = strval(arg);
		SendClientMessageEx(playerid,COLOR_GREEN,"?? ??????? ??????? %s[ID: %i] ??? ?? \"%s\".", Factions[id][fName], id, type_fr[strval(arg)-1]);

		if(Factions[id][fType] == FACTION_LEGAL)
		{
		    Factions[id][fPickUp] =
				CreateDynamicPickup(1239, 1, Factions[id][fUniformX], Factions[id][fUniformY], Factions[id][fUniformZ], Factions[id][fUniformVW], Factions[id][fUniformInt], -1, 100.0);
		}
		else
		{
		    if(IsValidDynamicPickup(Factions[id][fPickUp]))
				DestroyDynamicPickup(Factions[id][fPickUp]);
		}

	    new query[128];
		mysql_format(dbHandle, query, sizeof(query), "UPDATE `factions` SET `type` = %i WHERE `id` = %i", strval(arg), Factions[id][fID]);
		mysql_tquery(dbHandle, query);
	    return 1;
	}
	else if(0 == strcmp(parametrs, "joinrank"))
	{
	    if(isnull(arg))
	        return SendSyntaxMessage(playerid, "/editfaction joinrank [?????????? ???? ??? ?????? ?? ???????]");

	    if(strval(arg) < 1 || strval(arg) > Factions[id][fRanks]-1)
			return SendErrorMessage(playerid, "????????? ?????: 1 - %i.", Factions[id][fRanks]-1);

        Factions[id][fJoinRank] = strval(arg);
		SendClientMessageEx(playerid,COLOR_GREEN,"?? ???????? ??????? %s[ID: %i] ?????????? ???? ??? ?????? ?? ??????? ?? %i ????.", Factions[id][fName], id, strval(arg));

	    new query[128];
		mysql_format(dbHandle, query, sizeof(query), "UPDATE `factions` SET `joinrank` = %i WHERE `id` = %i", strval(arg), Factions[id][fID]);
		mysql_tquery(dbHandle, query);
	    return 1;
	}
	else if(0 == strcmp(parametrs, "uniform"))
	{
	    if(Factions[id][fType] != FACTION_LEGAL)
	        return SendErrorMessage(playerid, "???????? ??? ???. ???????.");


		SendClientMessageEx(playerid,COLOR_GREEN,"?? ?????????? ??????? %s[ID: %i] ??????? ??? ???????? ?? ???? ?????.", Factions[id][fName], id);
        GetPlayerPos(playerid, Factions[id][fUniformX], Factions[id][fUniformY], Factions[id][fUniformZ]);
        Factions[id][fUniformInt] = GetInterior(playerid);
        Factions[id][fUniformVW] = GetWorld(playerid);

		if(IsValidDynamicPickup(Factions[id][fPickUp]))
			DestroyDynamicPickup(Factions[id][fPickUp]);

		Factions[id][fPickUp] =
			CreateDynamicPickup(1239, 1, Factions[id][fUniformX], Factions[id][fUniformY], Factions[id][fUniformZ], Factions[id][fUniformVW], Factions[id][fUniformInt], -1, 100.0);

        new query[128 + 56];
	    mysql_format(dbHandle, query, sizeof(query), "UPDATE `factions` SET `uniform_x`='%f',`uniform_y`='%f',`uniform_z`='%f',`uniform_int`='%i',`uniform_vw`='%i' WHERE `id`='%i'", Factions[id][fUniformX], Factions[id][fUniformY], Factions[id][fUniformZ], Factions[id][fUniformInt], Factions[id][fUniformVW], Factions[id][fID]);
		mysql_tquery(dbHandle, query);
	    return 1;
	}
	else if(0 == strcmp(parametrs, "rankname"))
	{
	    new rank,
			name[32];

	    if(sscanf(arg, "is[32]", rank, name))
	        return SendSyntaxMessage(playerid, "/editfaction rankname [????] [???????? ?????]");

	    if(rank < 1 || rank > Factions[id][fRanks])
			return SendErrorMessage(playerid, "????????? ?????: 1 - %i.", Factions[id][fRanks]);

        if(strlen(name) > 31)
			return SCM(playerid, COLOR_LIGHTRED, "???????? ????? ????? ????????? ?? ????? 31 ????????.");

        SendClientMessageEx(playerid, COLOR_GREEN, "?? ???????? ??????? %s[ID: %i] ???????? ?????: %i ?? \"%s\".", Factions[id][fName], id, rank, name);
	    format(FactionRanks[id][rank-1], 32, "%s", name);

	    new query[128 + 32];
	    mysql_format(dbHandle, query, sizeof(query), "UPDATE `factions` SET `rank%i`='%e' WHERE `id`='%i'", rank, name, Factions[id][fID]);
		mysql_tquery(dbHandle, query);
	    return 1;
	}
	return 1;
}

ALTX:makeleader("/mleader");
CMD:makeleader(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_5))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	new userid,
		faction;

	if(sscanf(params,"ud", userid, faction))
		return SendSyntaxMessage(playerid, "/makeleader [playerid/PartOfName] [ID ??????? (/factions)]");

	if(!IsPlayerLogged(userid))
		return SendNotConnected(playerid);

	if(faction < 1 || faction > MAX_FACTIONS-1 || Factions[faction][fON] == 0)
		return SCM(playerid, COLOR_LIGHTRED, "??????? ??? ???? ID ?? ??????????.");

	SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "?? ?????? %s ????????? ??? ???????? - %s.", GetNameEx(userid), Factions[faction][fName]);
	SendClientMessageEx(userid, COLOR_LIGHTBLUE, "????????????? %s ?????(-?) ??? ????????? ??? ???????? - %s.", GetAccName(playerid), Factions[faction][fName]);

	AMSG(COLOR_LIGHTRED, "AdmCmd: %s ?????(-?) %s ????????? ???????? - %s.", GetAccName(playerid), GetNameEx(userid), Factions[faction][fName]);

    RemovePlayerFaction(userid);

	PlayerInfo[userid][pRank] = Factions[faction][fRanks];
	PlayerInfo[userid][pFaction] = faction;
	PlayerInfo[userid][pBadgeNumber] = randomEx(23465, 99999);
	return 1;
}

ALTX:removeleader("/rleader");
CMD:removeleader(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_5))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");
	new userid;

	if(sscanf(params,"u", userid))
		return SendSyntaxMessage(playerid, "/removeleader [playerid/PartOfName]");

	if(!IsPlayerLogged(userid))
		return SendNotConnected(playerid);

	if(isLeader(userid) == 0)
	    return SendErrorMessage(playerid, "?????? ??????? ?? ???????? ??????? ?????-???? ???????????.");

    new faction = PlayerInfo[userid][pFaction];

	SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "?? ?????? %s ????????? ??? ???????? - %s.", GetNameEx(userid), Factions[faction][fName]);
	SendClientMessageEx(userid, COLOR_LIGHTBLUE, "????????????? %s ?????(-?) ??? ????????? ??? ???????? - %s.", GetAccName(playerid), Factions[faction][fName]);

	AMSG(COLOR_LIGHTRED, "AdmCmd: %s ?????(-?) %s ????????? ??? ???????? - %s.", GetAccName(playerid), GetNameEx(userid), Factions[faction][fName]);

	RemovePlayerFaction(userid);
	return 1;
}

CMD:factions(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_5))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	new faction_type[4][15] =
		{"???. ?????????", "?????", "?????", "?????"};

	for(new i = 1; i != MAX_FACTIONS; i++)
	{
	    if(Factions[i][fON] == 0)
	        continue;

		SendClientMessageEx(playerid, COLOR_GREY, "%s - {FFFFFF}[ID: %i | ???: %s]", Factions[i][fName], i, faction_type[Factions[i][fType]-1]);
	}
	return 1;
}

CMD:vehiclecmds(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_5))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	SCM(playerid, COLOR_WHITE, "[Level 5]: {C3C3C3}/makevehicle /removevehicle /park /vehtypes");
	return 1;
}

ALTX:makevehicle("/mvehicle");
CMD:makevehicle(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_5))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	new model,
		type,
		faction,
		plate[24],
		color1,
		color2,
		Float:x,
		Float:y,
		Float:z,
		Float:a,
		vw, interior;

	if(sscanf(params,"iiiiI(0)S()[24]", model, type, color1, color2, faction, plate))
		return SendSyntaxMessage(playerid, "/makevehicle [??????] [???(/vehtypes)] [????1] [????2] [???????] [????? - ???????? ?????? ??? ???.?????????: 1ABC234]");

    if(model == 520 || model == 425 || model == 432 || model == 447 || model == 476)
		return SendErrorMessage(playerid, "?????? ??? ??????? ???????? ?? ???????.");

    if(model < 400 || model > 611)
		return SCM(playerid,COLOR_LIGHTRED, "??????: 400 - 611.");

	if(color1 > 255 || color1 < 0 || color2 > 255 || color2 < 0)
		return SCM(playerid, COLOR_LIGHTRED, "????: 0-255");

	if(strlen(plate) > 23)
	    return SendErrorMessage(playerid, "???????????? ?????????? ???????? ? ?????? 23.");

	if(!strlen(plate))
	    format(plate, 24, "%s", GetVehicleNumber());

    GetXYInFrontOfPlayer(playerid, x, y, z, 5.0);
 	GetPlayerFacingAngle(playerid, a);

	vw = GetWorld(playerid);
	interior = GetInterior(playerid);

	if(0 == CreateFactionVehicle(true, model, x, y, z, a, color1, color2, type, faction, plate, vw, interior))
	    return SendErrorMessage(playerid, "????????? ?? ??????.");

	SendClientMessageEx(playerid, COLOR_GREEN, "????????? ??????: ??????: %i, ?????: %s, ???: %i, ???????: %i, ????. ???: %i. ????????: %i.", model, plate, type, faction, vw, interior);
	return 1;
}

ALTX:removevehicle("/rveh", "/dcar", "/removecar", "/dveh", "/rcar");
CMD:removevehicle(playerid,params[])
{
	new vehid = GetPlayerVehicleID(playerid);

	if(!CheckAdmin(playerid, ADMIN_LEVEL_1))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	if(!IsValidVehicle(vehid) && sscanf(params,"d",vehid))
		return SendSyntaxMessage(playerid, "/removevehicle [ID ??????????]");

    if(!IsValidVehicle(vehid))
        return SCM(playerid, COLOR_LIGHTRED,"????????????? ???????? ??? ???? ID ?? ??????????.");

	if(VehicleInfo[vehid][carOwnerID] != 0)
	    return SendErrorMessage(playerid, "?????? ??????? ????????? ????????????? ????-??.");

    if(VehicleInfo[vehid][carAdmin] == 0)
	{
	    if(!CheckAdmin(playerid, ADMIN_LEVEL_5))
			return SendErrorMessage(playerid,"? ??? ???????????? ???? ??? ???????? ???????????? ??? ???????? ??????????.");

        new query[128];
	    mysql_format(dbHandle, query, sizeof(query), "DELETE FROM `cars` WHERE `id` = %i", VehicleInfo[vehid][carID]);
		mysql_tquery(dbHandle, query);
	}

	DestroyVehicle(vehid);
	AMSG(COLOR_LIGHTRED, "AdmCmd: %s ?????????(-?) ???????????? ???????? ID: %i.", GetAccName(playerid), vehid);
	return 1;
}

/*CMD:editvehicle(playerid, params[])
{
	new text[256],
		type,
		vehid;

	if(!CheckAdmin(playerid, ADMIN_LEVEL_5))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	if(sscanf(params,"dds[256]", vehid, type, text))
		return SendSyntaxMessage(playerid, "/editvehicle [ID ??????????] [???(1 - ?????, 2 - ????????, 3 - ???, 4 - ????1, 5 - ????2, 6 - ???????)] [????????]");

    if(!IsValidVehicle(vehid))
        return SCM(playerid, COLOR_LIGHTRED,"????????????? ???????? ??? ???? ID ?? ??????????.");

    if(VehicleInfo[vehicle][carAdmin] != 0)
	    return SendErrorMessage(playerid, "???????? ????? ?????? ??????????? ??? ??????? ?????????.");

	new vehselect = strval(text);

    new query[128];
	if(type == 2)
	{
		mysql_format(dbHandle,query, sizeof(query), "UPDATE `cars` SET `info` = '%e' WHERE `id` = %i", text, VehicleInfo[vehid][carID]);
		mysql_tquery(dbHandle, query);

		SendClientMessageEx(playerid, COLOR_LIGHTRED, "????????????? ???????? ID %i ??????????? ????????: \"%s\".", vehid, text);
		return 1;
	}
	if(type == 3)
	{
		mysql_format(dbHandle, query, sizeof(query), "UPDATE `cars` SET `type` = %i WHERE `id` = %i", vehselect, VehicleInfo[vehid][carID]);
		mysql_tquery(dbHandle, query);
		VehicleInfo[vehid][carType] = vehselect;
		SendClientMessageEx(playerid, COLOR_LIGHTRED, "????????????? ???????? ID %i ?????????? ??? ID: %i.", vehid, vehselect);
		return 1;
	}
	if(type == 4)
	{
		mysql_format(dbHandle, query, sizeof(query), "UPDATE `cars` SET `color1` = %i WHERE `id` = %i", vehselect, VehicleInfo[vehid][carID]);
		mysql_tquery(dbHandle, query);

		VehicleInfo[vehid][carColor1] = vehselect;

		ChangeVehicleColor(vehid, VehicleInfo[vehid][carColor1], VehicleInfo[vehid][carColor2]);

		SendClientMessageEx(playerid, COLOR_LIGHTRED, "????????????? ???????? ID %i ?????????? ????(1) ID %i.", vehid, vehselect);
		return 1;
	}
	if(type == 5)
	{
		mysql_format(dbHandle, query, sizeof(query), "UPDATE `cars` SET `color2` = %i WHERE `id` = %i", vehselect, VehicleInfo[vehid][carID]);
		mysql_tquery(dbHandle, query);

		VehicleInfo[vehid][carColor2] = vehselect;

		ChangeVehicleColor(vehid, VehicleInfo[vehid][carColor1], VehicleInfo[vehid][carColor2]);

		SendClientMessageEx(playerid, COLOR_LIGHTRED, "????????????? ???????? ID %i ?????????? ????(2) ID %i.", vehid, vehselect);
		return 1;
	}
	if(type == 6)
	{
		mysql_format(dbHandle, query, sizeof(query), "UPDATE `cars` SET `faction` = %i WHERE `id` = %i", vehselect, VehicleInfo[vehid][carID]);
		mysql_tquery(dbHandle, query);

		VehicleInfo[vehid][carFaction] = vehselect;
		SendClientMessageEx(playerid, COLOR_LIGHTRED, "????????????? ???????? ID %i ??????????? ??????? ID %i.", vehid, vehselect);
		return 1;
	}
	SendErrorMessage(playerid, "??????? ??? 1-6.");
	return 1;
}*/

ALTX:makephone("/mphone");
CMD:makephone(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_5))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	new type,
	    number,
		Float:x,
		Float:y,
		Float:z,
		Float:a,
		vw, interior;

	if(sscanf(params,"ii", type, number))
		return SendSyntaxMessage(playerid, "/makephone [?????? | 0 - ??? ???????] [text]");

    if(type < 0 || number < 0)
        return 1;

    GetXYInFrontOfPlayer(playerid, x, y, z, 5.0);
 	GetPlayerFacingAngle(playerid, a);
	vw = GetWorld(playerid);
	interior = GetInterior(playerid);

	if(0 == CreatePayphone(true, type, number, x, y, z, 0.0, 0.0, 0.0, vw, interior))
		return SendErrorMessage(playerid, "?????????? ???????????? ?????????? ?????????? ?? ???????.");

 	SendClientMessage(playerid, COLOR_GREEN, "???????? ??????.");
	return 1;
}

ALTX:removephone("/rphone");
CMD:removephone(playerid,params[])
{
	new id;
	if(!CheckAdmin(playerid, ADMIN_LEVEL_1))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	if(sscanf(params,"d",id))
		return SendSyntaxMessage(playerid, "/removephone [ID ?????????]");

    if(id < 0 || id > MAX_PAYPHONES-1 || PayphoneInfo[id][phID] == 0)
        return SCM(playerid, COLOR_LIGHTRED,"????????? ??? ???? ID ?? ??????????.");

	return 1;
}

CMD:park(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_5))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

    new vehid;
	if(sscanf(params,"i", vehid)) return SendSyntaxMessage(playerid, "/avehiclepark [ID ??????????]");

    if(!IsValidVehicle(vehid))
	    return SCM(playerid, COLOR_LIGHTRED,"????????????? ???????? ??? ???? ID ?? ??????????.");

	if(VehicleInfo[vehid][carOwnerID] != 0)
	    return SendErrorMessage(playerid, "???????????? ????? ?????? ??????????? ??? ??????? ?????????.");

	GetVehiclePos(vehid, VehicleInfo[vehid][carParkX], VehicleInfo[vehid][carParkY], VehicleInfo[vehid][carParkZ]);
	GetVehicleZAngle(vehid, VehicleInfo[vehid][carParkA]);

    new query[128 + 128];
	mysql_format(dbHandle, query, sizeof(query), "UPDATE `cars` SET `x` = %f, `y` = %f, `z` = %f, `fa` = %f WHERE `id` = %i", VehicleInfo[vehid][carParkX], VehicleInfo[vehid][carParkY], VehicleInfo[vehid][carParkZ], VehicleInfo[vehid][carParkA], VehicleInfo[vehid][carID]);
	mysql_tquery(dbHandle, query);

	new vehicle = CreateFactionVehicle(false, VehicleInfo[vehid][carModel], VehicleInfo[vehid][carParkX], VehicleInfo[vehid][carParkY], VehicleInfo[vehid][carParkZ], VehicleInfo[vehid][carParkA], VehicleInfo[vehid][carColor1], VehicleInfo[vehid][carColor2], VehicleInfo[vehid][carType],
	VehicleInfo[vehid][carFaction], VehicleInfo[vehid][carPlate], VehicleInfo[vehid][carVW], VehicleInfo[vehid][carInt], VehicleInfo[vehid][carID]);

	if(vehicle == 0)
	    return SendErrorMessage(playerid, "????????? ?? ??? ??????.");

	DestroyVehicle(vehid);

 	SendClientMessageEx(playerid, COLOR_LIGHTRED, "???????????? ???????? ID: %i ??? ????? ID: %i ???????????? ? ????? ?????????? ?? ???? ?????.",vehid, vehicle);
	return 1;
}

CMD:vehtypes(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_5))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	SCM(playerid, COLOR_YELLOWG, "0 - ??????? 1 - DMV ??????????, 2 - DMV ????????, 3 - ? ?????????, 4 - DMV ?????, 5 - ??????, 6 - ?????");
	return 1;
}

CMD:givegun(playerid, params[])
{
	new userid, weapon, ammo, weaponname[32];

	if(!CheckAdmin(playerid, ADMIN_LEVEL_5))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	if(sscanf(params,"uii", userid, weapon, ammo))
		return SendSyntaxMessage(playerid, "/givegun [playerid/PartOfName] [ID ??????] [???????]");

	if(!IsPlayerLogged(userid))
		return SendNotConnected(playerid);

	if(ac_GivePlayerWeapon(userid, weapon, ammo) == 0)
	    return SendErrorMessage(playerid, "???????????? ID ??????.");

	GetWeaponName(weapon, weaponname, sizeof(weaponname));
	SendClientMessageEx(playerid, COLOR_WHITE,"?? ?????? %s ??????. ??????: %s, ??????????: %i. [?????? ?????????? ?? ????? ? ???].", GetName(userid), weaponname, ammo);
	SendClientMessageEx(userid, COLOR_WHITE,"????????????? %s ?????(-?) ??? ??????. ??????: %s, ??????????: %i. [?????? ?? ?????? ?????????? ? ???].", GetAccName(playerid), weaponname, ammo);

	AMSG(COLOR_LIGHTRED, "AdmCmd: %s ?????(-?) %s ??????. (%s, ??????????: %i)", GetAccName(playerid), GetNameEx(userid), weaponname, ammo);

    new mes[128];
	format(mes, sizeof(mes), "[/givegun] %s ?????(-?) %s ??????. (%s, ??????????: %i)", GetAccName(playerid), GetNameEx(userid), weaponname, ammo);
	insert_log(mes, ADMIN_LOG, 14);
	return 1;
}

CMD:acceptname(playerid, params[])
{
	new userid;
    if(!CheckAdmin(playerid, ADMIN_LEVEL_5))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	if(sscanf(params,"u", userid))
		return SendSyntaxMessage(playerid, "/acceptname [playerid/PartOfName]");

	if(!IsPlayerLogged(userid))
		return SendNotConnected(playerid);

	if(!strlen(pTemp[userid][pChangeNick]))
		return SendErrorMessage(playerid, "????? ?? ??????? ?????? ?? ????? ????????.");

    new query[128];
    mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `users` WHERE `name` = '%e'", pTemp[userid][pChangeNick]);
	mysql_tquery(dbHandle, query, "OnChangeName", "iis", playerid, userid, pTemp[userid][pChangeNick]);
	return 1;
}

forward OnChangeName(playerid, userid, newname[]);
public OnChangeName(playerid, userid, newname[])
{
	if(cache_num_rows())
	    return SendErrorMessage(playerid, "??? ????????? \"%s\" ??? ??????.", newname);

	foreach(Player, i)
	{
	    if(0 == IsPlayerLogged(i) || !CompareStrings(GetName(i), newname))
	        continue;

		SendErrorMessage(playerid, "??? ????????? \"%s\" ??? ??????.", newname);
		return 1;
	}

	if(!PlayerInfo[userid][pNameChanges])
	    return SendErrorMessage(playerid, "? ?????? ??? ??????????.");

    PlayerInfo[userid][pNameChanges]--;
	new query[128];
	mysql_format(dbHandle, query, sizeof(query), "UPDATE `accounts` SET `name_changes`='%i' WHERE `id` = '%i'", PlayerInfo[userid][pNameChanges], PlayerInfo[userid][pAccID]);
	mysql_tquery(dbHandle, query);

	new oldname[MAX_PLAYER_NAME];
	GetPlayerName(userid, oldname, MAX_PLAYER_NAME);

	ChangeName(userid, newname);

	AMSG(COLOR_LIGHTRED, "AdmCmd: %s ?????????? ?????? ???????? ?????? %s ?? %s.", GetAccName(playerid), oldname, newname);
	SendClientMessageEx(userid, COLOR_LIGHTBLUE, "???? ??? ???? ???????? %s ?? %s ??????????????? %s.", oldname, newname, GetAccName(playerid));
	return 1;
}

CMD:changename(playerid, params[])
{
	new userid,
	    newname[MAX_PLAYER_NAME];

    if(!CheckAdmin(playerid, ADMIN_LEVEL_5))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	if(sscanf(params,"us[24]", userid, newname))
		return SendSyntaxMessage(playerid, "/changename [playerid/PartOfName] [????? ???]");

	if(!IsPlayerLogged(userid))
		return SendNotConnected(playerid);

    if(0 == IsValidPlayerName(newname))
        return SendErrorMessage(playerid, "???????? ?????? ????????.");

	if(strlen(newname) < 4 || strlen(newname) > 24)
	    return SendErrorMessage(playerid, "?????????? ???????? ? ????????: 4 - 24.");

	new query[128];
    mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `users` WHERE `name` = '%e'", newname);
	mysql_tquery(dbHandle, query, "OnAdminChangeName", "iis", playerid, userid, newname);
	return 1;
}

forward OnAdminChangeName(playerid, userid, newname[]);
public OnAdminChangeName(playerid, userid, newname[])
{
	if(cache_num_rows())
	    return SendErrorMessage(playerid, "??? ????????? \"%s\" ??? ??????.", newname);

	foreach(Player, i)
	{
	    if(0 == IsPlayerLogged(i) || !CompareStrings(GetName(i), newname))
	        continue;

		SendErrorMessage(playerid, "??? ????????? \"%s\" ??? ??????.", newname);
		return 1;
	}

	new oldname[MAX_PLAYER_NAME];
	GetPlayerName(userid, oldname, MAX_PLAYER_NAME);

	ChangeName(userid, newname);

	AMSG(COLOR_LIGHTRED, "AdmCmd: %s ???????(-?) ??????? ?????? %s ?? %s.", GetAccName(playerid), oldname, newname);
	SendClientMessageEx(userid, COLOR_LIGHTBLUE, "???? ??? ???? ???????? %s ?? %s ??????????????? %s.", oldname, newname, GetAccName(playerid));
	return 1;
}

stock ChangeName(userid, newname[])
{
    new oldname[MAX_PLAYER_NAME];
	GetPlayerName(userid, oldname, MAX_PLAYER_NAME);

	format(PlayerInfo[userid][pUsername], MAX_PLAYER_NAME+1, newname);
    format(PlayerInfo[userid][pUsername_], MAX_PLAYER_NAME+1, newname);
    strreplace(PlayerInfo[userid][pUsername_], '_', ' ');
    if(!maskOn{userid})
	{
	    SetPlayerName(userid, newname);
    	format(PlayerInfo[userid][pMaskname], 32, PlayerInfo[userid][pUsername_]);
	}

	for(new i; i != MAX_HOUSES; i++)
	{
	    if(HouseInfo[i][hID] == 0 || HouseInfo[i][hOwnerID] != PlayerInfo[userid][pID])
	        continue;

		format(HouseInfo[i][hOwner], MAX_PLAYER_NAME, GetNameEx(userid));
	}

	for(new i; i != MAX_BIZ; i++)
	{
	    if(BizInfo[i][bizID] == 0 || BizInfo[i][bizOwnerID] != PlayerInfo[userid][pID])
	        continue;

		format(BizInfo[i][bizOwner], MAX_PLAYER_NAME, GetName(userid));
	}

	foreach(new i:Vehicle)
	{
		if(VehicleInfo[i][carOwnerID] != PlayerInfo[userid][pID])
			continue;

		format(VehicleInfo[i][carOwner], MAX_PLAYER_NAME, GetNameEx(userid));
	}

	new query[128];
    mysql_format(dbHandle, query, sizeof(query), "UPDATE `users` SET `name`='%e' WHERE `id`='%i'", newname, PlayerInfo[userid][pID]);
	mysql_tquery(dbHandle, query);

	mysql_format(dbHandle, query, sizeof(query), "DELETE FROM `tickets` WHERE `userid`='%i'", PlayerInfo[userid][pID]);
	mysql_tquery(dbHandle, query);

	for(new i = 0; i < MAX_PLAYER_TICKETS; i++)
	{
		pTickets[userid][i][tID] = 0;
		pTemp[userid][pTicketListed][i] = -1;
	}
	return 1;
}
//===========================================6 ???????=======================================
CMD:reloadmap(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

    SendRconCommand("reloadfs objects");
	return 1;
}

CMD:streamer(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	new objects;
	if(sscanf(params, "i", objects))
	    return SendSyntaxMessage(playerid, "/streamer [?????????? ????????] (?? ?????? ??????: %i)", Streamer_GetVisibleItems(STREAMER_TYPE_OBJECT));

	if(objects < 1 || objects > 999)
	    return SendErrorMessage(playerid, "1 - 999");

	SendClientMessageEx(playerid, -1, "??????????: %i", objects);

	new Float: x,
	    Float: y,
	    Float: z;

    Streamer_SetVisibleItems(STREAMER_TYPE_OBJECT, objects);
    foreach(Player, i)
	{
		if(!IsPlayerLogged(i))
			continue;

		GetPlayerPos(i, x, y, z);
		Streamer_DestroyAllVisibleItems(playerid, STREAMER_TYPE_OBJECT);
		Streamer_UpdateEx(i, x, y, z, -1, -1, STREAMER_TYPE_OBJECT);
	}
	return 1;
}

CMD:itemlist(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_5))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	for(new i = 1; i != sizeof(inventory_items); i++)
	    if(ValidWeaponForInventory(i) == 0) SendClientMessageEx(playerid, COLOR_GREY, "%i -- {FFFFFF}%s", i, inventory_items[i][itemName]);
	return 1;
}

CMD:giveitem(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_5))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	new userid,
	    item,
	    amount;

	if(sscanf(params, "udd", userid, item, amount))
	    return SendSyntaxMessage(playerid, "/giveitem [playerid/PartOfName] [ID ????????] [??????????]");

	if(!IsPlayerLogged(userid))
		return SendNotConnected(playerid);

	if(item < 1 || item > sizeof(inventory_items))
	    return SendErrorMessage(playerid, "???????? ID ????????.");

	if(amount < 1 || amount > 1000)
	    return SendErrorMessage(playerid, "???????? ??????????.");

	if(ValidWeaponForInventory(item) == 1)
	    return SendErrorMessage(playerid, "???????? ?????? ????? ????? ??????? /givegun.");

	if(GivePlayerItem(userid, item, amount) == -1)
	    return SendErrorMessage(playerid, "? ????????? ??? ?????.");

    SendClientMessageEx(userid, COLOR_WHITE, "????????????? %s ????? ??? \"%s\" ? ?????????? %i.", GetAccName(playerid), inventory_items[item][itemName], amount);
	AMSG(COLOR_LIGHTRED, "AdmCmd: %s ????? %s \"%s\" ? ?????????? %i.", GetAccName(playerid), GetNameEx(userid), inventory_items[item][itemName], amount);
	return 1;
}

CMD:setstat(playerid, params[])
{
	new userid,
		type,
		amount;

	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	if(sscanf(params, "udd", userid, type, amount))
	{
		SCM(playerid, COLOR_WHITE, "???????????: /setstat [playerid/PartOfName] [??????????] [????????]");
		SCM(playerid, COLOR_GRAD4, "| 1 ??????? | 2 EXP | 4 ???");
		SCM(playerid, COLOR_GRAD4, "| 5 ?????? ? ????? | 6 ???? ? ???? | 7 ?????????????? | 8 ???????? | 9 ?????");
		SCM(playerid, COLOR_GRAD4, "| 10 ???. ?????????????? | 11 ???????? ?? ?????? | 12 ???????? ?? ?????? | 13 ???????? ???????? | 14 ???? ??????");
		return 1;
	}

	if(!IsPlayerLogged(userid))
		return SendNotConnected(playerid);

	switch (type)
	{
	    case 1:
	    {
	        PlayerInfo[userid][pLevel] = amount;
			SetPlayerScore(userid, PlayerInfo[userid][pLevel]);

			AMSG(COLOR_LIGHTRED, "[SETSTAT]: %s ???????(-?) ??????? ?????? %s [ID: %i] ?? ???????? %i.", GetNameEx(playerid), GetNameEx(userid), userid, amount);
	    }
	    case 2:
	    {
	        PlayerInfo[userid][pExp] = amount;
	        AMSG(COLOR_LIGHTRED, "[SETSTAT]: %s ???????(-?) EXP ?????? %s [ID: %i] ?? ???????? %i.", GetNameEx(playerid), GetNameEx(userid), userid, amount);
		}
	    case 4:
	    {
	        if(amount != 1 && amount != 2)
	            return SendErrorMessage(playerid, "???: 1 - ???????, 2 - ???????");

	    	PlayerInfo[userid][pSex] = amount;
	        AMSG(COLOR_LIGHTRED, "[SETSTAT]: %s ???????(-?) ??? ?????? %s [ID: %i] ?? ???????? %i.", GetNameEx(playerid), GetNameEx(userid), userid, amount);
	    }
	    case 5:
	    {
			PlayerInfo[userid][pBank] = amount;
	        AMSG(COLOR_LIGHTRED, "[SETSTAT]: %s ???????(-?) ?????? ? ????? %s [ID: %i] ?? ???????? $%i.", GetNameEx(playerid), GetNameEx(userid), userid, amount);
	    }
	    case 6:
	    {
	        PlayerInfo[userid][pHours] = amount;
	        AMSG(COLOR_LIGHTRED, "[SETSTAT]: %s ???????(-?) ???? ? ???? %s [ID: %i] ?? ???????? %i.", GetNameEx(playerid), GetNameEx(userid), userid, amount);
		}
	    case 7:
	    {
	    	PlayerInfo[userid][pWarns] = amount;
	        AMSG(COLOR_LIGHTRED, "[SETSTAT]: %s ???????(-?) ?????????????? %s [ID: %i] ?? ???????? %i.", GetNameEx(playerid), GetNameEx(userid), userid, amount);
	    }
	    case 8:
	    {
			PlayerInfo[userid][pCash] = amount;
	        AMSG(COLOR_LIGHTRED, "[SETSTAT]: %s ???????(-?) ???????? %s [ID: %i] ?? ???????? $%i.", GetNameEx(playerid), GetNameEx(userid), userid, amount);
	    }
	    case 9:
	    {
			if(amount > 3 || amount < 0)
				return SendSyntaxMessage(playerid, "???????: [0 - ?????? ???????, 1 - ??????, 2 - ???????, 3 - ??????]");

			new str[7];
			format(str, sizeof(str), "%i %i", userid, amount);
			cmd::makepremium(playerid, str);
	    }
	    case 10:
	    {
            if(amount != 1 && amount != 0)
	            return SendErrorMessage(playerid, "????????: 0 - ???????, 1 - ????");

	    	PlayerInfo[userid][pCarLic] = amount;
	        AMSG(COLOR_LIGHTRED, "[SETSTAT]: %s ???????(-?) ???. ????????????? %s [ID: %i] ?? ???????? %i.", GetNameEx(playerid), GetNameEx(userid), userid, amount);
	    }
	    case 12:
	    {
            if(amount != 1 && amount != 0)
	            return SendErrorMessage(playerid, "????????: 0 - ???????, 1 - ????");

	    	PlayerInfo[userid][pFlyLic] = amount;
	        AMSG(COLOR_LIGHTRED, "[SETSTAT]: %s ???????(-?) ???????? ?? ?????? %s [ID: %i] ?? ???????? %i.", GetNameEx(playerid), GetNameEx(userid), userid, amount);
	    }
		case 13:
		{
		    if(amount != 1 && amount != 0)
	            return SendErrorMessage(playerid, "????????: 0 - ???????, 1 - ????");

	    	PlayerInfo[userid][pTaxiLic] = amount;
	        AMSG(COLOR_LIGHTRED, "[SETSTAT]: %s ???????(-?) ???????? ???????? %s [ID: %i] ?? ???????? %i.", GetNameEx(playerid), GetNameEx(userid), userid, amount);
		}
		case 14:
		{
		    if(amount < 0 || amount > 100)
	            return SendErrorMessage(playerid, "/setstat 14 [???? ??????]");

	    	PlayerInfo[userid][pCareer] = amount;
	        AMSG(COLOR_LIGHTRED, "[SETSTAT]: %s ???????(-?) ???? ?????? %s [ID: %i] ?? ???????? %i.", GetNameEx(playerid), GetNameEx(userid), userid, amount);
		}
	}
	return 1;
}

CMD:gmx(playerid, params[])
{
	new time;
	if(PlayerInfo[playerid][pAdmin] < HIGH_ADMIN_LEVEL)
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	if(restart_time)
	{
	    new mes[128];
		format(mes, sizeof(mes), "%s ??????? ??????? ???????.", GetAccName(playerid));
		SCMALL(COLOR_LIGHTRED, mes);
		restart_time = 0;
	    return 1;
	}

	if(sscanf(params,"i",time)) return SendSyntaxMessage(playerid, "/gmx [????? ? ????????]");

	if(time < 10 || time > 3600)
	    return SendErrorMessage(playerid, "??????? ??????? ????? ???????? 10-3600.");

    restart_time = time;
	new mes[128];
	format(mes, sizeof(mes), "%s ???????? ?????? ?? ??????? ????? %i ??????.", GetAccName(playerid), time);
	SCMALL(COLOR_LIGHTRED, mes);
	return 1;
}

ALTX:makeadmin("/madmin");
CMD:makeadmin(playerid, params[])
{
	new userid,
		level;

	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	if(sscanf(params,"ud", userid, level))
		return SendSyntaxMessage(playerid, "/makeadmin [playerid/PartOfName] [level]");

	if(!IsPlayerLogged(userid))
		return SendNotConnected(playerid);

	if(level < 0 || level > 7)
	    return SendErrorMessage(playerid, "???????: 1 - 7.");

	if(level > PlayerInfo[playerid][pAdmin]-1)
	    return SendErrorMessage(playerid, "?? ?????? ???????? ?????? ?? %i ??????.", PlayerInfo[playerid][pAdmin]-1);

	if(level == 0)
	{
	    if(PlayerInfo[userid][pAdmin] == 0)
	        return SendErrorMessage(playerid, "????? ?? ????? ????????????????? ????.");

  		if(IsAdminDuty(userid))
  		    cmd::aduty(userid, "");
	}

	PlayerInfo[userid][pAdmin] = level;
	SendClientMessageEx(playerid,COLOR_LIGHTBLUE,"?? ?????? %s ??????? ?????????????? %i.", GetNameEx(userid), level);
	SendClientMessageEx(userid,COLOR_LIGHTBLUE,"????????????? %s ?????(-?) ??? ??????? ?????????????? %i.", GetAccName(playerid), level);
	AMSG(COLOR_LIGHTRED, "AdmCmd: %s ?????(-?) %s ??????? ?????????????? %i.", GetAccName(playerid), GetNameEx(userid), level);

	set_account_int(userid, "admin", PlayerInfo[userid][pAdmin]);
	return 1;
}

ALTX:makepremium("/mpremium");
CMD:makepremium(playerid, params[])
{
	new userid,
		rank;

	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	if(sscanf(params,"ud", userid, rank))
		return SendSyntaxMessage(playerid, "/makepremium [playerid/PartOfName] [0 - ?????? ???????, 1 - ??????, 2 - ???????, 3 - ??????]");

	if(!IsPlayerLogged(userid))
		return SendNotConnected(playerid);

	if(rank > 3 || rank < 0)
		return SendSyntaxMessage(playerid, "/makepremium [playerid/PartOfName] [0 - ?????? ???????, 1 - ??????, 2 - ???????, 3 - ??????]");

	new status_premium[4][32] =
	    {"???????", "?????????", "??????????", "???????"};

	SendClientMessageEx(playerid,COLOR_LIGHTBLUE,"?? ?????? %s ??????? ?????? - %s.", GetNameEx(userid), status_premium[rank]);

	SendClientMessageEx(userid,COLOR_LIGHTBLUE,"????????????? %s ?????(-?) ??? ??????? ?????? - %s.", GetAccName(playerid), status_premium[rank]);

	if(rank != 0)
		SCM(userid, -1, "??????? ?? ?????? ???????!");

	AMSG(COLOR_LIGHTRED, "AdmCmd: %s ?????(-?) %s ??????? ?????? - %s.", GetAccName(playerid), GetNameEx(userid), status_premium[rank]);

    PlayerInfo[userid][pPremium] = rank;
    PlayerInfo[userid][pPremiumTime] = gettime() + 30 * 86400;

    new query[128];
	mysql_format(dbHandle, query, sizeof(query), "UPDATE `users` SET `vip`='%i',`vip_time`='%i' WHERE `id` = '%i'", PlayerInfo[userid][pPremium], PlayerInfo[userid][pPremiumTime], PlayerInfo[userid][pID]);
	mysql_tquery(dbHandle, query);
	return 1;
}

ALTX:maketester("/mtester");
CMD:maketester(playerid, params[])
{
	new userid;

	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	if(sscanf(params,"u", userid))
		return SendSyntaxMessage(playerid, "/maketester [playerid/PartOfName]");

	if(!IsPlayerLogged(userid))
		return SendNotConnected(playerid);

	if(PlayerInfo[userid][pTester] == 1)
	    return SendErrorMessage(playerid, "????? ??? ??????.");

	PlayerInfo[userid][pTester] = 1;
	set_account_int(userid, "Tester", 1);

	SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"?? ?????? %s ?????????? ???????.", GetNameEx(userid));
	SendClientMessageEx(userid, COLOR_LIGHTBLUE,"????????????? %s ?????(-?) ??? ?????????? ???????.", GetAccName(playerid));
	AMSG(COLOR_LIGHTRED, "AdmCmd: %s ?????(-?) %s ?????????? ???????.", GetAccName(playerid), GetNameEx(userid));
	return 1;
}

ALTX:removetester("/rtester");
CMD:removetester(playerid, params[])
{
	new userid;

	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	if(sscanf(params,"u", userid))
		return SendSyntaxMessage(playerid, "/removetester [playerid/PartOfName]");

	if(!IsPlayerLogged(userid))
		return SendNotConnected(playerid);

	if(PlayerInfo[userid][pTester] != 1)
	    return SendErrorMessage(playerid, "?????? ????? ?? ??????.");

	SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"?? ??????? ? %s ?????????? ???????.", GetNameEx(userid));
	SendClientMessageEx(userid, COLOR_LIGHTBLUE,"????????????? %s ??????(-?) ? ??? ?????????? ???????.", GetNameEx(playerid));
	AMSG(COLOR_LIGHTRED, "AdmCmd: %s ??????(-?) ? %s ?????????? ???????.", GetAccName(playerid), GetNameEx(userid));

	if(pTemp[userid][pTesterDuty] != 0)
		SetPlayerColor(userid, TEAM_HIT_COLOR);

	pTemp[userid][pTesterDuty] = 0;
	PlayerInfo[userid][pTester] = 0;
	set_account_int(userid, "Tester", 1);
	return 1;
}

CMD:getgun(playerid, params[])
{
	new weapon,
		ammo;

	if(!CheckAdmin(playerid, ADMIN_LEVEL_5))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	if(sscanf(params,"dd", weapon, ammo))
		return SendSyntaxMessage(playerid, "/getgun [ID ??????] [ammo]");

	if(ac_GivePlayerWeapon(playerid, weapon, ammo) == 0)
	    return SendErrorMessage(playerid, "???????????? ID ??????.");

	AMSG(COLOR_LIGHTRED, "AdmCmd: %s ?????(-?) ??? ???? ??????. (%s, ??????????: %i)", GetAccName(playerid), GetWeaponNameEx(weapon), ammo);

    new mes[128];
	format(mes, sizeof(mes), "[/getgun] %s ?????(-?) ??? ???? ??????. (%s, ??????????: %i)", GetAccName(playerid), GetWeaponNameEx(weapon), ammo);
	insert_log(mes, ADMIN_LOG, 15);
	return 1;
}

CMD:changefight(playerid, params[])
{
	new pid;
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return SendErrorMessage(playerid,"? ??? ???????????? ???? ??? ????????????? ???????.");
	if(sscanf(params,"u",pid)) return SendSyntaxMessage(playerid, "/changefight [playerid/PartOfName]");
	if(!IsPlayerLogged(pid)) return SendNotConnected(playerid);
	SetPVarInt(playerid, "ChangeFightTo", pid);
	Dialog_Show(playerid,ChangeFight, DIALOG_STYLE_LIST,"??????? ????? ???","Normal\nBoxing\nKungFu\nKneeHead\nGrabKick\nElbow","???????","??????");
	return 1;
}
CMD:disarm(playerid, params[])
{
	new userid;
	if(!CheckAdmin(playerid, ADMIN_LEVEL_1))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	if(sscanf(params,"u", userid))
		return SendSyntaxMessage(playerid, "/disarm [playerid/PartOfName]");

	if(!IsPlayerLogged(userid))
		return SendNotConnected(playerid);

	SendClientMessageEx(userid, COLOR_INFO, "????????????? %s ?????????(-?) ???.", GetAccName(playerid));
	SendClientMessageEx(playerid, COLOR_INFO, "?? ?????????? %s.", GetNameEx(userid));
 	ac_ResetPlayerWeapons(userid);
	return 1;
}
CMD:jetpack(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

    pTemp[playerid][pJetpack] = 1;
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USEJETPACK);
	GameTextForPlayer( playerid , "~w~JetPack ~r~YO", 3000, 3);
	return 1;
}

CMD:alock(playerid, params[])
{
    if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	for(new i; i != MAX_HOUSES; i++)
	{
	    if(HouseInfo[i][hID] == 0 || (0 == IsPlayerHouseInside(playerid, i) && 0 == IsPlayerHouseOutside(playerid, i)))
	        continue;

        HouseInfo[i][hLocked] = (HouseInfo[i][hLocked] == 1) ? (0):(1);
        if(HouseInfo[i][hLocked] == 0)
        {
			AMSG(COLOR_LIGHTRED, "AdmCmd: %s ??????(-?) ????? ? ??? ID %i.",GetAccName(playerid), i);
			GameTextForPlayer(playerid, "~w~Door ~g~Unlocked", 5000, 6);
        }
        else
        {
			AMSG(COLOR_LIGHTRED, "AdmCmd: %s ??????(-?) ????? ? ??? ID %i.",GetAccName(playerid), i);
			GameTextForPlayer(playerid, "~w~Door ~r~Locked", 5000, 6);
        }
        set_house_int(i, "locked", HouseInfo[i][hLocked]);
        return 1;
	}

	for(new i = 0; i != MAX_BIZ; i++)
	{
	    if(BizInfo[i][bizID] == 0 || (0 == IsPlayerBizOutside(playerid, i) && 0 == IsPlayerBizInside(playerid, i)))
			continue;

        BizInfo[i][bizLocked] = (BizInfo[i][bizLocked] == 1) ? (0):(1);

		if(BizInfo[i][bizLocked] == 0)
		{
			AMSG(COLOR_LIGHTRED,"AdmCmd: %s ??????(-?) ????? ? ?????? ID %i.", GetAccName(playerid), i);
			GameTextForPlayer(playerid, "~w~Door ~g~Unlocked", 5000, 6);
		}
		else
		{
			AMSG(COLOR_LIGHTRED, "AdmCmd: %s ??????(-?) ????? ? ?????? ID %i.", GetAccName(playerid), i);
			GameTextForPlayer(playerid, "~w~Door ~r~Locked", 5000, 6);
		}
		Save_Business(i);
		return 1;
	}

	for(new i = 0; i != MAX_ENTRANCE; i++)
	{
	    if(EntranceInfo[i][eFaction] == 0 || EntranceInfo[i][entranceOn] == 0 || (IsPlayerEntranceOutside(playerid, i) == 0 && IsPlayerEntranceInside(playerid, i) == 0))
			continue;

        if(PlayerInfo[playerid][pFaction] != EntranceInfo[i][eFaction])
            return GameTextForPlayer(playerid, "~r~You Dont Have A Key", 5000, 6);

        EntranceInfo[i][eLocked] = (EntranceInfo[i][eLocked])?(0):(1);
        PlaySound(playerid, 1145);

        if(EntranceInfo[i][eLocked])
        {
			AMSG(COLOR_LIGHTRED, "AdmCmd: %s ??????(-?) ????? ??????? ID %i.", GetAccName(playerid), i);
            GameTextForPlayer(playerid, "~w~Door ~r~Locked", 5000, 6);
		}
		else
		{
			AMSG(COLOR_LIGHTRED, "AdmCmd: %s ??????(-?) ????? ??????? ID %i.", GetAccName(playerid), i);
		    GameTextForPlayer(playerid, "~w~Door ~g~Unlocked", 5000, 6);
		}
		break;
	}

	SendErrorMessage(playerid, "?? ?????? ?????????? ????? ? ?????/????????/??????");
	return 1;
}

CMD:asetplate(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

    new vehicleid = GetPlayerVehicleID(playerid);
    if(vehicleid == 0)
        return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???? ? ???????????? ????????.");

	if(isnull(params))
		return  SendSyntaxMessage(playerid, "/asetplate [text]");

	if(strlen(params) < 1 || strlen(params) > 23)
	    return SendErrorMessage(playerid, "?????????? ???????? 1-23.");

	new query[128];
	mysql_format(dbHandle, query, sizeof(query), "SELECT `plate` FROM `cars` WHERE `plate` = '%e'", params);
	mysql_tquery(dbHandle, query, "AdminSetPlate", "iis", playerid, vehicleid, params);
	return 1;
}

forward AdminSetPlate(playerid, vehicleid, plate[]);
public AdminSetPlate(playerid, vehicleid, plate[])
{
	if(cache_num_rows())
	    return SendErrorMessage(playerid, "???????? ???? ??? ???????????? ?????? ???????????? ?????????.");

    format(VehicleInfo[vehicleid][carPlate], 24, "%s", plate);
	SetVehicleNumberPlate(vehicleid, VehicleInfo[vehicleid][carPlate]);
	RespawnVehicle(vehicleid, 1);
	Save_Car(vehicleid);

	SendClientMessageEx(playerid, COLOR_WHITE, "?? ???????? %s ???????? ????. ????? ?????: %s", VehicleNames[GetVehicleModel(vehicleid)-400], plate);
	new mes[128];
	format(mes, sizeof(mes), "AdmCmd: %s ??????? ???????? ?????? ???????????? ????????(%s) ID %i ??: %s.", GetAccName(playerid), VehicleNames[GetVehicleModel(vehicleid)-400], vehicleid, plate);
	SCMALL(COLOR_LIGHTRED, mes);

	format(mes, sizeof(mes), "[/asetplate] ????????????? %s ??????? ???????? ?????? ???????????? ????????(%s) ??: %s.", GetAccName(playerid), VehicleNames[GetVehicleModel(vehicleid)-400], plate);
	insert_log(mes, ADMIN_LOG, 11);
	return 1;
}

CMD:givemoney(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	new id, amount;
	if(sscanf(params,"ud",id,amount))
		return SendSyntaxMessage(playerid, "/givemoney [playerid/PartOfName] [text]");

	if(!IsPlayerLogged(id))
		return SendNotConnected(playerid);

	SendClientMessageEx(id, COLOR_WHITE, "????????????? %s ?????(-?) ??? $%i", GetAccName(playerid), amount);
	AMSG(COLOR_LIGHTRED, "AdmCmd: %s ?????(-?) %s $%i.", GetAccName(playerid), GetNameEx(id), amount);
	GiveCash(id, amount);

	new mes[128];
	format(mes, sizeof(mes), "[/givemoney] ????????????? %s ?????(-?) ?????? %s ????? $%i.", GetAccName(playerid), GetNameEx(id), amount);
	insert_log(mes, ADMIN_LOG, 10);
	return 1;
}

CMD:setmoney(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	new id, amount;
	if(sscanf(params,"ud",id,amount))
		return SendSyntaxMessage(playerid, "/setmoney [playerid/PartOfName] [text]");

	if(!IsPlayerLogged(id))
		return SendNotConnected(playerid);

	SendClientMessageEx(id, COLOR_WHITE, "????????????? %s ?????????(-?) ??? $%i", GetAccName(playerid), amount);
	AMSG(COLOR_LIGHTRED, "AdmCmd: %s ?????????(-?) %s ??????????? ????? ?? $%i.", GetAccName(playerid), GetNameEx(id), amount);
	SetCash(id, amount);

    new mes[128];
	format(mes, sizeof(mes), "[/setmoney] ????????????? %s ?????????(-?) ?????? %s ?????? $%i.", GetAccName(playerid), GetNameEx(id), amount);
	insert_log(mes, ADMIN_LOG, 8);
	return 1;
}

CMD:setdonate(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	new id, amount;
	if(sscanf(params,"ud",id,amount))
		return SendSyntaxMessage(playerid, "/setdonate [playerid/PartOfName] [text]");

	if(!IsPlayerLogged(id))
		return SendNotConnected(playerid);

	SendClientMessageEx(id, COLOR_WHITE, "????????????? %s ?????????(-?) ??? %i ??????", GetAccName(playerid), amount);
	PlayerInfo[id][pDonate] = amount;

	new mes[128];
	format(mes, sizeof(mes), "[/setdonate] ????????????? %s ?????????(-?) ?????? %s ????? %i.", GetAccName(playerid), GetNameEx(id), amount);
	insert_log(mes, ADMIN_LOG, 9);
	return 1;
}

CMD:objectcmds(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return SendErrorMessage(playerid,"? ??? ???????????? ???? ??? ????????????? ???????.");
	SCM(playerid, COLOR_WHITE, "[Level 6]: {C3C3C3}/makeobject /removeobject /editobject /editobjects /gotoobject");
	return 1;
}

ALTX:makeobject("/mobject");
CMD:makeobject(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	new modelid;

	if(sscanf(params,"d", modelid))
		return SendSyntaxMessage(playerid, "/makeobject [ID ??????]");

	new objectid = -1;
	for(new i; i != MAX_OBJECTS; i++)
	{
	    if(ObjectsInfo[i][oID] != 0 || ObjectsInfo[i][oObjectOn] != 0)
	        continue;

		objectid = i;
		break;
	}

	if(objectid == -1)
	    return SendErrorMessage(playerid, "?????????? ???????????? ?????????? ??????????? ????????.");

    ObjectsInfo[objectid][oModel] = modelid;

	GetPlayerPos(playerid, ObjectsInfo[objectid][oPosX], ObjectsInfo[objectid][oPosY], ObjectsInfo[objectid][oPosZ]);
	ObjectsInfo[objectid][oPosRX] = 0.0;
	ObjectsInfo[objectid][oPosRY] = 0.0;
	ObjectsInfo[objectid][oPosRZ] = 0.0;
	ObjectsInfo[objectid][oInt] = GetInterior(playerid);
	ObjectsInfo[objectid][oVW] = GetWorld(playerid);

	ObjectsInfo[objectid][oObject] =
		CreateDynamicObject(modelid, ObjectsInfo[objectid][oPosX], ObjectsInfo[objectid][oPosY], ObjectsInfo[objectid][oPosZ], 0.0, 0.0, 0.0, ObjectsInfo[objectid][oVW], ObjectsInfo[objectid][oInt], -1, 200.0);

	if(ObjectsInfo[objectid][oObject] == INVALID_OBJECT_ID)
	    return SendErrorMessage(playerid, "?? ??????? ??????? ?????? ??????.");

	ObjectsInfo[objectid][oObjectOn] = 1;

	AddObjectToFile(objectid, modelid, ObjectsInfo[objectid][oInt], ObjectsInfo[objectid][oVW], ObjectsInfo[objectid][oPosX], ObjectsInfo[objectid][oPosY], ObjectsInfo[objectid][oPosZ]);
	SendClientMessageEx(playerid,COLOR_GREEN,"?????? ?????? ID: %i: (??????: %i.)",objectid, modelid);
	return 1;
}

ALTX:removeobject("/robject");
CMD:removeobject(playerid,params[])
{
	new objectid;
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	if(sscanf(params,"d",objectid))
		return SendSyntaxMessage(playerid, "/removeobject [ID ???????]");

	if(ObjectsInfo[objectid][oObjectOn] != 1)
		return SCM(playerid, COLOR_LIGHTRED,"??????? ??? ????? ID ?? ??????????.");

	new query[128];
	mysql_format(dbHandle, query, sizeof(query), "DELETE FROM `objects` WHERE `id` = %i", ObjectsInfo[objectid][oID]);
	mysql_tquery(dbHandle, query);

	SendClientMessageEx(playerid,COLOR_GREEN,"?????? ID %i ??????.",objectid);

    if(IsValidDynamicObject(ObjectsInfo[objectid][oObject]))
		DestroyDynamicObject(ObjectsInfo[objectid][oObject]);

	ObjectsInfo[objectid][oPosX] = 0.0000;
	ObjectsInfo[objectid][oPosY] = 0.0000;
	ObjectsInfo[objectid][oPosZ] = 0.0000;
	ObjectsInfo[objectid][oPosRX] = 0.0000;
	ObjectsInfo[objectid][oPosRY] = 0.0000;
	ObjectsInfo[objectid][oPosRZ] = 0.0000;
	ObjectsInfo[objectid][oObjectOn] = 0;
	ObjectsInfo[objectid][oID] = 0;
	return 1;
}

CMD:editobjects(playerid, params[])
{
    if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	SetPVarInt(playerid, #edit_objects, 1);
    SelectObject(playerid);
   	SendServerMessage(playerid, "???????? ???? ?? ???????? - ??????? ?? ????.");
	return 1;
}

CMD:editobject(playerid,params[])
{
	new id,
		parametrs[12],
		arg[128];

	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	if (sscanf(params, "is[12]S()[128]", id, parametrs, arg))
	{
		SendSyntaxMessage(playerid, "/editobject [ID ???????] [????????]");
		return SendClientMessage(playerid, 0xECA129FF, "?????????: {ffffff}position, texture, deltexture");
	}

	if(id < 0 || id > MAX_OBJECTS-1 || ObjectsInfo[id][oObjectOn] != 1)
		return SCM(playerid, COLOR_LIGHTRED,"??????? ??? ????? ID ?? ??????????.");


	if(0 == strcmp(parametrs, "position"))
	{
    	SetPVarInt(playerid, #edit_object, id+1);
		EditDynamicObject(playerid, ObjectsInfo[id][oObject]);
		return 1;
	}
	else if(0 == strcmp(parametrs, "texture"))
	{
	    new	slot,
		 	model,
	        txdname[32],
	        texturename[32];

	    if(sscanf(arg, "iis[32]s[32]", slot, model, txdname, texturename))
 		{
	 		SendSyntaxMessage(playerid, "/editobject texture [???? ?????? 0-15] [Model ID] [TXD Name] [Texture Name]");
			return SendClientMessage(playerid, -1, "?????? ??????? ? ????????????? ???????? ?? ?????: http://textures.xyin.ws");
		}

		if(slot < 0 || slot > 15)
		    return SendErrorMessage(playerid, "????: 0 - 15.");

		if(model < 0)
		    return SendErrorMessage(playerid, "Model ID ?? ????? ???? ?????? 0.");

		if(strlen(txdname) >= 32)
		    return SendErrorMessage(playerid, "TXD Name ?????? ????????? ?? ????? 31 ???????.");

        if(strlen(texturename) >= 32)
		    return SendErrorMessage(playerid, "Texture Name ?????? ????????? ?? ????? 31 ???????.");

        if(0 == SetDynamicObjectMaterial(ObjectsInfo[id][oObject], slot, model, txdname, texturename, 0))
			return SendErrorMessage(playerid, "?? ??????? ???????? ???????? ???????.");

        new query[128];
		mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `objects_texture` WHERE `objectid`=%i AND `slot`=%i",
		ObjectsInfo[id][oID], slot);
		mysql_tquery(dbHandle, query, "OnObjectTextureInsert", "iiiiss", playerid, id, slot, model, txdname, texturename);
		return 1;
	}
	else if(0 == strcmp(parametrs, "deltexture"))
	{
	    if(isnull(arg))
	        return SendSyntaxMessage(playerid, "/editobject deltexture [???? 0-15]");

		new slot = strval(arg);

		if(slot < 0 || slot > 15)
		    return SendErrorMessage(playerid, "????: 0 - 15.");

        if(0 == SetDynamicObjectMaterial(ObjectsInfo[id][oObject], slot, -1, "none", "none", 0))
			return SendErrorMessage(playerid, "?? ??????? ??????? ???????? ???????.");

        new query[128];
		mysql_format(dbHandle, query, sizeof(query), "DELETE FROM `objects_texture` WHERE `objectid` = %i AND `slot` = %i",
		ObjectsInfo[id][oID], slot);
		mysql_tquery(dbHandle, query);

		SendClientMessageEx(playerid, COLOR_GREEN, "?? ??????? ??????? ID: %i ???????? ??? ??????: %i", id, slot);
	}
	return 1;
}

CMD:gotoobject(playerid, params[])
{
	new objectid;
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	if(sscanf(params,"d",objectid))
		return SendSyntaxMessage(playerid, "/gotoobject [ID ???????]");

	if(ObjectsInfo[objectid][oObjectOn] != 1)
		return SCM(playerid, COLOR_LIGHTRED,"??????? ??? ????? ID ?? ??????????.");

	SetPlayerPosEx(playerid, ObjectsInfo[objectid][oPosX], ObjectsInfo[objectid][oPosY], ObjectsInfo[objectid][oPosZ]);
	SetInterior(playerid, ObjectsInfo[objectid][oInt]);
	SetWorld(playerid, ObjectsInfo[objectid][oVW]);
	SendClientMessageEx(playerid, COLOR_GREEN, "?? ???? ??????????????? ? ??????? ID: %i.", objectid);
	return 1;
}

CMD:towercmds(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return SendErrorMessage(playerid,"? ??? ???????????? ???? ??? ????????????? ???????.");
	SCM(playerid, COLOR_WHITE, "[Level 6]: {C3C3C3}/maketower /removetower /gototower /edittower");
	return 1;
}

CMD:edittower(playerid,params[])
{
	new towerid;
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	if(sscanf(params,"d", towerid))
		return SendSyntaxMessage(playerid, "/gototower [ID ?????]");

	if(towerid < 0 || towerid > MAX_TOWERS || 0 == TowerInfo[towerid][towerID])
		return SCM(playerid, COLOR_LIGHTRED, "????? ??? ???? ID ?? ??????????.");

    if(GetWorld(playerid) || GetInterior(playerid))
	    return SendErrorMessage(playerid, "?? ?? ?????? ????????????? ????? ??? ??????.");

	if(!IsPlayerInRangeOfPoint(playerid, 10.0, TowerInfo[towerid][towerPosX], TowerInfo[towerid][towerPosY], TowerInfo[towerid][towerPosZ]))
	    return SendErrorMessage(playerid, "?? ?????? ?????????? ????? ? ??????. (/gototower %i)", towerid);

	if(GetPVarInt(playerid, #edit_tower) != 0)
		return SCM(playerid, COLOR_LIGHTRED, "?? ??? ???????????? ?????.");

	SetPVarInt(playerid, #edit_tower, towerid+1);
	EditDynamicObject(playerid, TowerInfo[towerid][towerObject]);
	return 1;
}

ALTX:maketower("/mtower");
CMD:maketower(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	if(GetWorld(playerid) || GetInterior(playerid))
	    return SendErrorMessage(playerid, "?? ?? ?????? ??????? ????? ??? ??????.");

	new type;
    if(sscanf(params,"d", type))
		return SendSyntaxMessage(playerid, "/maketower [0 - ????????? | 1 - ??????? ?????]");

	if(type != 0 && type != 1)
	    return SendSyntaxMessage(playerid, "/maketower [0 - ????????? | 1 - ??????? ?????]");

	new towerid = -1,
		Float:x,
		Float:y,
		Float:z,
		Float:angle;

	for(new i; i != MAX_TOWERS; i++)
	{
	    if(TowerInfo[i][towerOn] != 0)
	        continue;

		towerid = i;
		break;
	}

	if(towerid == -1)
	    return SendErrorMessage(playerid, "?????????? ???????????? ?????????? ????? ?????.");

    GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, angle);

    x += 1.0 * floatsin(-angle, degrees);
	y += 1.0 * floatcos(-angle, degrees);
	z -= 0.6;

    TowerInfo[towerid][towerModel] = (type == 0)?(3030):(3763);
	TowerInfo[towerid][towerPosX] = x;
 	TowerInfo[towerid][towerPosY] = y;
 	TowerInfo[towerid][towerPosZ] = z - 1.0;
  	TowerInfo[towerid][towerPosRX] = 0;
   	TowerInfo[towerid][towerPosRY] = 0;
   	TowerInfo[towerid][towerPosRZ] = angle;
   	TowerInfo[towerid][towerOn] = 1;
   	TowerInfo[towerid][towerObject] = CreateDynamicObject(TowerInfo[towerid][towerModel], x, y, z, 0.0, 0.0, angle, 0, 0);


    new query[128];
    mysql_format(dbHandle, query, sizeof(query), "INSERT INTO `towers` (`model`,`x`,`y`,`z`,`rz`) VALUES (%i,%f,%f,%f,%f)",
    type, x, y, z, angle);
	mysql_tquery(dbHandle, query, "OnTowerInsert", "i", towerid);

	SendClientMessageEx(playerid,COLOR_GREEN,"????? ????? ID: %i ???????.", towerid);
	return 1;
}

ALTX:removetower("/rtower");
CMD:removetower(playerid,params[])
{
	new towerid;
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	if(sscanf(params,"d", towerid))
		return SendSyntaxMessage(playerid, "/removetower [ID ?????]");

	if(towerid < 0 || towerid > MAX_TOWERS || 0 == TowerInfo[towerid][towerOn])
		return SCM(playerid, COLOR_LIGHTRED, "????? ??? ???? ID ?? ??????????.");

    if(IsValidDynamicObject(TowerInfo[towerid][towerObject]))
   		DestroyDynamicObject(TowerInfo[towerid][towerObject]);

	new query[128];
	mysql_format(dbHandle, query, sizeof(query), "DELETE FROM `towers` WHERE `id` = %i", TowerInfo[towerid][towerID]);
	mysql_tquery(dbHandle, query);

    TowerInfo[towerid][towerOn] = 0;
 	TowerInfo[towerid][towerID] = 0;

	SendClientMessageEx(playerid,COLOR_GREEN,"????? ID: %i ???????.", towerid);
	return 1;
}

CMD:gototower(playerid,params[])
{
	new towerid;
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	if(sscanf(params,"d", towerid))
		return SendSyntaxMessage(playerid, "/gototower [ID ?????]");

	if(towerid < 0 || towerid > MAX_TOWERS || 0 == TowerInfo[towerid][towerID])
		return SCM(playerid, COLOR_LIGHTRED, "????? ??? ???? ID ?? ??????????.");

    SetWorld(playerid, 0);
    SetInterior(playerid, 0);
    SetPlayerPosEx(playerid, TowerInfo[towerid][towerPosX], TowerInfo[towerid][towerPosY], TowerInfo[towerid][towerPosZ]);

	SendClientMessageEx(playerid,COLOR_GREEN,"?? ????????????????? ? ????? ID: %i.", towerid);
	return 1;
}

CMD:cargocmds(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return SendErrorMessage(playerid,"? ??? ???????????? ???? ??? ????????????? ???????.");
	SCM(playerid, COLOR_WHITE, "[Level 6]: {C3C3C3}/makecargo /removecargo /editcargo /gotocargo");
	return 1;
}

CMD:tpda(playerid, params[])
{
    if(PlayerInfo[playerid][pJob] != JOB_TRUCKER)
	    return 1;

	if(!IsPlayerInAnyVehicle(playerid))
	    return SendErrorMessage(playerid, "Trebuie sa fii intr-o masina.");

	Dialog_Show(playerid, PDAMenu, DIALOG_STYLE_LIST, "PDA - Meniu", "{AFAFAF} Afiseaza{FFFFFF}afacerile\n{AFAFAF} Afiseaza comenzile {FFFFFF} pentru toate afacerile\n {AFAFAF} Arata {FFFFFF}informatii", "Select", "Cancel");
	return 1;
}

Dialog:CargoList(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return 1;

	if(IsPlayerInAnyVehicle(playerid))
	    return SendErrorMessage(playerid, "Nu esti intr-o masina.");

    new vehicle = GetPVarInt(playerid, #cargo_vehicle);
	if(vehicle == 0 || GetNearVehicle(playerid, 15.0, vehicle) == 0)
	   	return SendErrorMessage(playerid, "Trebuie sa stai langa portbagajul vehiculului.");

    if(VehicleInfo[vehicle][carLocked] == 1)
	    return SendErrorMessage(playerid, "Masina este inchisa.");

    if(VehicleInfo[vehicle][carTrunkLock] == 0)
    	return SCM(playerid, COLOR_LIGHTRED, "Portbagajul masinii este inchis.");

	listitem = pTemp[playerid][pCargoListed][listitem];

	if(VehicleInfo[vehicle][carCargoAmount][listitem] == 0)
	    return SendErrorMessage(playerid, "Acel crate nu este in masina.");

    if(!IsTakeProduct(listitem))
    	return SendErrorMessage(playerid, "Acest crate nu poate fii ridicat.");

    if(IsPlayerAttachedObjectSlotUsed(playerid, ATTACH_HANDS) || pTemp[playerid][pCargoID] != 0)
	   	return SendErrorMessage(playerid, "Ai deja un crate in maini.");

	cmd::liftup(playerid, "");
 	SetPlayerAttachedObject(playerid, ATTACH_HANDS, 2912, 5, 0.102000, 0.306000, -0.228999, -1.100001, 14.499999, -1.300000, 1.000000, 1.000000, 1.000000);
  	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);

	pTemp[playerid][pCargoID] = listitem+1;
	VehicleInfo[vehicle][carCargoAmount][listitem]--;

	new amount;
	for(new i; i != MAX_TRUCK_PRODUCT; i++)
		amount += VehicleInfo[vehicle][carCargoAmount][i];

    switch(GetVehicleModel(vehicle))
 	{
  		case 600, 543, 605, 422, 478, 554: DestroyDynamicObject(VehicleInfo[vehicle][carCargoObj][amount]);
	}
	Streamer_Update(playerid, STREAMER_TYPE_OBJECT);
	return 1;
}

CMD:trailer(playerid, params[])
{
	if(PlayerInfo[playerid][pJob] != JOB_TRUCKER)
	    return 1;

    if(!IsPlayerInAnyVehicle(playerid))
		return 1;

    new vehicle = GetPlayerVehicleID(playerid),
   		trailerid = GetVehicleTrailer(vehicle);

    if(!IsTruckCar(vehicle))
        return 1;

    if(trailerid == 0)
        return SendErrorMessage(playerid, "Remorca nu este atasata.");

	if(isnull(params))
	{
		SCM(playerid, -1, "Comenzi:");
		SCM(playerid, COLOR_YELLOWG, "/trailer lock{FFFFFF} - inchide/deschide trailerul");
		SCM(playerid, COLOR_YELLOWG, "/trailer detach{FFFFFF} - Detasezi trailerul");
		SCM(playerid, COLOR_YELLOWG, "/trailer lights{FFFFFF} - inchizi/deschizi luminile traierulului");
		SCM(playerid, COLOR_YELLOWG, "/trailer cargo{FFFFFF} - ce exista in remorca");
		return 1;
	}

	if(0 == strcmp(params, "cargo") || 0 == strcmp(params, "list"))
	{
	    new title[52],
	        msg[512] = "{9ACD32}Bunuri\t{9ACD32}NR.",
			count;

	    format(title, sizeof(title), "Trailer (capacitate: %i)", GetMaxCargoVehicle(trailerid));
		for(new i; i != MAX_TRUCK_PRODUCT; i++)
		{
		    if(VehicleInfo[trailerid][carCargoAmount][i] == 0)
		        continue;

			format(msg, sizeof(msg), "%s\n%s\t%i Unitati(-s)", msg, truckcargo_product[i], VehicleInfo[trailerid][carCargoAmount][i]);
			count++;
		}

		if(!count)
		    return SendErrorMessage(playerid, "In remorca nu exista produse.");

		Dialog_Show(playerid, None, DIALOG_STYLE_TABLIST_HEADERS, title, msg, "Selecteaza" ,"");
	    return 1;
	}
	else if(0 == strcmp(params, "detach"))
	{
	    if(GetVehicleSpeed(vehicle) > 3)
	        return SendErrorMessage(playerid, "Ai o viteza prea mare pentru a detasa remorca.");

        DetachTrailerFromVehicle(vehicle);
        SCM(playerid, COLOR_GREEN, "Remorca detasata.");
	    return 1;
	}
	else if(0 == strcmp(params, "lights"))
	{
	    new engine,lights,alarm,doors,bonnet,boot,objective;
    	GetVehicleParamsEx(trailerid,engine,lights,alarm,doors,bonnet,boot,objective);

		if(lights != 0)
		{
			GameTextForPlayer(playerid, "~w~TRAILER LIGHTS ~r~OFF", 2500, 4);
			VehicleLight(trailerid, false);
			return 1;
		}

		GameTextForPlayer(playerid, "~w~TRAILER LIGHTS ~g~ON", 2500, 4);
		VehicleLight(trailerid, true);
	    return 1;
	}
	else if(0 == strcmp(params, "lock"))
	{
	    if(IsPlayerInjured(playerid) != 0 || pTemp[playerid][pTaserTime] || pTemp[playerid][pCuffed])
			return SCM(playerid, COLOR_GREY, "Nu poti folosii aeasta comanda.");

	    PlaySound(playerid, 1145);

		if(VehicleInfo[trailerid][carLocked])
	       GameTextForPlayer(playerid, "~w~TRAILER ~g~UNLOCKED", 2500, 4);
		else
		    GameTextForPlayer(playerid, "~w~TRAILER ~r~LOCKED", 2500, 4);

	    ToggleVehicleLock(trailerid, (VehicleInfo[trailerid][carLocked]) ? (false): (true));
	    return 1;
	}
	return 1;
}

CMD:cargo(playerid, params[])
{
	if(PlayerInfo[playerid][pJob] != JOB_TRUCKER)
	    return 1;

	new parametrs[8],
	    arg[4];

	if(sscanf(params, "s[8]S()[4]", parametrs, arg))
	{
		SCM(playerid, -1, "Comenzi:");
		SCM(playerid, COLOR_YELLOWG, "/cargo list{FFFFFF} - Lista cu toate produsele din remorca.");
		SCM(playerid, COLOR_YELLOWG, "/cargo place{FFFFFF} - Punerea marfurilor in remorca.");
		SCM(playerid, COLOR_YELLOWG, "/cargo putdown{FFFFFF} - Punerea marfei pe jos.");
		SCM(playerid, COLOR_YELLOWG, "/cargo pickup{FFFFFF} - Luarea marfei.");
		SCM(playerid, COLOR_YELLOWG, "/cargo buy{FFFFFF} - Cumpararea marfei.");
		SCM(playerid, COLOR_YELLOWG, "/cargo sell{FFFFFF} - Vinderea marfei.");
		return 1;
	}

	new mes[128];

	if(0 == strcmp(parametrs, "list"))
	{
	    new vehicle = GetPlayerVehicleID(playerid);
		if(vehicle == 0 && (vehicle = GetNearBootVehicle(playerid)) == 0)
	    	return SendErrorMessage(playerid, "Trebuie sa fii in jurul unui trailer");

        if(IsTruckCar(vehicle))
			return SCM(playerid, COLOR_LIGHTRED, "Foloseste /trailer cargo pentru a vedea toate marfurile incarcate.");

		if(IsTruckerJob(vehicle) == 0)
		    return SendErrorMessage(playerid, "Nu ai jobul corespunzator.");

		if(ValidTruckForPlayer(playerid, vehicle) == 0)
		    return SendErrorMessage(playerid, "Pentru ajutor foloseste comanda /jobhelp.");

     	if(VehicleInfo[vehicle][carLocked] == 1)
		    return SendErrorMessage(playerid, "Masina inchisa.");

	    new title[52],
	        msg[512] = "{9ACD32}Produse\t{9ACD32}NR.",
         	count;

	    format(title, sizeof(title), "%s (Capacitate: %i)", VehicleNames[GetVehicleModel(vehicle)-400], GetMaxCargoVehicle(vehicle));

        for(new i; i != MAX_TRUCK_PRODUCT; i++)
      		pTemp[playerid][pCargoListed][i] = 0;

		for(new i; i != MAX_TRUCK_PRODUCT; i++)
		{
		    if(VehicleInfo[vehicle][carCargoAmount][i] == 0)
		        continue;

 			pTemp[playerid][pCargoListed][count] = i;
			format(msg, sizeof(msg), "%s\n%s\t%i existente(-?)", msg, truckcargo_product[i], VehicleInfo[vehicle][carCargoAmount][i]);
			count++;
		}

		if(!count)
		    return SendErrorMessage(playerid, "Nu ai marfuri.");

		Dialog_Show(playerid, CargoList, DIALOG_STYLE_TABLIST_HEADERS, title, msg, "Selecteaza" ,"Cancel");
		SetPVarInt(playerid, #cargo_vehicle, vehicle);
	    return 1;
	}

	else if(0 == strcmp(parametrs, "place"))
	{
	    if(pTemp[playerid][pCargoID] == 0)
		    return SendErrorMessage(playerid, "Nu ai marfuri.");

        new vehicle;
		if((vehicle = GetNearBootVehicle(playerid)) == 0)
	    	return SendErrorMessage(playerid, "Trebuie sa fii in jurul masinii.");

        if(IsTruckerJob(vehicle) == 0)
		    return SendErrorMessage(playerid, "Nu ai jobul corespunzator.");

        if(ValidTruckForPlayer(playerid, vehicle) == 0)
		    return SendErrorMessage(playerid, "Foloseste comanda /jobhelp pentru mai multe informatii.");

	    if(VehicleInfo[vehicle][carLocked] == 1)
		    return SendErrorMessage(playerid, "Masina inchisa.");

        if(VehicleInfo[vehicle][carTrunkLock] == 0)
			return SCM(playerid, COLOR_LIGHTRED, "Portbagaj inchis.");

		if(!IsValidProductVehicle(vehicle, pTemp[playerid][pCargoID]-1))
		    return SendErrorMessage(playerid, "Nu poti pune acest tip de marfa in masina.");

		new amount;
		for(new i; i != MAX_TRUCK_PRODUCT; i++)
			amount += VehicleInfo[vehicle][carCargoAmount][i];

		if(amount >= GetMaxCargoVehicle(vehicle))
		    return SendErrorMessage(playerid, "Nu mai exista loc.");

        switch(GetVehicleModel(vehicle))
        {
            case 600, 543, 605, 422, 478, 554: VehicleInfo[vehicle][carCargoObj][amount] = CreateDynamicObject(2912, 0.0, 0.0, 0.0, -100.0, 0.0, 0.0);
            case 443: VehicleInfo[vehicle][carCargoObj][amount] = CreateDynamicObject(3593, 0.0, 0.0, 0.0, -100.0, 0.0, 0.0);
		}

		switch(GetVehicleModel(vehicle))
		{
		    case 600: AttachDynamicObjectToVehicle(VehicleInfo[vehicle][carCargoObj][amount], vehicle, picador_attach[amount][0], picador_attach[amount][1], picador_attach[amount][2], 0.0, 0.0, 0.0);
		    case 543, 605: AttachDynamicObjectToVehicle(VehicleInfo[vehicle][carCargoObj][amount], vehicle, sadler_attach[amount][0], sadler_attach[amount][1], sadler_attach[amount][2], 0.0, 0.0, 0.0);
		    case 422: AttachDynamicObjectToVehicle(VehicleInfo[vehicle][carCargoObj][amount], vehicle, bobcat_attach[amount][0], bobcat_attach[amount][1], bobcat_attach[amount][2], 0.0, 0.0, 0.0);
            case 478: AttachDynamicObjectToVehicle(VehicleInfo[vehicle][carCargoObj][amount], vehicle, walton_attach[amount][0], walton_attach[amount][1], walton_attach[amount][2], 0.0, 0.0, 0.0);
            case 554: AttachDynamicObjectToVehicle(VehicleInfo[vehicle][carCargoObj][amount], vehicle, yosemite_attach[amount][0], yosemite_attach[amount][1], yosemite_attach[amount][2], 0.0, 0.0, 0.0);
		}

		Streamer_Update(playerid, STREAMER_TYPE_OBJECT);

        cmd::putdown(playerid, "");
        if(IsPlayerAttachedObjectSlotUsed(playerid, ATTACH_HANDS))
        	RemovePlayerAttachedObject(playerid, ATTACH_HANDS);
        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

		VehicleInfo[vehicle][carCargoAmount][pTemp[playerid][pCargoID]-1]++;
		pTemp[playerid][pCargoID] = 0;
	    return 1;
	}
	else if(0 == strcmp(parametrs, "putdown"))
	{
	    if(pTemp[playerid][pCargoID] == 0)
  			return SendErrorMessage(playerid, "Nu ai cum sa pui.");

		new id = -1;
		for(new i; i != MAX_CARGO_OBJ; i++)
		{
		    if(CargoObject[i][oOn] != 0)
		        continue;

			id = i;
			break;
		}

		if(id == -1)
		    return SendErrorMessage(playerid, "Nu ai nimic in mana pentru a pune.");

		CargoObject[id][oOn] = 1;
		CargoObject[id][oProduct] = pTemp[playerid][pCargoID];

        cmd::putdown(playerid, "");
		if(IsPlayerAttachedObjectSlotUsed(playerid, ATTACH_HANDS))
 			RemovePlayerAttachedObject(playerid, ATTACH_HANDS);
  		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
    	pTemp[playerid][pCargoID] = 0;

		new Float: x,
			Float: y,
			Float: z;

        GetXYInFrontOfPlayer(playerid, x, y, z, 1.5);
        CargoObject[id][oZ] -= 2.0;

		CargoObject[id][oObj] =
			CreateDynamicObject(2912, x, y, z, 0.0, 0.0, 0.0, GetWorld(playerid), GetInterior(playerid));

        CargoObject[id][oX] = x,
        CargoObject[id][oY] = y,
        CargoObject[id][oZ] = z,
        CargoObject[id][oInt] = GetInterior(playerid),
        CargoObject[id][oVW] = GetWorld(playerid);

        format(mes, sizeof(mes), "[{FFFF00}%s{FFFFFF}]", truckcargo_product[CargoObject[id][oProduct]-1]);

		CargoObject[id][oLabel] =
			CreateDynamic3DTextLabel(mes, 0xFFFFFFFF, x, y, z+0.1, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, GetWorld(playerid), GetInterior(playerid), -1, 100.0);

		return 1;
	}
	else if(0 == strcmp(parametrs, "pickup"))
	{
        if(IsPlayerAttachedObjectSlotUsed(playerid, ATTACH_HANDS) || pTemp[playerid][pCargoID] != 0)
	    	return SendErrorMessage(playerid, "Nu ai nimic in mana pentru a pune.");

		new id = -1;
		for(new i; i != MAX_CARGO_OBJ; i++)
		{
			if(CargoObject[i][oOn] == 0 || !IsPlayerInRangeOfPoint(playerid, 2.0, CargoObject[i][oX], CargoObject[i][oY], CargoObject[i][oZ]) || GetWorld(playerid) != CargoObject[i][oVW] || CargoObject[i][oInt] != GetInterior(playerid))
				continue;

			id = i;
			break;
		}

        if(id == -1)
		    return SendErrorMessage(playerid, "Nu ai nimic in masina pentru a lua.");

        CargoObject[id][oOn] = 0;

        pTemp[playerid][pCargoID] = CargoObject[id][oProduct];

        cmd::liftup(playerid, "");
        SetPlayerAttachedObject(playerid, ATTACH_HANDS, 2912, 5, 0.102000, 0.306000, -0.228999, -1.100001, 14.499999, -1.300000, 1.000000, 1.000000, 1.000000);
        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);

        if(IsValidDynamicObject(CargoObject[id][oObj]))
            DestroyDynamicObject(CargoObject[id][oObj]);

        if(IsValidDynamic3DTextLabel(CargoObject[id][oLabel]))
		{
			DestroyDynamic3DTextLabel(CargoObject[id][oLabel]);
	        CargoObject[id][oLabel] = Text3D:INVALID_3DTEXT_ID;
		}
	    return 1;
	}

	else if(0 == strcmp(parametrs, "buy"))
	{
	    if(IsPlayerInAnyVehicle(playerid))
		{
			new id = -1;
			if((id = TruckCargo_Nearest(playerid, 10.0)) == -1)
	    		return SendErrorMessage(playerid, "????? ? ???? ??? ???????????.");

            if(TruckCargo[id][tLocked] == 1)
	        	return SendErrorMessage(playerid, "??????????? ???????.");

		    new vehicle = GetPlayerVehicleID(playerid),
		   		trailerid = GetVehicleTrailer(vehicle);

			if(GetVehicleModel(vehicle) == 578 || GetVehicleModel(vehicle) == 443 || GetVehicleModel(vehicle) == 554 || GetVehicleModel(vehicle) == 499 || GetVehicleModel(vehicle) == 414 || GetVehicleModel(vehicle) == 456 || GetVehicleModel(vehicle) == 455)
				trailerid = vehicle;

	     	if(trailerid == 0)
		        return SendErrorMessage(playerid, "????????? ??????? ? ??????????.");

            if(ValidTruckForPlayer(playerid, trailerid) == 0)
		    	return SendErrorMessage(playerid, "??? ????? ?????? ?? ????????? ???????????? ?????? ?????????, /jobhelp, ????? ?????????? ?????? ?????????? ??????????.");

            if(VehicleInfo[trailerid][carLocked] == 1)
		    	return SendErrorMessage(playerid, "????? ?????????? ??????.");

            if(IsTakeProduct(TruckCargo[id][tProductID]))
		        return SendErrorMessage(playerid, "?????? ????? ????? ?????? ?????? ???????? ??? ??????????.");

			if(!IsValidProductVehicle(trailerid, TruckCargo[id][tProductID]))
			    return SendErrorMessage(playerid, "?????? ????? ?? ???????? ??? ??????? ??????????.");

			new capacity = strval(arg),
			    content = GetMaxCargoVehicle(trailerid);

			if(isnull(arg))
			{
			    SendSyntaxMessage(playerid, "/cargo buy [?????????? ??????]");
			    switch(TruckCargo[id][tProductID])
			    {
			        case TRUCKER_BRICKS: SendClientMessageEx(playerid, -1, "???????????: %i ??????(?, ??) ????????.", content/6);
					case TRUCKER_WOODS: SendClientMessageEx(playerid, -1, "???????????: %i ????? ??????.", content/18);
					default: SendClientMessageEx(playerid, -1, "???????????: %i ??????(?, ?).", content);
				}
			    return 1;
			}

			if(capacity < 1 || capacity > GetMaxCargoVehicle(trailerid))
			    return SendErrorMessage(playerid, "??????????? ?????????? ??????: 1 - %i.", GetMaxCargoVehicle(trailerid));

			if(TruckCargo[id][tStorage] < capacity)
	        	return SendErrorMessage(playerid, "?? ?????? ??? %i ?????? ??????.", capacity);

			if(GetCash(playerid) < TruckCargo[id][tPrice] * capacity)
		    	return SendNotCash(playerid);

			new amount,
				prodid = -1;

			for(new i; i != MAX_TRUCK_PRODUCT; i++)
			{
			    if(VehicleInfo[trailerid][carCargoAmount][i] == 0)
			        continue;

				amount += VehicleInfo[trailerid][carCargoAmount][i];
				prodid = i;
			}

            switch(TruckCargo[id][tProductID])
			{
   				case TRUCKER_BRICKS:
   				{
   				    if(amount + capacity > content/6)
			    		return SendErrorMessage(playerid, "? ????????? ??? ????? ??? %i ?????? ??????.", capacity);
   				}
				case TRUCKER_WOODS:
				{
				    if(amount + capacity > content/18)
			    		return SendErrorMessage(playerid, "? ????????? ??? ????? ??? %i ?????? ??????.", capacity);
				}
			 	default:
				{
					if(amount + capacity > content)
			    		return SendErrorMessage(playerid, "? ????????? ??? ????? ??? %i ?????? ??????.", capacity);
				}
			}

			if(amount && prodid != TruckCargo[id][tProductID])
			    return SendErrorMessage(playerid, "???????? ??? ???????? \"%s\", ?? ?????? ????????? ?????? ?????? ?????.", truckcargo_product[prodid]);


			if(GetVehicleModel(vehicle) == 443 || GetVehicleModel(vehicle) == 578 || GetVehicleModel(vehicle) == 554)
			{
				for(new i = 0; i != capacity; i++)
				{
			        switch(GetVehicleModel(vehicle))
			        {
			            case 443:
						{
							VehicleInfo[vehicle][carCargoObj][amount] =
								CreateDynamicObject(3593, 0.0, 0.0, 0.0, -100.0, 0.0, 0.0);

							AttachDynamicObjectToVehicle(VehicleInfo[vehicle][carCargoObj][amount], vehicle, paker_attach[amount][0], paker_attach[amount][1], paker_attach[amount][2], paker_attach[amount][3], 0.0, 0.0);
						}
						case 578:
						{
							VehicleInfo[vehicle][carCargoObj][amount] =
								CreateDynamicObject((TruckCargo[id][tProductID] == TRUCKER_WOODS)?(18609):(1685), 0.0, 0.0, 0.0, -100.0, 0.0, 0.0);

							if(TruckCargo[id][tProductID] == TRUCKER_WOODS)
								AttachDynamicObjectToVehicle(VehicleInfo[vehicle][carCargoObj][amount], vehicle, dft_attach[0], dft_attach[1], dft_attach[2], 0.0, 0.0, dft_attach[3]);
							else if(TruckCargo[id][tProductID] == TRUCKER_BRICKS)
								AttachDynamicObjectToVehicle(VehicleInfo[vehicle][carCargoObj][amount], vehicle, dft_attach_brick[amount][0], dft_attach_brick[amount][1], dft_attach_brick[amount][2], 0.0, 0.0, 0.0);
						}
						case 554:
						{
							VehicleInfo[vehicle][carCargoObj][amount] =
								CreateDynamicObject(1685, 0.0, 0.0, 0.0, -100.0, 0.0, 0.0);

							AttachDynamicObjectToVehicle(VehicleInfo[vehicle][carCargoObj][amount], vehicle, yosemite_attach_brick[0], yosemite_attach_brick[1], yosemite_attach_brick[2], 0.0, 0.0, 0.0);
						}
					}
					amount++;
				}
			}
			Streamer_Update(playerid, STREAMER_TYPE_OBJECT);

			VehicleInfo[trailerid][carCargoAmount][TruckCargo[id][tProductID]] += capacity;

            GiveCash(playerid, -TruckCargo[id][tPrice] * capacity);

			TruckCargo[id][tStorage] -= capacity;
			set_truckcargo_int(id, "storage", TruckCargo[id][tStorage]);

			format(mes, sizeof(mes), "[{FFFF00}%s{FFFFFF}]\n?????: %i / %i\n????: $%i / ??.", truckcargo_product[TruckCargo[id][tProductID]], TruckCargo[id][tStorage], TruckCargo[id][tStorageSize], TruckCargo[id][tPrice]);
        	UpdateDynamic3DTextLabelText(TruckCargo[id][tLabel], 0xFFFFFFFF, mes);
			return 1;
		}

        new id = -1;
		if((id = TruckCargo_Nearest(playerid, 1.5)) == -1)
	    	return SendErrorMessage(playerid, "????? ? ???? ??? ???????????.");

	    if(TruckCargo[id][tLocked] == 1)
	        return SendErrorMessage(playerid, "??????????? ???????.");

		if(!IsTakeProduct(TruckCargo[id][tProductID]))
		    return SendErrorMessage(playerid, "?????? ????? ????? ?????? ?????? ???????? ? ??????????.");

        if(!TruckCargo[id][tStorage])
	        return SendErrorMessage(playerid, "????? ??????????? ????.");

		if(GetCash(playerid) < TruckCargo[id][tPrice])
		    return SendNotCash(playerid);

		if(IsPlayerAttachedObjectSlotUsed(playerid, ATTACH_HANDS) || pTemp[playerid][pCargoID] != 0)
	    	return SendErrorMessage(playerid, "???? ???? ??? ???-?? ??????.");

        cmd::liftup(playerid, "");
        SetPlayerAttachedObject(playerid, ATTACH_HANDS, 2912, 5, 0.102000, 0.306000, -0.228999, -1.100001, 14.499999, -1.300000, 1.000000, 1.000000, 1.000000);
        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);

		GiveCash(playerid, -TruckCargo[id][tPrice]);
		pTemp[playerid][pCargoID] = TruckCargo[id][tProductID]+1;

		TruckCargo[id][tStorage]--;
		set_truckcargo_int(id, "storage", TruckCargo[id][tStorage]);

		format(mes, sizeof(mes), "[{FFFF00}%s{FFFFFF}]\n?????: %i / %i\n????: $%i / ??.", truckcargo_product[TruckCargo[id][tProductID]], TruckCargo[id][tStorage], TruckCargo[id][tStorageSize], TruckCargo[id][tPrice]);
        UpdateDynamic3DTextLabelText(TruckCargo[id][tLabel], 0xFFFFFFFF, mes);
	    return 1;
	}
	else if(0 == strcmp(parametrs, "sell"))
	{
	    if(IsPlayerInAnyVehicle(playerid))
		{
            new vehicle = GetPlayerVehicleID(playerid),
		   		trailerid = GetVehicleTrailer(vehicle);

			if(GetVehicleModel(vehicle) == 578 || GetVehicleModel(vehicle) == 443 || GetVehicleModel(vehicle) == 554 || GetVehicleModel(vehicle) == 499 || GetVehicleModel(vehicle) == 414 || GetVehicleModel(vehicle) == 456)
				trailerid = vehicle;

	     	if(trailerid == 0)
		        return SendErrorMessage(playerid, "????????? ??????? ? ??????????.");

            if(ValidTruckForPlayer(playerid, trailerid) == 0)
		    	return SendErrorMessage(playerid, "??? ????? ?????? ?? ????????? ???????????? ?????? ?????????, /jobhelp, ????? ?????????? ?????? ?????????? ??????????.");

            if(VehicleInfo[trailerid][carLocked] == 1)
		    	return SendErrorMessage(playerid, "????? ?????????? ??????.");

            new capacity = strval(arg);
			if(isnull(arg))
			{
			    SendSyntaxMessage(playerid, "/cargo sell [?????????? ??????]");
			    return 1;
			}

			if(capacity < 1 || capacity > GetMaxCargoVehicle(trailerid))
			    return SendErrorMessage(playerid, "??????????? ?????????? ??????: 1 - %i.", GetMaxCargoVehicle(trailerid));

            new amount,
				prodid = -1;

			for(new i; i != MAX_TRUCK_PRODUCT; i++)
			{
			    if(VehicleInfo[trailerid][carCargoAmount][i] == 0 || IsTakeProduct(i))
			        continue;

				amount += VehicleInfo[trailerid][carCargoAmount][i];
				prodid = i;
				break;
			}

			if(amount < capacity)
			    return SendErrorMessage(playerid, "? ?????????? ??? ?????? ?????????? ??????.");

            new id = -1;

			if((id = TruckCargo_Nearest(playerid, 15.0)) != -1)
			{
                if(TruckCargo[id][tLocked] == 1)
			        return SendErrorMessage(playerid, "??????????? ???????.");

		        if(TruckCargo[id][tStorage] + capacity > TruckCargo[id][tStorageSize])
			        return SendErrorMessage(playerid, "????? ??????????? ?????.");

          		if(TruckCargo[id][tProductID] != prodid)
			        return SendErrorMessage(playerid, "?????? ????? ?????? ??????? ?? ?????? ???????????.");


				if(GetVehicleModel(vehicle) == 443 || GetVehicleModel(vehicle) == 578 || GetVehicleModel(vehicle) == 554)
				{
					for(new i = 0; i != capacity; i++)
					{
				        DestroyDynamicObject(VehicleInfo[vehicle][carCargoObj][amount-1]);
				        amount--;
					}
				}
				Streamer_Update(playerid, STREAMER_TYPE_OBJECT);

             	VehicleInfo[trailerid][carCargoAmount][prodid] -= capacity;

                GiveCash(playerid, TruckCargo[id][tPrice] * capacity);
				TruckCargo[id][tStorage] += capacity;
				set_truckcargo_int(id, "storage", TruckCargo[id][tStorage]);

				format(mes, sizeof(mes), "~w~+$%i", TruckCargo[id][tPrice] * capacity);
				GameTextForPlayer(playerid, mes, 1000, 1);

				format(mes, sizeof(mes), "[{FFFF00}%s{FFFFFF}]\n?????: %i / %i\n????: $%i / ??.", truckcargo_product[TruckCargo[id][tProductID]], TruckCargo[id][tStorage], TruckCargo[id][tStorageSize], TruckCargo[id][tPrice]);
        		UpdateDynamic3DTextLabelText(TruckCargo[id][tLabel], 0xFFFFFFFF, mes);
				return 1;
			}
			else if((id = GetNearBizOutside(playerid, 15.0)) != -1)
			{
			    if(BizInfo[id][bizProduct] + (biz_prod_point[BizInfo[id][bizType]] * capacity) > 400)
			        return SendErrorMessage(playerid, "? ??????? ???????????? ?????.");

                if(BizInfo[id][bizPrice] == 0)
				    return SendErrorMessage(playerid, "?????? ?????? ?? ???????? ?????.");

                if(biz_prod_types[BizInfo[id][bizType]] != prodid)
			        return SendErrorMessage(playerid, "?????? ????? ?? ???????? ??? ??????? ???????.");

			    if(GetVehicleModel(vehicle) == 443 || GetVehicleModel(vehicle) == 578 || GetVehicleModel(vehicle) == 554)
				{
					for(new i = 0; i != capacity; i++)
					{
				        DestroyDynamicObject(VehicleInfo[vehicle][carCargoObj][amount-1]);
				        amount--;
					}
				}
				Streamer_Update(playerid, STREAMER_TYPE_OBJECT);

             	VehicleInfo[trailerid][carCargoAmount][prodid] -= capacity;
                BizInfo[id][bizProduct] += (biz_prod_point[BizInfo[id][bizType]] * capacity);
                GiveCash(playerid, BizInfo[id][bizBuyPrice] * capacity);
                GiveBizCash(id, -BizInfo[id][bizBuyPrice] * capacity);

				if(BizInfo[id][bizProduct] >= 400)
				    BizInfo[id][bizBuyPrice] = 0;

				Save_Business(id);

            	format(mes, sizeof(mes), "~w~+$%i", BizInfo[id][bizBuyPrice] * capacity);
				GameTextForPlayer(playerid, mes, 1000, 1);
				return 1;
			}
			else SendErrorMessage(playerid, "?? ?????? ?????????? ????? ??????? ??? ???????????!");
			return 1;
		}

		if(pTemp[playerid][pCargoID] == 0)
  			return SendErrorMessage(playerid, "? ??? ??? ?????? ? ?????.");

        new id = -1;
		if((id = TruckCargo_Nearest(playerid, 1.5)) != -1)
		{
		    if(TruckCargo[id][tLocked] == 1)
		        return SendErrorMessage(playerid, "??????????? ???????.");

	        if(TruckCargo[id][tStorage] + 1 > TruckCargo[id][tStorageSize])
		        return SendErrorMessage(playerid, "????? ??????????? ?????.");

	        if(TruckCargo[id][tProductID] != pTemp[playerid][pCargoID]-1)
		        return SendErrorMessage(playerid, "?????? ????? ?????? ??????? ?? ?????? ???????????.");

            cmd::putdown(playerid, "");
	        if(IsPlayerAttachedObjectSlotUsed(playerid, ATTACH_HANDS))
	        	RemovePlayerAttachedObject(playerid, ATTACH_HANDS);
	        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

			GiveCash(playerid, TruckCargo[id][tPrice]);
			pTemp[playerid][pCargoID] = 0;

            format(mes, sizeof(mes), "~w~+$%i", TruckCargo[id][tPrice]);
			GameTextForPlayer(playerid, mes, 1000, 1);

			TruckCargo[id][tStorage]++;
			set_truckcargo_int(id, "storage", TruckCargo[id][tStorage]);

			format(mes, sizeof(mes), "[{FFFF00}%s{FFFFFF}]\n?????: %i / %i\n????: $%i / ??.", truckcargo_product[TruckCargo[id][tProductID]], TruckCargo[id][tStorage], TruckCargo[id][tStorageSize], TruckCargo[id][tPrice]);
	        UpdateDynamic3DTextLabelText(TruckCargo[id][tLabel], 0xFFFFFFFF, mes);
        }
        else if((id = GetNearBizOutside(playerid)) != -1)
		{
		    if(BizInfo[id][bizProduct] + biz_prod_point[BizInfo[id][bizType]]  > 400)
		        return SendErrorMessage(playerid, "? ??????? ???????????? ?????.");

            if(BizInfo[id][bizPrice] == 0)
				return SendErrorMessage(playerid, "?????? ?????? ?? ???????? ?????.");

            if(biz_prod_types[BizInfo[id][bizType]] != pTemp[playerid][pCargoID]-1)
				return SendErrorMessage(playerid, "?????? ????? ?????? ??????? ???.");

    	    cmd::putdown(playerid, "");
            if(IsPlayerAttachedObjectSlotUsed(playerid, ATTACH_HANDS))
	        	RemovePlayerAttachedObject(playerid, ATTACH_HANDS);
	        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

            BizInfo[id][bizProduct] += biz_prod_point[BizInfo[id][bizType]];
            GiveCash(playerid, BizInfo[id][bizBuyPrice]);
            GiveBizCash(id, -BizInfo[id][bizBuyPrice]);

			if(BizInfo[id][bizProduct] >= 400)
			    BizInfo[id][bizBuyPrice] = 0;

			Save_Business(id);

            pTemp[playerid][pCargoID] = 0;
			return 1;
		}
		else SendErrorMessage(playerid, "?? ?????? ?????????? ????? ??????? ??? ???????????!");
	}
	return 1;
}

stock Show_Industry(playerid, id, gps = 0)
{
	new mes[1024],
		title[64 + 9],
	    str_len;

	SetPVarInt(playerid, #select_industry, id);

	if(TruckCargo[id][tType] == 0)
	{
	    format(title, sizeof(title), "{9ACD32}%s", TruckCargo[id][tName]);
	    format(mes, sizeof(mes), "{FFFFFF}????? ?????????? ? {9ACD32}%s!\n\n{FFFFFF}??????????? ? ????????? ????? {9ACD32}%s.\n\n{9ACD32}???????:\n{808080}?????\t\t\t????\t\t????????????/? ???\t\t? ??????? (?????? ??????){FFFFFF}",
		TruckCargo[id][tName],
		(TruckCargo[id][tLocked] == 0)?("???????"):("???????"));

        for(new i; i != MAX_TRUCK_CARGO; i++)
	    {
			if(TruckCargo[i][tOn] == 0 || (TruckCargo[id][tPack] == 0 && id != i) || TruckCargo[i][tType] != 0 || TruckCargo[i][tPack] != TruckCargo[id][tPack])
			    continue;

            str_len = strlen(truckcargo_product[TruckCargo[i][tProductID]]);
            format(mes, sizeof(mes), "%s\n%s%s\t\t$%i\t\t\t%s%i\t\t\t\t%i {808080}(%i){FFFFFF}", mes, truckcargo_product[TruckCargo[i][tProductID]], (str_len < 6)?("\t"):(""),
			TruckCargo[i][tPrice],
		    (TruckCargo[i][tProductAmount] > 0)?("+"):(""), TruckCargo[i][tProductAmount],
		    TruckCargo[i][tStorage],
		    TruckCargo[i][tStorageSize]);
	    }
	    strcat(mes, "\n\n{9ACD32}?????????:\n{808080}?????? ??????????? ???????? ? ??? ???? ?? ????????? ?????.");
	}
	else if(TruckCargo[id][tType] == 1 || TruckCargo[id][tType] == 3)
	{
	    format(title, sizeof(title), "{9ACD32}%s", TruckCargo[id][tName]);
	    format(mes, sizeof(mes), "{FFFFFF}????? ?????????? ? {9ACD32}%s!\n\n{FFFFFF}??????????? ? ????????? ????? {9ACD32}%s.\n\n{9ACD32}???????:\n{808080}?????\t\t\t????\t\t????????????/? ???\t\t? ??????? (?????? ??????){FFFFFF}",
		TruckCargo[id][tName],
		(TruckCargo[id][tLocked] == 0)?("???????"):("???????"));

        for(new i; i != MAX_TRUCK_CARGO; i++)
	    {
			if(TruckCargo[i][tOn] == 0 || (TruckCargo[id][tPack] == 0 && id != i) || TruckCargo[i][tType] != 1 || TruckCargo[i][tPack] != TruckCargo[id][tPack])
			    continue;

            str_len = strlen(truckcargo_product[TruckCargo[i][tProductID]]);
            format(mes, sizeof(mes), "%s\n%s%s\t\t$%i\t\t\t%s%i\t\t\t\t%i {808080}(%i){FFFFFF}", mes, truckcargo_product[TruckCargo[i][tProductID]], (str_len < 6)?("\t"):(""),
			TruckCargo[i][tPrice],
		    (TruckCargo[i][tProductAmount] > 0)?("+"):(""), TruckCargo[i][tProductAmount],
		    TruckCargo[i][tStorage],
		    TruckCargo[i][tStorageSize]);
	    }

	    strcat(mes, "\n\n{9ACD32}?????????:\n{808080}?????\t\t\t????\t\t??????/? ???\t\t? ??????? (?????? ??????){FFFFFF}");

	    for(new i; i != MAX_TRUCK_CARGO; i++)
	    {
			if(TruckCargo[i][tOn] == 0 || (TruckCargo[id][tPack] == 0 && id != i) || TruckCargo[i][tType] != 3 || TruckCargo[i][tPack] != TruckCargo[id][tPack])
			    continue;

            str_len = strlen(truckcargo_product[TruckCargo[i][tProductID]]);
            format(mes, sizeof(mes), "%s\n%s%s\t\t$%i\t\t\t%s%i\t\t\t\t%i {808080}(%i){FFFFFF}", mes, truckcargo_product[TruckCargo[i][tProductID]], (str_len < 6)?("\t"):(""),
			TruckCargo[i][tPrice],
		    (TruckCargo[i][tProductAmount] > 0)?("+"):(""), TruckCargo[i][tProductAmount],
		    TruckCargo[i][tStorage],
		    TruckCargo[i][tStorageSize]);
	    }
	}
	else if(TruckCargo[id][tType] == 2)
	{
	    format(title, sizeof(title), "{9ACD32}???? ??? ??????");
	    str_len = strlen(truckcargo_product[TruckCargo[id][tProductID]]);
	    format(mes, sizeof(mes), "{FFFFFF}????? ?????????? ? {9ACD32}???? ???-??????!\n\n{FFFFFF}??????? ? ????????? ????? {9ACD32}%s.\n\n{FFFFFF}????? ???????? ???? ???????????????.\n\n??????? ???????? ?:\t\t%s\n??????? ??????? ?:\t\t%s\n????????? ??????? ???????? ?: %s\n\n{9ACD32}???????:\n{808080}??????? ?????? ?? ???????. ?? ???????? ?????? ???? ?? San Andreas.\n\n{9ACD32}?????????:\n{808080}?????\t\t\t????\t\t? ??????? (?????? ??????){FFFFFF}",
		(ship_docked == 1)?("? ?????"):("? ????"),
		get_date("%hh:%ii:%ss", ship_arrived),
		get_date("%hh:%ii:%ss", ship_depart),
		get_date("%hh:%ii:%ss", ship_next));

		for(new i; i != MAX_TRUCK_CARGO; i++)
	    {
			if(TruckCargo[i][tOn] == 0 || TruckCargo[i][tType] != 2)
			    continue;

            str_len = strlen(truckcargo_product[TruckCargo[i][tProductID]]);
            format(mes, sizeof(mes), "%s\n%s%s\t\t$%i\t\t\t%i {808080}(%i){FFFFFF}", mes, truckcargo_product[TruckCargo[i][tProductID]], (str_len < 6)?("\t"):(""),
			TruckCargo[i][tPrice],
		    TruckCargo[i][tStorage],
		    TruckCargo[i][tStorageSize]);
	    }
	}

	if(gps == 1)
		Dialog_Show(playerid, SelectIndustry, DIALOG_STYLE_MSGBOX, title, mes, "?????", "?????");
	else
	    Dialog_Show(playerid, None, DIALOG_STYLE_MSGBOX, title, mes, "???????", "");
	return 1;
}

CMD:industry(playerid, params[])
{
    if(PlayerInfo[playerid][pJob] != JOB_TRUCKER)
    	return 1;

	new id = -1;
	if((id = TruckCargo_Nearest(playerid)) == -1)
	    return SendErrorMessage(playerid, "????? ? ???? ??? ???????????.");

    Show_Industry(playerid, id);
	return 1;
}

CMD:departship(playerid, params[])
{
    if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	new depart;
	if(sscanf(params,"i", depart))
		return SendSyntaxMessage(playerid, "/departship [????? ???????? ? ????????]");

	ship_depart = gettime() + depart;
	return 1;
}

CMD:timetruck(playerid, params[])
{
    if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	new depart;
	if(sscanf(params,"i", depart))
		return SendSyntaxMessage(playerid, "/timetruck [????? ? ????????]");

	time_truck = depart;
	return 1;
}

CMD:nexttship(playerid, params[])
{
    if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	new depart;
	if(sscanf(params,"i", depart))
		return SendSyntaxMessage(playerid, "/nexttship [????? ???????? ? ????????]");

	ship_next = gettime() + depart;
	return 1;
}

CMD:cargogroups(playerid, params[])
{
	if(!CheckAdmin(playerid, 7))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	for(new i; i != MAX_TRUCK_CARGO; i++)
 	{
  		if(TruckCargo[i][tOn] == 0)
    		continue;

		SendClientMessageEx(playerid, COLOR_GREEN, "%s (ID: %i, ??????: %i)", TruckCargo[i][tName], i, TruckCargo[i][tPack]);
   	}
	return 1;
}

ALTX:makecargo("/mcargo");
CMD:makecargo(playerid, params[])
{
	if(!CheckAdmin(playerid, 7))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	new cargoid = -1,
		type,
		name[64];

	if(sscanf(params,"is[64]", type, name))
		return SendSyntaxMessage(playerid, "/makecargo [???: 0 - ?????, 1 - ???????????, 2 - ???????, 3 - ?????????? ? ????????????] [???????? ???????????]");

	if(type < 0 || type > 3)
	    return SendErrorMessage(playerid, "???: 0 - ?????, 1 - ???????????, 2 - ???????, 3 - ?????????? ? ????????????");

	if(strlen(name) < 1 || strlen(name) > 63)
	    return SendErrorMessage(playerid, "???????????? ?????????? ???????? 63!");

	for(new i; i != MAX_TRUCK_CARGO; i++)
	{
	    if(TruckCargo[i][tOn] != 0)
	        continue;

		cargoid = i;
		break;
	}

	if(cargoid == -1)
	    return SendErrorMessage(playerid, "?????????? ???????????? ?????????? ???????????.");

	GetPlayerPos(playerid, TruckCargo[cargoid][tPosX], TruckCargo[cargoid][tPosY], TruckCargo[cargoid][tPosZ]);
    TruckCargo[cargoid][tType] = type;
    TruckCargo[cargoid][tProductID] = 0;
    TruckCargo[cargoid][tProductAmount] = 0;
    TruckCargo[cargoid][tPrice] = 0;
    TruckCargo[cargoid][tStorage] = 0;
    TruckCargo[cargoid][tStorageSize] = 200;
   	TruckCargo[cargoid][tPack] = 0;
   	TruckCargo[cargoid][tGps] = 0;
   	TruckCargo[cargoid][tLocked] = 0;
   	format(TruckCargo[cargoid][tName], 64, "%s", name);

   	new mes[128];
   	format(mes, sizeof(mes), "[{FFFF00}%s{FFFFFF}]\n?????: %i / %i\n????: $%i / ??.", truckcargo_product[TruckCargo[cargoid][tProductID]], TruckCargo[cargoid][tStorage], TruckCargo[cargoid][tStorageSize], TruckCargo[cargoid][tPrice]);

	TruckCargo[cargoid][tLabel] =
		CreateDynamic3DTextLabel(mes, 0xFFFFFFFF, TruckCargo[cargoid][tPosX], TruckCargo[cargoid][tPosY], TruckCargo[cargoid][tPosZ]+0.8, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0, -1, 100.0);

	TruckCargo[cargoid][tPickup] =
		CreateDynamicPickup(1318, 1, TruckCargo[cargoid][tPosX], TruckCargo[cargoid][tPosY], TruckCargo[cargoid][tPosZ], 0, 0, -1, 100.0);

	TruckCargo[cargoid][tOn] = 1;

   	new query[128 + 128];
	mysql_format(dbHandle, query, sizeof(query), "INSERT INTO `truck_cargo` (x, y, z, type, name, storage_size) VALUES(%f, %f, %f, %i, '%e', 200)",
	TruckCargo[cargoid][tPosX], TruckCargo[cargoid][tPosY], TruckCargo[cargoid][tPosZ], type, name);
	mysql_tquery(dbHandle, query, "OnTruckCargoInsert", "d", cargoid);

	SendClientMessageEx(playerid, COLOR_GREEN,"??????????? ID: %i ???????. (???: %s. ????????: %s)", cargoid, (type == 0)?("?????"):("????????????"), name);
	return 1;
}

ALTX:removebox("/rbox");
CMD:removebox(playerid, params[])
{
    if(!CheckAdmin(playerid, 1))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

    new id = -1;
	for(new i; i != MAX_CARGO_OBJ; i++)
	{
		if(CargoObject[i][oOn] == 0 || !IsPlayerInRangeOfPoint(playerid, 2.0, CargoObject[i][oX], CargoObject[i][oY], CargoObject[i][oZ]) || GetWorld(playerid) != CargoObject[i][oVW] || CargoObject[i][oInt] != GetInterior(playerid))
			continue;

		id = i;
		break;
	}

	if(id == -1)
 		return SendErrorMessage(playerid, "????? ? ???? ??? ?????, ??????? ????? ???????.");

	CargoObject[id][oOn] = 0;
 	if(IsValidDynamicObject(CargoObject[id][oObj]))
  		DestroyDynamicObject(CargoObject[id][oObj]);

	if(IsValidDynamic3DTextLabel(CargoObject[id][oLabel]))
	{
		DestroyDynamic3DTextLabel(CargoObject[id][oLabel]);
	    CargoObject[id][oLabel] = Text3D:INVALID_3DTEXT_ID;
	}
	SendClientMessageEx(playerid, COLOR_GREEN, "??????? ID: %i ???????.", id);
	return 1;
}

ALTX:removecargo("/rcargo");
CMD:removecargo(playerid,params[])
{
	new cargoid,
	    query[128];

	if(!CheckAdmin(playerid, 7))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	if(sscanf(params,"d",cargoid)) return SendSyntaxMessage(playerid, "/removecargo [ID ???????????]");

	if(cargoid < 0 || cargoid > MAX_TRUCK_CARGO || 0 == TruckCargo[cargoid][tOn])
		return SCM(playerid, COLOR_LIGHTRED, "??????????? ??? ???? ID ?? ??????????.");

	DestroyDynamic3DTextLabel(TruckCargo[cargoid][tLabel]);
	DestroyDynamicPickup(TruckCargo[cargoid][tPickup]);

	mysql_format(dbHandle, query, sizeof(query), "DELETE FROM `truck_cargo` WHERE `id` = %i", TruckCargo[cargoid][tID]);
	mysql_tquery(dbHandle, query);

    TruckCargo[cargoid][tOn] = 0;
    TruckCargo[cargoid][tID] = 0;

	SendClientMessageEx(playerid,COLOR_GREEN,"??????????? ID %i ???????.", cargoid);
	return 1;
}

CMD:gotocargo(playerid, params[])
{
	new cargoid;
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	if(sscanf(params,"d",cargoid))
		return SendSyntaxMessage(playerid, "/gotocargo [ID ???????????]");

	if(cargoid < 0 || cargoid > MAX_TRUCK_CARGO || 0 == TruckCargo[cargoid][tOn])
		return SCM(playerid, COLOR_LIGHTRED, "??????????? ??? ???? ID ?? ??????????.");

	SetPlayerPosEx(playerid, TruckCargo[cargoid][tPosX], TruckCargo[cargoid][tPosY], TruckCargo[cargoid][tPosZ]);
	SetInterior(playerid, 0);
	SetWorld(playerid, 0);

	SendClientMessageEx(playerid,COLOR_GREEN,"?? ????????????????? ? ???????????: %s (ID: %i).", TruckCargo[cargoid][tName], cargoid);
	return 1;
}

CMD:editcargo(playerid, params[])
{
    if(!CheckAdmin(playerid, 7))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

    new id, parametrs[12], arg[12], query[256];
	if (sscanf(params, "is[12]S()[12]", id, parametrs, arg))
	{
	    SendSyntaxMessage(playerid, "/editcargo [ID ???????????] [????????] [????????]");
	    return SendClientMessage(playerid, 0xECA129FF, "?????????: {ffffff}storage, size, product, price, unit, group, getgroup, locked, gps");
	}

	if(id < 0 || id > MAX_TRUCK_CARGO || 0 == TruckCargo[id][tOn])
		return SCM(playerid, COLOR_LIGHTRED, "??????????? ??? ???? ID ?? ??????????.");

    new mes[128];

	if(0 == strcmp(parametrs, "storage"))
	{
	    new storage;

	    if(sscanf(arg, "i", storage))
	        return SendSyntaxMessage(playerid, "/editcargo storage [?????????? ???????? ?? ??????]");

        if (storage < 0 || storage > TruckCargo[id][tStorageSize])
	    	return SendErrorMessage(playerid, "?? ??????? ???????? ?????????? 0 - %i.", TruckCargo[id][tStorageSize]);

		SendClientMessageEx(playerid, -1, "?????????? ????????? ?? ?????? ID: %i ???????? ?? %i.", id, storage);

		TruckCargo[id][tStorage] = storage;

		mysql_format(dbHandle, query, sizeof(query), "UPDATE `truck_cargo` SET `storage`='%i' WHERE `id`='%i'", TruckCargo[id][tStorage], TruckCargo[id][tID]);
		mysql_tquery(dbHandle, query);

		format(mes, sizeof(mes), "[{FFFF00}%s{FFFFFF}]\n?????: %i / %i\n????: $%i / ??.", truckcargo_product[TruckCargo[id][tProductID]], TruckCargo[id][tStorage], TruckCargo[id][tStorageSize], TruckCargo[id][tPrice]);
        UpdateDynamic3DTextLabelText(TruckCargo[id][tLabel], 0xFFFFFFFF, mes);
	    return 1;
	}
	else if(0 == strcmp(parametrs, "locked"))
	{
	    new locked;

	    if(sscanf(arg, "i", locked))
	        return SendSyntaxMessage(playerid, "/editcargo locked [0 - ???????, 1 - ???????]");

        if (locked != 0 && locked != 1)
	    	return SendErrorMessage(playerid, "0 - ???????, 1 - ???????.");

		SendClientMessageEx(playerid, -1, "?? %s ??????????? ID: %i.", (locked == 0)?("???????"):("???????"), id);

		TruckCargo[id][tLocked] = locked;

		mysql_format(dbHandle, query, sizeof(query), "UPDATE `truck_cargo` SET `locked`='%i' WHERE `id`='%i'", TruckCargo[id][tLocked], TruckCargo[id][tID]);
		mysql_tquery(dbHandle, query);
	    return 1;
	}
	else if(0 == strcmp(parametrs, "type"))
	{
	    new type;

	    if(sscanf(arg, "i", type))
	        return SendSyntaxMessage(playerid, "/editcargo type [???: 0 - ?????, 1 - ???????????, 2 - ???????, 3 - ?????????? ? ????????????]");

        if(type < 0 || type > 3)
	    	return SendErrorMessage(playerid, "???: 0 - ?????, 1 - ???????????, 2 - ???????, 3 - ?????????? ? ????????????");

		SendClientMessageEx(playerid, -1, "?? ???????? ??? ??????????? ID: %i ?? %i.", id, type);

		TruckCargo[id][tType] = type;

		mysql_format(dbHandle, query, sizeof(query), "UPDATE `truck_cargo` SET `type`='%i' WHERE `id`='%i'", TruckCargo[id][tType], TruckCargo[id][tID]);
		mysql_tquery(dbHandle, query);
	    return 1;
	}
	else if(0 == strcmp(parametrs, "gps"))
	{
	    new locked;

	    if(sscanf(arg, "i", locked))
	        return SendSyntaxMessage(playerid, "/editcargo gps [0 - ?????, 1 - ?????]");

        if (locked != 0 && locked != 1)
	    	return SendErrorMessage(playerid, "0 - ?????, 1 - ?????.");

		SendClientMessageEx(playerid, -1, "?? %s ??????????? ID: %i ? /tpda.", (locked == 0)?("????????"):("??????"), id);

		TruckCargo[id][tGps] = locked;

		mysql_format(dbHandle, query, sizeof(query), "UPDATE `truck_cargo` SET `gps`='%i' WHERE `id`='%i'", TruckCargo[id][tGps], TruckCargo[id][tID]);
		mysql_tquery(dbHandle, query);
	    return 1;
	}
    else if(0 == strcmp(parametrs, "size"))
	{
	    new size;

	    if(sscanf(arg, "i", size))
	        return SendSyntaxMessage(playerid, "/editcargo size [?????? ??????]");

        if (size < 0 || size > 10000)
	    	return SendErrorMessage(playerid, "?? ??????? ???????? ?????????? 0 - 10000.");

		SendClientMessageEx(playerid, -1, "?????? ?????? ID: %i ??????? ?? %i.", id, size);

		TruckCargo[id][tStorageSize] = size;

		mysql_format(dbHandle, query, sizeof(query), "UPDATE `truck_cargo` SET `storage_size`='%i' WHERE `id`='%i'", TruckCargo[id][tStorageSize], TruckCargo[id][tID]);
		mysql_tquery(dbHandle, query);

		format(mes, sizeof(mes), "[{FFFF00}%s{FFFFFF}]\n?????: %i / %i\n????: $%i / ??.", truckcargo_product[TruckCargo[id][tProductID]], TruckCargo[id][tStorage], TruckCargo[id][tStorageSize], TruckCargo[id][tPrice]);
        UpdateDynamic3DTextLabelText(TruckCargo[id][tLabel], 0xFFFFFFFF, mes);
	    return 1;
	}
	else if(0 == strcmp(parametrs, "price"))
	{
	    new price;

	    if(sscanf(arg, "i", price))
	        return SendSyntaxMessage(playerid, "/editcargo price [????????? ??????? ??????]");

        if (price < 0 || price > 10000)
	    	return SendErrorMessage(playerid, "?? ??????? ???????? ????????? 0 - 10000.");

		SendClientMessageEx(playerid, -1, "????????? ?? ??????? ID: %i ???????? ?? $%i.", id, price);

		TruckCargo[id][tPrice] = price;

		mysql_format(dbHandle, query, sizeof(query), "UPDATE `truck_cargo` SET `price`='%i' WHERE `id`='%i'", TruckCargo[id][tPrice], TruckCargo[id][tID]);
		mysql_tquery(dbHandle, query);

		format(mes, sizeof(mes), "[{FFFF00}%s{FFFFFF}]\n?????: %i / %i\n????: $%i / ??.", truckcargo_product[TruckCargo[id][tProductID]], TruckCargo[id][tStorage], TruckCargo[id][tStorageSize], TruckCargo[id][tPrice]);
        UpdateDynamic3DTextLabelText(TruckCargo[id][tLabel], 0xFFFFFFFF, mes);
	    return 1;
	}
	else if(0 == strcmp(parametrs, "unit"))
	{
	    new unit;

	    if(sscanf(arg, "i", unit))
	        return SendSyntaxMessage(playerid, "/editcargo unit [??????? ? ???]");

        if (unit < -100 || unit > 100)
	    	return SendErrorMessage(playerid, "?? ??????? ???????? ??????? -100 ?? 100.");

		SendClientMessageEx(playerid, -1, "???????????/????????? ?????? ? ??? ID: %i ???????? ?? %i.", id, unit);

		TruckCargo[id][tProductAmount] = unit;

		mysql_format(dbHandle, query, sizeof(query), "UPDATE `truck_cargo` SET `product_amount`='%i' WHERE `id`='%i'", TruckCargo[id][tProductAmount], TruckCargo[id][tID]);
		mysql_tquery(dbHandle, query);

		format(mes, sizeof(mes), "[{FFFF00}%s{FFFFFF}]\n?????: %i / %i\n????: $%i / ??.", truckcargo_product[TruckCargo[id][tProductID]], TruckCargo[id][tStorage], TruckCargo[id][tStorageSize], TruckCargo[id][tPrice]);
        UpdateDynamic3DTextLabelText(TruckCargo[id][tLabel], 0xFFFFFFFF, mes);
	    return 1;
	}
	else if(0 == strcmp(parametrs, "product"))
	{
	    new prodid;

	    if(sscanf(arg, "i", prodid))
	    {
	    	SendSyntaxMessage(playerid, "/editcargo product [?? ????????]");

	    	for(new i; i != MAX_TRUCK_PRODUCT; i++)
	    	    SendClientMessageEx(playerid, -1, "%i - %s;", i, truckcargo_product[i]);

			return 1;
		}

        if (prodid < 0|| prodid > MAX_TRUCK_PRODUCT-1)
	    	return SendErrorMessage(playerid, "?? ??????? ???????? ??????? 0 - %i.", MAX_TRUCK_PRODUCT-1);

		SendClientMessageEx(playerid, -1, "??????? ?? ??????????? ID: %i ???????? ?? %s (%i).", id, truckcargo_product[prodid], prodid);

		TruckCargo[id][tProductID] = prodid;

		mysql_format(dbHandle, query, sizeof(query), "UPDATE `truck_cargo` SET `product_id`='%i' WHERE `id`='%i'", TruckCargo[id][tProductID], TruckCargo[id][tID]);
		mysql_tquery(dbHandle, query);

		format(mes, sizeof(mes), "[{FFFF00}%s{FFFFFF}]\n?????: %i / %i\n????: $%i / ??.", truckcargo_product[TruckCargo[id][tProductID]], TruckCargo[id][tStorage], TruckCargo[id][tStorageSize], TruckCargo[id][tPrice]);
        UpdateDynamic3DTextLabelText(TruckCargo[id][tLabel], 0xFFFFFFFF, mes);
	    return 1;
	}
	else if(0 == strcmp(parametrs, "group"))
	{
	    new pack;

	    if(sscanf(arg, "i", pack))
	    {
	        SendClientMessageEx(playerid, -1, "?????? ???????????: %i", TruckCargo[id][tPack]);
			return SendSyntaxMessage(playerid, "/editcargo pack [??????]");
		}

        if(pack < 0 || pack > MAX_TRUCK_PACK)
			return SCM(playerid, COLOR_LIGHTRED, "??????: 0 - 25.");

        TruckCargo[id][tPack] = pack;
        SendClientMessageEx(playerid, -1, "??????????? ID: %i ????????? ?????? - %i.", id, pack);

		mysql_format(dbHandle, query, sizeof(query), "UPDATE `truck_cargo` SET `pack`='%i' WHERE `id`='%i'", TruckCargo[id][tPack], TruckCargo[id][tID]);
		mysql_tquery(dbHandle, query);
	    return 1;
	}
	else if(0 == strcmp(parametrs, "getgroup"))
	{
	    new count;
	    for(new i; i != MAX_TRUCK_CARGO; i++)
	    {
	        if(TruckCargo[i][tOn] == 0 || TruckCargo[i][tPack] != TruckCargo[id][tPack])
	            continue;

			SendClientMessageEx(playerid, COLOR_GREEN, "%i. %s (ID: %i)", count+1, TruckCargo[i][tName], i);
			count++;
	    }

	    if(count == 0)
			SCM(playerid, -1, "??? ????????? ?? ?????? ???????????.");

	    return 1;
	}
	else SendClientMessage(playerid, 0xECA129FF, "[ ! ] {ffffff}???????? ?? ??????.");
	return 1;
}


CMD:housecmds(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return SendErrorMessage(playerid,"? ??? ???????????? ???? ??? ????????????? ???????.");
	SCM(playerid, COLOR_WHITE, "[Level 6]: {C3C3C3}/makehouse /removehouse /edithouse /makehouseint /houseint /houseenter /houseexit /asellhouse /gotohouse");
	return 1;
}

ALTX:makehouse("/mhouse");
CMD:makehouse(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_5))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	new houseid,
		level,
		price,
		clases,
		Float:x,
		Float:y,
		Float:z;

	if(sscanf(params,"iii", level, clases, price))
		return SendSyntaxMessage(playerid, "/makehouse [???????] [??? ????: 1-?????????, 2-???????, 3-???????] [????]");

	if(level < 0 || level > 35)
	    return SendErrorMessage(playerid, "?????????? ??????? ????: 0-35.");

	if(clases < 1 || clases > 3)
	    return SendErrorMessage(playerid, "??? ????: 1-?????????, 2-???????, 3-???????.");

	if(price < 1 || price > 2000000)
	    return SendErrorMessage(playerid, "???????? ????????? ????.");

	if((houseid = GetNextHouseID()) == -1)
	    return SendErrorMessage(playerid, "?????????? ???????????? ?????????? ?????.");

	GetPlayerPos(playerid, x, y, z);

	new vw = GetWorld(playerid),
	    interior = GetInterior(playerid);

	HouseInfo[houseid][hPosX] = x;
	HouseInfo[houseid][hPosY] = y;
	HouseInfo[houseid][hPosZ] = z;
	HouseInfo[houseid][hPosVW] = vw;
	HouseInfo[houseid][hPosInt] = interior;

	HouseInfo[houseid][hExitX] = 0.0;
	HouseInfo[houseid][hExitY] = 0.0;
	HouseInfo[houseid][hExitZ] = 0.0;
	HouseInfo[houseid][hExitVW] = 5000 + houseid;
	SetHouseInterior(houseid, 0);

	HouseInfo[houseid][hCheckPosX] = 0.0000;
	HouseInfo[houseid][hCheckPosY] = 0.0000;
	HouseInfo[houseid][hCheckPosZ] = 0.0000;
	HouseInfo[houseid][hLevelbuy] = level;
	HouseInfo[houseid][hPrice] = price;
	HouseInfo[houseid][hOwnerID] = 0;
	HouseInfo[houseid][hLocked] = 1;
	HouseInfo[houseid][hCash] = 0;
	HouseInfo[houseid][hRadio] = 0;
	HouseInfo[houseid][hClass] = clases-1;
    HouseInfo[houseid][hHeal] = 0;
	HouseInfo[houseid][hHealAmount] = 0;
	HouseInfo[houseid][hCupboard] = 0;
    HouseInfo[houseid][hFurnitureRadius] = 7.0;

 	new door[11];
 	switch(HouseInfo[houseid][hDoor])
 	{
  	    case 0: door = "???????";
	    case 1: door = "??????????";
    	case 2: door = "????????";
    }

    new classes_name[3][10] = {"?????????", "???????", "???????"};

    UpdateHouseText(houseid);
	HouseInfo[houseid][hCheckPoint] =
		CreateDynamicCP(x, y, z, 1.0, HouseInfo[houseid][hPosVW], -1, -1, 2.0);

	AddHouseToFile(houseid, clases-1, level, price, x, y, z, 5000 + houseid, vw, interior);
	SendClientMessageEx(playerid,COLOR_GREEN,"??? ??????? ??????: ??????? ??? ???????: %i, ????: %i, ????????: %s. ??? ????: %s(%i).", level, price, classes_name[clases-1], clases);
	return 1;
}

ALTX:removehouse("/rhouse");
CMD:removehouse(playerid,params[])
{
	new houseid;
	if(!CheckAdmin(playerid, ADMIN_LEVEL_5))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	if(sscanf(params,"d",houseid))
		return SendSyntaxMessage(playerid, "/removehouse [ID ????]");

	if(houseid < 0 || houseid > MAX_HOUSES-1 || 0 == HouseInfo[houseid][hID])
		return SCM(playerid, COLOR_LIGHTRED, "???? ??? ???? ID ?? ??????????.");

	DestroyDynamicCP(HouseInfo[houseid][hCheckPoint]);

    if(IsValidDynamic3DTextLabel(HouseInfo[houseid][hLabelDDoor]))
	{
		DestroyDynamic3DTextLabel(HouseInfo[houseid][hLabelDDoor]);
        HouseInfo[houseid][hLabelDDoor] = Text3D:INVALID_3DTEXT_ID;
	}

	if(IsValidDynamic3DTextLabel(HouseInfo[houseid][hLabel]))
	{
		DestroyDynamic3DTextLabel(HouseInfo[houseid][hLabel]);
        HouseInfo[houseid][hLabel] = Text3D:INVALID_3DTEXT_ID;
	}

	new query[128];
	mysql_format(dbHandle, query, sizeof(query), "DELETE FROM `houses` WHERE `id` = %i",HouseInfo[houseid][hID]);
	mysql_tquery(dbHandle, query);
	SendClientMessageEx(playerid,COLOR_GREEN,"??? ID %i ??????.",houseid);

	HouseInfo[houseid][hID] = 0;
	return 1;
}

CMD:edithouse(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_5))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

    new houseid,
		parametrs[12],
		arg[12],
		query[156];

	if (sscanf(params, "is[12]S()[12]", houseid, parametrs, arg))
	{
	    SendSyntaxMessage(playerid, "/edithouse [ID ????] [????????] [????????]");
	    return SendClientMessage(playerid, 0xECA129FF, "?????????: {ffffff}price, level, type, radius");
	}

    if(houseid < 0 || houseid > MAX_HOUSES || 0 == HouseInfo[houseid][hID])
		return SCM(playerid, COLOR_LIGHTRED, "???? ??? ???? ID ?? ??????????.");

    if(0 == strcmp(parametrs, "price"))
	{
	    new price;
	    if(sscanf(arg, "i", price))
	        return SendSyntaxMessage(playerid, "/edithouse price [????????? ????]");

	    if(price < 1 || price > 2000000)
	    	return SendErrorMessage(playerid, "???????? ????????? ????.");

		mysql_format(dbHandle, query, sizeof(query), "UPDATE `houses` SET `price`='%i' WHERE `id`='%i'", price, HouseInfo[houseid][hID]);
		mysql_tquery(dbHandle, query);
		HouseInfo[houseid][hPrice] = price;

		UpdateHouseText(houseid);
		SendClientMessageEx(playerid,COLOR_GREEN,"?? ???????? ???? ???? ID: %i ?? $%i.", houseid, price);
	}
	else if(0 == strcmp(parametrs, "level"))
	{
	    new level;
	    if(sscanf(arg, "i", level))
	        return SendSyntaxMessage(playerid, "/edithouse level [??????? ??? ???????]");

	    if(level < 0 || level > 35)
	    	return SendErrorMessage(playerid, "?????????? ??????? ????: 0-35.");

		mysql_format(dbHandle, query, sizeof(query), "UPDATE `houses` SET `levelbuy`='%i' WHERE `id`='%i'", level, HouseInfo[houseid][hID]);
		mysql_tquery(dbHandle, query);
		HouseInfo[houseid][hLevelbuy] = level;

		UpdateHouseText(houseid);
		SendClientMessageEx(playerid,COLOR_GREEN,"?? ???????? ??????? ??? ??????? ???? ID: %i ?? %i.", houseid, level);
	}
	else if(0 == strcmp(parametrs, "type"))
	{
	    new clases;
	    if(sscanf(arg, "i", clases))
	        return SendSyntaxMessage(playerid, "/edithouse type [??? ????]");

        if(clases < 1 || clases > 3)
	    	return SendErrorMessage(playerid, "??? ????: 1-?????????, 2-???????, 3-???????.");

        new classes_name[3][10] =
			{"?????????", "???????", "???????"};

		mysql_format(dbHandle, query, sizeof(query), "UPDATE `houses` SET `class`='%i' WHERE `id` ='%i'", clases-1, HouseInfo[houseid][hID]);
		mysql_tquery(dbHandle, query);
		HouseInfo[houseid][hClass] = clases-1;

		SendClientMessageEx(playerid,COLOR_GREEN,"?? ???????? ???? ??? ???? ID: %i ?? %s(%i).", houseid, classes_name[clases-1], clases);
	}
	else if(0 == strcmp(parametrs, "radius"))
	{
	    new Float: radius;
	    if(sscanf(arg, "f", radius))
	        return SendSyntaxMessage(playerid, "/edithouse radius [?????? ??? ??????????? ????????? ???????]");

		if(radius < 0.0 || radius > 30.0)
		    return SendErrorMessage(playerid, "??????: 0 - 30.");

		mysql_format(dbHandle, query, sizeof(query), "UPDATE `houses` SET `furniture_radius`='%f' WHERE `id`='%i'", radius, HouseInfo[houseid][hID]);
		mysql_tquery(dbHandle, query);
		HouseInfo[houseid][hFurnitureRadius] = radius;

		SendClientMessageEx(playerid,COLOR_GREEN,"?? ???????? ?????? ??? ????????? ??????? ???? ID: %i ?? %.2f.",houseid, radius);
	}
	return 1;
}

CMD:houseint(playerid,params[])
{
    if(!CheckAdmin(playerid, ADMIN_LEVEL_5))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

    new houseid;

    if(sscanf(params,"d", houseid))
		return SendSyntaxMessage(playerid, "/houseint [ID ????]");

    if(houseid < 0 || houseid > MAX_HOUSES || 0 == HouseInfo[houseid][hID])
		return SCM(playerid, COLOR_LIGHTRED, "???? ??? ???? ID ?? ??????????.");

    new string[2048];
	for(new i = 0; i < MAX_INTERIORS; i++)
	{
		if(0 == AdminTeles[i][telesOn] || HouseInfo[houseid][hClass] != AdminTeles[i][telesType])
			continue;

		format(string, sizeof(string), "%s\n<%i>{66FF66}%s" ,string, i, AdminTeles[i][telesMapName]);
	}

	if(strlen(string) < 2)
	    return SendErrorMessage(playerid, "????????? ??? ???? ??????? ?????? ?? ???????.");

	SetPVarInt(playerid, "house_change", houseid);
	Dialog_Show(playerid, ChangeHouseInterior, DIALOG_STYLE_LIST, "??????? ????????", string, "???????", "??????");
	return 1;
}

CMD:houseenter(playerid,params[])
{
	new houseid;
	if(!CheckAdmin(playerid, ADMIN_LEVEL_5))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	if(sscanf(params,"d",houseid))
		return SendSyntaxMessage(playerid, "/houseenter [ID ????]");

	if(houseid < 0 || houseid > MAX_HOUSES || 0 == HouseInfo[houseid][hID])
		return SCM(playerid, COLOR_LIGHTRED, "???? ??? ???? ID ?? ??????????.");

	if(IsValidDynamicCP(HouseInfo[houseid][hCheckPoint]))
		DestroyDynamicCP(HouseInfo[houseid][hCheckPoint]);

	GetPlayerPos(playerid, HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ]);
    HouseInfo[houseid][hPosVW] = GetWorld(playerid);
	HouseInfo[houseid][hPosInt] = GetInterior(playerid);

	new query[128 + 56];
	mysql_format(dbHandle, query, sizeof(query), "UPDATE `houses` SET `posx` = %f, `posy` = %f, `posz` = %f, `posint`=%i, `posvw`=%i WHERE `id` = %i", HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ], HouseInfo[houseid][hPosInt], HouseInfo[houseid][hPosVW], HouseInfo[houseid][hID]);
	mysql_tquery(dbHandle, query);

    HouseInfo[houseid][hCheckPoint] =
		CreateDynamicCP(HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ], 1.0, HouseInfo[houseid][hPosVW], HouseInfo[houseid][hPosInt], -1, 2.0);

	UpdateHouseText(houseid);
	SendClientMessageEx(playerid,COLOR_GREEN,"???? ???? ID: %i ?????????.", houseid);
	return 1;
}

CMD:houseexit(playerid,params[])
{
    new houseid;
	if(!CheckAdmin(playerid, ADMIN_LEVEL_5))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	if(sscanf(params,"d",houseid))
		return SendSyntaxMessage(playerid, "/houseexit [ID ????]");

	if(houseid < 0 || houseid > MAX_HOUSES || 0 == HouseInfo[houseid][hID])
		return SCM(playerid, COLOR_LIGHTRED, "???? ??? ???? ID ?? ??????????.");

    GetPlayerPos(playerid, HouseInfo[houseid][hExitX], HouseInfo[houseid][hExitY], HouseInfo[houseid][hExitZ]);
	HouseInfo[houseid][hExitInt] = GetInterior(playerid);

	new query[128 + 56];
	mysql_format(dbHandle, query, sizeof(query), "UPDATE `houses` SET `exitx`='%f',`exity`='%f',`exitz`='%f',`interior`=%i WHERE `id` = %i", HouseInfo[houseid][hExitX], HouseInfo[houseid][hExitY], HouseInfo[houseid][hExitZ], HouseInfo[houseid][hExitInt], HouseInfo[houseid][hID]);
	mysql_tquery(dbHandle, query);

	SendClientMessageEx(playerid,COLOR_GREEN,"????? ???? ID: %i ?????????.",houseid);
	return 1;
}
CMD:asellhouse(playerid, params[])
{
	new houseid;
	if(!CheckAdmin(playerid, ADMIN_LEVEL_5))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	if(sscanf(params,"d",houseid))
		return SendSyntaxMessage(playerid, "/asellhouse [ID ????]");

	if(0 == HouseInfo[houseid][hID])
		return SCM(playerid, COLOR_LIGHTRED, "???? ??? ???? ID ?? ??????????.");

	if(0 == HouseInfo[houseid][hOwnerID])
		return SCM(playerid, COLOR_LIGHTRED, "???? ??? ????????? ?? ???????.");


	new userid = GetIDByID(HouseInfo[houseid][hOwnerID]);

	if(IsPlayerLogged(userid))
	    SendClientMessageEx(userid, COLOR_YELLOWG, "????????????? %s ??????(-?) ??? ???.", GetAccName(playerid));

	Sell_House(houseid);
	SendClientMessageEx(playerid,COLOR_GREEN,"?? ????????? ??? ID: %i ?? ???????.",houseid);
	return 1;
}

CMD:gotohouse(playerid, params[])
{
	new houseid;
	if(!CheckAdmin(playerid, ADMIN_LEVEL_5))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	if(sscanf(params,"d",houseid))
		return SendSyntaxMessage(playerid, "/gotohouse [ID ????]");

	if(houseid < 0 || houseid > MAX_HOUSES-1 || 0 == HouseInfo[houseid][hID])
		return SCM(playerid, COLOR_LIGHTRED, "???? ??? ???? ID ?? ??????????.");

	SetPlayerPosEx(playerid, HouseInfo[houseid][hPosX], HouseInfo[houseid][hPosY], HouseInfo[houseid][hPosZ]);
	SetInterior(playerid, HouseInfo[houseid][hPosInt]);
	SetWorld(playerid, HouseInfo[houseid][hPosVW]);
	SendClientMessageEx(playerid,COLOR_GREEN,"?? ????????????????? ? ???? ID %i.",houseid);
	return 1;
}

CMD:businesscmds(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_5))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	SCM(playerid, COLOR_WHITE, "[Level 6]: {C3C3C3}/makebusiness /removebusiness /editbusiness /businessenter /businessexit");
	SCM(playerid, COLOR_WHITE, "[Level 6]: {C3C3C3}/gotobusiness /asellbusiness /biztypes /makebizint /bizint");
	return 1;
}

ALTX:makebusiness("/mbusiness");
CMD:makebusiness(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_5))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	new bizid = -1,
		level,
		price,
		freeze,
		type;

	if(sscanf(params,"iiiii", level, price, freeze, type))
		return SendSyntaxMessage(playerid, "/makebusiness [???????] [????] [????????? (0 - ???/1 - ??)] [??? ???????(/biztypes)]");

	if(freeze != 1 && freeze != 0)
		return SendErrorMessage(playerid, "???????? ???????? ?????????(0 ??? 1).");

	if(type > sizeof(biz_types)-1 || type < 0)
		return SendErrorMessage(playerid,"???????? ???????? ???? ???????(0 - %i)", sizeof(biz_types)-1);

	if ((bizid = GetNextBizID()) == -1)
	    return SendErrorMessage(playerid, "??????? ???????????? ?????????? ????????.");

	GetPlayerPos(playerid, BizInfo[bizid][bizPosX], BizInfo[bizid][bizPosY], BizInfo[bizid][bizPosZ]);
	BizInfo[bizid][bizPosInt] = GetInterior(playerid);
	BizInfo[bizid][bizPosVW] = GetWorld(playerid);

	GetPlayerPos(playerid, BizInfo[bizid][bizExitX], BizInfo[bizid][bizExitY], BizInfo[bizid][bizExitZ]);
	BizInfo[bizid][bizExitInt] = GetInterior(playerid);
	BizInfo[bizid][bizExitVW] = bizid + 5000;

    BizInfo[bizid][bizMes] = EOS;
	BizInfo[bizid][bizType] = type;
	BizInfo[bizid][bizLevelbuy] = level;
	BizInfo[bizid][bizPrice] = price;
	BizInfo[bizid][bizFreeze] = freeze;
	BizInfo[bizid][bizOwnerID] = 0;
	BizInfo[bizid][bizLocked] = 0;
	BizInfo[bizid][bizCash] = 0;
	BizInfo[bizid][bizEntrance] = 0;
	BizInfo[bizid][bizRadioOn] = 0;
	BizInfo[bizid][bizRadio] = 0;
	format(BizInfo[bizid][bizOwner], MAX_PLAYER_NAME, "The State");
	format(BizInfo[bizid][bizName], 32, "Business");
	BizInfo[bizid][bizProductPrice][0] = 5;
	BizInfo[bizid][bizProductPrice][1] = 5;
	BizInfo[bizid][bizProductPrice][2] = 15;
	BizInfo[bizid][bizProductPrice][3] = 15;

	BizInfo[bizid][bizPickUp] = CreateDynamicPickup(1239, 1, BizInfo[bizid][bizPosX], BizInfo[bizid][bizPosY], BizInfo[bizid][bizPosZ], BizInfo[bizid][bizPosVW], BizInfo[bizid][bizPosInt], -1, 100.0);

	AddBizToFile(bizid, level, price, freeze, type, BizInfo[bizid][bizName], BizInfo[bizid][bizMes],
	BizInfo[bizid][bizPosX], BizInfo[bizid][bizPosY], BizInfo[bizid][bizPosZ], BizInfo[bizid][bizExitX], BizInfo[bizid][bizExitY], BizInfo[bizid][bizExitZ],
	BizInfo[bizid][bizPosInt], BizInfo[bizid][bizPosVW], BizInfo[bizid][bizExitInt], BizInfo[bizid][bizExitVW]);

	SendClientMessageEx(playerid,COLOR_GREEN,"?????? ID: %i ??????. ??????? ??? ???????: %i, ????: %i, ??????????? ??????: %s, ???: %s.",bizid, level, price, (freeze !=0) ? ("???"):("??"), biz_types[BizInfo[bizid][bizType]]);
	return 1;
}

ALTX:removebusiness("/rbusiness");
CMD:removebusiness(playerid,params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_5))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	new bizid;

	if ((bizid = GetNearBizOutside(playerid)) == -1)
	    return SendErrorMessage(playerid, "????? ? ???? ??? ???????.");

	if (IsValidDynamicPickup(BizInfo[bizid][bizPickUp]))
		DestroyDynamicPickup(BizInfo[bizid][bizPickUp]);


    new ownerid = GetIDByID(BizInfo[bizid][bizOwnerID]);
    new query[128];

	if(IsPlayerLogged(ownerid))
	{
		SendClientMessageEx(ownerid, COLOR_GREEN, "????????????? %s ?????? ??? ??????.", GetAccName(playerid));
		SendClientMessageEx(ownerid, COLOR_GREEN, "??? ?????????? ?????? ?? ??????? $%i ? ?????? ?? ????? ??????? $%i.", BizInfo[bizid][bizPrice], BizInfo[bizid][bizCash]);
  		GiveCash(ownerid, BizInfo[bizid][bizPrice]);
		if(BizInfo[bizid][bizCash] > 0) GiveCash(ownerid, BizInfo[bizid][bizCash]);
	}
	else
	{
	    new biz_cost = BizInfo[bizid][bizPrice];
	    if(BizInfo[bizid][bizCash] > 0) biz_cost += BizInfo[bizid][bizCash];

		mysql_format(dbHandle, query, sizeof(query), "SELECT `cash` FROM `users` WHERE `id` = '%i'", BizInfo[bizid][bizOwnerID]);
		mysql_tquery(dbHandle, query, "GivePlayerBizMoney", "ii", biz_cost, BizInfo[bizid][bizOwnerID]);
	}

	mysql_format(dbHandle, query, sizeof(query), "DELETE FROM `business` WHERE `id` = %i",BizInfo[bizid][bizID]);
	mysql_tquery(dbHandle, query);

	BizInfo[bizid][bizID] = 0;
    BizInfo[bizid][bizOwnerID] = 0;

	SendClientMessageEx(playerid,COLOR_GREEN,"?? ??????? ?????? ID %i ? ???????.",bizid);
	return 1;
}
CMD:editbusiness(playerid, params[])
{
	new text[32], type;
	if(!CheckAdmin(playerid, ADMIN_LEVEL_5))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	if(sscanf(params,"ds[32]",type,text))
		return SendSyntaxMessage(playerid, "/editbusiness [???] [????????]"), SCM(playerid,COLOR_WHITE,"???: 1 - ????, 2 - ???????, 3 - ??? ???????(/biztypes), 4 - ????????"), SCM(playerid,COLOR_WHITE,"???: 5 - ???? ?? ????, 6 - ????? ? ?????, 7 - ?????????(0 - ???/1 - ??)");
    new bizid;

	if ((bizid = GetNearBizOutside(playerid)) == -1)
	    return SendErrorMessage(playerid, "????? ? ???? ??? ???????.");

	new input = strval(text);

    new query[128];
	if(type == 1)
	{
		mysql_format(dbHandle, query, sizeof(query), "UPDATE `business` SET `price` = %i WHERE `id` = %i", input, BizInfo[bizid][bizID]);
		mysql_tquery(dbHandle, query);
		BizInfo[bizid][bizPrice] = input;
		SendClientMessageEx(playerid,COLOR_GREEN,"?? ???????? ???? ??????? ID %i ??: $%i.",bizid, input);
	}
	else if(type == 2)
	{
		mysql_format(dbHandle, query, sizeof(query), "UPDATE `business` SET `levelbuy` = %i WHERE `id` = %i", input, BizInfo[bizid][bizID]);
		mysql_tquery(dbHandle, query);
		BizInfo[bizid][bizLevelbuy] = input;
		SendClientMessageEx(playerid,COLOR_GREEN,"?? ???????? ???????, ? ???????? ????? ?????? ?????? ID %i ??: %i.",bizid, input);
	}
	else if(type == 3)
	{
	    if(input < 0 || input > 18)
	        return 1;

  		BizInfo[bizid][bizType] = input;
		mysql_format(dbHandle,query, sizeof(query), "UPDATE `business` SET `type` = %i WHERE `id` = %i", input,  BizInfo[bizid][bizID]);
		mysql_tquery(dbHandle, query);
		SendClientMessageEx(playerid,COLOR_GREEN,"?? ???????? ??? ??????? ID %i ??: %s.",bizid, biz_types[BizInfo[bizid][bizType]]);
	}
	else if(type == 4)
	{
		if(strlen(text) > 30)
			return SCM(playerid, COLOR_LIGHTRED, "???????? ??????? ????? ????????? ?? ????? 30 ????????.");

		mysql_format(dbHandle,query, sizeof(query), "UPDATE `business` SET `name` = '%e' WHERE `id` = %i", text, BizInfo[bizid][bizID]);
		mysql_tquery(dbHandle, query);
		format(BizInfo[bizid][bizName], 32, "%s", text);
		SendClientMessageEx(playerid,COLOR_GREEN,"?? ???????? ???????? ??????? ID %i ??: \"%s\".",bizid, text);
	}
	else if(type == 5)
	{
		mysql_format(dbHandle, query, sizeof(query), "UPDATE `business` SET `entrance` = %i WHERE `id` = %i", input, BizInfo[bizid][bizID]);
		mysql_tquery(dbHandle, query);
		BizInfo[bizid][bizEntrance] = input;
		SendClientMessageEx(playerid,COLOR_GREEN,"?? ???????? ???? ?? ???? ? ?????? ID %i ??: $%i.",bizid, input);
	}
	else if(type == 6)
	{
		mysql_format(dbHandle, query, sizeof(query), "UPDATE `business` SET `cash` = %i WHERE `id` = %i", input, BizInfo[bizid][bizID]);
		mysql_tquery(dbHandle, query);
		BizInfo[bizid][bizCash] = input;
		SendClientMessageEx(playerid,COLOR_GREEN,"?? ?????????? ????? ? ????? ??????? ID %i: $%i.",bizid, input);
	}
	else if(type == 7)
	{
		mysql_format(dbHandle, query, sizeof(query), "UPDATE `business` SET `freeze` = %i WHERE `id` = %i", input, BizInfo[bizid][bizID]);
		mysql_tquery(dbHandle, query);
		BizInfo[bizid][bizFreeze] = input;
		SendClientMessageEx(playerid,COLOR_GREEN,"?? ?????????? ??????????? ??????? ?? (0 - ?????? ??????/1 - ????? ??????) ??? ??????? ID %i: %i.",bizid, input);
	}
	else
	{
		SCM(playerid, COLOR_LIGHTRED, "??????????? ?????????? ????????.");
		return 1;
	}
	return 1;
}
CMD:businessenter(playerid,params[])
{
	new bizid;
	if(!CheckAdmin(playerid, ADMIN_LEVEL_5))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	if(sscanf(params,"d",bizid))
		return SendSyntaxMessage(playerid, "/businessenter [ID ???????]");

	if(bizid < 0 || bizid > MAX_BIZ-1 || 0 == BizInfo[bizid][bizID])
		return SendErrorMessage(playerid,"?????? ??? ????? ID ?? ??????????.");

	if (IsValidDynamicPickup(BizInfo[bizid][bizPickUp]))
		DestroyDynamicPickup(BizInfo[bizid][bizPickUp]);

    GetPlayerPos(playerid, BizInfo[bizid][bizPosX], BizInfo[bizid][bizPosY], BizInfo[bizid][bizPosZ]);
	BizInfo[bizid][bizPosInt] = GetInterior(playerid);
	BizInfo[bizid][bizPosVW] = GetWorld(playerid);

	UpdateBusinessDoor(bizid);
	BizInfo[bizid][bizPickUp] = CreateDynamicPickup(1239, 1, BizInfo[bizid][bizPosX], BizInfo[bizid][bizPosY], BizInfo[bizid][bizPosZ], BizInfo[bizid][bizPosVW], BizInfo[bizid][bizPosInt], -1, 100.0);

    new query[128 + 56];
	mysql_format(dbHandle, query, sizeof(query), "UPDATE `business` SET `posx` = %f, `posy` = %f, `posz` = %f, `posvw` = %i, `posint` = %i WHERE `id` = %i",
	BizInfo[bizid][bizPosX], BizInfo[bizid][bizPosY], BizInfo[bizid][bizPosZ], BizInfo[bizid][bizPosVW], BizInfo[bizid][bizPosInt], BizInfo[bizid][bizID]);
	mysql_tquery(dbHandle, query);

	SendClientMessageEx(playerid,COLOR_GREEN,"?? ???????? ???? ?????? ID: %i ?? X: %f, Y: %f, Z: %f, INTERIOR: %i, VW: %i.",bizid, BizInfo[bizid][bizPosX], BizInfo[bizid][bizPosY], BizInfo[bizid][bizPosZ], BizInfo[bizid][bizPosInt], BizInfo[bizid][bizPosVW]);
	return 1;
}
CMD:businessexit(playerid,params[])
{
	new bizid;
	if(!CheckAdmin(playerid, ADMIN_LEVEL_5))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	if(sscanf(params,"d",bizid))
		return SendSyntaxMessage(playerid, "/businessenter [ID ???????]");

	if(bizid < 0 || bizid > MAX_BIZ-1 || 0 == BizInfo[bizid][bizID])
		return SendErrorMessage(playerid,"?????? ??? ????? ID ?? ??????????.");

    GetPlayerPos(playerid, BizInfo[bizid][bizExitX], BizInfo[bizid][bizExitY], BizInfo[bizid][bizExitZ]);
	BizInfo[bizid][bizExitInt] = GetInterior(playerid);
	//BizInfo[bizid][bizExitVW] = GetWorld(playerid);

	SendClientMessageEx(playerid,COLOR_GREEN,"?? ???????? ????? ?????? ID: %i ?? X: %f, Y: %f, Z: %f, INTERIOR: %i.",bizid, BizInfo[bizid][bizExitX], BizInfo[bizid][bizExitY], BizInfo[bizid][bizExitZ], BizInfo[bizid][bizExitInt]);
	return 1;
}

CMD:bizint(playerid,params[])
{
    if(!CheckAdmin(playerid, ADMIN_LEVEL_5))
			return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

    new bizid;

    if(sscanf(params,"d", bizid))
		return SendSyntaxMessage(playerid, "/bizint [ID ???????]");

    if(bizid < 0 || bizid > MAX_BIZ-1 || 0 == BizInfo[bizid][bizID])
		return SendErrorMessage(playerid,"?????? ??? ????? ID ?? ??????????.");

    new string[2560];
	for(new i = 0; i < MAX_INTERIORS; i++)
	{
		if(0 == AdminTeles[i][telesOn] || 4 != AdminTeles[i][telesType])
			continue;

		format(string, sizeof(string), "%s\n<%i>{66FF66}%s", string, i, AdminTeles[i][telesMapName]);
	}

	if(strlen(string) < 2)
	    return SendErrorMessage(playerid, "????????? ??? ??????? ?? ???????.");

	SetPVarInt(playerid, "biz_change", bizid);
	Dialog_Show(playerid, ChangeBizInterior, DIALOG_STYLE_LIST, "??????? ????????", string, "???????", "??????");
	return 1;
}

CMD:gotobusiness(playerid, params[])
{
	new bizid;
	if(!CheckAdmin(playerid, ADMIN_LEVEL_5))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	if(sscanf(params,"d",bizid))
		return SendSyntaxMessage(playerid, "/gotobusiness [ID ???????]");

	if(bizid < 0 || bizid > MAX_BIZ-1 || 0 == BizInfo[bizid][bizID])
		return SendErrorMessage(playerid,"?????? ??? ????? ID ?? ??????????.");

	SetPlayerPosEx(playerid, BizInfo[bizid][bizPosX], BizInfo[bizid][bizPosY], BizInfo[bizid][bizPosZ]);
	SetInterior(playerid, BizInfo[bizid][bizPosInt]);
	SetWorld(playerid, BizInfo[bizid][bizPosVW]);

	SendClientMessageEx(playerid,COLOR_GREEN,"?? ????????????????? ? ??????? ID %i.",bizid);
	return 1;
}
CMD:asellbusiness(playerid, params[])
{
	new bizid;

	if(!CheckAdmin(playerid, ADMIN_LEVEL_5))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	if(sscanf(params,"d",bizid))
		return SendSyntaxMessage(playerid, "/asellbusiness [ID ???????]");

	if(bizid < 0 || bizid > MAX_BIZ-1 || 0 == BizInfo[bizid][bizID])
		return SendErrorMessage(playerid,"?????? ??? ????? ID ?? ??????????.");

	if(0 == BizInfo[bizid][bizOwnerID])
		return SendErrorMessage(playerid,"???? ?????? ??? ????????? ?? ???????.");

    new ownerid = GetIDByID(BizInfo[bizid][bizOwnerID]);
	if(IsPlayerLogged(ownerid))
	{
		SendClientMessageEx(ownerid, COLOR_GREEN, "????????????? %s ?????? ??? ??????.", GetAccName(playerid));
		SendClientMessageEx(ownerid, COLOR_GREEN, "??? ?????????? ?????? ?? ??????? $%i ? ?????? ?? ????? ??????? $%i.", BizInfo[bizid][bizPrice], BizInfo[bizid][bizCash]);
  		GiveCash(ownerid, BizInfo[bizid][bizPrice]);
		if(BizInfo[bizid][bizCash] > 0) GiveCash(ownerid, BizInfo[bizid][bizCash]);
	}
	else
	{
	    new biz_cost = BizInfo[bizid][bizPrice];
	    if(BizInfo[bizid][bizCash] > 0) biz_cost += BizInfo[bizid][bizCash];

        new query[128];
		mysql_format(dbHandle, query, sizeof(query), "SELECT `cash` FROM `users` WHERE `id` = '%i'", BizInfo[bizid][bizOwnerID]);
		mysql_tquery(dbHandle, query, "GivePlayerBizMoney", "ii", biz_cost, BizInfo[bizid][bizOwnerID]);
	}

	Sell_Business(bizid);
	SendClientMessageEx(playerid,COLOR_GREEN,"?? ????????? ?????? ID: %i ?? ???????.",bizid);
	return 1;
}
CMD:biztypes(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_5))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	for(new i; i != sizeof(biz_types); i++)
	    SendClientMessageEx(playerid, COLOR_GREY, "%i -- {FFFFFF}%s", i, biz_types[i]);

	return 1;
}

CMD:apartcmds(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_5))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	SCM(playerid, COLOR_WHITE, "[Level 6]: {C3C3C3}/makeapart /removeapart /apartint /apartexit /gotoapart");
	return 1;
}

ALTX:makeapart("/mapart");
CMD:makeapart(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_5))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	new apart;

	if((apart = GetNextApartID()) == -1)
	    return SendErrorMessage(playerid, "?????????? ???????????? ?????????? ????? ??????????.");

	GetPlayerPos(playerid, ApartInfo[apart][aPosX], ApartInfo[apart][aPosY], ApartInfo[apart][aPosZ]);
	ApartInfo[apart][aPosInt] = GetInterior(playerid);
	ApartInfo[apart][aPosVW] = GetWorld(playerid);
	ApartInfo[apart][aApartOn] = 1;
    ApartInfo[apart][aExitVW] = apart + 1000;

	AddApartToFile(apart, ApartInfo[apart][aPosX], ApartInfo[apart][aPosY], ApartInfo[apart][aPosZ], ApartInfo[apart][aPosInt], ApartInfo[apart][aPosVW]);
    SetAparmentInterior(playerid, apart, 1);

    ApartInfo[apart][aPickUp] = CreateDynamicPickup(1314, 1, ApartInfo[apart][aPosX], ApartInfo[apart][aPosY], ApartInfo[apart][aPosZ], ApartInfo[apart][aPosVW], ApartInfo[apart][aPosInt], -1, 100.0);
	ApartInfo[apart][aCheckPoint] = CreateDynamicCP(ApartInfo[apart][aPosX], ApartInfo[apart][aPosY], ApartInfo[apart][aPosZ], 1.0, ApartInfo[apart][aPosVW], ApartInfo[apart][aPosInt], -1, 2.0);
	return 1;
}

ALTX:removeapart("/rapart");
CMD:removeapart(playerid,params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_5))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

    new id;

	if((id = GetNearApartmentOutside(playerid)) == -1)
	    return SendErrorMessage(playerid, "????? ? ???? ??? ?????? ?????????.");

	DestroyDynamicCP(ApartInfo[id][aCheckPoint]);
	DestroyDynamicPickup(ApartInfo[id][aPickUp]);

    new query[128];
	mysql_format(dbHandle, query, sizeof(query), "DELETE FROM `apartment` WHERE `id` = %i",ApartInfo[id][aID]);
	mysql_tquery(dbHandle, query, "OnApartRemove", "i", id);
	SendClientMessageEx(playerid,COLOR_GREEN,"????? ???????? ID: %i ??????.",id);
	return 1;
}

CMD:apartint(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_5))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

    new id,
		interior;

	if((id = GetNearApartmentOutside(playerid)) == -1)
	    return SendErrorMessage(playerid, "????? ? ???? ??? ?????? ?????????.");

	if(sscanf(params,"d", interior))
	{
		SendSyntaxMessage(playerid, "/apartint [ID (1-14)]");
		SCM(playerid, COLOR_WHITE, "1: Ghetto Hotel 2: Ghetto Hotel(2) 3: Hotel 4: Hotel(2) 5: ????? ???????? ?1 (?????)");
		SCM(playerid, COLOR_WHITE, "6: ????? ???????? ?2 (?????) 7: ????? ???????? ?3 (?????) 8: ????? ???????? ?4 (????????? ?????)");
		SCM(playerid, COLOR_WHITE, "9: ????? ???????? ?5 (?????) 10: ????? ???????? ?6 (??????????) 11: ????? ???????? ?7 (?????) 12: ????? ???????? ?8 (?????)");
		SCM(playerid, COLOR_WHITE, "13: ????? ???????? ?9 (?????) 14: ????? ???????? ?10 (?????) 15: ??????? (Umka) 16: ?????? 17: ?????? (2)");
		return 1;
	}

	if(interior < 1 || interior > 17)
		return SCM(playerid, COLOR_LIGHTRED, "ID ????????? ?? ????? ???? ?????? 1 ? ?????? 17.");

	SetAparmentInterior(playerid, id, interior);
	return 1;
}

CMD:apartexit(playerid, params[])
{
	new apartid;
	if(!CheckAdmin(playerid, ADMIN_LEVEL_5))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	if(sscanf(params,"d",apartid))
		return SendSyntaxMessage(playerid, "/apartexit [ID ?????? ?????????]");

	if(apartid < 0 || apartid > MAX_APART-1 || 0 == ApartInfo[apartid][aApartOn])
		return SCM(playerid, COLOR_LIGHTRED, "?????? ????????? ??? ???? ID ???.");

	GetPlayerPos(playerid, ApartInfo[apartid][aExitX], ApartInfo[apartid][aExitY], ApartInfo[apartid][aExitZ]);
	ApartInfo[apartid][aExitInt] = GetInterior(playerid);
	Save_Apart(apartid);
	SendClientMessageEx(playerid, COLOR_GREEN, "?? ???????? ???????? ?????? ????????? ID: %i.", apartid);
	return 1;
}

CMD:gotoapart(playerid, params[])
{
	new apartid;
	if(!CheckAdmin(playerid, ADMIN_LEVEL_5))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	if(sscanf(params,"d",apartid))
		return SendSyntaxMessage(playerid, "/gotoapart [ID ?????? ?????????]");

	if(apartid < 0 || apartid > MAX_APART-1 || 0 == ApartInfo[apartid][aApartOn])
		return SCM(playerid, COLOR_LIGHTRED, "?????? ????????? ??? ???? ID ???.");

	SetPlayerPosEx(playerid, ApartInfo[apartid][aPosX], ApartInfo[apartid][aPosY], ApartInfo[apartid][aPosZ]);
	SetInterior(playerid, ApartInfo[apartid][aPosInt]);
	SetWorld(playerid, ApartInfo[apartid][aPosVW]);
	SendClientMessageEx(playerid, COLOR_GREEN, "?? ????????????????? ? ?????? ????????? ID: %i.", apartid);
	return 1;
}

CMD:foodstandcmds(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return SendErrorMessage(playerid,"? ??? ???????????? ???? ??? ????????????? ???????.");
	SCM(playerid, COLOR_WHITE, "[Level 6]: {C3C3C3}/makefoodstand /removefoodstand /gotostand");
	return 1;
}

ALTX:makefoodstand("/mfoodstand");
CMD:makefoodstand(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	new standid = -1,
	    Float: x,
	    type;

	if(sscanf(params,"i", type))
		return SendSyntaxMessage(playerid, "/makefoodstand [0 - ??? ??????? | 1 - ? ????????]");

	if(type != 0 && type != 1)
	    return SendErrorMessage(playerid, "???: 0 - ??? ??????? | 1 - ? ????????.");

    for(new i; i != MAX_FOOD_STAND; i++)
	{
		if(FoodStand[i][fStandOn] == 1)
		    continue;

		standid = i;
		break;
	}

	if(standid == -1)
	    return SendErrorMessage(playerid, "?????????? ???????????? ????????? ??????? ? ????.");

	GetPlayerPos(playerid, FoodStand[standid][fPosX], FoodStand[standid][fPosY], FoodStand[standid][fPosZ]);
	x = FoodStand[standid][fPosX];
	FoodStand[standid][fPosRX] = 0.0;
	FoodStand[standid][fPosRY] = 0.0;
	FoodStand[standid][fPosRZ] = 0.0;
    FoodStand[standid][fVW] = GetWorld(playerid);
    FoodStand[standid][fInt] = GetInterior(playerid);
    FoodStand[standid][fType] = type;

	if(type == 1)
	{
		FoodStand[standid][fObject] =
			CreateDynamicObject(1340, FoodStand[standid][fPosX], FoodStand[standid][fPosY], FoodStand[standid][fPosZ], FoodStand[standid][fPosRX], FoodStand[standid][fPosRY], FoodStand[standid][fPosRZ], FoodStand[standid][fVW], FoodStand[standid][fInt], -1, 200.0);

		FoodStand[standid][fPosX] += 1.5;
	}

	FoodStand[standid][fLabel] =
		CreateDynamic3DTextLabel(""EMBED_RED"["EMBED_WHITE"??????? ? ????"EMBED_RED"]\n"EMBED_CYAN"/buyfood.", -1, FoodStand[standid][fPosX], FoodStand[standid][fPosY], FoodStand[standid][fPosZ], 2.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, FoodStand[standid][fVW], FoodStand[standid][fInt], -1, 100.0);

	FoodStand[standid][fPickUp] =
		CreateDynamicPickup(1239, 1, FoodStand[standid][fPosX], FoodStand[standid][fPosY], FoodStand[standid][fPosZ], FoodStand[standid][fVW], FoodStand[standid][fInt], -1, 100.0);

    FoodStand[standid][fStandOn] = 1;

	AddFoodStandToFile(standid, FoodStand[standid][fType], x, FoodStand[standid][fPosY], FoodStand[standid][fPosZ], FoodStand[standid][fVW], FoodStand[standid][fInt]);
	SendClientMessageEx(playerid, COLOR_GREEN,"??????? ? ???? ID: %i ???????", standid);
	return 1;
}

ALTX:removefoodstand("/rfoodstand");
CMD:removefoodstand(playerid,params[])
{
	new standid;
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	if(sscanf(params,"i", standid))
		return SendSyntaxMessage(playerid, "/removefoodstand [ID ??????]");

	if(standid < 0 || standid > MAX_FOOD_STAND-1 || FoodStand[standid][fStandOn] == 0)
	    return SendErrorMessage(playerid, "??????? ? ????? ID ?? ??????????.");

	if(FoodStand[standid][fType] == 1 && IsValidDynamicObject(FoodStand[standid][fObject]))
	{
		DestroyDynamicObject(FoodStand[standid][fObject]);
        FoodStand[standid][fObject] = INVALID_OBJECT_ID;
	}
    if(IsValidDynamic3DTextLabel(FoodStand[standid][fLabel]))
	{
		DestroyDynamic3DTextLabel(FoodStand[standid][fLabel]);
        FoodStand[standid][fLabel] = Text3D:INVALID_3DTEXT_ID;
	}

	if(IsValidDynamicPickup(FoodStand[standid][fPickUp]))
		DestroyDynamicPickup(FoodStand[standid][fPickUp]);

	new query[128];
	mysql_format(dbHandle, query, sizeof(query), "DELETE FROM `foodstand` WHERE `id` = %i", FoodStand[standid][fID]);
	mysql_tquery(dbHandle, query);

    FoodStand[standid][fPosX] = 0.0;
	FoodStand[standid][fPosY] = 0.0;
	FoodStand[standid][fPosZ] = 0.0;
	FoodStand[standid][fPosRX] = 0.0;
	FoodStand[standid][fPosRY] = 0.0;
	FoodStand[standid][fPosRZ] = 0.0;
	FoodStand[standid][fStandOn] = 0;
	FoodStand[standid][fID] = 0;

	SendClientMessageEx(playerid, COLOR_GREEN,"??????? ? ???? ID: %i ???????.",standid);
	return 1;
}

CMD:gotostand(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	new standid;
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	if(sscanf(params,"i", standid))
		return SendSyntaxMessage(playerid, "/gotostand [ID ??????]");

	if(standid < 0 || standid > MAX_FOOD_STAND-1 || FoodStand[standid][fStandOn] == 0)
	    return SendErrorMessage(playerid, "??????? ? ????? ID ?? ??????????.");

	SetPlayerPosEx(playerid, FoodStand[standid][fPosX], FoodStand[standid][fPosY], FoodStand[standid][fPosZ]);
	SetWorld(playerid, FoodStand[standid][fVW]);
	SetInterior(playerid, FoodStand[standid][fInt]);
	return 1;
}

CMD:doorcmds(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_5))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	SCM(playerid, COLOR_WHITE, "[Level 6]: {C3C3C3}/makedoor /removedoor /doorfaction /doorenter /doorexit /doorvehicle /doortext /gotodoor");
	return 1;
}

ALTX:makedoor("/mdoor");
CMD:makedoor(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_5))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	new enterid = -1;
	for(new i; i != MAX_ENTRANCE; i++)
	{
	    if(EntranceInfo[i][entranceOn] != 0)
	        continue;

		enterid = i;
		break;
	}

	if(enterid == -1)
	    return SendErrorMessage(playerid, "?????????? ???????????? ?????????? ??????/???????.");

	GetPlayerPos(playerid, EntranceInfo[enterid][eEnterX], EntranceInfo[enterid][eEnterY], EntranceInfo[enterid][eEnterZ]);
	GetPlayerFacingAngle(playerid, EntranceInfo[enterid][eEnterA]);

    EntranceInfo[enterid][eEnterInt] = GetInterior(playerid);
    EntranceInfo[enterid][eEnterVW] = GetWorld(playerid);

    GetPlayerPos(playerid, EntranceInfo[enterid][eExitX], EntranceInfo[enterid][eExitY], EntranceInfo[enterid][eExitZ]);
	GetPlayerFacingAngle(playerid, EntranceInfo[enterid][eExitA]);

    EntranceInfo[enterid][eExitInt] = GetInterior(playerid);
    EntranceInfo[enterid][eExitVW] = GetWorld(playerid);

    EntranceInfo[enterid][eEnterPickup] =
		CreateDynamicPickup(1239, 1, EntranceInfo[enterid][eEnterX], EntranceInfo[enterid][eEnterY], EntranceInfo[enterid][eEnterZ], EntranceInfo[enterid][eEnterVW], EntranceInfo[enterid][eEnterInt], -1, 100.0);

	EntranceInfo[enterid][eExitPickup] =
		CreateDynamicPickup(1239, 1, EntranceInfo[enterid][eExitX], EntranceInfo[enterid][eExitY], EntranceInfo[enterid][eExitZ], EntranceInfo[enterid][eExitVW], EntranceInfo[enterid][eExitInt], -1, 100.0);

	EntranceInfo[enterid][entranceOn] = 1;

    new query[156];
	mysql_format(dbHandle, query, sizeof(query), "INSERT INTO `entrance` (`enterx`,`entery`,`enterz`,`entera`,`entervw`,`enterint`) VALUES ('%f','%f','%f','%f',%i,%i)", EntranceInfo[enterid][eEnterX], EntranceInfo[enterid][eEnterY], EntranceInfo[enterid][eEnterZ], EntranceInfo[enterid][eEnterA], EntranceInfo[enterid][eEnterVW], EntranceInfo[enterid][eEnterInt]);
	mysql_tquery(dbHandle, query, "OnInsertEntrance", "i", enterid);

    SendClientMessageEx(playerid, COLOR_GREEN, "????/????? ??? ID: %i ??????. ?????????? /doorcmds.", enterid);
	return 1;
}

forward OnInsertEntrance(id);
public OnInsertEntrance(id)
{
	EntranceInfo[id][eID] = cache_insert_id();
	return 1;
}

ALTX:removedoor("/rdoor");
CMD:removedoor(playerid,params[])
{
	new enterid;

	if(!CheckAdmin(playerid, ADMIN_LEVEL_5))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	if(sscanf(params,"d", enterid))
		return SendSyntaxMessage(playerid, "/removedoor [ID ?????/??????]");

	if(!EntranceInfo[enterid][entranceOn])
		return SCM(playerid, COLOR_LIGHTRED, "?????/?????? ??? ???? ID ?? ??????????.");

    if (IsValidDynamicPickup(EntranceInfo[enterid][eEnterPickup]))
		DestroyDynamicPickup(EntranceInfo[enterid][eEnterPickup]);

    if (IsValidDynamicPickup(EntranceInfo[enterid][eExitPickup]))
		DestroyDynamicPickup(EntranceInfo[enterid][eExitPickup]);

    EntranceInfo[enterid][entranceOn] = 0;

	new query[128];
	mysql_format(dbHandle, query, sizeof(query), "DELETE FROM `entrance` WHERE `id`=%i", EntranceInfo[enterid][eID]);
	mysql_tquery(dbHandle, query);

	SendClientMessageEx(playerid,COLOR_GREEN,"????/????? ??? ID: %i ??????? ??????.", enterid);
	return 1;
}

CMD:doorfaction(playerid, params[])
{
	new enterid,
	    faction;

	if(!CheckAdmin(playerid, ADMIN_LEVEL_5))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	if(sscanf(params,"dI(0)", enterid, faction))
		return SendSyntaxMessage(playerid, "/doorfaction [ID ?????/??????] [??????? (/factions) | 0 - ??? ???????]");

    if(faction < 0 || faction > MAX_FACTIONS-1 || (faction != 0 && !Factions[faction][fON]))
		return SCM(playerid, COLOR_LIGHTRED, "??????? ??? ????? ID ?? ??????????.");

	if(!EntranceInfo[enterid][entranceOn])
		return SCM(playerid, COLOR_LIGHTRED, "?????/?????? ??? ???? ID ?? ??????????.");

    EntranceInfo[enterid][eFaction] = faction;

    new query[128];
	mysql_format(dbHandle, query, sizeof(query), "UPDATE `entrance` SET `faction`=%i WHERE `id`=%i", EntranceInfo[enterid][eFaction], EntranceInfo[enterid][eID]);
	mysql_tquery(dbHandle, query);

	SendClientMessageEx(playerid,COLOR_GREEN,"?? ???????? ??????? ?????/?????? ID: %i.", enterid);
	return 1;
}

CMD:doorvehicle(playerid, params[])
{
	new enterid,
	    vehicle;

	if(!CheckAdmin(playerid, ADMIN_LEVEL_5))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	if(sscanf(params,"dd", enterid, vehicle))
		return SendSyntaxMessage(playerid, "/doorfaction [ID ?????/??????] [?????? ??? ???? 0-??????/1-??????]");

    if(vehicle != 0 && vehicle != 1)
		return SCM(playerid, COLOR_LIGHTRED, "?????? ??? ???? 0-??????/1-??????.");

	if(!EntranceInfo[enterid][entranceOn])
		return SCM(playerid, COLOR_LIGHTRED, "?????/?????? ??? ???? ID ?? ??????????.");

    EntranceInfo[enterid][eVehicle] = vehicle;

    new query[128];
	mysql_format(dbHandle, query, sizeof(query), "UPDATE `entrance` SET `vehicle`=%i WHERE `id`=%i", EntranceInfo[enterid][eVehicle], EntranceInfo[enterid][eID]);
	mysql_tquery(dbHandle, query);

	SendClientMessageEx(playerid,COLOR_GREEN,"?? ???????? ?????? ??? ????(%i) ?????/?????? ID: %i.", vehicle, enterid);
	return 1;
}

CMD:doortext(playerid, params[])
{
	new enterid,
	    text[128];

	if(!CheckAdmin(playerid, ADMIN_LEVEL_5))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	if(sscanf(params,"ds[128]", enterid, text))
		return SendSyntaxMessage(playerid, "/doorexit [ID ?????/??????] [text]");

	if(!EntranceInfo[enterid][entranceOn])
		return SCM(playerid, COLOR_LIGHTRED, "?????/?????? ??? ???? ID ?? ??????????.");

	if(strlen(text) < 1 || strlen(text) >= 128)
	    return SendErrorMessage(playerid, "????? ?????? 1-127.");

	format(EntranceInfo[enterid][eText], 128, "%s", text);

    new query[128 + 128];
	mysql_format(dbHandle, query, sizeof(query), "UPDATE `entrance` SET `text`='%e' WHERE `id`=%i", EntranceInfo[enterid][eText], EntranceInfo[enterid][eID]);
	mysql_tquery(dbHandle, query);

    SendClientMessageEx(playerid,COLOR_GREEN,"?? ???????? ?????? ?????/?????? ID: %i (%s).", enterid, text);
	return 1;
}

CMD:doorenter(playerid, params[])
{
	new enterid;

	if(!CheckAdmin(playerid, ADMIN_LEVEL_5))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	if(sscanf(params,"d", enterid))
		return SendSyntaxMessage(playerid, "/doorenter [ID ?????/??????]");

	if(!EntranceInfo[enterid][entranceOn])
		return SCM(playerid, COLOR_LIGHTRED, "?????/?????? ??? ???? ID ?? ??????????.");

	GetPlayerPos(playerid, EntranceInfo[enterid][eEnterX], EntranceInfo[enterid][eEnterY], EntranceInfo[enterid][eEnterZ]);
	GetPlayerFacingAngle(playerid, EntranceInfo[enterid][eEnterA]);

    EntranceInfo[enterid][eEnterInt] = GetInterior(playerid);
    EntranceInfo[enterid][eEnterVW] = GetWorld(playerid);

	if (IsValidDynamicPickup(EntranceInfo[enterid][eEnterPickup]))
		DestroyDynamicPickup(EntranceInfo[enterid][eEnterPickup]);

	EntranceInfo[enterid][eEnterPickup] =
		CreateDynamicPickup(1239, 1, EntranceInfo[enterid][eEnterX], EntranceInfo[enterid][eEnterY], EntranceInfo[enterid][eEnterZ], EntranceInfo[enterid][eEnterVW], EntranceInfo[enterid][eEnterInt], -1, 100.0);

    new query[156];
	mysql_format(dbHandle, query, sizeof(query), "UPDATE `entrance` SET `enterx`='%f',`entery`='%f',`enterz`='%f',`entera`='%f',`entervw`='%i',`enterint`='%i' WHERE `id`=%i", EntranceInfo[enterid][eEnterX], EntranceInfo[enterid][eEnterY], EntranceInfo[enterid][eEnterZ], EntranceInfo[enterid][eEnterA], EntranceInfo[enterid][eEnterVW], EntranceInfo[enterid][eEnterInt], EntranceInfo[enterid][eID]);
	mysql_tquery(dbHandle, query);

	SendClientMessageEx(playerid,COLOR_GREEN,"?? ???????? ??????? ????? ID: %i.", enterid);
	return 1;
}

CMD:doorexit(playerid, params[])
{
	new enterid;

	if(!CheckAdmin(playerid, ADMIN_LEVEL_5))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	if(sscanf(params,"d", enterid))
		return SendSyntaxMessage(playerid, "/doorexit [ID ?????/??????]");

	if(!EntranceInfo[enterid][entranceOn])
		return SCM(playerid, COLOR_LIGHTRED, "?????/?????? ??? ???? ID ?? ??????????.");

    GetPlayerPos(playerid, EntranceInfo[enterid][eExitX], EntranceInfo[enterid][eExitY], EntranceInfo[enterid][eExitZ]);
	GetPlayerFacingAngle(playerid, EntranceInfo[enterid][eExitA]);

    EntranceInfo[enterid][eExitInt] = GetInterior(playerid);
    EntranceInfo[enterid][eExitVW] = GetWorld(playerid);

    if (IsValidDynamicPickup(EntranceInfo[enterid][eExitPickup]))
		DestroyDynamicPickup(EntranceInfo[enterid][eExitPickup]);

    EntranceInfo[enterid][eExitPickup] =
		CreateDynamicPickup(1239, 1, EntranceInfo[enterid][eExitX], EntranceInfo[enterid][eExitY], EntranceInfo[enterid][eExitZ], EntranceInfo[enterid][eExitVW], EntranceInfo[enterid][eExitInt], -1, 100.0);

    new query[156];
	mysql_format(dbHandle, query, sizeof(query), "UPDATE `entrance` SET `exitx`=%f,`exity`=%f,`exitz`=%f,`exita`=%f,`exitvw`=%i,`exitint`=%i WHERE `id`=%i", EntranceInfo[enterid][eExitX], EntranceInfo[enterid][eExitY], EntranceInfo[enterid][eExitZ], EntranceInfo[enterid][eExitA], EntranceInfo[enterid][eExitVW], EntranceInfo[enterid][eExitInt], EntranceInfo[enterid][eID]);
	mysql_tquery(dbHandle, query);

    SendClientMessageEx(playerid,COLOR_GREEN,"?? ???????? ??????? ?????? ID: %i.", enterid);
	return 1;
}

CMD:gotodoor(playerid, params[])
{
	new enterid;
	if(!CheckAdmin(playerid, ADMIN_LEVEL_5))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	if(sscanf(params,"d", enterid))
		return SendSyntaxMessage(playerid, "/gotodoor [ID ?????]");

	if(!EntranceInfo[enterid][entranceOn])
		return SCM(playerid, COLOR_LIGHTRED, "?????/?????? ??? ???? ID ?? ??????????.");

	SetInterior(playerid, EntranceInfo[enterid][eEnterInt]);
	SetWorld(playerid, EntranceInfo[enterid][eEnterVW]);
	SetPlayerPosEx(playerid, EntranceInfo[enterid][eEnterX], EntranceInfo[enterid][eEnterY], EntranceInfo[enterid][eEnterZ]);
	return 1;
}

CMD:labelcmds(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return SendErrorMessage(playerid,"? ??? ???????????? ???? ??? ????????????? ???????.");
	SCM(playerid, COLOR_WHITE, "[Level 6]: {C3C3C3}/makelabel /removelabel /editlabel /gotolabel");
	return 1;
}

CMD:editlabel(playerid, params[])
{
	new type, text[128];
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	new labelid = -1;
    for(new i = 0; i != MAX_LABELS; i++)
	{
	    if(LabelsInfo[i][tLabelOn] != 1 || !PlayerToPoint(3, playerid, LabelsInfo[i][tPosX], LabelsInfo[i][tPosY], LabelsInfo[i][tPosZ]) || LabelsInfo[i][tVW] != GetWorld(playerid) || LabelsInfo[i][tInt] != GetInterior(playerid))
			continue;

		labelid = i;
		break;
	}

	if(labelid == -1)
	    return SendErrorMessage(playerid, "?? ?????? ?????????? ????? ???????.");

	if(sscanf(params,"ds[128]",type,text))
		return SendSyntaxMessage(playerid, "/editlabel [???(1 - ?????, 2 - ???????)] [????????]");

	if(type < 1 || type > 2)
	    return SendSyntaxMessage(playerid, "/editlabel [???(1 - ?????, 2 - ???????)] [????????]");

	if(type == 1)
	{
	    format(LabelsInfo[labelid][tText], 128, "%s", text);

		if(LabelsInfo[labelid][tGameText] == 0 && IsValidDynamic3DTextLabel(LabelsInfo[labelid][tLabel]))
		{
		    place_color(LabelsInfo[labelid][tText]);
			UpdateDynamic3DTextLabelText(LabelsInfo[labelid][tLabel], 0xFFFFFFFF, LabelsInfo[labelid][tText]);
		}

        new query[156];
	    mysql_format(dbHandle, query, sizeof(query), "UPDATE `labels` SET `labeltext` = '%e' WHERE `id` = %i", LabelsInfo[labelid][tText], LabelsInfo[labelid][tID]);
		mysql_tquery(dbHandle, query);
		return 1;
	}
	if(type == 2)
	{
	    GetPlayerPos(playerid, LabelsInfo[labelid][tPosX], LabelsInfo[labelid][tPosY], LabelsInfo[labelid][tPosZ]);
		LabelsInfo[labelid][tVW] = GetWorld(playerid);
		LabelsInfo[labelid][tInt] = GetInterior(playerid);

	    new query[156];
	    mysql_format(dbHandle, query, sizeof(query), "UPDATE `labels` SET `posx`='%f',`posy`='%f',`posz`='%f',`interior`=%i,`vw`=%i WHERE `id` = %i", LabelsInfo[labelid][tPosX], LabelsInfo[labelid][tPosY], LabelsInfo[labelid][tPosZ],  LabelsInfo[labelid][tInt], LabelsInfo[labelid][tVW], LabelsInfo[labelid][tID]);
		mysql_tquery(dbHandle, query);

		if(IsValidDynamic3DTextLabel(LabelsInfo[labelid][tLabel]))
		{
			DestroyDynamic3DTextLabel(LabelsInfo[labelid][tLabel]);
	        LabelsInfo[labelid][tLabel] = Text3D:INVALID_3DTEXT_ID;
		}

		if(IsValidDynamicPickup(LabelsInfo[labelid][tPickUp]))
	    	DestroyDynamicPickup(LabelsInfo[labelid][tPickUp]);

        if(LabelsInfo[labelid][tGameText] == 0)
			LabelsInfo[labelid][tLabel] = CreateDynamic3DTextLabel(LabelsInfo[labelid][tText], 0xFFFFFFFF, LabelsInfo[labelid][tPosX], LabelsInfo[labelid][tPosY], LabelsInfo[labelid][tPosZ], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, LabelsInfo[labelid][tVW], LabelsInfo[labelid][tInt], -1, 100.0);

		LabelsInfo[labelid][tPickUp] =
			CreateDynamicPickup(LabelsInfo[labelid][tPickupModel], 1, LabelsInfo[labelid][tPosX], LabelsInfo[labelid][tPosY], LabelsInfo[labelid][tPosZ], LabelsInfo[labelid][tVW], LabelsInfo[labelid][tInt], -1, 100.0);
	    return 1;
	}
	return 1;
}

ALTX:makelabel("/mlabel");
CMD:makelabel(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	new model,
	    //color,
	    text[128],
	    gametext;

	if(sscanf(params,"iis[128]", model, gametext, text))
		return SendSyntaxMessage(playerid, "/makelabel [?????? ??????] [0 - 3dtext | 1 - gametext] [text] ?????? ?????: ~FFFF00~ ????? ??????: ~n~");

	if(gametext != 1 && gametext != 0)
	    return SendErrorMessage(playerid, "???: [0 - 3dtext | 1 - gametext]");

	if(strlen(text) > 127)
	    return SendErrorMessage(playerid, "???????????? ?????????? ???????? ? ?????? 127.");

	new labelid = -1;
	for(new i; i != MAX_LABELS; i++)
	{
	    if(LabelsInfo[i][tLabelOn] != 0)
	        continue;

		labelid = i;
		break;
	}

	if(labelid == -1)
	    return SendErrorMessage(playerid, "?????????? ???????????? ?????????? ??????? ? ?????????.");

	/*switch(color)
	{
		case 1: color = 0xFFFFFFFF;
		case 2: color = 0xFF0000FF;
		case 3: color = 0xFFFF00FF;
		case 4: color = 0x808000FF;
		case 5: color = 0x0000FFFF;
		case 6: color = 0x000000FF;
		case 7: color = 0xFF8000FF;
		default: color = 0xFFFFFFFF;
	}*/
	GetPlayerPos(playerid, LabelsInfo[labelid][tPosX], LabelsInfo[labelid][tPosY], LabelsInfo[labelid][tPosZ]);
	LabelsInfo[labelid][tVW] = GetWorld(playerid);
	LabelsInfo[labelid][tInt] = GetInterior(playerid);
	//LabelsInfo[labelid][tColor] = color;
	LabelsInfo[labelid][tGameText] = gametext;
	LabelsInfo[labelid][tPickupModel] = model;
	LabelsInfo[labelid][tLabelOn] = 1;
 	format(LabelsInfo[labelid][tText], 128, "%s", text);

	if(gametext == 0)
	{
	    place_color(LabelsInfo[labelid][tText]);
		LabelsInfo[labelid][tLabel] = CreateDynamic3DTextLabel(LabelsInfo[labelid][tText], 0xFFFFFFFF, LabelsInfo[labelid][tPosX], LabelsInfo[labelid][tPosY], LabelsInfo[labelid][tPosZ], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, LabelsInfo[labelid][tVW], LabelsInfo[labelid][tInt], -1, 100.0);
	}
	else
	    LabelsInfo[labelid][tLabel] = Text3D:INVALID_3DTEXT_ID;

	LabelsInfo[labelid][tPickUp] =
		CreateDynamicPickup(model, 1, LabelsInfo[labelid][tPosX], LabelsInfo[labelid][tPosY], LabelsInfo[labelid][tPosZ], LabelsInfo[labelid][tVW], LabelsInfo[labelid][tInt], -1, 100.0);

    AddLabelToFile(labelid, LabelsInfo[labelid][tText], GetWorld(playerid), 1, gametext, LabelsInfo[labelid][tPosX], LabelsInfo[labelid][tPosY], LabelsInfo[labelid][tPosZ], model, GetInterior(playerid));

	SendClientMessageEx(playerid,COLOR_GREEN,"????? ??????? ? ??????? ID: %i ??????? ???????. ?????: \"%s\". ?????? ??????: %i.",labelid, text, model);
	return 1;
}

ALTX:removelabel("/rlabel");
CMD:removelabel(playerid,params[])
{
    new labelid;
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	if(sscanf(params,"d",labelid))
		return SendSyntaxMessage(playerid, "/removelabel [ID ???????]");

    if(labelid < 0 || labelid > MAX_LABELS || 0 == LabelsInfo[labelid][tLabelOn])
		return SCM(playerid, COLOR_LIGHTRED, "??????? ??? ???? ID ?? ??????????.");

	if(IsValidDynamic3DTextLabel(LabelsInfo[labelid][tLabel]))
	{
		DestroyDynamic3DTextLabel(LabelsInfo[labelid][tLabel]);
        LabelsInfo[labelid][tLabel] = Text3D:INVALID_3DTEXT_ID;
	}

	if(IsValidDynamicPickup(LabelsInfo[labelid][tPickUp]))
    	DestroyDynamicPickup(LabelsInfo[labelid][tPickUp]);

	new query[128];
    mysql_format(dbHandle, query, sizeof(query), "DELETE FROM `labels` WHERE `id` = %i", LabelsInfo[labelid][tID]);
	mysql_tquery(dbHandle, query);

    LabelsInfo[labelid][tID] = 0;
    LabelsInfo[labelid][tLabelOn] = 0;

	SendClientMessageEx(playerid,COLOR_GREEN,"??????? ID: %i ???????.", labelid);
	return 1;
}

CMD:gotolabel(playerid, params[])
{
	new labelid;
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	if(sscanf(params,"d",labelid))
		return SendSyntaxMessage(playerid, "/gotolabel [ID ???????]");

    if(labelid < 0 || labelid > MAX_LABELS-1 || 0 == LabelsInfo[labelid][tLabelOn])
		return SCM(playerid, COLOR_LIGHTRED, "??????? ??? ???? ID ?? ??????????.");

	SetPlayerPosEx(playerid, LabelsInfo[labelid][tPosX], LabelsInfo[labelid][tPosY], LabelsInfo[labelid][tPosZ]);
	SetWorld(playerid, LabelsInfo[labelid][tVW]);
	SetInterior(playerid, LabelsInfo[labelid][tInt]);
	return 1;
}

CMD:atmcmds(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return SendErrorMessage(playerid,"? ??? ???????????? ???? ??? ????????????? ???????.");
	SCM(playerid, COLOR_WHITE, "[Level 6]: {C3C3C3}/makeatm /removeatm /editatm /gotoatm");
	return 1;
}

ALTX:makeatm("/matm");
CMD:makeatm(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	new id = -1;

	for(new i; i != MAX_ATMS; i++)
	{
		if(ATMInfo[i][atmID] != 0)
		    continue;

		id = i;
		break;
	}

	if(id == -1)
	    return SendErrorMessage(playerid, "?????????? ???????????? ?????????? ??????????.");

	new Float: x, Float: y, Float: z, Float: angle;
	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, angle);
	x += 1.0 * floatsin(-angle, degrees);
	y += 1.0 * floatcos(-angle, degrees);

	ATMInfo[id][atmPosX] = x;
	ATMInfo[id][atmPosY] = y;
	ATMInfo[id][atmPosZ] = z - 0.4;
	ATMInfo[id][atmPosRZ] = angle;

	ATMInfo[id][atmInt] = GetInterior(playerid);
	ATMInfo[id][atmVW] = GetWorld(playerid);

	ATMInfo[id][atmObject] = CreateDynamicObject(2942, ATMInfo[id][atmPosX], ATMInfo[id][atmPosY], ATMInfo[id][atmPosZ], 0.0, 0.0, ATMInfo[id][atmPosRZ], ATMInfo[id][atmVW], ATMInfo[id][atmInt]);
	EditDynamicObject(playerid, ATMInfo[id][atmObject]);
	SetPVarInt(playerid, #edit_atm, id + 1);

	AddATMToFile(id,  ATMInfo[id][atmPosX], ATMInfo[id][atmPosY], ATMInfo[id][atmPosZ], ATMInfo[id][atmPosRZ], ATMInfo[id][atmInt], ATMInfo[id][atmVW]);
	SendClientMessageEx(playerid,COLOR_GREEN,"???????? ID: %i ??????.", id);
	return 1;
}

ALTX:removeatm("/ratm");
CMD:removeatm(playerid,params[])
{
    if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	new id;
	if(sscanf(params,"d", id))
		return SendSyntaxMessage(playerid, "/removeatm [ID ?????????]");

	if(id < 0 || id > MAX_ATMS || 0 == ATMInfo[id][atmID])
		return SCM(playerid, COLOR_LIGHTRED, "????????? ??? ???? ID ?? ??????????.");

	new query[128];
	mysql_format(dbHandle, query, sizeof(query), "DELETE FROM `atms` WHERE `id` = %i", ATMInfo[id][atmID]);
	mysql_tquery(dbHandle, query);

	SendClientMessageEx(playerid,COLOR_GREEN,"???????? ID: %i ??????.", id);

	ATMInfo[id][atmID] = 0;
	if(IsValidDynamicObject(ATMInfo[id][atmObject]))
		DestroyDynamicObject(ATMInfo[id][atmObject]);
	return 1;
}

CMD:editatm(playerid,params[])
{
    if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	new id;
	if(sscanf(params,"d", id))
		return SendSyntaxMessage(playerid, "/editatm [ID ?????????]");

	if(id < 0 || id > MAX_ATMS || 0 == ATMInfo[id][atmID])
		return SCM(playerid, COLOR_LIGHTRED, "????????? ??? ???? ID ?? ??????????.");

    if(ATM_Nearest(playerid) != id)
	    return SendErrorMessage(playerid, "????? ? ???? ??? ????????? ID: %i.", id);

	EditDynamicObject(playerid, ATMInfo[id][atmObject]);
	SetPVarInt(playerid, #edit_atm, id + 1);
	return 1;
}

CMD:gotoatm(playerid,params[])
{
    if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	new id;
	if(sscanf(params,"d", id))
		return SendSyntaxMessage(playerid, "/gotoatm [ID ?????????]");

	if(id < 0 || id > MAX_ATMS || 0 == ATMInfo[id][atmID])
		return SCM(playerid, COLOR_LIGHTRED, "????????? ??? ???? ID ?? ??????????.");

	SetPlayerPosEx(playerid, ATMInfo[id][atmPosX], ATMInfo[id][atmPosY], ATMInfo[id][atmPosZ]);
	SetWorld(playerid, ATMInfo[id][atmVW]);
	SetInterior(playerid, ATMInfo[id][atmInt]);
	return 1;
}

CMD:checkcars(playerid, params[])
{
	new userid;
	if(!CheckAdmin(playerid, ADMIN_LEVEL_1))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	if(sscanf(params,"u", userid))
		return SendSyntaxMessage(playerid, "/checkcars [playerid/PartOfName]");

	if(!IsPlayerLogged(userid))
		return SendNotConnected(playerid);

	new query[128];
    mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `cars` WHERE `owner` = '%i'", PlayerInfo[userid][pID]);
	mysql_tquery(dbHandle, query, "ShowCarsForPlayer", "ii", playerid, userid);
	return 1;
}

//==========CCTV
CMD:cctvcmds(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	SCM(playerid, COLOR_WHITE, "[Level 6]: {C3C3C3}/makecctv /removecctv /editcctv /cctvinfo /showcctvs");
	return 1;
}

ALTX:makecctv("/mcctv");
CMD:makecctv(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	if(isnull(params) || strlen(params) > 31)
		return SendSyntaxMessage(playerid, "/makecctv [???????? ??????]");

	new id = -1;

	for(new i; i != MAX_CCTV; i++)
	{
	    if(CCTVInfo[i][tvObjectOn] != 0)
			continue;

		id = i;
		break;
	}

	if(id == -1)
	    return SendErrorMessage(playerid, "?????????? ???????????? ?????????? ????? CCTV.");

    format(CCTVInfo[id][tvName], 32, "%s", params);
	GetPlayerPos(playerid, CCTVInfo[id][tvPosX], CCTVInfo[id][tvPosY], CCTVInfo[id][tvPosZ]);
	CCTVInfo[id][tvPosRX] = 0.0;
	CCTVInfo[id][tvPosRY] = 0.0;
	CCTVInfo[id][tvPosRZ] = 0.0;
	CCTVInfo[id][tvInt] = GetInterior(playerid);
	CCTVInfo[id][tvVW] = GetWorld(playerid);

	CCTVInfo[id][tvObject] =
		CreateDynamicObject(1886, CCTVInfo[id][tvPosX], CCTVInfo[id][tvPosY], CCTVInfo[id][tvPosZ], 0.0, 0.0, 0.0, CCTVInfo[id][tvVW], CCTVInfo[id][tvInt]);

	CCTVInfo[id][tvObjectOn] = 1;

	AddCameraToFile(id, CCTVInfo[id][tvInt], CCTVInfo[id][tvVW], CCTVInfo[id][tvPosX], CCTVInfo[id][tvPosX], CCTVInfo[id][tvPosX], params);
	SendClientMessageEx(playerid, COLOR_GREEN, "?????? (%s) ID: %i ???????.", CCTVInfo[id][tvName], id);
	return 1;
}

ALTX:removecctv("/rcctv");
CMD:removecctv(playerid,params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

    new id;
	if(sscanf(params,"i", id))
		return SendSyntaxMessage(playerid, "/removecctv [ID ??????]");

	if(id < 0 || id >= MAX_CCTV || CCTVInfo[id][tvObjectOn] != 1)
	    return SendErrorMessage(playerid, "?????? ??? ????? ID ?? ??????????.");

    new query[128];
	mysql_format(dbHandle, query, sizeof(query), "DELETE FROM `cctvs` WHERE `id` = %i", CCTVInfo[id][tvID]);
	mysql_tquery(dbHandle, query);

	if(IsValidDynamicObject(CCTVInfo[id][tvObject]))
    	DestroyDynamicObject(CCTVInfo[id][tvObject]);

	CCTVInfo[id][tvID] = 0;
	CCTVInfo[id][tvObjectOn] = 0;

	SendClientMessageEx(playerid,COLOR_GREEN,"?? ??????? ?????? ID %i.", id);
	return 1;
}
CMD:editcctv(playerid,params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	new id;
	if(sscanf(params,"d", id)) return SendSyntaxMessage(playerid, "/editcctv [ID ??????]");

	if(GetPVarInt(playerid, #edit_cctv) != 0)
		return SCM(playerid, COLOR_LIGHTRED, "?? ??? ???????????? ??????.");

    if(id < 0 || id >= MAX_CCTV || CCTVInfo[id][tvObjectOn] != 1 || !IsValidDynamicObject(CCTVInfo[id][tvObject]))
	    return SendErrorMessage(playerid, "?????? ??? ????? ID ?? ??????????.");

	SetPVarInt(playerid, #edit_cctv, id + 1);
	EditDynamicObject(playerid, CCTVInfo[id][tvObject]);
	return 1;
}

CMD:cctvinfo(playerid,params[])
{
    if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

    new id, name[32];
	if(sscanf(params,"ds[32]", id, name))
		return SendSyntaxMessage(playerid, "/cctvinfo [ID ??????] [????????]");

	if(id < 0 || id >= MAX_CCTV || CCTVInfo[id][tvObjectOn] != 1 || !IsValidDynamicObject(CCTVInfo[id][tvObject]))
	    return SendErrorMessage(playerid, "?????? ??? ????? ID ?? ??????????.");

	if(strlen(name) < 1 || strlen(name) > 32)
	    return SendErrorMessage(playerid, "?????????? ???????? ? ????????: 1-32.");

	format(CCTVInfo[id][tvName], 128, "%s", name);

	new query[128];
	mysql_format(dbHandle, query, sizeof(query), "UPDATE `cctvs` SET `info` = '%e' WHERE `id` = %i", name, CCTVInfo[id][tvID]);
	mysql_tquery(dbHandle, query);

	SendClientMessageEx(playerid, COLOR_INFO, "?? ???????? ???????? (%s) ?? ?????? ID %i.", name, id);
	return 1;
}

CMD:showcctvs(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	for(new i = 0; i < MAX_CCTV; i++)
	{
		if(CCTVInfo[i][tvObjectOn] == 0)
		    continue;

		SendClientMessageEx(playerid, -1, "[?????? %i]: %s", i, CCTVInfo[i][tvName]);
	}
	return 1;
}

CMD:gatecmds(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return SendErrorMessage(playerid,"? ??? ???????????? ???? ??? ????????????? ???????.");
	SCM(playerid, COLOR_WHITE, "[Level 6]: {C3C3C3}/makegate /removegate /editgate /gotogate");
	return 1;
}

ALTX:makegate("/mgate");
CMD:makegate(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	new modelid,
		faction;

	if(sscanf(params,"ii", modelid, faction))
		return SendSyntaxMessage(playerid, "/makegate [ID ???????] [ID ???????(/factions)]");

	if(faction < 0 || faction > MAX_FACTIONS-1)
	    return SendErrorMessage(playerid, "???????? ?? ???????.");

	new gate = -1;
	for(new i; i != MAX_GATES; i++)
	{
	    if(Gates[i][gateID] != 0 || Gates[i][gateObjectOn] != 0)
	        continue;

		gate = i;
		break;
	}

	if(gate == -1)
	    return SendErrorMessage(playerid, "?????????? ???????????? ?????????? ????. ????????.");

	GetPlayerPos(playerid, Gates[gate][gatePosX], Gates[gate][gatePosY], Gates[gate][gatePosZ]);
    GetPlayerPos(playerid, Gates[gate][gateMoveX], Gates[gate][gateMoveY], Gates[gate][gateMoveZ]);

	Gates[gate][gateObject] =
		CreateDynamicObject(modelid, Gates[gate][gatePosX], Gates[gate][gatePosY], Gates[gate][gatePosZ], 0.0, 0.0, 0.0, GetWorld(playerid), GetInterior(playerid), -1, 200.0);

	if(Gates[gate][gateObject] == INVALID_OBJECT_ID)
	    return SendErrorMessage(playerid, "?????? ?? ??? ??????.");

    Gates[gate][gateSpeed] = 0.5;
    Gates[gate][gateRadius] = 5.0;
	Gates[gate][gateModel] = modelid;
	Gates[gate][gateMoveRX] = 0.0;
	Gates[gate][gateMoveRY] = 0.0;
	Gates[gate][gateMoveRZ] = 0.0;
	Gates[gate][gatePosRX] = 0.0;
	Gates[gate][gatePosRY] = 0.0;
	Gates[gate][gatePosRZ] = 0.0;
	Gates[gate][gateInt] = GetInterior(playerid);
	Gates[gate][gateVW] = GetWorld(playerid);

	Gates[gate][gateSound] = 0;
	Gates[gate][gateFaction] = faction;
	Gates[gate][gateOpened] = 0;

	Gates[gate][gateObjectOn] = 1;

	AddGateToFile(gate, modelid, faction, GetInterior(playerid), GetWorld(playerid), Gates[gate][gatePosX], Gates[gate][gatePosY], Gates[gate][gatePosZ]);
	SendClientMessageEx(playerid,COLOR_GREEN,"????. ?????? ID: %i ??????.", gate);
	return 1;
}

ALTX:removegate("/rgate");
CMD:removegate(playerid,params[])
{
	new objectid;
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	if(sscanf(params,"d",objectid))
		return SendSyntaxMessage(playerid, "/removegate [ID ????. ???????]");

	if(0 == Gates[objectid][gateObjectOn])
	    return SCM(playerid, COLOR_LIGHTRED, "????. ??????? ??? ???? ID ?? ?????????.");

	new query[128];
	mysql_format(dbHandle, query, sizeof(query), "DELETE FROM `gates` WHERE `id` = %i", Gates[objectid][gateID]);
	mysql_tquery(dbHandle, query, "OnGateRemove", "i", objectid);

    if(IsValidDynamicObject(Gates[objectid][gateObject]))
		DestroyDynamicObject(Gates[objectid][gateObject]);

	Gates[objectid][gatePosX] = 0.0;
	Gates[objectid][gatePosY] = 0.0;
	Gates[objectid][gatePosZ] = 0.0;
	Gates[objectid][gatePosRX] = 0.0;
	Gates[objectid][gatePosRY] = 0.0;
	Gates[objectid][gatePosRZ] = 0.0;
	Gates[objectid][gateSpeed] = 0.0;
	Gates[objectid][gateRadius] = 0.0;
	Gates[objectid][gateMoveX] = 0.0;
	Gates[objectid][gateMoveY] = 0.0;
	Gates[objectid][gateMoveZ] = 0.0;
	Gates[objectid][gateMoveRX] = 0.0;
	Gates[objectid][gateMoveRY] = 0.0;
	Gates[objectid][gateMoveRZ] = 0.0;
	Gates[objectid][gateObjectOn] = 0;
	Gates[objectid][gateInt] = 0;
	Gates[objectid][gateFaction] = 0;
	Gates[objectid][gateOpened] = 0;
	Gates[objectid][gateVW] = 0;
	Gates[objectid][gateID] = 0;

	SendClientMessageEx(playerid,COLOR_GREEN,"?? ??????? ????. ?????? ID: %i.",objectid);
	return 1;
}

CMD:gotogate(playerid,params[])
{
	new gate;

	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	if(sscanf(params,"i", gate))
		return SendSyntaxMessage(playerid, "/gotogate [ID ????. ???????]");

	if(gate < 0 || gate > MAX_GATES-1 || !Gates[gate][gateObjectOn])
		return SCM(playerid, COLOR_LIGHTRED, "????. ??????? ??? ???? ID ?? ?????????.");

    SetPlayerPosEx(playerid, Gates[gate][gatePosX], Gates[gate][gatePosY], Gates[gate][gatePosZ]);
	SetWorld(playerid, Gates[gate][gateVW]);
	SetInterior(playerid, Gates[gate][gateInt]);
	return 1;
}

CMD:editgate(playerid,params[])
{
	new gate,
		parametrs[12],
		arg[12];

	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	if(sscanf(params,"ds[12]S()[12]", gate, parametrs, arg))
	{
		SendSyntaxMessage(playerid, "/editgate [ID ????. ???????] [????????] [????????]");
		return SendClientMessage(playerid, 0xECA129FF, "?????????: {ffffff}position, move, speed, radius, sound");
	}

	if(gate < 0 || gate > MAX_GATES-1 || !Gates[gate][gateObjectOn])
		return SCM(playerid, COLOR_LIGHTRED, "????. ??????? ??? ???? ID ?? ?????????.");

	if(0 == strcmp(parametrs, "position"))
	{
 		if(GetPVarInt(playerid, #2_edit_gate) != 0 || GetPVarInt(playerid, #edit_gate) != 0)
			return SCM(playerid, COLOR_LIGHTRED, "?? ??? ???????????? ??????.");

		SetPVarInt(playerid, #edit_gate, gate+1);
		EditDynamicObject(playerid, Gates[gate][gateObject]);
	}
	else if(0 == strcmp(parametrs, "move"))
	{
		if(GetPVarInt(playerid, #2_edit_gate) != 0 || GetPVarInt(playerid, #edit_gate) != 0)
			return SCM(playerid, COLOR_LIGHTRED, "?? ??? ???????????? ??????.");

		SetPVarInt(playerid, #2_edit_gate, gate+1);
		EditDynamicObject(playerid, Gates[gate][gateObject]);
	}
	else if(0 == strcmp(parametrs, "speed"))
	{
	    new Float: input = floatstr(arg);

	    if(isnull(arg))
	        return SendSyntaxMessage(playerid, "/editgate speed [???????? ??????????? 0.1 - 255.0]");

	    if(input < 0.0000001 || input > 255.0)
	        return SendSyntaxMessage(playerid, "/editgate speed [???????? ??????????? 0.0000001 - 255.0]");

		Gates[gate][gateSpeed] = input;
		new query[128];
		mysql_format(dbHandle, query, sizeof(query), "UPDATE `gates` SET `speed` = %f WHERE `id` = %i", input, Gates[gate][gateID]);
		mysql_tquery(dbHandle, query);

		SendServerMessage(playerid, "?? ???????? ???????? ??????????? ID: %i ?? %.2f", gate, input);
	}
	else if(0 == strcmp(parametrs, "radius"))
	{
	    new Float: input = floatstr(arg);

	    if(isnull(arg))
	        return SendSyntaxMessage(playerid, "/editgate radius [?????? ???????? 0.1 - 30.0]");

	    if(input < 0.1 || input > 30.0)
	        return SendSyntaxMessage(playerid, "/editgate radius [?????? ???????? 0.1 - 30.0]");

		Gates[gate][gateRadius] = input;
		new query[128];
		mysql_format(dbHandle, query, sizeof(query), "UPDATE `gates` SET `radius` = %f WHERE `id` = %i", input, Gates[gate][gateID]);
		mysql_tquery(dbHandle, query);

		SendServerMessage(playerid, "?? ???????? ?????? ID: %i ?? %.2f", gate, input);
	}
	else if(0 == strcmp(parametrs, "sound"))
	{
	    new sound = strval(arg);

	    if(isnull(arg))
	        return SendSyntaxMessage(playerid, "/editgate sound [???? | 0 - ??? ?????]");

		if(sound < 0)
		    return 1;

	    Gates[gate][gateSound] = sound;
		new query[128];
		mysql_format(dbHandle, query, sizeof(query), "UPDATE `gates` SET `sound` = %i WHERE `id` = %i", sound, Gates[gate][gateID]);
		mysql_tquery(dbHandle, query);
		SendServerMessage(playerid, "?? ???????? ???? ID: %i ?? %i", gate, sound);
	}
	return 1;
}

CMD:jobcmds(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL)) return SendErrorMessage(playerid,"? ??? ???????????? ???? ??? ????????????? ???????.");
	SCM(playerid, COLOR_WHITE, "[Level 6]: {C3C3C3}/makejob /removejob /gotojob");
	return 1;
}

ALTX:makejob("/mjob");
CMD:makejob(playerid, params[])
{
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	new jobid = -1,
		type;

	if(sscanf(params,"d", type))
		return SendSyntaxMessage(playerid, "/makejob [??? ?????? (1 - ????????????, 2 - ???????, 3 - ???????, 6 - ????????? ?????]");

	if(type != 1 && type != 2 && type != 3 && type != 6)
	    return SendSyntaxMessage(playerid, "/makejob [??? ?????? (1 - ????????????, 2 - ???????, 3 - ???????, 6 - ????????? ?????]");

	for(new i; i != MAX_JOBS; i++)
	{
	    if(JobsInfo[i][jobOn] != 0)
	        continue;

		jobid = i;
		break;
	}

	if(jobid == -1)
	    return SendErrorMessage(playerid, "?????????? ???????????? ?????????? ?????.");

	GetPlayerPos(playerid, JobsInfo[jobid][jobX], JobsInfo[jobid][jobY], JobsInfo[jobid][jobZ]);
	JobsInfo[jobid][jobVW] = GetWorld(playerid);
	JobsInfo[jobid][jobInt] = GetInterior(playerid);
	JobsInfo[jobid][jobType] = type;
	JobsInfo[jobid][jobOn] = 1;

	JobsInfo[jobid][jobPickUp] =
		CreateDynamicPickup(1314, 1, JobsInfo[jobid][jobX], JobsInfo[jobid][jobY], JobsInfo[jobid][jobZ], JobsInfo[jobid][jobVW], JobsInfo[jobid][jobInt], -1, 100.0);

    new mes[128],
		jobtext[32];

	switch(type)
	{
	    case JOB_MECHANIC: jobtext = "????????";
	    case JOB_TRUCKER: jobtext = "?????????????";
	    case JOB_TAXI: jobtext = "? ???????? ?????????";
	    case JOB_PIZZA: jobtext = "??????????? ?????";
	}

	format(mes, sizeof(mes), "/takejob - ?????????? ?? ?????? %s.", jobtext);
	JobsInfo[jobid][jobLabel] =
		CreateDynamic3DTextLabel(mes, -1, JobsInfo[jobid][jobX], JobsInfo[jobid][jobY], JobsInfo[jobid][jobZ]+0.4, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, JobsInfo[jobid][jobVW], JobsInfo[jobid][jobInt], -1, 100.0);


	SendClientMessageEx(playerid, COLOR_GREEN, "?????? ID: %i. ???: %s.", jobid, GetJobName(type));
	AddJobToFile(jobid, JobsInfo[jobid][jobType], JobsInfo[jobid][jobX], JobsInfo[jobid][jobY], JobsInfo[jobid][jobZ], JobsInfo[jobid][jobInt], JobsInfo[jobid][jobVW]);
	return 1;
}

ALTX:removejob("/rjob");
CMD:removejob(playerid,params[])
{
	new jobid;
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	if(sscanf(params,"d", jobid))
		return SendSyntaxMessage(playerid, "/removejob [ID ??????]");

	if(jobid < 0 || jobid > MAX_JOBS-1 || !JobsInfo[jobid][jobOn])
		return SendErrorMessage(playerid, "?????? ?????? ?? ??????????.");

	DestroyDynamicPickup(JobsInfo[jobid][jobPickUp]);
	DestroyDynamic3DTextLabel(Text3D:JobsInfo[jobid][jobLabel]);

	new query[128];
	mysql_format(dbHandle, query, sizeof(query), "DELETE FROM `jobs` WHERE `id` = %i", JobsInfo[jobid][jobID]);
	mysql_tquery(dbHandle, query);

	JobsInfo[jobid][jobID] = 0;
	JobsInfo[jobid][jobOn] = 0;

	SendClientMessageEx(playerid, COLOR_YELLOWG, "?? ??????? ?????? ID: %i", jobid);
	return 1;
}

CMD:gotojob(playerid,params[])
{
	new jobid;
	if(!CheckAdmin(playerid, HIGH_ADMIN_LEVEL))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	if(sscanf(params,"d", jobid))
		return SendSyntaxMessage(playerid, "/gotojob [ID ??????]");

	if(jobid < 0 || jobid > MAX_JOBS-1 || !JobsInfo[jobid][jobOn])
		return SendErrorMessage(playerid, "?????? ?????? ?? ??????????.");

	SetPlayerPosEx(playerid, JobsInfo[jobid][jobX], JobsInfo[jobid][jobY], JobsInfo[jobid][jobZ]);
	SetInterior(playerid, JobsInfo[jobid][jobInt]);
	SetWorld(playerid, JobsInfo[jobid][jobVW]);
	return 1;
}

CMD:near(playerid, params[])
{
	if(!CheckAdmin(playerid, ADMIN_LEVEL_1))
		return SendErrorMessage(playerid,"Nu ai gradul administrativ necesar.");

	new id = -1;

    if((id = Plant_Nearest(playerid)) != -1)
		return SendClientMessageEx(playerid, COLOR_GREEN, "?? ?????????? ????? ? ?????????? ID: %i.", id);

	if((id = Gate_Nearest(playerid)) != -1)
	    return SendClientMessageEx(playerid, COLOR_GREEN, "?? ?????????? ????? ? ????. ???????? ID: %i (??????: %i).", id, Gates[id][gateModel]);

    if((id = GetNearHouseOutside(playerid)) != -1)
	    return SendClientMessageEx(playerid, COLOR_GREEN, "?? ?????????? ????? ? ????? ID: %i.", id);

    if((id = ATM_Nearest(playerid)) != -1)
	    return SendClientMessageEx(playerid, COLOR_GREEN, "?? ?????????? ????? ? ?????????? ID: %i.", id);

	if((id = GarageNearestOutside(playerid)) != -1)
	    return SendClientMessageEx(playerid, COLOR_GREEN, "?? ?????????? ????? ? ??????? ID: %i", id);

    if((id = GetNearApartmentOutside(playerid)) != -1)
    	return SendClientMessageEx(playerid, COLOR_GREEN, "?? ?????????? ????? ? ????? ?????????? ID: %i", id);

    if((id = GetNearBizOutside(playerid)) != -1)
    	return SendClientMessageEx(playerid, COLOR_GREEN, "?? ?????????? ????? ? ???????? ID: %i", id);

    if((id = TruckCargo_Nearest(playerid, 2.0)) != -1)
    	return SendClientMessageEx(playerid, COLOR_GREEN, "?? ?????????? ????? ? ???????????? ID: %i", id);

    if((id = Object_Nearest(playerid)) != -1)
	    return SendClientMessageEx(playerid,COLOR_GREEN,"?? ?????????? ????? ? ???????? ID: %i. ??????: %i.", id, ObjectsInfo[id][oModel]);

    for(new i; i != MAX_ENTRANCE; i++)
	{
	    if(EntranceInfo[i][entranceOn] == 0)
	        continue;

	    if(IsPlayerEntranceOutside(playerid, i))
			return SendClientMessageEx(playerid, -1, "?? ?????????? ????? ? ?????? ID: %i.", i);

		if(IsPlayerEntranceInside(playerid, i))
  			return SendClientMessageEx(playerid, -1, "?? ?????????? ????? ? ??????? ID: %i.", i);
	}

    for(new i = 0; i != MAX_JOBS; i++)
	{
		if(JobsInfo[i][jobOn] != 1 || !PlayerToPoint(4.0, playerid, JobsInfo[i][jobX], JobsInfo[i][jobY], JobsInfo[i][jobZ]) || GetWorld(playerid) != JobsInfo[i][jobVW] || GetInterior(playerid) != JobsInfo[i][jobInt])
		    continue;

		SendClientMessageEx(playerid, -1, "?? ?????????? ????? ? ??????? ID: %i.", i);
		return 1;
	}

	for(new i = 0; i < MAX_CCTV; i++)
	{
	    if(CCTVInfo[i][tvObjectOn] == 0 || !PlayerToPoint(3, playerid,CCTVInfo[i][tvPosX], CCTVInfo[i][tvPosY], CCTVInfo[i][tvPosZ]))
	        continue;

        SendClientMessageEx(playerid,COLOR_GREEN,"?? ?????????? ????? ? ??????? ID: %i.", i);
        return 1;
	}

	for(new i = 0; i != MAX_LABELS; i++)
	{
	    if(LabelsInfo[i][tLabelOn] != 1 || !PlayerToPoint(3, playerid, LabelsInfo[i][tPosX], LabelsInfo[i][tPosY], LabelsInfo[i][tPosZ]) || LabelsInfo[i][tVW] != GetWorld(playerid) || LabelsInfo[i][tInt] != GetInterior(playerid))
			continue;

		SendClientMessageEx(playerid,COLOR_GREEN,"?? ?????????? ????? ? ???????? ID: %i.", i);
		return 1;
	}

	SCM(playerid, -1, "????? ? ???? ?????? ???.");
	return 1;
}

//==============================================================================
CMD:editspawn(playerid,params[])
{
	new factionid = PlayerInfo[playerid][pFaction];

	if(!isLeader(playerid))
		return SCM(playerid, COLOR_LIGHTRED, "?? ?? ????? ???????.");

    GetPlayerPos(playerid, Factions[factionid][fPosX], Factions[factionid][fPosY], Factions[factionid][fPosZ]);
	Factions[factionid][fSpawnInt] = GetInterior(playerid);
	Factions[factionid][fSpawnVW] = GetWorld(playerid);

    new query[128 + 56];
    mysql_format(dbHandle, query, sizeof(query), "UPDATE `factions` SET `spawnx`='%f',`spawny`='%f',`spawnz`='%f',`spawnint`='%i',`spawnvw`='%i' WHERE `id`='%i'", Factions[factionid][fPosX], Factions[factionid][fPosY], Factions[factionid][fPosZ], Factions[factionid][fSpawnInt], Factions[factionid][fSpawnVW], Factions[factionid][fID]);
	mysql_tquery(dbHandle, query);

	SendClientMessageEx(playerid,COLOR_GREEN, "?? ?????????? ????? ??????? %s ??????? ??? ?????? ?? ???? ?????.", Factions[factionid][fName]);
	return 1;
}
CMD:editrankname(playerid, params[])
{
	new faction = PlayerInfo[playerid][pFaction];

	if(!isLeader(playerid))
		return SCM(playerid, COLOR_WHITE, "?? ?? ????? ???????.");

	new rank, name[32];
	if(sscanf(params,"ds[31]", rank, name))
		return SendSyntaxMessage(playerid, "/editnamerank [????] [????????]");

	if(strlen(name) > 31)
		return SCM(playerid, COLOR_LIGHTRED, "???????? ????? ????? ????????? ?? ????? 31 ????????.");

	if(rank < 1 || rank > Factions[faction][fRanks])
	    return SendClientMessageEx(playerid,COLOR_LIGHTRED,"?????? ????????????? ?? ???????: %i.",Factions[faction][fRanks]);

	SendClientMessageEx(playerid,COLOR_GREEN,"?? ???????? ???????? ?????: %i ?? \"%s\".", rank, name);
	format(FactionRanks[faction][rank-1], 32, "%s", name);

    new query[128 + 32];
    mysql_format(dbHandle, query, sizeof(query), "UPDATE `factions` SET `rank%i`='%e' WHERE `id`='%i'", rank, name, Factions[faction][fID]);
	mysql_tquery(dbHandle, query);
	return 1;
}

forward OneSecondTimer();
public OneSecondTimer()
{
	PlayerTimer();
	OtherTimer();
	return 1;
}

/*
LOAD AND SAVE
*/
forward CheckAccount(playerid);
public CheckAccount(playerid)
{
    if(IsPlayerConnected(playerid) == 0)
	    return 1;

    SetPlayerColor(playerid, TEAM_HIT_COLOR);
    InterpolateCameraPos(playerid, -1.9223, -1240.7756, 117.9103, 1142.4589, -717.8170, 139.2966, 25000, CAMERA_MOVE);
	InterpolateCameraLookAt(playerid, 186.6470, -1261.1404, 78.2794, 1280.0114, -640.1159, 106.2128, 25000, CAMERA_MOVE);

	new name[MAX_PLAYER_NAME + 1];
	GetPlayerName(playerid, name, sizeof(name));

	new query[189 - 4 + (MAX_PLAYER_NAME * 2) + 1];
	mysql_format(dbHandle, query, sizeof(query), "SELECT accounts.login, accounts.id, accounts.last_game_ip, accounts.google_auth FROM `accounts`, `users` WHERE (accounts.login = '%e' OR users.name = '%e') AND accounts.id = users.accountid", name, name);
	mysql_tquery(dbHandle, query, "OnAccountCheck", "d", playerid);
	return 1;
}
stock AddLabelToFile(LabelID, LabelInfo[], virworld, color, gametext, Float:LX, Float:LY, Float:LZ, pickup, interior)
{
    new query[128 + 128];
	mysql_format(dbHandle,query, sizeof(query), "INSERT INTO `labels` (posx, posy, posz, color, labeltext, vw, gametext, pickup, interior) VALUES(%f, %f, %f, %i, '%e', %i, %i, %i, %i)", LX, LY, LZ, color, LabelInfo, virworld, gametext,pickup, interior);
	mysql_tquery(dbHandle, query, "OnLabelInsert", "d", LabelID);
	return 1;
}

stock AddDoorToFile(DoorID, DoorText[], virworld, interior, Float:LX, Float:LY, Float:LZ)
{
    new query[128 + 128];
	mysql_format(dbHandle,query, sizeof(query), "INSERT INTO `doors` (info, enterinterior, virtualworld, posx, posy, posz) VALUES('%e', %i, %i, %f, %f, %f)", DoorText, interior, virworld, LX, LY, LZ);
	mysql_tquery(dbHandle, query, "OnDoorInsert", "d", DoorID);
	return 1;
}

stock AddTeleToFile(playerid, teleid, mapname[], interior, Float:x, Float:y, Float:z, type)
{
    new query[128 + 128];
	mysql_format(dbHandle,query, sizeof(query), "INSERT INTO `ateles` (mapname, posx, posy, posz, interior, type) VALUES('%e', %f, %f, %f, %i, %i)", mapname, x, y, z, interior, type);
	mysql_tquery(dbHandle, query, "OnTeleportInsert", "dd", playerid, teleid);
	return 1;
}

stock AddATMToFile(atmid, Float:x, Float:y, Float:z, Float: rz, interior, vw)
{
    new query[128 + 128];
	mysql_format(dbHandle,query, sizeof(query), "INSERT INTO `atms` (posx, posy, posz, posrz, interior, vw) VALUES(%f, %f, %f, %f, %i, %i)", x, y, z, rz, interior, vw);
	mysql_tquery(dbHandle, query, "OnATMInsert", "d", atmid);
	return 1;
}
stock AddObjectToFile(objectid, modelid, interior, virworld, Float:x, Float:y, Float:z)
{
    new query[128 + 128];
	mysql_format(dbHandle,query, sizeof(query), "INSERT INTO `objects` (model, posx, posy, posz, posrx, posry, posrz, interior, virworld) VALUES(%i, %f, %f, %f, 0.0, 0.0, 0.0, %i, %i)",modelid,x,y,z,interior,virworld);
	mysql_tquery(dbHandle, query, "OnObjectInsert", "d", objectid);
	return 1;
}

stock AddCameraToFile(cameraid, interior, virworld, Float:x, Float:y, Float:z, name[])
{
    new query[128 + 128];
	mysql_format(dbHandle, query, sizeof(query), "INSERT INTO `cctvs` (posx, posy, posz, interior, virworld, info) VALUES(%i, %f, %f, %f, %i, %i, '%e')",x,y,z,interior,virworld,name);
	mysql_tquery(dbHandle, query, "OnCameraInsert", "d", cameraid);
	return 1;
}

stock AddGateToFile(gateid, modelid, faction, interior, virworld, Float:x, Float:y, Float:z)
{
    new query[128 + 128];
	mysql_format(dbHandle,query, sizeof(query), "INSERT INTO `gates` (model, faction, posx, posy, posz, interior, virworld) VALUES(%i, %i, %f, %f, %f, %i, %i)", modelid, faction, x, y, z, interior, virworld);
	mysql_tquery(dbHandle, query, "OnGateInsert", "d", gateid);
	return 1;
}

stock CreateFactionVehicle(bool: crt, model, Float: x, Float: y, Float: z, Float: a, color1, color2, type, faction, plate[], vw, interior, sqlid = 0)
{
	new vehicle;

    if(type == WITHSIGNAL_CAR)
 		vehicle = CreateVehicle(model, x, y, z, a, color1, color2, -1, 1);
    else if(type == RENT_CAR || type == PIZZA_CAR)
	    vehicle = CreateVehicle(model, x, y, z, a, color1, color2, 600);
 	else
	    vehicle = CreateVehicle(model, x, y, z, a, color1, color2, -1);

    if(vehicle == INVALID_VEHICLE_ID)
	    return 0;

	SetVehicleHealth(vehicle, 1000.0);
	SetVehicleNumberPlate(vehicle, plate);
 	SetVehicleVirtualWorld(vehicle, vw);
 	LinkVehicleToInterior(vehicle, interior);

	VehicleInfo[vehicle][carModel] = model;
	VehicleInfo[vehicle][carParkX] = x;
	VehicleInfo[vehicle][carParkY] = y;
	VehicleInfo[vehicle][carParkZ] = z;
	VehicleInfo[vehicle][carParkA] = a;
	VehicleInfo[vehicle][carColor1] = color1;
	VehicleInfo[vehicle][carColor2] = color2;
	VehicleInfo[vehicle][carType] = type;
	VehicleInfo[vehicle][carFaction] = faction;
	VehicleInfo[vehicle][carVW] = vw;
	VehicleInfo[vehicle][carInt] = interior;
    VehicleInfo[vehicle][carFuel] = 100;
    VehicleInfo[vehicle][carDriver] = INVALID_PLAYER_ID;

	format(VehicleInfo[vehicle][carPlate], 24, plate);

	if(crt)
	{
	    new query[128 + 128];
		mysql_format(dbHandle, query, sizeof(query), "INSERT INTO `cars` (`date`,`model`,`x`,`y`,`z`,`fa`,`color1`,`color2`,`type`,`faction`,`plate`,`vw`,`int`) VALUES('%s',%i, %f, %f, %f, %f, %i, %i, %i, %i, '%e', %i, %i)",
		GetFullDate(), model, x, y, z, a, color1, color2, type, faction, plate, vw, interior);
		mysql_tquery(dbHandle, query, "OnVehicleInsert", "d", vehicle);
	}
	else VehicleInfo[vehicle][carID] = sqlid;

	return vehicle;
}

forward OnVehicleInsert(vehicleid);
public OnVehicleInsert(vehicleid)
{
    VehicleInfo[vehicleid][carID]= cache_insert_id();
	return 1;
}

stock CreatePayphone(bool: crt, type, number, Float: x, Float: y, Float: z, Float: rx, Float: ry, Float: rz, vw, interior, sqlid = 0)
{
	new id;
	for(new i; i != MAX_PAYPHONES; i++)
	{
	    if(PayphoneInfo[i][phID] != 0)
	        continue;

		id = i;
		break;
	}

	if(id == -1)
	    return 0;

    PayphoneInfo[id][phType] = type;
    PayphoneInfo[id][phNumber] = number;
	PayphoneInfo[id][phX] = x,
	PayphoneInfo[id][phY] = y,
	PayphoneInfo[id][phZ] = z,
	PayphoneInfo[id][phRX] = rx,
	PayphoneInfo[id][phRY] = ry,
	PayphoneInfo[id][phRZ] = rz;
	PayphoneInfo[id][phVW] = vw;
	PayphoneInfo[id][phInt] = interior;

	if(type)
		PayphoneInfo[id][phObj] = CreateDynamicObject(type, x, y, z, rx, ry, rz, vw, interior);

    PayphoneInfo[id][phLabel] =
		CreateDynamic3DTextLabel("/payphone - ???????????? ????????.", COLOR_GOLD, x, y, z, 3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, vw, interior, -1, 15.0);

	if(crt)
	{
	    new query[128 + 128];
		mysql_format(dbHandle, query, sizeof(query), "INSERT INTO `payphones` (`type`,`number`,`x`,`y`,`z`,`rx`,`ry`,`rz`,`vw`,`int`) VALUES(%i,%i, %f, %f, %f, %f, %f, %f, %i, %i)",
		type, number, x,y,z,rx,ry,rz, vw, interior);
		mysql_tquery(dbHandle, query, "OnPayphoneInsert", "d", id);
	}
	else PayphoneInfo[id][phID] = sqlid;

	return 1;
}

forward OnPayphoneInsert(id);
public OnPayphoneInsert(id)
{
    PayphoneInfo[id][phID] = cache_insert_id();
	return 1;
}

stock AddHouseToFile(houseid, clases, level, price, Float:x, Float:y, Float:z,worldhouse,worldhouseout, interiorout)
{
    new query[128 + 128];
	mysql_format(dbHandle, query, sizeof(query), "INSERT INTO `houses` (posint, class, posx, posy, posz, price, levelbuy, cash, locked, radio, exitvw, posvw) VALUES(%i, %i, %f, %f, %f, %i, %i, %i, %i, %i, %i, %i)",
	interiorout, clases, x, y, z, price, level, 0, 1, 0, worldhouse, worldhouseout);
	mysql_tquery(dbHandle, query, "OnHouseInsert", "d", houseid);
	return 1;
}
stock AddApartToFile(apartid, Float:x, Float:y, Float:z, interior, vw)
{
    new query[128 + 128];
	mysql_format(dbHandle, query, sizeof(query), "INSERT INTO `apartment` (posx, posy, posz, posint, posvw) VALUES(%f, %f, %f, %i, %i)", x, y, z, interior, vw);
	mysql_tquery(dbHandle, query, "OnApartInsert", "d", apartid);
	return 1;
}

stock AddBizToFile(bizid, level, price, freeze, type, name[], entermsg[], Float:x, Float:y, Float:z, Float:ex, Float:ey, Float:ez, posint, posvw, exitint, exitvw)
{
    new query[128 + 128 + 128];
	mysql_format(dbHandle, query, sizeof(query), "INSERT INTO `business` (posx, posy, posz, exitx, exity, exitz, name, entermsg, price, freeze, levelbuy, type, posint, posvw, exitint, exitvw) VALUES(%f, %f, %f, %f, %f, %f, '%s', '%s', %i,%i,%i,%i,%i,%i,%i,%i)",
	x, y, z, ex, ey, ez, name, entermsg, price, freeze, level, type, posint, posvw, exitint, exitvw);
	mysql_tquery(dbHandle, query, "OnBizInsert", "d", bizid);
 	return 1;
}

stock AddFactionToFile(factionid, name[], color, type, ranks, pointtime)
{
    new query[128 + 128];
	mysql_format(dbHandle, query, sizeof(query), "INSERT INTO `factions` (factionid, name, color, type, ranks, point_time) VALUES(%i, '%s', %i, %i, %i, %i)", factionid, name, color, type, ranks, pointtime);
	mysql_tquery(dbHandle, query, "OnFactionInsert", "d", factionid);
	return 1;
}
stock AddJobToFile(jobid, type, Float:x, Float:y, Float:z, interior, vw)
{
    new query[128 + 128];
	mysql_format(dbHandle, query, sizeof(query), "INSERT INTO `jobs` (jobid, posx, posy, posz,interior,vw) VALUES(%i, %f, %f, %f, %i, %i)", type, x, y, z, interior, vw);
	mysql_tquery(dbHandle, query, "OnJobInsert", "d", jobid);
	return 1;
}

stock AddFoodStandToFile(standid, type, Float:x, Float:y, Float:z, vw, interior)
{
    new query[128 + 128];
	mysql_format(dbHandle, query, sizeof(query), "INSERT INTO `foodstand` (type, posx, posy, posz, vw, interior) VALUES(%i, %f, %f, %f, %i, %i)", type, x, y, z, vw, interior);
	mysql_tquery(dbHandle, query, "OnFoodStandInsert", "d", standid);
	return 1;
}

stock InsertPlayerAttach(playerid, slot, model, bone, name[])
{
    new query[128 + 128];
	mysql_format(dbHandle, query, sizeof(query), "INSERT INTO `player_attach` (userid, name, model, bone) VALUES ('%i', '%s', %i, %i)", PlayerInfo[playerid][pID], name, model, bone);
	mysql_tquery(dbHandle, query, "OnAttachInsert", "iiiis", playerid, slot, model, bone, name);
	return 1;
}

stock UpdatePlayerAttach(playerid, slot, Float:X, Float:Y, Float:Z, Float:RX, Float:RY, Float:RZ, Float:SC, Float:SY, Float:SZ, bone)
{
    new query[128 + 128];
	mysql_format(dbHandle, query, sizeof(query), "UPDATE `player_attach` SET `offestx`=%f,`offesty`=%f,`offestz`=%f,`rotx`=%f,`roty`=%f,`rotz`=%f,`scalex`=%f,`scaley`=%f,`scalez`=%f,`used`=%i,`bone`=%i WHERE `id` = %i", X, Y, Z, RX, RY, RZ, SC, SY, SZ, AttachInfo[playerid][slot][aUsed], bone, AttachInfo[playerid][slot][aID]);
	mysql_tquery(dbHandle, query);
	return 1;
}

stock LoadPlayerAttach(playerid)
{
    new query[128];
	mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `player_attach` WHERE `userid` = %i", PlayerInfo[playerid][pID]);
	mysql_tquery(dbHandle, query, "OnPlayerLoadAttach", "i", playerid);
	return 1;
}

stock RemovePlayerAttachFromSlot(playerid, slot)
{
    new query[128];
	mysql_format(dbHandle, query, sizeof(query), "DELETE FROM `player_attach` WHERE `id` = %i", AttachInfo[playerid][slot][aID]);
	mysql_tquery(dbHandle, query);

	AttachInfo[playerid][slot][aID] = 0;
	AttachInfo[playerid][slot][aName] = EOS;
	AttachInfo[playerid][slot][aModel] = 0;
	AttachInfo[playerid][slot][aBone] = 0;
	AttachInfo[playerid][slot][aOffsetX] = 0.0;
	AttachInfo[playerid][slot][aOffsetY] = 0.0;
	AttachInfo[playerid][slot][aOffsetZ] = 0.0;
	AttachInfo[playerid][slot][aRotX] = 0.0;
	AttachInfo[playerid][slot][aRotY] = 0.0;
	AttachInfo[playerid][slot][aRotZ] = 0.0;
	AttachInfo[playerid][slot][aScaleX] = 0.0;
	AttachInfo[playerid][slot][aScaleY] = 0.0;
	AttachInfo[playerid][slot][aScaleZ] = 0.0;
	AttachInfo[playerid][slot][aUsed] = 0;

	if(IsPlayerAttachedObjectSlotUsed(playerid, slot))
 		RemovePlayerAttachedObject(playerid, slot);
	return 1;
}
stock OnPlayerAddMusic(playerid, slot, name[], url[])
{
    new query[128 + 56 + 156];
	mysql_format(dbHandle, query, sizeof(query), "INSERT INTO `player_music` (userid, name, url) VALUES ('%i', '%e', '%e')", PlayerInfo[playerid][pID], name, url);
	mysql_tquery(dbHandle, query, "OnMusicInsert", "ii", playerid, slot);
	return 1;
}

stock LoadPlayerMusic(playerid)
{
    new query[128];
	mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `player_music` WHERE `userid` = %i", PlayerInfo[playerid][pID]);
	mysql_tquery(dbHandle, query, "OnPlayerLoadMusic", "i", playerid);
	return 1;
}

stock LoadPlayerInventory(playerid)
{
    new query[128];
    mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `inventory` WHERE `userid`='%i'", PlayerInfo[playerid][pID]);
   	mysql_tquery(dbHandle, query, "LoadInventory", "i", playerid);
	return 1;
}

stock LoadPlayerTickets(playerid)
{
    new query[128];
	mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `tickets` WHERE `userid` = %i", PlayerInfo[playerid][pID]);
	mysql_tquery(dbHandle, query, "__LoadPlayerTickets", "i", playerid);
	return 1;
}

stock LoadVehicleTickets(vehicleid)
{
    new query[128];
	mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `tickets` WHERE `vehicle` = %i", VehicleInfo[vehicleid][carID]);
	mysql_tquery(dbHandle, query, "__LoadVehicleTickets", "i", vehicleid);
	return 1;
}

stock LoadPlayerNotes(playerid)
{
    new query[128];
	mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `player_notes` WHERE `userid` = '%i'", PlayerInfo[playerid][pID]);
	mysql_tquery(dbHandle, query, "OnPlayerLoadNotes", "i", playerid);
	return 1;
}

stock LoadPlayerContacts(playerid)
{
    new query[128];
	mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `player_contacts` WHERE `userid` = '%i'", PlayerInfo[playerid][pID]);
	mysql_tquery(dbHandle, query, "OnPlayerLoadContacts", "i", playerid);
	return 1;
}

stock PlacePlayerContact(playerid, contactid, contact[], number)
{
    new query[128 + 128];
	mysql_format(dbHandle,query, sizeof(query), "INSERT INTO `player_contacts` (userid, contact, number) VALUES (%i, '%e', %i)", PlayerInfo[playerid][pID], contact, number);
	mysql_tquery(dbHandle, query, "OnContactInsert", "ii", playerid, contactid);
	return 1;
}
//===================================================================================
stock Save_User(playerid)
{
	if (0 == IsPlayerLogged(playerid))
	    return 1;

    if (GetPlayerState(playerid) != PLAYER_STATE_SPECTATING)
    {
		SavePlayerPos(playerid);
		GetPlayerArmour(playerid, PlayerInfo[playerid][pArmour]);
	}

	//SetPVarInt(playerid, #check_int, 30);

	new query[2048];
	format(query, sizeof(query), "UPDATE `users` SET `armour`='%f',`cash`='%i',`bank`='%i',`skin`='%i',`sex`='%i',`level`='%i',`exp`='%i',`hours`='%i',`admin_hide`='%i',`int`='%i',`world`='%i',`channel`='%i',`owned_channel`='%i',`authed`='%i'",
        PlayerInfo[playerid][pArmour],
		PlayerInfo[playerid][pCash],
		PlayerInfo[playerid][pBank],
		PlayerInfo[playerid][pSkin],
		PlayerInfo[playerid][pSex],
		PlayerInfo[playerid][pLevel],
		PlayerInfo[playerid][pExp],
		PlayerInfo[playerid][pHours],
		PlayerInfo[playerid][pAdminHide],
		PlayerInfo[playerid][pInt],
		PlayerInfo[playerid][pWorld],
		PlayerInfo[playerid][pChannel],
		PlayerInfo[playerid][pOwnedChannel],
		PlayerInfo[playerid][pAuthed]
	);
	//=========================================================================================================
	format(query, sizeof(query), "%s,`ajailed`='%i',`ajailtime`='%i',`jailed`='%i',`isolatetime`='%i',`warns`='%i',`vip`='%i',`carlic`='%i',`weplic`='%i',`flylic`='%i',`taxilic`='%i',`settings`='%i',`dependence`='%i',`demolition`='%i'",
		query,
		PlayerInfo[playerid][pAJailed],
		PlayerInfo[playerid][pAJailTime],
		PlayerInfo[playerid][pJailed],
		PlayerInfo[playerid][pIsolateTime],
		PlayerInfo[playerid][pWarns],
		PlayerInfo[playerid][pPremium],
		PlayerInfo[playerid][pCarLic],
		PlayerInfo[playerid][pWepLic],
		PlayerInfo[playerid][pFlyLic],
		PlayerInfo[playerid][pTaxiLic],
		PlayerInfo[playerid][pSettings],
		PlayerInfo[playerid][pDependence],
		PlayerInfo[playerid][pDemolition]
	);
	//=========================================================================================================
	format(query, sizeof(query), "%s,`arrested`='%i',`chat`='%i',`authwep`='%i',`swat`='%i',`swat_duty`='%i',`job`='%i',`career`='%i',`fightstyle`='%i',`hud`='%i',`paycheck`='%i',`fishcount`='%i',`fish_time`='%i'",
 		query,
        PlayerInfo[playerid][pArrested],
		PlayerInfo[playerid][pTalk],
		PlayerInfo[playerid][pAuthwep],
		PlayerInfo[playerid][pSwat],
		PlayerInfo[playerid][pSwatDuty],
		PlayerInfo[playerid][pJob],
	 	PlayerInfo[playerid][pCareer],
		PlayerInfo[playerid][pFightStyle],
		PlayerInfo[playerid][pHud],
		PlayerInfo[playerid][pPayCheckMoney],
		PlayerInfo[playerid][pFishCount],
		PlayerInfo[playerid][pFishTime]
	);
	//=========================================================================================================
	format(query, sizeof(query), "%s,`paydaytime`='%i',`number`='%i',`savings`='%i',`rent_key`='%i',`rent_price`='%i',`weap0`='%i',`weap1`='%i',`weap2`='%i',`weap3`='%i',`ammo0`='%i',`ammo1`='%i',`ammo2`='%i',`ammo3`='%i'",
        query,
		PlayerInfo[playerid][pPayDayTime],
		PlayerInfo[playerid][pNumber],
		PlayerInfo[playerid][pSavings],
		PlayerInfo[playerid][pRentKey],
		PlayerInfo[playerid][pRentPrice],
		PlayerInfo[playerid][pWeap][0],
		PlayerInfo[playerid][pWeap][1],
		PlayerInfo[playerid][pWeap][2],
		PlayerInfo[playerid][pWeap][3],
		PlayerInfo[playerid][pAmmo][0],
		PlayerInfo[playerid][pAmmo][1],
		PlayerInfo[playerid][pAmmo][2],
		PlayerInfo[playerid][pAmmo][3]
	);
	//=========================================================================================================
	format(query, sizeof(query), "%s,`mutetime`='%i',`phone_off`='%i',`phone_airplane`='%i',`phone_sound`='%i',`phone_model`='%i',`phone_ringtone`='%i',`phone_style`='%i',`sparekey`='%i',`workon`='%i' WHERE `id`='%i'",
        query,
		PlayerInfo[playerid][pMutedTime],
		PlayerInfo[playerid][pPhoneOff],
		PlayerInfo[playerid][pPhoneAirplane],
		PlayerInfo[playerid][pPhoneSound],
		PlayerInfo[playerid][pPhoneModel],
		PlayerInfo[playerid][pPhoneRingtone],
		PlayerInfo[playerid][pPhoneStyle],
		PlayerInfo[playerid][pSpareKey],
		PlayerInfo[playerid][pWorkOn],
		PlayerInfo[playerid][pID]
	);
	mysql_tquery(dbHandle, query);
	//?????? 2=========================================================================================================
	format(query, sizeof(query), "UPDATE `users` SET `walk`='%i',`faction`='%i',`rank`='%i',`badgenumber`='%i',`drivewarns`='%i',`wepwarns`='%i',`wep_count`='%i',`jailtime`='%i',`slot`='%i',`injured`='%i'",
		PlayerInfo[playerid][pWalk],
		PlayerInfo[playerid][pFaction],
		PlayerInfo[playerid][pRank],
		PlayerInfo[playerid][pBadgeNumber],
		PlayerInfo[playerid][pDriveWarns],
		PlayerInfo[playerid][pWepWarns],
		PlayerInfo[playerid][pWepCount],
		PlayerInfo[playerid][pJailTime],
		PlayerInfo[playerid][pSlot],
		PlayerInfo[playerid][pInjured]
	);
	//=========================================================================================================
	format(query, sizeof(query), "%s,`sidejob`='%i',`prescribe`='%i',`ganja_time`='%i',`spawntype`='%i',`spawnpoint`='%i',`pos_X`='%f',`pos_Y`='%f',`pos_Z`='%f',`pos_A`='%f',`prisoned`='%i'",
        query,
		PlayerInfo[playerid][pSideJob],
		PlayerInfo[playerid][pPrescribe],
		PlayerInfo[playerid][pGanjaTime],
		PlayerInfo[playerid][pSpawnType],
		PlayerInfo[playerid][pSpawnPoint],
		PlayerInfo[playerid][pPosX],
		PlayerInfo[playerid][pPosY],
		PlayerInfo[playerid][pPosZ],
		PlayerInfo[playerid][pPosA],
		PlayerInfo[playerid][pPrisoned]
	);
	//=========================================================================================================
    format(query, sizeof(query), "%s,`weaphide0`='%i',`weaphide1`='%i',`weaphide2`='%i'",
        query,
		PlayerInfo[playerid][pHideWeap][0],
		PlayerInfo[playerid][pHideWeap][1],
		PlayerInfo[playerid][pHideWeap][2]
	);
	//=========================================================================================================
	format(query, sizeof(query), "%s,`copweap0`='%i',`copweap1`='%i',`copweap2`='%i',`copweap3`='%i',\
	`copammo0`='%i',`copammo1`='%i',`copammo2`='%i',`copammo3`='%i',`duty`='%i',`char`='%i',`tog_0`='%i',`tog_1`='%i',`tog_2`='%i' WHERE `id`='%i'",
        query,
		PlayerInfo[playerid][pCopWeap][0],
		PlayerInfo[playerid][pCopWeap][1],
		PlayerInfo[playerid][pCopWeap][2],
		PlayerInfo[playerid][pCopWeap][3],
	 	PlayerInfo[playerid][pCopAmmo][0],
	 	PlayerInfo[playerid][pCopAmmo][1],
	  	PlayerInfo[playerid][pCopAmmo][2],
	 	PlayerInfo[playerid][pCopAmmo][3],
	 	PlayerInfo[playerid][pOnDuty],
		PlayerInfo[playerid][pChar],
		PlayerInfo[playerid][pTog][0],
		PlayerInfo[playerid][pTog][1],
		PlayerInfo[playerid][pTog][2],
		PlayerInfo[playerid][pID]
	);
	mysql_tquery(dbHandle, query);
    //
	//Update inventory
	format(query, sizeof(query), "UPDATE `inventory` SET ");
	for(new i = 0; i < MAX_INVENTORY; i++)
	{
	    format(query, sizeof(query), "%s%s`id_%i`=%i,`a_%i`=%i", query, (i == 0)?(""):(","), i+1, PlayerInfo[playerid][pInv][i], i+1, PlayerInfo[playerid][pInvAmount][i]);
	}

    format(query, sizeof(query), "%s WHERE `userid`=%i", query, PlayerInfo[playerid][pID]);
	mysql_tquery(dbHandle, query);
	//printf("INVENTORY: %s | STR: %i", query, strlen(query));
	return 1;
}

stock Save_AttachWeapon(playerid, i)
{
	new query[256];

	format(query, sizeof(query), "UPDATE `users` SET `weap_%i_bone` = '%i', `weap_%i_x` = '%f', `weap_%i_y` = '%f', `weap_%i_z` = '%f', `weap_%i_rx` = '%f', `weap_%i_ry` = '%f', `weap_%i_rz` = '%f' WHERE `id` = '%i'",
		i, PlayerInfo[playerid][pWeaponBone][i],
		i, PlayerInfo[playerid][pWeaponX][i],
		i, PlayerInfo[playerid][pWeaponY][i],
		i, PlayerInfo[playerid][pWeaponZ][i],
		i, PlayerInfo[playerid][pWeaponRX][i],
		i, PlayerInfo[playerid][pWeaponRY][i],
		i, PlayerInfo[playerid][pWeaponRZ][i],
		PlayerInfo[playerid][pID]
	);

	mysql_tquery(dbHandle, query);
	return 1;
}

public LoadDynamicTruckCargo()
{
	new rows = cache_num_rows(),
	    time = GetTickCount(),
		total,
		mes[128];

    //9ACD32

	if(!rows)
	{
	    print("[Truck Cargo] ?????? ?? ???????.");
	    return 1;
	}

	for(new i; i < rows; i++)
	{
	    TruckCargo[i][tID] = cache_get_field_content_int(i, "id");
	    TruckCargo[i][tType] = cache_get_field_content_int(i, "type");
		cache_get_field_content(i, "name", TruckCargo[i][tName], dbHandle, 64);
		TruckCargo[i][tStorage] = cache_get_field_content_int(i, "storage");
	    TruckCargo[i][tStorageSize] = cache_get_field_content_int(i, "storage_size");
		TruckCargo[i][tPrice] = cache_get_field_content_int(i, "price");
		TruckCargo[i][tProductID] = cache_get_field_content_int(i, "product_id");
		TruckCargo[i][tProductAmount] = cache_get_field_content_int(i, "product_amount");
		TruckCargo[i][tPack] = cache_get_field_content_int(i, "pack");
		TruckCargo[i][tGps] = cache_get_field_content_int(i, "gps");
		TruckCargo[i][tLocked] = cache_get_field_content_int(i, "locked");
		TruckCargo[i][tPosX] = cache_get_field_content_float(i, "x");
		TruckCargo[i][tPosY] = cache_get_field_content_float(i, "y");
		TruckCargo[i][tPosZ] = cache_get_field_content_float(i, "z");
		TruckCargo[i][tResult] = 0;

		format(mes, sizeof(mes), "[{FFFF00}%s{FFFFFF}]\n?????: %i / %i\n????: $%i / ??.", truckcargo_product[TruckCargo[i][tProductID]], TruckCargo[i][tStorage], TruckCargo[i][tStorageSize], TruckCargo[i][tPrice]);

		TruckCargo[i][tLabel] =
			CreateDynamic3DTextLabel(mes, 0xFFFFFFFF, TruckCargo[i][tPosX], TruckCargo[i][tPosY], TruckCargo[i][tPosZ]+0.8, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0, -1, 100.0);

		TruckCargo[i][tPickup] =
			CreateDynamicPickup(1318, 1, TruckCargo[i][tPosX], TruckCargo[i][tPosY], TruckCargo[i][tPosZ], 0, 0, -1, 100.0);

		TruckCargo[i][tOn] = 1;
        total++;
	}
	printf("[Truck Cargo] ????? - %i. ????????? - %i. ?????????: %i ms.", rows, total, GetTickCount()-time);
	return 1;
}

public LoadDynamicTowers()
{
	new rows = cache_num_rows(),
	    time = GetTickCount(),
		total;

	if(!rows)
	{
	    print("[Towers] ?????? ?? ???????.");
	    return 1;
	}

	for(new i; i < rows; i++)
	{
	    TowerInfo[i][towerID] = cache_get_field_content_int(i, "id");
	    TowerInfo[i][towerModel] = cache_get_field_content_int(i, "model");
		TowerInfo[i][towerPosX] = cache_get_field_content_float(i, "x");
		TowerInfo[i][towerPosY] = cache_get_field_content_float(i, "y");
		TowerInfo[i][towerPosZ] = cache_get_field_content_float(i, "z");
		TowerInfo[i][towerPosRX] = cache_get_field_content_float(i, "rx");
		TowerInfo[i][towerPosRY] = cache_get_field_content_float(i, "ry");
		TowerInfo[i][towerPosRZ] = cache_get_field_content_float(i, "rz");

		TowerInfo[i][towerObject] =
			CreateDynamicObject(TowerInfo[i][towerModel], TowerInfo[i][towerPosX], TowerInfo[i][towerPosY], TowerInfo[i][towerPosZ], TowerInfo[i][towerPosRX], TowerInfo[i][towerPosRY], TowerInfo[i][towerPosRZ], 0, 0);

		TowerInfo[i][towerOn] = 1;
        total++;
	}
	printf("[Towers] ????? - %i. ????????? - %i. ?????????: %i ms.", rows, total, GetTickCount()-time);
	return 1;
}

public LoadDynamicPayphones()
{
	new rows = cache_num_rows(),
	    time = GetTickCount(),
		total;

	if(!rows)
	{
	    print("[Towers] ?????? ?? ???????.");
	    return 1;
	}

	for(new i; i < rows; i++)
	{
	    TowerInfo[i][towerID] = cache_get_field_content_int(i, "id");
	    TowerInfo[i][towerModel] = cache_get_field_content_int(i, "model");
		TowerInfo[i][towerPosX] = cache_get_field_content_float(i, "x");
		TowerInfo[i][towerPosY] = cache_get_field_content_float(i, "y");
		TowerInfo[i][towerPosZ] = cache_get_field_content_float(i, "z");
		TowerInfo[i][towerPosRX] = cache_get_field_content_float(i, "rx");
		TowerInfo[i][towerPosRY] = cache_get_field_content_float(i, "ry");
		TowerInfo[i][towerPosRZ] = cache_get_field_content_float(i, "rz");

		TowerInfo[i][towerObject] =
			CreateDynamicObject(TowerInfo[i][towerModel], TowerInfo[i][towerPosX], TowerInfo[i][towerPosY], TowerInfo[i][towerPosZ], TowerInfo[i][towerPosRX], TowerInfo[i][towerPosRY], TowerInfo[i][towerPosRZ], 0, 0);

		TowerInfo[i][towerOn] = 1;
        total++;
	}
	printf("[Towers] ????? - %i. ????????? - %i. ?????????: %i ms.", rows, total, GetTickCount()-time);
	return 1;
}

public LoadDynamicGarage()
{
	new rows = cache_num_rows(),
	    time = GetTickCount(),
		total;

	if(!rows)
	{
	    print("[Garage] ?????? ?? ???????.");
	    return 1;
	}
	for ( new i = 0; i < rows; i++)
	{
		GarageInfo[i][garageID] = cache_get_field_content_int(i, "id");
		GarageInfo[i][garageOwner] = cache_get_field_content_int(i, "owner");
		GarageInfo[i][garageHouse] = cache_get_field_content_int(i, "house");
		GarageInfo[i][garageBiz] = cache_get_field_content_int(i, "biz");
		GarageInfo[i][garagePrice] = cache_get_field_content_int(i, "price");
		GarageInfo[i][garageLocked] = cache_get_field_content_int(i, "locked");

        GarageInfo[i][garageEnterInt] = cache_get_field_content_int(i, "enter_int");
        GarageInfo[i][garageEnterVW] = cache_get_field_content_int(i, "enter_vw");
		GarageInfo[i][garagePlayer_Enter][0] = cache_get_field_content_float(i, "player_enter_x");
		GarageInfo[i][garagePlayer_Enter][1] = cache_get_field_content_float(i, "player_enter_y");
		GarageInfo[i][garagePlayer_Enter][2] = cache_get_field_content_float(i, "player_enter_z");

        GarageInfo[i][garageExitInt] = cache_get_field_content_int(i, "exit_int");
        GarageInfo[i][garageExitVW] = GarageInfo[i][garageID] + 100;
		GarageInfo[i][garagePlayer_Exit][0] = cache_get_field_content_float(i, "player_exit_x");
		GarageInfo[i][garagePlayer_Exit][1] = cache_get_field_content_float(i, "player_exit_y");
		GarageInfo[i][garagePlayer_Exit][2] = cache_get_field_content_float(i, "player_exit_z");

		GarageInfo[i][garageVeh_Enter][0] = cache_get_field_content_float(i, "veh_enter_x");
		GarageInfo[i][garageVeh_Enter][1] = cache_get_field_content_float(i, "veh_enter_y");
		GarageInfo[i][garageVeh_Enter][2] = cache_get_field_content_float(i, "veh_enter_z");
		GarageInfo[i][garageVeh_Enter][3] = cache_get_field_content_float(i, "veh_enter_fa");

		GarageInfo[i][garageVeh_Exit][0] = cache_get_field_content_float(i, "veh_exit_x");
		GarageInfo[i][garageVeh_Exit][1] = cache_get_field_content_float(i, "veh_exit_y");
		GarageInfo[i][garageVeh_Exit][2] = cache_get_field_content_float(i, "veh_exit_z");
		GarageInfo[i][garageVeh_Exit][3] = cache_get_field_content_float(i, "veh_exit_fa");

        cache_get_field_content(i, "ownername", GarageInfo[i][garageOwnerName], dbHandle, MAX_PLAYER_NAME);
		strreplace(GarageInfo[i][garageOwnerName], '_', ' ');

		GarageInfo[i][garageCP] = CreateDynamicCP(GarageInfo[i][garagePlayer_Enter][0], GarageInfo[i][garagePlayer_Enter][1], GarageInfo[i][garagePlayer_Enter][2], 0.9, GarageInfo[i][garageEnterVW], GarageInfo[i][garageEnterInt], -1, 3.0);
		total++;
	}
	printf("[Garage] ????? - %i. ????????? - %i. ?????????: %i ms.", rows, total, GetTickCount()-time);
	return 1;
}

public LoadDynamicLabels()
{
	new rows = cache_num_rows(),
	    time = GetTickCount(),
		total;

	if(!rows)
	{
	    print("[Labels] ?????? ?? ???????.");
	    return 1;
	}

	for(new i; i < rows; i++)
	{
	    LabelsInfo[i][tID] = cache_get_field_content_int(i, "id");
		LabelsInfo[i][tPosX] = cache_get_field_content_float(i, "posx");
		LabelsInfo[i][tPosY] = cache_get_field_content_float(i, "posy");
		LabelsInfo[i][tPosZ] = cache_get_field_content_float(i, "posz");
		//LabelsInfo[i][tColor] = cache_get_field_content_int(i, "color");
		LabelsInfo[i][tVW] = cache_get_field_content_int(i, "vw");
		LabelsInfo[i][tInt] = cache_get_field_content_int(i, "interior");
		cache_get_field_content(i, "labeltext", LabelsInfo[i][tText], dbHandle, 128);
		LabelsInfo[i][tGameText] = cache_get_field_content_int(i, "gametext");
		LabelsInfo[i][tPickupModel] = cache_get_field_content_int(i, "pickup");
		LabelsInfo[i][tLabelOn] = 1;

		if(0 == LabelsInfo[i][tGameText])
		    LabelsInfo[i][tLabel] = CreateDynamic3DTextLabel(LabelsInfo[i][tText], 0xFFFFFFFF, LabelsInfo[i][tPosX], LabelsInfo[i][tPosY], LabelsInfo[i][tPosZ], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, LabelsInfo[i][tVW], LabelsInfo[i][tInt], -1, 100.0);
		else
		    LabelsInfo[i][tLabel] = Text3D:INVALID_3DTEXT_ID;

		LabelsInfo[i][tPickUp] =
			CreateDynamicPickup(LabelsInfo[i][tPickupModel], 1, LabelsInfo[i][tPosX], LabelsInfo[i][tPosY], LabelsInfo[i][tPosZ], LabelsInfo[i][tVW], LabelsInfo[i][tInt], -1, 100.0);

		total++;
	}
	printf("[Labels] ????? - %i. ????????? - %i. ?????????: %i ms.", rows, total, GetTickCount()-time);
	return 1;
}

public LoadDynamicEntrance()
{
	new rows = cache_num_rows(),
	    time = GetTickCount(),
		total;

	if(!rows)
	{
	    print("[Entrance] ?????? ?? ???????.");
	    return 1;
	}

	for(new i; i < rows; i++)
	{
		EntranceInfo[i][eID] = cache_get_field_content_int(i, "id");

		EntranceInfo[i][eEnterX] = cache_get_field_content_float(i, "enterx");
		EntranceInfo[i][eEnterY] = cache_get_field_content_float(i, "entery");
		EntranceInfo[i][eEnterZ] = cache_get_field_content_float(i, "enterz");
		EntranceInfo[i][eEnterA] = cache_get_field_content_float(i, "entera");
		EntranceInfo[i][eEnterVW] = cache_get_field_content_int(i, "entervw");
		EntranceInfo[i][eEnterInt] = cache_get_field_content_int(i, "enterint");
		EntranceInfo[i][eExitX] = cache_get_field_content_float(i, "exitx");
		EntranceInfo[i][eExitY] = cache_get_field_content_float(i, "exity");
		EntranceInfo[i][eExitZ] = cache_get_field_content_float(i, "exitz");
		EntranceInfo[i][eExitA] = cache_get_field_content_float(i, "exita");
		EntranceInfo[i][eExitVW] = cache_get_field_content_int(i, "exitvw");
		EntranceInfo[i][eExitInt] = cache_get_field_content_int(i, "exitint");

		EntranceInfo[i][eFaction] = cache_get_field_content_int(i, "faction");
		EntranceInfo[i][eVehicle] = cache_get_field_content_int(i, "vehicle");
		cache_get_field_content(i, "text", EntranceInfo[i][eText], dbHandle, 128);

		if(EntranceInfo[i][eFaction])
		    EntranceInfo[i][eLocked] = 1;

		EntranceInfo[i][entranceOn] = 1;

		EntranceInfo[i][eEnterPickup] =
			CreateDynamicPickup(1239, 1, EntranceInfo[i][eEnterX], EntranceInfo[i][eEnterY], EntranceInfo[i][eEnterZ], EntranceInfo[i][eEnterVW], EntranceInfo[i][eEnterInt], -1, 100.0);

        EntranceInfo[i][eExitPickup] =
			CreateDynamicPickup(1239, 1, EntranceInfo[i][eExitX], EntranceInfo[i][eExitY], EntranceInfo[i][eExitZ], EntranceInfo[i][eExitVW], EntranceInfo[i][eExitInt], -1, 100.0);

		total++;
	}
	printf("[Entrance] ????? - %i. ????????? - %i. ?????????: %i ms.", rows, total, GetTickCount()-time);
	return 1;
}

stock set_truckcargo_int(id, row[], value)
{
	new query[128];
    mysql_format(dbHandle, query, sizeof(query), "UPDATE `truck_cargo` SET `%s`='%i' WHERE `id`=%i", row, value, TruckCargo[id][tID]);
	mysql_tquery(dbHandle, query);
	return 1;
}

stock set_house_int(id, row[], value)
{
	new query[128];
    mysql_format(dbHandle, query, sizeof(query), "UPDATE `houses` SET `%s`='%i' WHERE `id`=%i", row, value, HouseInfo[id][hID]);
	mysql_tquery(dbHandle, query);
	return 1;
}

stock set_faction_int(id, row[], value)
{
	new query[128];
    mysql_format(dbHandle, query, sizeof(query), "UPDATE `factions` SET `%s`='%i' WHERE `id`=%i", row, value, Factions[id][fID]);
	mysql_tquery(dbHandle, query);
	return 1;
}

stock set_account_int(id, row[], value)
{
	new query[128];
    mysql_format(dbHandle, query, sizeof(query), "UPDATE `accounts` SET `%s`='%i' WHERE `id`=%i", row, value, PlayerInfo[id][pAccID]);
	mysql_tquery(dbHandle, query);
	return 1;
}

stock set_user_int(id, row[], value)
{
	new query[128];
    mysql_format(dbHandle, query, sizeof(query), "UPDATE `users` SET `%s`='%i' WHERE `id`=%i", row, value, PlayerInfo[id][pID]);
	mysql_tquery(dbHandle, query);
	return 1;
}

stock Save_HouseInventory(houseid)
{
    if(houseid < 0 || houseid > MAX_HOUSES || HouseInfo[houseid][hID] == 0)
	    return 1;

    static const query_size[] = "UPDATE `houses` SET `inv_1`='%i',`inv_2`='%i',`inv_3`='%i',`inv_4`='%i',`inv_5`='%i',`inv_6`='%i',`inv_7`='%i',`inv_8`='%i',`inv_9`='%i',`inv_10`='%i',\
        `amount_1`='%i',`amount_2`='%i',`amount_3`='%i',`amount_4`='%i',`amount_5`='%i',`amount_6`='%i',`amount_7`='%i',`amount_8`='%i',`amount_9`='%i',`amount_10`='%i' \
        WHERE `id`='%i'";

	new query[sizeof(query_size) - 22 + (11 * 21) + 1];
	format(query, sizeof(query), query_size,
        HouseInfo[houseid][hInv][0],
        HouseInfo[houseid][hInv][1],
        HouseInfo[houseid][hInv][2],
        HouseInfo[houseid][hInv][3],
        HouseInfo[houseid][hInv][4],
        HouseInfo[houseid][hInv][5],
        HouseInfo[houseid][hInv][6],
        HouseInfo[houseid][hInv][7],
        HouseInfo[houseid][hInv][8],
        HouseInfo[houseid][hInv][9],
        HouseInfo[houseid][hInvAmount][0],
        HouseInfo[houseid][hInvAmount][1],
        HouseInfo[houseid][hInvAmount][2],
        HouseInfo[houseid][hInvAmount][3],
        HouseInfo[houseid][hInvAmount][4],
        HouseInfo[houseid][hInvAmount][5],
        HouseInfo[houseid][hInvAmount][6],
        HouseInfo[houseid][hInvAmount][7],
        HouseInfo[houseid][hInvAmount][8],
        HouseInfo[houseid][hInvAmount][9],
        HouseInfo[houseid][hID]
	);
	mysql_tquery(dbHandle, query);
	//printf("HINVENTORY: %s, STRLEN: %i", query, strlen(query));
	//printf("STR: %i", sizeof(query_size));
	return 1;
}

stock Sell_House(houseid)
{
    for(new i; i < MAX_FURNITURE; i++)
	{
	    if(HouseFurniture[houseid][i][fID] == 0 || HouseFurniture[houseid][i][fOn] == 0)
			continue;

	    HouseFurniture[houseid][i][fID] = 0;
	    HouseFurniture[houseid][i][fOn] = 0;
	    DestroyDynamicObject(HouseFurniture[houseid][i][fObject]);
	}

   	new query[128];
	mysql_format(dbHandle, query, sizeof(query), "DELETE FROM `furnitures` WHERE `houseid` = %i", HouseInfo[houseid][hID]);
	mysql_tquery(dbHandle, query);

    HouseInfo[houseid][hLocked] = 1;
	HouseInfo[houseid][hOwnerID] = 0;
 	StopHouseBoomBox(houseid);
	HouseInfo[houseid][hRadio] = 0;
	HouseInfo[houseid][hRadioOn] = 0;
	HouseInfo[houseid][hDDoor] = 0;
    HouseInfo[houseid][hCash] = 0;
    HouseInfo[houseid][hFurniture] = 0;
    HouseInfo[houseid][hOutsideFurniture] = 0;
    HouseInfo[houseid][hFurnitureRadius] = 7.0;
	for(new i = 0; i < MAX_HOUSE_INVENTORY; i++)
	{
		HouseInfo[houseid][hInv][i] = 0;
		HouseInfo[houseid][hInvAmount][i] = 0;
	}
	for(new i = 0; i != MAX_GARAGES; i++)
	{
	    if(0 == GarageInfo[i][garageID] || GarageInfo[i][garageHouse] != HouseInfo[houseid][hID])
	        continue;

        GarageInfo[i][garageOwner] = 0;

		mysql_format(dbHandle, query, sizeof(query), "UPDATE `garage` SET `owner`='0' WHERE `id`='%i'", GarageInfo[i][garageID]);
		mysql_tquery(dbHandle, query);
	}

	UpdateHouseText(houseid);
	Save_House(houseid);
	Save_HouseInventory(houseid);
	return 1;
}

stock Save_House(houseid)
{
	if(houseid < 0 || houseid > MAX_HOUSES || HouseInfo[houseid][hID] == 0)
	    return 1;

	new query[1024];
    //=====================================================================================
	mysql_format(dbHandle, query, sizeof(query), "UPDATE `houses` SET `owner`='%i',`locked`='%i',`price`= %i,`levelbuy`='%i',`exitint`='%i',`exitvw`='%i',`cash`='%i',`class`='%i',`heal`='%i',`heal_amount`='%i'",
		HouseInfo[houseid][hOwnerID],
		HouseInfo[houseid][hLocked],
		HouseInfo[houseid][hPrice],
		HouseInfo[houseid][hLevelbuy],
		HouseInfo[houseid][hExitInt],
		HouseInfo[houseid][hExitVW],
		HouseInfo[houseid][hCash],
		HouseInfo[houseid][hClass],
		HouseInfo[houseid][hHeal],
		HouseInfo[houseid][hHealAmount]
	);
    //=====================================================================================
	mysql_format(dbHandle, query, sizeof(query), "%s,`checkx`='%f',`checky`='%f',`checkz`='%f',`radio`='%i',`lock`='%i',`alarm`='%i',`door`='%i',`ddoor`='%i',`posint`='%i',`posvw`='%i'",
		query,
		HouseInfo[houseid][hCheckPosX],
		HouseInfo[houseid][hCheckPosY],
		HouseInfo[houseid][hCheckPosZ],
		HouseInfo[houseid][hRadio],
		HouseInfo[houseid][hLock],
		HouseInfo[houseid][hAlarm],
		HouseInfo[houseid][hDoor],
		HouseInfo[houseid][hDDoor],
		HouseInfo[houseid][hPosInt],
		HouseInfo[houseid][hPosVW]
	);
    //=====================================================================================
	mysql_format(dbHandle, query, sizeof(query), "%s,`cupboard`='%i',`exitx`='%f',`exity`='%f',`exitz`='%f',`furniture_radius`='%f' WHERE `id`='%i'",
        query,
 		HouseInfo[houseid][hCupboard],
		HouseInfo[houseid][hExitX],
		HouseInfo[houseid][hExitY],
		HouseInfo[houseid][hExitZ],
		HouseInfo[houseid][hFurnitureRadius],
		HouseInfo[houseid][hID]
	);
    //=====================================================================================
	mysql_tquery(dbHandle, query);
	return 1;
}

stock Save_Apart(apartid)
{
	static const query_size[] = "UPDATE `apartment` SET `exitint`='%i',`exitvw`='%i',`posint`='%i',`posvw`='%i',`exitx`='%f',`exity`='%f',`exitz`='%f',`posx`='%f',`posy`='%f',`posz`='%f' WHERE `id` = %i";
    new query[sizeof(query_size) - 22 + (11 * 11)];
	format(query, sizeof(query), query_size,
		ApartInfo[apartid][aExitInt],
		ApartInfo[apartid][aExitVW],
		ApartInfo[apartid][aPosInt],
		ApartInfo[apartid][aPosVW],
		ApartInfo[apartid][aExitX],
		ApartInfo[apartid][aExitY],
		ApartInfo[apartid][aExitZ],
		ApartInfo[apartid][aPosX],
		ApartInfo[apartid][aPosY],
		ApartInfo[apartid][aPosZ],
		ApartInfo[apartid][aID]
	);
	mysql_tquery(dbHandle, query);
	return 1;
}

stock OnPlayerBuyFurniture(houseid, interior, world, furnitureslot, model, price, name[], Float:x, Float:y, Float:z, category, Float:rx = 0.0, Float:ry = 0.0, Float:rz = 0.0, texture_0= -1 ,texture_1= -1 ,texture_2= -1 ,texture_3= -1, texture_4= -1)
{
    new query[512];
	mysql_format(dbHandle, query, sizeof(query), "INSERT INTO `furnitures` (model, name, houseid, interior, virworld, marketprice, posx, posy, posz, category, texture_0, texture_1, texture_2, texture_3, texture_4) VALUES (%i, '%e', %i, %i, %i, %i, %f, %f, %f, %i, %i, %i, %i, %i, %i)",
	model, name, HouseInfo[houseid][hID], interior, world, price, x, y ,z, category, texture_0, texture_1, texture_2, texture_3, texture_4);
	mysql_tquery(dbHandle, query, "OnFurnitureInsert", "iiiiiisfffifffiiiii", houseid, interior, world, furnitureslot, model, price, name, x, y, z, category, rx, ry, rz, texture_0, texture_1, texture_2, texture_3, texture_4);
	return 1;
}

stock OnPlayerEditedFurniture(houseid, furnitureslot, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
    new query[256];
	mysql_format(dbHandle, query, sizeof(query), "UPDATE `furnitures` SET `posx` = %f, `posy` = %f, `posz` = %f, `posrx` = %f, `posry` = %f, `posrz` = %f WHERE `id` = %i",
	x, y, z, rx, ry, rz, HouseFurniture[houseid][furnitureslot][fID]);
	mysql_tquery(dbHandle, query);

	HouseFurniture[houseid][furnitureslot][fPosX] = x;
	HouseFurniture[houseid][furnitureslot][fPosY] = y;
	HouseFurniture[houseid][furnitureslot][fPosZ] = z;
	HouseFurniture[houseid][furnitureslot][fPosRX] = rx;
	HouseFurniture[houseid][furnitureslot][fPosRY] = ry;
	HouseFurniture[houseid][furnitureslot][fPosRZ] = rz;
	return 1;
}

stock OnPlayerSellFurniture(houseid, furnitureslot)
{
    new query[128];
	mysql_format(dbHandle, query, sizeof(query), "DELETE FROM `furnitures` WHERE `id` = %i", HouseFurniture[houseid][furnitureslot][fID]);
	mysql_tquery(dbHandle, query);

    HouseInfo[houseid][hFurniture]--;
    if(HouseFurniture[houseid][furnitureslot][fVirtualWorld] != HouseInfo[houseid][hExitVW])
		HouseInfo[houseid][hOutsideFurniture]--;

    DestroyDynamicObject(HouseFurniture[houseid][furnitureslot][fObject]);
	HouseFurniture[houseid][furnitureslot][fInterior] = 0;
	HouseFurniture[houseid][furnitureslot][fVirtualWorld] = 0;
	HouseFurniture[houseid][furnitureslot][fMarketPrice] = 0;
	HouseFurniture[houseid][furnitureslot][fModel] = 0;
	HouseFurniture[houseid][furnitureslot][fPosX] = 0.0;
	HouseFurniture[houseid][furnitureslot][fPosY] = 0.0;
	HouseFurniture[houseid][furnitureslot][fPosZ] = 0.0;
	HouseFurniture[houseid][furnitureslot][fPosRX] = 0.0;
	HouseFurniture[houseid][furnitureslot][fPosRY] = 0.0;
	HouseFurniture[houseid][furnitureslot][fPosRZ] = 0.0;
	format(HouseFurniture[houseid][furnitureslot][fName], 64, "Null");
	HouseFurniture[houseid][furnitureslot][fOn] = 0;
	return 1;
}
stock AddChannelToFile(playerid, channelid, pass[], id)
{
    new query[128 + 128];
	mysql_format(dbHandle, query, sizeof(query), "INSERT INTO `radios` (channelid, owner, pass) VALUES (%i, %i, '%e')", channelid, PlayerInfo[playerid][pID], pass);
	mysql_tquery(dbHandle, query, "OnChannelInsert", "ii", playerid, id);
	return 1;
}

stock Save_CarInventory(vehicleid)
{
    if(VehicleInfo[vehicleid][carOwnerID] == 0)
	    return 1;

	static const query_size[] = "UPDATE `cars` SET `inv_1`='%i',`inv_2`='%i',`inv_3`='%i',`inv_4`='%i',`inv_5`='%i',`inv_6`='%i',`inv_7`='%i',`inv_8`='%i',`inv_9`='%i',`inv_10`='%i',\
        `amount_1`='%i',`amount_2`='%i',`amount_3`='%i',`amount_4`='%i',`amount_5`='%i',`amount_6`='%i',`amount_7`='%i',`amount_8`='%i',`amount_9`='%i',`amount_10`='%i' \
        WHERE `id`='%i'";

	new query[sizeof(query_size) - 22 + (11 * 21) + 1];
	format(query, sizeof(query), query_size,
        VehicleInfo[vehicleid][carInv][0],
        VehicleInfo[vehicleid][carInv][1],
        VehicleInfo[vehicleid][carInv][2],
        VehicleInfo[vehicleid][carInv][3],
        VehicleInfo[vehicleid][carInv][4],
        VehicleInfo[vehicleid][carInv][5],
        VehicleInfo[vehicleid][carInv][6],
        VehicleInfo[vehicleid][carInv][7],
        VehicleInfo[vehicleid][carInv][8],
        VehicleInfo[vehicleid][carInv][9],
        VehicleInfo[vehicleid][carInvAmount][0],
        VehicleInfo[vehicleid][carInvAmount][1],
        VehicleInfo[vehicleid][carInvAmount][2],
        VehicleInfo[vehicleid][carInvAmount][3],
        VehicleInfo[vehicleid][carInvAmount][4],
        VehicleInfo[vehicleid][carInvAmount][5],
        VehicleInfo[vehicleid][carInvAmount][6],
        VehicleInfo[vehicleid][carInvAmount][7],
        VehicleInfo[vehicleid][carInvAmount][8],
        VehicleInfo[vehicleid][carInvAmount][9],
        VehicleInfo[vehicleid][carID]
	);
	mysql_tquery(dbHandle, query);
	return 1;
}

stock Save_Car(vehicleid)
{
	if(VehicleInfo[vehicleid][carOwnerID] == 0)
	    return 1;

	new Float:hp,
		panels,
		doorss,
		lightss,
		tires;

	GetVehicleHealth(vehicleid, hp);
	GetVehicleDamageStatus(vehicleid, panels, doorss, lightss, tires);

	new query[1024];
	//=====================================================================================
	format(query, sizeof(query), "UPDATE `cars` SET `color1`='%i',`color2`='%i',`x`='%f',`y`='%f',`z`='%f',`fa`='%f',`engine`='%f',`milliage`='%f'",
		VehicleInfo[vehicleid][carColor1],
		VehicleInfo[vehicleid][carColor2],
		VehicleInfo[vehicleid][carParkX],
		VehicleInfo[vehicleid][carParkY],
		VehicleInfo[vehicleid][carParkZ],
		VehicleInfo[vehicleid][carParkA],
		VehicleInfo[vehicleid][carEngine],
		VehicleInfo[vehicleid][carMilliage]
	);
	//=====================================================================================
	format(query, sizeof(query), "%s,`plate`='%s',`owner`='%i',`battery`='%f',`battery_time`='%i',`health`='%f',`engine_time`='%i',`armour`='%f',`vw`='%i',`int`='%i'",
        query,
		VehicleInfo[vehicleid][carPlate],
		VehicleInfo[vehicleid][carOwnerID],
		VehicleInfo[vehicleid][carBattery],
		VehicleInfo[vehicleid][carBatteryStatus],
		hp,
		VehicleInfo[vehicleid][carEngineStatus],
		VehicleInfo[vehicleid][carArmour],
		VehicleInfo[vehicleid][carVW],
		VehicleInfo[vehicleid][carInt]
	);
	//=====================================================================================
	format(query, sizeof(query), "%s,`alarm`='%i',`locks`='%i',`immob`='%i',`insurances`='%i',`destroys`='%i',`gps`='%i',`fuel`='%i',`registered`='%i'",
		query,
		VehicleInfo[vehicleid][carAlarm],
		VehicleInfo[vehicleid][carLock],
		VehicleInfo[vehicleid][carImmob],
		VehicleInfo[vehicleid][carInsurance],
		VehicleInfo[vehicleid][carDestroyed],
		VehicleInfo[vehicleid][carGps],
		VehicleInfo[vehicleid][carFuel],
		VehicleInfo[vehicleid][carRegistered]
	);
	//=====================================================================================
	format(query, sizeof(query), "%s,`comp0`='%i',`comp1`='%i',`comp2`='%i',`comp3`='%i',`comp4`='%i',`comp5`='%i',`comp6`='%i'",
        query,
		VehicleInfo[vehicleid][carComponent][0],
		VehicleInfo[vehicleid][carComponent][1],
		VehicleInfo[vehicleid][carComponent][2],
		VehicleInfo[vehicleid][carComponent][3],
		VehicleInfo[vehicleid][carComponent][4],
		VehicleInfo[vehicleid][carComponent][5],
		VehicleInfo[vehicleid][carComponent][6]
	);
	//=====================================================================================
	format(query, sizeof(query), "%s,`comp7`='%i',`comp8`='%i',`comp9`='%i',`comp10`='%i',`comp11`='%i',`comp12`='%i',`comp13`='%i',`paintjob`='%i'",
        query,
		VehicleInfo[vehicleid][carComponent][7],
		VehicleInfo[vehicleid][carComponent][8],
		VehicleInfo[vehicleid][carComponent][9],
		VehicleInfo[vehicleid][carComponent][10],
		VehicleInfo[vehicleid][carComponent][11],
		VehicleInfo[vehicleid][carComponent][12],
		VehicleInfo[vehicleid][carComponent][13],
		VehicleInfo[vehicleid][carPaintJob]
	);
	//=====================================================================================
	mysql_format(dbHandle, query, sizeof(query), "%s,`radio`='%i',`comps`='%i',`panels`='%i',`doors`='%i',`lights`='%i',`tires`='%i' WHERE `id`='%i'",
        query,
		VehicleInfo[vehicleid][carRadio],
		VehicleInfo[vehicleid][carComps],
		panels,
		doorss,
		lightss,
		tires,
		VehicleInfo[vehicleid][carID]
	);
	mysql_tquery(dbHandle, query);
	//printf("%s", query);
	return 1;
}

stock Save_CarAttach(vehicleid, i)
{
	if(VehicleInfo[vehicleid][carOwnerID] == 0)
	    return 1;

	static const query_size[] = "UPDATE `cars` SET `attach%i_pos0`='%f',`attach%i_pos1`='%f',`attach%i_pos2`='%f',`attach%i_rot0`='%f',`attach%i_rot1`='%f',`attach%i_rot2`='%f' WHERE `id`='%i'";
	new query[sizeof(query_size) - 26 + 11 + (11 * 7) + 1];
	format(query, sizeof(query), query_size,
		i,VehicleInfo[vehicleid][carAttachPosX][i],
		i,VehicleInfo[vehicleid][carAttachPosY][i],
		i,VehicleInfo[vehicleid][carAttachPosZ][i],
		i,VehicleInfo[vehicleid][carAttachRotX][i],
		i,VehicleInfo[vehicleid][carAttachRotY][i],
		i,VehicleInfo[vehicleid][carAttachRotZ][i],
		VehicleInfo[vehicleid][carID]
	);
	return 1;
}

stock Sell_Business(bizid)
{
    BizInfo[bizid][bizOwnerID] = 0;
	BizInfo[bizid][bizLocked] = 0;
	BizInfo[bizid][bizRadio] = 0;
	BizInfo[bizid][bizRadioOn] = 0;
	BizInfo[bizid][bizDDoor] = 0;
	BizInfo[bizid][bizCash] = 0;
	BizInfo[bizid][bizEntrance] = 0;
	strmid(BizInfo[bizid][bizOwner], "The State", 0, strlen("The State"), MAX_PLAYER_NAME);
	UpdateBusinessDoor(bizid);
	StopBusinessBoomBox(bizid);
	for(new i = 0; i != MAX_GARAGES; i++)
	{
	    if(0 == GarageInfo[i][garageID] || GarageInfo[i][garageBiz] != BizInfo[bizid][bizID])
	        continue;

        GarageInfo[i][garageOwner] = 0;

        new query[128];
		mysql_format(dbHandle, query, sizeof(query), "UPDATE `garage` SET `owner`='0' WHERE `id`='%i'", GarageInfo[i][garageID]);
		mysql_tquery(dbHandle, query);
	}
	Save_Business(bizid);
	return 1;
}

stock Save_Business(bizid)
{
    new query[1024];
    //
	mysql_format(dbHandle, query, sizeof(query), "UPDATE `business` SET `locked`='%i',`price`='%i',`freeze`='%i',`levelbuy`='%i',`exitint`='%i',`exitvw`='%i',`cash`='%i',`type`='%i',`entrance`='%i'",
		BizInfo[bizid][bizLocked],
		BizInfo[bizid][bizPrice],
		BizInfo[bizid][bizFreeze],
		BizInfo[bizid][bizLevelbuy],
		BizInfo[bizid][bizExitInt],
		BizInfo[bizid][bizExitVW],
		BizInfo[bizid][bizCash],
		BizInfo[bizid][bizType],
		BizInfo[bizid][bizEntrance]
	);
	//=============================================================================
	mysql_format(dbHandle,query, sizeof(query), "%s,`owner`='%i',`name`='%e',`entermsg`='%e',`posint`='%i',`posvw`='%i'",
		query,
		BizInfo[bizid][bizOwnerID],
		BizInfo[bizid][bizName],
		BizInfo[bizid][bizMes],
		BizInfo[bizid][bizPosInt],
		BizInfo[bizid][bizPosVW]
	);
	//=============================================================================
	mysql_format(dbHandle, query, sizeof(query), "%s,`posx`='%f',`posy`='%f',`posz`='%f',`exitx`='%f',`exity`='%f',`exitz`='%f',`radio`='%i'",
        query,
		BizInfo[bizid][bizPosX],
		BizInfo[bizid][bizPosY],
		BizInfo[bizid][bizPosZ],
		BizInfo[bizid][bizExitX],
		BizInfo[bizid][bizExitY],
		BizInfo[bizid][bizExitZ],
		BizInfo[bizid][bizRadio]
	);
	//=============================================================================
	mysql_format(dbHandle, query, sizeof(query), "%s,`ddoor`='%i',`productprice0`='%i',`productprice1`='%i',`productprice2`='%i',`productprice3`='%i',`product`='%i',`buy_price`='%i' WHERE `id`='%i'",
        query,
		BizInfo[bizid][bizDDoor],
		BizInfo[bizid][bizProductPrice][0],
		BizInfo[bizid][bizProductPrice][1],
		BizInfo[bizid][bizProductPrice][2],
		BizInfo[bizid][bizProductPrice][3],
		BizInfo[bizid][bizProduct],
		BizInfo[bizid][bizBuyPrice],
		BizInfo[bizid][bizID]
	);
	mysql_tquery(dbHandle, query);
	//
	//printf("BUPDATE: %s. STRLEN: %i", query, strlen(query));
	return 1;
}
public LoadDynamicGates()
{
    new rows = cache_num_rows(),
	    time = GetTickCount(),
		total;

	if(!rows)
	{
	    print("[Gates] ?????? ?? ???????.");
	    return 1;
	}
	for ( new i = 0; i < rows; i++)
	{
		Gates[i][gateID] = cache_get_field_content_int(i, "id");
		Gates[i][gateModel] = cache_get_field_content_int(i, "model");
		Gates[i][gateFaction] = cache_get_field_content_int(i, "faction");

        Gates[i][gatePosX] = cache_get_field_content_float(i, "posx");
        Gates[i][gatePosY] = cache_get_field_content_float(i, "posy");
        Gates[i][gatePosZ] = cache_get_field_content_float(i, "posz");
        Gates[i][gatePosRX] = cache_get_field_content_float(i, "posrx");
        Gates[i][gatePosRY] = cache_get_field_content_float(i, "posry");
        Gates[i][gatePosRZ] = cache_get_field_content_float(i, "posrz");
        Gates[i][gateSpeed] = cache_get_field_content_float(i, "speed");
        Gates[i][gateRadius] = cache_get_field_content_float(i, "radius");
        Gates[i][gateMoveX] = cache_get_field_content_float(i, "movex");
        Gates[i][gateMoveY] = cache_get_field_content_float(i, "movey");
        Gates[i][gateMoveZ] = cache_get_field_content_float(i, "movez");
        Gates[i][gateMoveRX] = cache_get_field_content_float(i, "moverx");
        Gates[i][gateMoveRY] = cache_get_field_content_float(i, "movery");
        Gates[i][gateMoveRZ] = cache_get_field_content_float(i, "moverz");
        Gates[i][gateInt] = cache_get_field_content_int(i, "interior");
		Gates[i][gateVW] = cache_get_field_content_int(i, "virworld");
        Gates[i][gateSound] = cache_get_field_content_int(i, "sound");

        Gates[i][gateObject] =
			CreateDynamicObject(Gates[i][gateModel], Gates[i][gatePosX], Gates[i][gatePosY], Gates[i][gatePosZ], Gates[i][gatePosRX], Gates[i][gatePosRY], Gates[i][gatePosRZ], Gates[i][gateVW], Gates[i][gateInt], -1, 200.0);

        Gates[i][gateOpened] = 0;
		Gates[i][gateObjectOn] = 1;

		total++;
	}
	printf("[Gates] ????? - %i. ????????? - %i. ?????????: %i ms.", rows, total, GetTickCount()-time);
	return 1;
}

public LoadDynamicATMS()
{
    new rows = cache_num_rows(),
	    time = GetTickCount(),
		total;

	if(!rows)
	{
	    print("[ATM] ?????? ?? ???????.");
	    return 1;
	}

	for(new i; i < rows; i++)
	{
	    ATMInfo[i][atmID] = cache_get_field_content_int(i, "id");
		ATMInfo[i][atmPosX] = cache_get_field_content_float(i, "posx");
		ATMInfo[i][atmPosY] = cache_get_field_content_float(i, "posy");
		ATMInfo[i][atmPosZ] = cache_get_field_content_float(i, "posz");
		ATMInfo[i][atmPosRZ] = cache_get_field_content_float(i, "posrz");
		ATMInfo[i][atmInt] = cache_get_field_content_int(i, "interior");
		ATMInfo[i][atmVW] = cache_get_field_content_int(i, "vw");

		ATMInfo[i][atmObject] =
			CreateDynamicObject(2942, ATMInfo[i][atmPosX], ATMInfo[i][atmPosY], ATMInfo[i][atmPosZ], 0.0, 0.0, ATMInfo[i][atmPosRZ], ATMInfo[i][atmVW], ATMInfo[i][atmInt]);

		total++;
	}
	printf("[ATM] ????? - %i. ????????? - %i. ?????????: %i ms.", rows, total, GetTickCount()-time);
	return 1;
}

public LoadDynamicTeles()
{
    new rows = cache_num_rows(),
	    time = GetTickCount(),
		total;

	if(!rows)
	{
	    print("[Teles] ?????? ?? ???????.");
	    return 1;
	}

	for(new i; i < rows; i++)
	{
	    AdminTeles[i][aID] = cache_get_field_content_int(i, "id");
		cache_get_field_content(i, "mapname", AdminTeles[i][telesMapName], dbHandle, 32);
		AdminTeles[i][telesPosX] = cache_get_field_content_float(i, "posx");
		AdminTeles[i][telesPosY] = cache_get_field_content_float(i, "posy");
		AdminTeles[i][telesPosZ] = cache_get_field_content_float(i, "posz");
		AdminTeles[i][telesInt] = cache_get_field_content_int(i, "interior");
		AdminTeles[i][telesType] = cache_get_field_content_int(i, "type");

		AdminTeles[i][telesOn] = 1;
        total++;
	}
	printf("[Teles] ????? - %i. ????????? - %i. ?????????: %i ms.", rows, total, GetTickCount()-time);
	return 1;
}
public LoadDynamicObjects()
{
	new rows = cache_num_rows(),
	    time = GetTickCount(),
		total,
		query[128];

	if(!rows)
	{
	    print("[Objects] ?????? ?? ???????.");
	    return 1;
	}

	for(new i; i < rows; i++)
	{
	    ObjectsInfo[i][oID] = cache_get_field_content_int(i, "id");
	    ObjectsInfo[i][oModel] = cache_get_field_content_int(i, "model");
		ObjectsInfo[i][oPosX] = cache_get_field_content_float(i, "posx");
	    ObjectsInfo[i][oPosY] = cache_get_field_content_float(i, "posy");
	    ObjectsInfo[i][oPosZ] = cache_get_field_content_float(i, "posz");
	    ObjectsInfo[i][oPosRX] = cache_get_field_content_float(i, "posrx");
	    ObjectsInfo[i][oPosRY] = cache_get_field_content_float(i, "posry");
	    ObjectsInfo[i][oPosRZ] = cache_get_field_content_float(i, "posrz");
	    ObjectsInfo[i][oInt] = cache_get_field_content_int(i, "interior");
	    ObjectsInfo[i][oVW] = cache_get_field_content_int(i, "virworld");

        ObjectsInfo[i][oObject] =
			CreateDynamicObject(ObjectsInfo[i][oModel], ObjectsInfo[i][oPosX], ObjectsInfo[i][oPosY], ObjectsInfo[i][oPosZ], ObjectsInfo[i][oPosRX], ObjectsInfo[i][oPosRY], ObjectsInfo[i][oPosRZ], ObjectsInfo[i][oVW], ObjectsInfo[i][oInt], -1, 200.0);

		ObjectsInfo[i][oObjectOn] = 1;

		mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `objects_texture` WHERE `objectid` = %i", ObjectsInfo[i][oID]);
		mysql_tquery(dbHandle, query, "LoadObjectTexture", "i", i);

		total++;
	}
	printf("[Objects] ????? - %i. ????????? - %i. ?????????: %i ms.", rows, total, GetTickCount()-time);
	return 1;
}

forward LoadObjectTexture(objectid);
public LoadObjectTexture(objectid)
{
	new rows = cache_num_rows(),
	    slot,
	    model,
	    txdname[32],
	    texturename[32];

	if(!rows)
	    return 1;

    for(new i; i < rows; i++)
	{
	    slot = cache_get_field_content_int(i, "slot");
	    model = cache_get_field_content_int(i, "model");
		cache_get_field_content(i, "txd_name", txdname, dbHandle, 32);
		cache_get_field_content(i, "texture_name", texturename, dbHandle, 32);

		if(IsValidDynamicObject(ObjectsInfo[objectid][oObject]))
			SetDynamicObjectMaterial(ObjectsInfo[objectid][oObject], slot, model, txdname, texturename, 0);
	}
	return 1;
}

forward OnObjectTextureInsert(playerid, id, slot, model, txdname[], texturename[]);
public OnObjectTextureInsert(playerid, id, slot, model, txdname[], texturename[])
{
	if(cache_num_rows())
	    return SendErrorMessage(playerid, "???? %i ??? ????? ?????? ?????????. (/editobject deltexture - ??????? ????????)", slot);

    if(0 == SetDynamicObjectMaterial(ObjectsInfo[id][oObject], slot, model, txdname, texturename, 0))
		return SendErrorMessage(playerid, "?? ??????? ???????? ???????? ???????.");

    new query[256];
	mysql_format(dbHandle, query, sizeof(query), "INSERT INTO `objects_texture` (objectid, slot, model, txd_name, texture_name) VALUES (%i,%i,%i,'%e','%e')",
	ObjectsInfo[id][oID], slot, model, txdname, texturename);
	mysql_tquery(dbHandle, query);

	SendClientMessageEx(playerid, COLOR_GREEN, "?? ???????? ??????? ID: %i ???????? (????: %i | Model ID: %i | TXD Name: %s | Texture Name: %s)", id, slot, model, txdname, texturename);
	return 1;
}

public LoadDynamicCCTV()
{
    new rows = cache_num_rows(),
	    time = GetTickCount(),
		total;

	if(!rows)
	{
	    print("[CCTV] ?????? ?? ???????.");
	    return 1;
	}

	for(new i; i < rows; i++)
	{
	    CCTVInfo[i][tvID] = cache_get_field_content_int(i, "id");
		CCTVInfo[i][tvPosX] = cache_get_field_content_float(i, "posx");
		CCTVInfo[i][tvPosY] = cache_get_field_content_float(i, "posy");
		CCTVInfo[i][tvPosZ] = cache_get_field_content_float(i, "posz");
		CCTVInfo[i][tvPosRX] = cache_get_field_content_float(i, "posrx");
		CCTVInfo[i][tvPosRY] = cache_get_field_content_float(i, "posry");
		CCTVInfo[i][tvPosRZ] = cache_get_field_content_float(i, "posrz");
		CCTVInfo[i][tvInt] = cache_get_field_content_int(i, "interior");
		CCTVInfo[i][tvVW] = cache_get_field_content_int(i, "virworld");
		cache_get_field_content(i, "info", CCTVInfo[i][tvName], dbHandle, 32);

	    CCTVInfo[i][tvObject] =
			CreateDynamicObject(1886, CCTVInfo[i][tvPosX], CCTVInfo[i][tvPosY], CCTVInfo[i][tvPosZ], CCTVInfo[i][tvPosRX], CCTVInfo[i][tvPosRY], CCTVInfo[i][tvPosRZ], CCTVInfo[i][tvVW], CCTVInfo[i][tvInt]);

        total++;
	}
	printf("[CCTV] ????? - %i. ????????? - %i. ?????????: %i ms.", rows, total, GetTickCount()-time);
	return 1;
}

public LoadDynamicCars()
{
	new rows = cache_num_rows(),
	    time = GetTickCount(),
		total;

    new sqlid, model, color1, color2, faction, Float:x, Float:y, Float:z, Float:a, type, plate[24], vw, interior;

	if(!rows)
	{
	    print("[Cars] ?????? ?? ???????.");
	    return 1;
	}

	for(new i; i < rows; i++)
	{
		sqlid = cache_get_field_content_int(i, "id");
		model = cache_get_field_content_int(i, "model");
		x = cache_get_field_content_float(i, "x");
		y = cache_get_field_content_float(i, "y");
		z = cache_get_field_content_float(i, "z");
		a = cache_get_field_content_float(i, "fa");
		color1 = cache_get_field_content_int(i, "color1");
		color2 = cache_get_field_content_int(i, "color2");
		type = cache_get_field_content_int(i, "type");
		faction = cache_get_field_content_int(i, "faction");
		cache_get_field_content(i, "plate", plate, dbHandle, 24);
		interior = cache_get_field_content_int(i, "int");
		vw = cache_get_field_content_int(i, "vw");

		CreateFactionVehicle(false, model, x, y, z, a, color1, color2, type, faction, plate, vw, interior, sqlid);
		total++;
	}
    printf("[Cars] ????? - %i. ????????? - %i. ?????????: %i ms.", rows, total, GetTickCount()-time);
	return 1;
}

public LoadDynamicHouses()
{
	new rows = cache_num_rows(),
	    time = GetTickCount(),
		total,
  		query[128];

	if(!rows)
	{
	    print("[Houses] ?????? ?? ???????.");
	    return 1;
	}

	for(new i; i < rows; i++)
	{
		HouseInfo[i][hID] = cache_get_field_content_int(i, "id");
		HouseInfo[i][hPosX] = cache_get_field_content_float(i, "posx");
		HouseInfo[i][hPosY] = cache_get_field_content_float(i, "posy");
		HouseInfo[i][hPosZ] = cache_get_field_content_float(i, "posz");
		HouseInfo[i][hExitX] = cache_get_field_content_float(i, "exitx");
		HouseInfo[i][hExitY] = cache_get_field_content_float(i, "exity");
		HouseInfo[i][hExitZ] = cache_get_field_content_float(i, "exitz");
		cache_get_field_content(i, "ownername", HouseInfo[i][hOwner], dbHandle, MAX_PLAYER_NAME);
		strreplace(HouseInfo[i][hOwner], '_', ' ');
		HouseInfo[i][hOwnerID] = cache_get_field_content_int(i, "owner");
		HouseInfo[i][hLocked] = cache_get_field_content_int(i, "locked");
		HouseInfo[i][hPrice] = cache_get_field_content_int(i, "price");
		HouseInfo[i][hLevelbuy] = cache_get_field_content_int(i, "levelbuy");
        HouseInfo[i][hCash] = cache_get_field_content_int(i, "cash");
		HouseInfo[i][hExitInt] = cache_get_field_content_int(i, "exitint");
		HouseInfo[i][hExitVW] = cache_get_field_content_int(i, "exitvw");
		HouseInfo[i][hPosInt] = cache_get_field_content_int(i, "posint");
		HouseInfo[i][hPosVW] = cache_get_field_content_int(i, "posvw");
		HouseInfo[i][hCheckPosX] = cache_get_field_content_float(i, "checkx");
		HouseInfo[i][hCheckPosY] = cache_get_field_content_float(i, "checky");
		HouseInfo[i][hCheckPosZ] = cache_get_field_content_float(i, "checkz");
		HouseInfo[i][hRadio] = cache_get_field_content_int(i, "radio");
		HouseInfo[i][hLock] = cache_get_field_content_int(i, "lock");
		HouseInfo[i][hAlarm] = cache_get_field_content_int(i, "alarm");
		HouseInfo[i][hDoor] = cache_get_field_content_int(i, "door");
		HouseInfo[i][hDDoor] = cache_get_field_content_int(i, "ddoor");
		HouseInfo[i][hClass] = cache_get_field_content_int(i, "class");
	    HouseInfo[i][hHeal] = cache_get_field_content_int(i, "heal");
	    HouseInfo[i][hHealAmount] = cache_get_field_content_int(i, "heal_amount");
	    HouseInfo[i][hCupboard] = cache_get_field_content_int(i, "cupboard");
	    HouseInfo[i][hFurnitureRadius] = cache_get_field_content_float(i, "furniture_radius");
		HouseInfo[i][hFurniture] = 0;
		HouseInfo[i][hOutsideFurniture] = 0;
        new str_inv[10];

	 	for(new a = 0; a < MAX_HOUSE_INVENTORY; a++)
		{
		    format(str_inv, sizeof(str_inv), "inv_%i", a+1);
		    HouseInfo[i][hInv][a] = cache_get_field_content_int(i, str_inv);
		    format(str_inv, sizeof(str_inv), "amount_%i", a+1);
		    HouseInfo[i][hInvAmount][a] = cache_get_field_content_int(i, str_inv);
		}

		UpdateHouseText(i);
		UpdateHouseDoor(i);

		HouseInfo[i][hCheckPoint] =
			CreateDynamicCP(HouseInfo[i][hPosX], HouseInfo[i][hPosY], HouseInfo[i][hPosZ], 1.0, HouseInfo[i][hPosVW], HouseInfo[i][hPosInt], -1, 2.0);

       	format(query, sizeof(query), "SELECT * FROM `furnitures` WHERE `houseid`='%i'", HouseInfo[i][hID]);
		mysql_tquery(dbHandle, query, "OnFurnituresLoad", "i", i);

        if(HouseInfo[i][hOwnerID] != 0 && cache_get_field_content_int(i, "lastlogin") < (gettime()-1209600))
        {
			format(query, sizeof(query), "????????????? ???????? ??? [H_MYSQL: %i] ?????? %s [MYSQL: %i]", HouseInfo[i][hID], HouseInfo[i][hOwner], HouseInfo[i][hOwnerID]);
    		insert_log(query, PROPERTY_LOG, 7, _, HouseInfo[i][hOwnerID]);

           	Sell_House(i);
        }
		total++;
	}
    printf("[Houses] ????? - %i. ????????? - %i. ?????????: %i ms.", rows, total, GetTickCount()-time);
	return 1;
}

public LoadDynamicApartment()
{
    new rows = cache_num_rows(),
	    time = GetTickCount(),
		total;

	if(!rows)
	{
	    print("[Apartments] ?????? ?? ???????.");
	    return 1;
	}

	for(new i; i < rows; i++)
	{
		ApartInfo[i][aID] = cache_get_field_content_int(i, "id");
		ApartInfo[i][aPosX] = cache_get_field_content_float(i, "posx");
		ApartInfo[i][aPosY] = cache_get_field_content_float(i, "posy");
		ApartInfo[i][aPosZ] = cache_get_field_content_float(i, "posz");
		ApartInfo[i][aExitX] = cache_get_field_content_float(i, "exitx");
		ApartInfo[i][aExitY] = cache_get_field_content_float(i, "exity");
		ApartInfo[i][aExitZ] = cache_get_field_content_float(i, "exitz");
		ApartInfo[i][aExitInt] = cache_get_field_content_int(i, "exitint");
		ApartInfo[i][aExitVW] = cache_get_field_content_int(i, "exitvw");
		ApartInfo[i][aPosInt] = cache_get_field_content_int(i, "posint");
		ApartInfo[i][aPosVW] = cache_get_field_content_int(i, "posvw");

		if(ApartInfo[i][aExitVW] == 0)
			ApartInfo[i][aExitVW] = i + 1000;

		ApartInfo[i][aApartOn] = 1;

		ApartInfo[i][aPickUp] = CreateDynamicPickup(1314, 1, ApartInfo[i][aPosX], ApartInfo[i][aPosY], ApartInfo[i][aPosZ], ApartInfo[i][aPosVW], ApartInfo[i][aPosInt], -1, 100.0);
		ApartInfo[i][aCheckPoint] = CreateDynamicCP(ApartInfo[i][aPosX], ApartInfo[i][aPosY], ApartInfo[i][aPosZ], 1.0, ApartInfo[i][aPosVW], ApartInfo[i][aPosInt], -1, 2.0);
		total++;
	}
	printf("[Apartments] ????? - %i. ????????? - %i. ?????????: %i ms.", rows, total, GetTickCount()-time);
	return 1;
}

public LoadDynamicBiz()
{
    new rows = cache_num_rows(),
	    time = GetTickCount(),
		total,
		query[128];

	if(!rows)
	{
	    print("[Biz] ?????? ?? ???????.");
	    return 1;
	}

	for(new i; i < rows; i++)
	{
	    BizInfo[i][bizID] = cache_get_field_content_int(i, "id");
		BizInfo[i][bizPosX] = cache_get_field_content_float(i, "posx");
		BizInfo[i][bizPosY] = cache_get_field_content_float(i, "posy");
		BizInfo[i][bizPosZ] = cache_get_field_content_float(i, "posz");
		BizInfo[i][bizExitX] = cache_get_field_content_float(i, "exitx");
		BizInfo[i][bizExitY] = cache_get_field_content_float(i, "exity");
		BizInfo[i][bizExitZ] = cache_get_field_content_float(i, "exitz");
		cache_get_field_content(i, "name", BizInfo[i][bizName], dbHandle, 32);
		cache_get_field_content(i, "entermsg", BizInfo[i][bizMes], dbHandle, 128);
		BizInfo[i][bizOwnerID] = cache_get_field_content_int(i, "owner");
		BizInfo[i][bizLocked] = cache_get_field_content_int(i, "locked");
		BizInfo[i][bizPrice] = cache_get_field_content_int(i, "price");
		BizInfo[i][bizFreeze] = cache_get_field_content_int(i, "freeze");
		BizInfo[i][bizLevelbuy] = cache_get_field_content_int(i, "levelbuy");
		BizInfo[i][bizExitInt] = cache_get_field_content_int(i, "exitint");
		BizInfo[i][bizExitVW] = cache_get_field_content_int(i, "exitvw");
		BizInfo[i][bizCash] = cache_get_field_content_int(i, "cash");
		BizInfo[i][bizType] = cache_get_field_content_int(i, "type"),
		BizInfo[i][bizEntrance] = cache_get_field_content_int(i, "entrance");
		BizInfo[i][bizRadio] = cache_get_field_content_int(i, "radio");
		BizInfo[i][bizDDoor] = cache_get_field_content_int(i, "ddoor");
		BizInfo[i][bizProductPrice][0] = cache_get_field_content_int(i, "productprice0");
		BizInfo[i][bizProductPrice][1] = cache_get_field_content_int(i, "productprice1");
		BizInfo[i][bizProductPrice][2] = cache_get_field_content_int(i, "productprice2");
		BizInfo[i][bizProductPrice][3] = cache_get_field_content_int(i, "productprice3");
		BizInfo[i][bizPosInt] = cache_get_field_content_int(i, "posint");
		BizInfo[i][bizPosVW] = cache_get_field_content_int(i, "posvw");
		BizInfo[i][bizProduct] = cache_get_field_content_int(i, "product");
		BizInfo[i][bizBuyPrice] = cache_get_field_content_int(i, "buy_price");
		BizInfo[i][bizLabelDDoor] = Text3D:INVALID_3DTEXT_ID;

		cache_get_field_content(i, "ownername", BizInfo[i][bizOwner], dbHandle, MAX_PLAYER_NAME);
		strreplace(BizInfo[i][bizOwner], '_', ' ');

	    BizInfo[i][bizPickUp] =
			CreateDynamicPickup(1239, 1, BizInfo[i][bizPosX], BizInfo[i][bizPosY], BizInfo[i][bizPosZ], BizInfo[i][bizPosVW], BizInfo[i][bizPosInt], -1, 100.0);
	    UpdateBusinessDoor(i);

	    if(BizInfo[i][bizOwnerID] != 0 && cache_get_field_content_int(i, "lastlogin") < (gettime()-1209600))
	    {
	        format(query, sizeof(query), "????????????? ???????? ?????? [B_MYSQL: %i] ?????? %s [MYSQL: %i]", BizInfo[i][bizID], BizInfo[i][bizOwner], BizInfo[i][bizOwnerID]);
    		insert_log(query, PROPERTY_LOG, 8, _, BizInfo[i][bizOwnerID]);

     		Sell_Business(i);
		}
        total++;
	}
	printf("[Biz] ????? - %i. ????????? - %i. ?????????: %i ms.", rows, total, GetTickCount()-time);
	return 1;
}

forward OnFurnituresLoad(houseid);
public OnFurnituresLoad(houseid)
{
	if(!cache_num_rows())
	    return 1;

	new tid;
	for(new i; i < cache_num_rows(); i++)
	{
		HouseFurniture[houseid][i][fID] = cache_get_row_int(i, 0);
		HouseFurniture[houseid][i][fModel] = cache_get_row_int(i, 1);
		cache_get_row(i, 2, HouseFurniture[houseid][i][fName], dbHandle, 64);
		HouseFurniture[houseid][i][fHouseID] = houseid;
		HouseFurniture[houseid][i][fInterior] = cache_get_row_int(i, 4);
		HouseFurniture[houseid][i][fVirtualWorld] = cache_get_row_int(i, 5);
		HouseFurniture[houseid][i][fMarketPrice] = cache_get_row_int(i, 6);
		HouseFurniture[houseid][i][fPosX] = cache_get_row_float(i, 7);
		HouseFurniture[houseid][i][fPosY] = cache_get_row_float(i, 8);
		HouseFurniture[houseid][i][fPosZ] = cache_get_row_float(i, 9);
		HouseFurniture[houseid][i][fPosRX] = cache_get_row_float(i, 10);
		HouseFurniture[houseid][i][fPosRY] = cache_get_row_float(i, 11);
		HouseFurniture[houseid][i][fPosRZ] = cache_get_row_float(i, 12);
		HouseFurniture[houseid][i][fTexture][0] = cache_get_row_int(i, 13);
		HouseFurniture[houseid][i][fTexture][1] = cache_get_row_int(i, 14);
		HouseFurniture[houseid][i][fTexture][2] = cache_get_row_int(i, 15);
		HouseFurniture[houseid][i][fTexture][3] = cache_get_row_int(i, 16);
		HouseFurniture[houseid][i][fTexture][4] = cache_get_row_int(i, 17);
		HouseFurniture[houseid][i][fCategory] = cache_get_row_int(i, 18);

		HouseFurniture[houseid][i][fOn] = 1;
		HouseFurniture[houseid][i][fObject] =
			CreateDynamicObject(HouseFurniture[houseid][i][fModel], HouseFurniture[houseid][i][fPosX], HouseFurniture[houseid][i][fPosY], HouseFurniture[houseid][i][fPosZ], HouseFurniture[houseid][i][fPosRX], HouseFurniture[houseid][i][fPosRY], HouseFurniture[houseid][i][fPosRZ], HouseFurniture[houseid][i][fVirtualWorld], HouseFurniture[houseid][i][fInterior]);

		for(new a; a != 5; a++)
		{
		    if(HouseFurniture[houseid][i][fTexture][a] == -1)
		        continue;

			tid = HouseFurniture[houseid][i][fTexture][a];
			SetDynamicObjectMaterial(HouseFurniture[houseid][i][fObject], a, ObjectTextures[tid][TModel], ObjectTextures[tid][TXDName], ObjectTextures[tid][TextureName], ObjectTextures[tid][MaterialColor]);
		}

		if(isHouseDoor(HouseFurniture[houseid][i][fModel]))
		{
			HouseFurniture[houseid][i][fLocked] = 1;
			HouseFurniture[houseid][i][fOpened] = 0;
		}
		HouseInfo[houseid][hFurniture]++;

		if(HouseFurniture[houseid][i][fVirtualWorld] != HouseInfo[houseid][hExitVW])
			HouseInfo[houseid][hOutsideFurniture]++;

	}
	return 1;
}

public LoadDynamicStands()
{
    new rows = cache_num_rows(),
	    time = GetTickCount(),
		total;

	if(!rows)
	{
	    print("[FoodStand] ?????? ?? ???????.");
	    return 1;
	}

	for(new i; i < rows; i++)
	{
	    FoodStand[i][fID] = cache_get_field_content_int(i, "id");
	    FoodStand[i][fType] = cache_get_field_content_int(i, "type");
	    FoodStand[i][fPosX] = cache_get_field_content_float(i, "posx");
	    FoodStand[i][fPosY] = cache_get_field_content_float(i, "posy");
	    FoodStand[i][fPosZ] = cache_get_field_content_float(i, "posz");
	    FoodStand[i][fPosRX] = cache_get_field_content_float(i, "posrx");
	    FoodStand[i][fPosRY] = cache_get_field_content_float(i, "posry");
	    FoodStand[i][fPosRZ] = cache_get_field_content_float(i, "posrz");

	    FoodStand[i][fVW] = cache_get_field_content_int(i, "vw");
	    FoodStand[i][fInt] = cache_get_field_content_int(i, "interior");

	    if(FoodStand[i][fType] == 1)
	    {
		    FoodStand[i][fObject] =
				CreateDynamicObject(1340, FoodStand[i][fPosX], FoodStand[i][fPosY], FoodStand[i][fPosZ], FoodStand[i][fPosRX], FoodStand[i][fPosRY], FoodStand[i][fPosRZ], FoodStand[i][fVW], FoodStand[i][fInt], -1, 200.0);

		    if(FoodStand[i][fPosRZ] < -50.0) //Done
				FoodStand[i][fPosY] += (1.2 * floatcos((-FoodStand[i][fPosRZ]+90), degrees));

			if(FoodStand[i][fPosRZ] < -150.0) //Done
				FoodStand[i][fPosX] += (1.2 * floatsin((-FoodStand[i][fPosRZ]+90), degrees));

			if(FoodStand[i][fPosRZ] >= 0.0) //Done
				FoodStand[i][fPosX] += (1.2 * floatsin((-FoodStand[i][fPosRZ]+90), degrees));

			if(FoodStand[i][fPosRZ] > 50.0) //Done
				FoodStand[i][fPosY] += (1.2 * floatcos((-FoodStand[i][fPosRZ]+90), degrees));
	    }

	    FoodStand[i][fLabel] =
			CreateDynamic3DTextLabel(""EMBED_RED"["EMBED_WHITE"??????? ? ????"EMBED_RED"]\n"EMBED_CYAN"/buyfood.", -1, FoodStand[i][fPosX], FoodStand[i][fPosY], FoodStand[i][fPosZ], 2.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, FoodStand[i][fVW], FoodStand[i][fInt], -1, 100.0);

		FoodStand[i][fPickUp] =
			CreateDynamicPickup(1239, 1, FoodStand[i][fPosX], FoodStand[i][fPosY], FoodStand[i][fPosZ], FoodStand[i][fVW], FoodStand[i][fInt], -1, 100.0);

	    FoodStand[i][fStandOn] = 1;
	    total++;
	}
	printf("[FoodStand] ????? - %i. ????????? - %i. ?????????: %i ms.", rows, total, GetTickCount()-time);
	return 1;
}

public LoadDynamicAPB()
{
    new rows = cache_num_rows(),
	    time = GetTickCount(),
		total;

	if(!rows)
	{
	    print("[APBS] ?????? ?? ???????.");
	    return 1;
	}

	for(new i = 1; i < rows; i++)
	{
	    ApbInfo[i][apbID] = cache_get_field_content_int(i-1, "id");
	    cache_get_field_content(i-1, "charge", ApbInfo[i][apbCharge], dbHandle, 128);
        cache_get_field_content(i-1, "suspect", ApbInfo[i][apbSuspect], dbHandle, MAX_PLAYER_NAME);
        cache_get_field_content(i-1, "officer", ApbInfo[i][apbOfficer], dbHandle, MAX_PLAYER_NAME);
        ApbInfo[i][apbFaction] = cache_get_field_content_int(i-1, "faction");

		ApbInfo[i][apbOn] = 1;

        total++;
	}
	printf("[APBS] ????? - %i. ????????? - %i. ?????????: %i ms.", rows, total, GetTickCount()-time);
	return 1;
}

public LoadDynamicFactions()
{
	new rows = cache_num_rows(),
	    time = GetTickCount(),
		total,
		id;

	if(!rows)
	{
	    print("[Factions] ?????? ?? ???????.");
	    return 1;
	}

	for(new i = 0; i < rows; i++)
	{
	    id = cache_get_field_content_int(i, "factionid");
		Factions[id][fID] = cache_get_field_content_int(i, "id");
		cache_get_field_content(i, "name", Factions[id][fName], dbHandle, 32);
		Factions[id][fPosX] = cache_get_field_content_float(i, "spawnx");
		Factions[id][fPosY] = cache_get_field_content_float(i, "spawny");
		Factions[id][fPosZ] = cache_get_field_content_float(i, "spawnz");
		Factions[id][fSpawnInt] = cache_get_field_content_int(i, "spawnint");
		Factions[id][fSpawnVW] = cache_get_field_content_int(i, "spawnvw");
		cache_get_field_content(i, "rank1", FactionRanks[id][0], dbHandle, 32);
		cache_get_field_content(i, "rank2", FactionRanks[id][1], dbHandle, 32);
		cache_get_field_content(i, "rank3", FactionRanks[id][2], dbHandle, 32);
		cache_get_field_content(i, "rank4", FactionRanks[id][3], dbHandle, 32);
		cache_get_field_content(i, "rank5", FactionRanks[id][4], dbHandle, 32);
		cache_get_field_content(i, "rank6", FactionRanks[id][5], dbHandle, 32);
		cache_get_field_content(i, "rank7", FactionRanks[id][6], dbHandle, 32);
		cache_get_field_content(i, "rank8", FactionRanks[id][7], dbHandle, 32);
		cache_get_field_content(i, "rank9", FactionRanks[id][8], dbHandle, 32);
		cache_get_field_content(i, "rank10", FactionRanks[id][9], dbHandle, 32);
		cache_get_field_content(i, "rank11", FactionRanks[id][10], dbHandle, 32);
		cache_get_field_content(i, "rank12", FactionRanks[id][11], dbHandle, 32);
		cache_get_field_content(i, "rank13", FactionRanks[id][12], dbHandle, 32);
		cache_get_field_content(i, "rank14", FactionRanks[id][13], dbHandle, 32);
		cache_get_field_content(i, "rank15", FactionRanks[id][14], dbHandle, 32);
		cache_get_field_content(i, "rank16", FactionRanks[id][15], dbHandle, 32);
		cache_get_field_content(i, "rank17", FactionRanks[id][16], dbHandle, 32);
		cache_get_field_content(i, "rank18", FactionRanks[id][17], dbHandle, 32);
		cache_get_field_content(i, "rank19", FactionRanks[id][18], dbHandle, 32);
		cache_get_field_content(i, "rank20", FactionRanks[id][19], dbHandle, 32);
		Factions[id][fJoinRank] = cache_get_field_content_int(i, "joinrank");
		Factions[id][fType] = cache_get_field_content_int(i, "type");
		Factions[id][fRanks] = cache_get_field_content_int(i, "ranks");
		Factions[id][fChatON] = cache_get_field_content_int(i, "chaton");
		Factions[id][fColor] = cache_get_field_content_int(i, "color");
		Factions[id][fUniformX] = cache_get_field_content_float(i, "uniform_x");
		Factions[id][fUniformY] = cache_get_field_content_float(i, "uniform_y");
		Factions[id][fUniformZ] = cache_get_field_content_float(i, "uniform_z");
		Factions[id][fUniformInt] = cache_get_field_content_int(i, "uniform_int");
		Factions[id][fUniformVW] = cache_get_field_content_int(i, "uniform_vw");
		Factions[id][fPoint] = cache_get_field_content_int(i, "point");
		Factions[id][fPointTime] = cache_get_field_content_int(i, "point_time");

		Factions[id][fON] = 1;

		if(Factions[id][fType] == FACTION_LEGAL)
			Factions[id][fPickUp] = CreateDynamicPickup(1239, 1, Factions[id][fUniformX], Factions[id][fUniformY], Factions[id][fUniformZ], Factions[id][fUniformVW], Factions[id][fUniformInt], -1, 100.0);

		if(id == LSPD)
		    Pickup_LSPD = CreateDynamicPickup(1239, 1, 1474.8829,-1799.0380,2342.1599, 23, 16, -1, 100.0);

		total++;
	}
	printf("[Factions] ????? - %i. ????????? - %i. ?????????: %i ms.", rows, total, GetTickCount()-time);
	return 1;
}

public LoadDynamicJobs()
{
	new rows = cache_num_rows(),
	    time = GetTickCount(),
		total,
		mes[128],
		jobtext[28];

	if(!rows)
	{
	    print("[Jobs] ?????? ?? ???????.");
	    return 1;
	}

	for(new i; i < rows; i++)
	{
		JobsInfo[i][jobID] = cache_get_field_content_int(i, "id");
		JobsInfo[i][jobType] = cache_get_field_content_int(i, "jobid");
		JobsInfo[i][jobX] = cache_get_field_content_float(i, "posx");
		JobsInfo[i][jobY] = cache_get_field_content_float(i, "posy");
		JobsInfo[i][jobZ] = cache_get_field_content_float(i, "posz");
		JobsInfo[i][jobInt] = cache_get_field_content_int(i, "interior");
		JobsInfo[i][jobVW] = cache_get_field_content_int(i, "vw");
		JobsInfo[i][jobOn] = 1;

		JobsInfo[i][jobPickUp] =
			CreateDynamicPickup(1314, 1, JobsInfo[i][jobX], JobsInfo[i][jobY], JobsInfo[i][jobZ], JobsInfo[i][jobVW], JobsInfo[i][jobInt], -1, 100.0);

		switch(JobsInfo[i][jobType])
		{
		    case JOB_MECHANIC: jobtext = "????????";
		    case JOB_TRUCKER: jobtext = "?????????????";
		    case JOB_TAXI: jobtext = "? ???????? ?????????";
		    case JOB_PIZZA: jobtext = "??????????? ?????";
		}

		format(mes, sizeof(mes), "/takejob - ?????????? ?? ?????? %s.", jobtext);

		JobsInfo[i][jobLabel] =
			CreateDynamic3DTextLabel(mes, -1, JobsInfo[i][jobX], JobsInfo[i][jobY], JobsInfo[i][jobZ]+0.4, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, JobsInfo[i][jobVW], JobsInfo[i][jobInt], -1, 100.0);

		total++;
	}
	printf("[Jobs] ????? - %i. ????????? - %i. ?????????: %i ms.", rows, total, GetTickCount()-time);
	return 1;
}

public LoadDynamicRadios()
{
    new rows = cache_num_rows(),
	    time = GetTickCount(),
		total;

	if(!rows)
	{
	    print("[Radio] ?????? ?? ???????.");
	    return 1;
	}

	for(new i; i < rows; i++)
	{
	    RadiosInfo[i][radioID] = cache_get_field_content_int(i, "id");
		RadiosInfo[i][radioChannel] = cache_get_field_content_int(i, "channelid");
		RadiosInfo[i][radioOwner] = cache_get_field_content_int(i, "owner");
		cache_get_field_content(i, "pass", RadiosInfo[i][radioPass], dbHandle, 33);

		RadiosInfo[i][radioOn] = 1;
		total++;
	}
	printf("[Radio] ????? - %i. ????????? - %i. ?????????: %i ms.", rows, total, GetTickCount()-time);
	return 1;
}

stock OOCMSG(color,string[])
{
	foreach(Player, i)
	{
		if(!IsPlayerLogged(i) || (PlayerInfo[i][pSettings] & togOOC))
			continue;

		SCM(i, color, string);
	}
	return 1;
}

stock NewsChat(color,string[])
{
	foreach(Player, i)
	{
		if(!IsPlayerLogged(i) || (PlayerInfo[i][pSettings] & togNews))
			continue;

		SCM(i, color, string);
	}
	return 1;
}

forward OnTowerInsert(towerid);
public OnTowerInsert(towerid)
{
	TowerInfo[towerid][towerID] = cache_insert_id();
	return 1;
}

forward OnLabelInsert(LabelID);
public OnLabelInsert(LabelID)
{
	LabelsInfo[LabelID][tID] = cache_insert_id();
	return 1;
}

forward OnTeleportInsert(playerid, teleid);
public OnTeleportInsert(playerid, teleid)
{
	AdminTeles[teleid][aID] = cache_insert_id();
	return 1;
}

forward OnObjectInsert(ObjectID);
public OnObjectInsert(ObjectID)
{
	ObjectsInfo[ObjectID][oID] = cache_insert_id();
	return 1;
}

forward OnCameraInsert(cameraid);
public OnCameraInsert(cameraid)
{
	CCTVInfo[cameraid][tvID] = cache_insert_id();
	return 1;
}

forward OnGateInsert(gateid);
public OnGateInsert(gateid)
{
	Gates[gateid][gateID] = cache_insert_id();
	return 1;
}

forward OnHouseInsert(HouseID);
public OnHouseInsert(HouseID)
{
	HouseInfo[HouseID][hID] = cache_insert_id();
	return 1;
}

forward OnTruckCargoInsert(cargoid);
public OnTruckCargoInsert(cargoid)
{
	TruckCargo[cargoid][tID] = cache_insert_id();
	return 1;
}

forward OnApartInsert(ApartID);
public OnApartInsert(ApartID)
{
	ApartInfo[ApartID][aID] = cache_insert_id();
	return 1;
}

forward OnBizInsert(BizID);
public OnBizInsert(BizID)
{
	BizInfo[BizID][bizID] = cache_insert_id();
	return 1;
}

forward OnFactionInsert(FactionID);
public OnFactionInsert(FactionID)
{
	Factions[FactionID][fID] = cache_insert_id();
	return 1;
}

forward OnJobInsert(JobID);
public OnJobInsert(JobID)
{
	JobsInfo[JobID][jobID] = cache_insert_id();
	return 1;
}

forward OnFoodStandInsert(StandID);
public OnFoodStandInsert(StandID)
{
	FoodStand[StandID][fID] = cache_insert_id();
	return 1;
}

forward OnATMInsert(AtmID);
public OnATMInsert(AtmID)
{
	ATMInfo[AtmID][atmID] = cache_insert_id();
	return 1;
}

forward OnPlayerLoadNotes(playerid);
public OnPlayerLoadNotes(playerid)
{
	new rows = cache_num_rows();

	if(!rows)
	    return 1;

	for(new i; i < rows; i++)
	{
	    if(i >= MAX_PLAYER_NOTES)
			break;

		PlayerNotes[playerid][i][noteID] = cache_get_field_content_int(i, "id");
		cache_get_field_content(i, "text", PlayerNotes[playerid][i][noteText], dbHandle, 128);
		PlayerNotes[playerid][i][noteOn] = 1;
	}
	return 1;
}

forward OnPlayerLoadContacts(playerid);
public OnPlayerLoadContacts(playerid)
{
	if(!cache_num_rows())
	    return 1;

	for(new i = 0; i < cache_num_rows(); i++)
	{
	    PlayerContacts[playerid][i][contactID] = cache_get_field_content_int(i, "id");
	    cache_get_field_content(i, "contact", PlayerContacts[playerid][i][contactName], dbHandle, 32);
	    PlayerContacts[playerid][i][contactNumber] = cache_get_field_content_int(i, "number");

		PlayerContacts[playerid][i][contactOn] = 1;
	}
	return 1;
}

forward OnPlayerLoadAttach(playerid);
public OnPlayerLoadAttach(playerid)
{
	for(new i = 0; i < MAX_PLAYER_ATTACH; i++)
	{
		AttachInfo[playerid][i][aID] = 0;
		AttachInfo[playerid][i][aUsed] = 0;
	}

	if(!cache_num_rows())
	    return 1;

    for(new i = 0; i < cache_num_rows(); i++)
	{
     	if(i > MAX_PLAYER_ATTACH)
	        break;

	    AttachInfo[playerid][i][aID] = cache_get_field_content_int(i, "id");
	    cache_get_field_content(i, "name", AttachInfo[playerid][i][aName], dbHandle, 32);
		AttachInfo[playerid][i][aModel] = cache_get_field_content_int(i, "model");
		AttachInfo[playerid][i][aBone] = cache_get_field_content_int(i, "bone");
		AttachInfo[playerid][i][aOffsetX] = cache_get_field_content_float(i, "offestx");
		AttachInfo[playerid][i][aOffsetY] = cache_get_field_content_float(i, "offesty");
		AttachInfo[playerid][i][aOffsetZ] = cache_get_field_content_float(i, "offestz");
		AttachInfo[playerid][i][aRotX] = cache_get_field_content_float(i, "rotx");
		AttachInfo[playerid][i][aRotY] = cache_get_field_content_float(i, "roty");
		AttachInfo[playerid][i][aRotZ] = cache_get_field_content_float(i, "rotz");
		AttachInfo[playerid][i][aScaleX] = cache_get_field_content_float(i, "scalex");
		AttachInfo[playerid][i][aScaleY] = cache_get_field_content_float(i, "scaley");
		AttachInfo[playerid][i][aScaleZ] = cache_get_field_content_float(i, "scalez");
		AttachInfo[playerid][i][aUsed] = cache_get_field_content_int(i, "used");
	}
	return 1;
}

forward OnPlayerLoadMusic(playerid);
public OnPlayerLoadMusic(playerid)
{
    for(new i; i != MAX_PLAYER_MUSIC; i++)
   	{
    	PlayerMusic[playerid][i][mID] = 0;
    	PlayerMusic[playerid][i][mUrl] =
    	PlayerMusic[playerid][i][mName] = EOS;
    }

    if(!cache_num_rows())
	    return 1;

    for(new i = 0; i < cache_num_rows(); i++)
	{
     	if(i > MAX_PLAYER_MUSIC)
	        break;

        PlayerMusic[playerid][i][mID] = cache_get_field_content_int(i, "id");
	    cache_get_field_content(i, "name", PlayerMusic[playerid][i][mName], dbHandle, 64);
	    cache_get_field_content(i, "url", PlayerMusic[playerid][i][mUrl], dbHandle, 156);
	}
	return 1;
}


forward LoadInventory(playerid);
public LoadInventory(playerid)
{
	if(!cache_num_rows())
	{
	    new query[128];
        mysql_format(dbHandle, query, sizeof(query), "INSERT INTO `inventory` (`userid`) VALUE ('%i')", PlayerInfo[playerid][pID]);
	    mysql_tquery(dbHandle, query);
	    return 1;
	}

	for(new i = 0; i < MAX_INVENTORY; i++)
	{
	    PlayerInfo[playerid][pInv][i] = cache_get_row_int(0, i+1);
	    PlayerInfo[playerid][pInvAmount][i] = cache_get_row_int(0, 12 + (i+1));
	}
	return 1;
}

forward __LoadPlayerTickets(playerid);
public __LoadPlayerTickets(playerid)
{
	if(!cache_num_rows())
	    return 1;

	for(new i; i != cache_num_rows(); i++)
	{
	    if(i >= MAX_PLAYER_TICKETS)
	        break;


	    pTickets[playerid][i][tID] = cache_get_field_content_int(i, "id");
		cache_get_field_content(i, "officer", pTickets[playerid][i][tOfficer], dbHandle, MAX_PLAYER_NAME);
		pTickets[playerid][i][tFaction] = cache_get_field_content_int(i, "id");
		pTickets[playerid][i][tAmount] = cache_get_field_content_int(i, "id");
		cache_get_field_content(i, "date", pTickets[playerid][i][tDate], dbHandle, 24);
		cache_get_field_content(i, "reason", pTickets[playerid][i][tDate], dbHandle, 64);
	}
	return 1;
}

forward __LoadVehicleTickets(vehicleid);
public __LoadVehicleTickets(vehicleid)
{
	if(!cache_num_rows())
	    return 1;

	for(new i; i != cache_num_rows(); i++)
	{
	    if(i >= MAX_CAR_TICKETS)
	        break;

        vTickets[vehicleid][i][tID] = cache_get_field_content_int(i, "id");
		cache_get_field_content(i, "officer", vTickets[vehicleid][i][tOfficer], dbHandle, MAX_PLAYER_NAME);
		vTickets[vehicleid][i][tFaction] = cache_get_field_content_int(i, "id");
		vTickets[vehicleid][i][tAmount] = cache_get_field_content_int(i, "id");
		cache_get_field_content(i, "date", vTickets[vehicleid][i][tDate], dbHandle, 24);
		cache_get_field_content(i, "reason", vTickets[vehicleid][i][tDate], dbHandle, 64);
	}
	return 1;
}

forward OnPlayerSpawnVehicle(playerid, id);
public OnPlayerSpawnVehicle(playerid, id)
{
	if(cache_num_rows() < id+1)
	    return SendClientMessageEx(playerid, -1, "? ??? ??? ?????????? ? ????? ID: %i.", id+1);

	new date[24], vehicle, sqlid, model, color1, color2, alarmbuyed, lock, immob, insurances, destroyed, gps, fuel, registered, Float: battery, battery_time, Float:x, Float:y, Float:z, Float:a, plate[11], owner,
		component[14], paintjob, radio, comps, Float:hp, panels, doorss, lightss, tires, Float:engine, Float:milliage, engine_time, Float:armour,
		Float: attachgunX[10], Float: attachgunY[10], Float: attachgunZ[10], Float: attachgunRX[10], Float: attachgunRY[10], Float: attachgunRZ[10];

	sqlid = cache_get_field_content_int(id, "id");
	model = cache_get_field_content_int(id, "model");
	color1 = cache_get_field_content_int(id, "color1");
	color2 = cache_get_field_content_int(id, "color2");
	x = cache_get_field_content_float(id, "x");
	y = cache_get_field_content_float(id, "y");
	z = cache_get_field_content_float(id, "z");
	a = cache_get_field_content_float(id, "fa");
	cache_get_field_content(id, "plate", plate);
	owner = cache_get_field_content_int(id, "owner");
	armour = cache_get_field_content_int(id, "armour");
	alarmbuyed = cache_get_field_content_int(id, "alarm");
	lock = cache_get_field_content_int(id, "locks");
	immob = cache_get_field_content_int(id, "immob");
	insurances = cache_get_field_content_int(id, "insurances");
	destroyed = cache_get_field_content_int(id, "destroys");
	gps = cache_get_field_content_int(id, "gps");
	fuel = cache_get_field_content_int(id, "fuel");
	registered = cache_get_field_content_int(id, "registered");
	battery = cache_get_field_content_float(id, "battery");
	battery_time = cache_get_field_content_int(id, "battery_time");
	component[0] = cache_get_field_content_int(id, "comp0");
	component[1] = cache_get_field_content_int(id, "comp1");
	component[2] = cache_get_field_content_int(id, "comp2");
	component[3] = cache_get_field_content_int(id, "comp3");
	component[4] = cache_get_field_content_int(id, "comp4");
	component[5] = cache_get_field_content_int(id, "comp5");
	component[6] = cache_get_field_content_int(id, "comp6");
	component[7] = cache_get_field_content_int(id, "comp7");
	component[8] = cache_get_field_content_int(id, "comp8");
	component[9] = cache_get_field_content_int(id, "comp9");
	component[10] = cache_get_field_content_int(id, "comp10");
	component[11] = cache_get_field_content_int(id, "comp11");
	component[12] = cache_get_field_content_int(id, "comp12");
	component[13] = cache_get_field_content_int(id, "comp13");
	paintjob = cache_get_field_content_int(id, "paintjob");
	radio = cache_get_field_content_int(id, "radio");
	comps = cache_get_field_content_int(id, "comps");
	hp = cache_get_field_content_float(id, "health");
	panels = cache_get_field_content_int(id, "panels");
	doorss = cache_get_field_content_int(id, "doors");
	lightss = cache_get_field_content_int(id, "lights");
	tires = cache_get_field_content_int(id, "tires");
	new str[14];
	for(new i; i < 10;i++)
	{
	    format(str, sizeof(str), "attach%i_pos0", i);
	    attachgunX[i] = cache_get_field_content_float(id, str);

	    format(str, sizeof(str), "attach%i_pos1", i);
	    attachgunY[i] = cache_get_field_content_float(id, str);

	    format(str, sizeof(str), "attach%i_pos2", i);
	    attachgunZ[i] = cache_get_field_content_float(id, str);


	    format(str, sizeof(str), "attach%i_rot0", i);
	    attachgunRX[i] = cache_get_field_content_float(id, str);

	    format(str, sizeof(str), "attach%i_rot1", i);
	    attachgunRY[i] = cache_get_field_content_float(id, str);

	    format(str, sizeof(str), "attach%i_rot2", i);
	    attachgunRZ[i] = cache_get_field_content_float(id, str);
	}

	engine = cache_get_field_content_float(id, "engine");
	engine_time = cache_get_field_content_int(id, "engine_time");
	milliage = cache_get_field_content_float(id, "milliage");

	vehicle =
		CreateVehicle(model, x, y, z, a, color1, color2, -1);

	if(vehicle == INVALID_VEHICLE_ID)
	    return SendErrorMessage(playerid, "???????????? ???????? ?? ???? ???????.");

	PlayerInfo[playerid][pCarKey] = vehicle;
	VehicleInfo[vehicle][carOwnerPlayer] = playerid;

	SetVehicleNumberPlate(vehicle, plate);
	format(VehicleInfo[vehicle][carPlate], 24, "%s", plate);
    format(VehicleInfo[vehicle][carDate], 24, "%s", date);

	VehicleInfo[vehicle][carID] = sqlid;
	VehicleInfo[vehicle][carModel] = model;
	VehicleInfo[vehicle][carColor1] = color1;
	VehicleInfo[vehicle][carColor2] = color2;
	VehicleInfo[vehicle][carParkX] = x;
	VehicleInfo[vehicle][carParkY] = y;
	VehicleInfo[vehicle][carParkZ] = z;
	VehicleInfo[vehicle][carParkA] = a;
	VehicleInfo[vehicle][carOwnerID] = owner;
	VehicleInfo[vehicle][carAlarm] = alarmbuyed;
	VehicleInfo[vehicle][carLock] = lock;
	VehicleInfo[vehicle][carImmob] = immob;
	VehicleInfo[vehicle][carInsurance] = insurances;
	VehicleInfo[vehicle][carDestroyed] = destroyed;
	VehicleInfo[vehicle][carFuel] = fuel;
	VehicleInfo[vehicle][carRegistered] = registered;
	VehicleInfo[vehicle][carBattery] = battery;
	VehicleInfo[vehicle][carBatteryStatus] = battery_time;
	VehicleInfo[vehicle][carPaintJob] = paintjob;
	VehicleInfo[vehicle][carRadio] = radio;
	VehicleInfo[vehicle][carGps] = gps;
	VehicleInfo[vehicle][carComps] = comps;
	VehicleInfo[vehicle][carEngine] = engine;
	VehicleInfo[vehicle][carMilliage] = milliage;
	VehicleInfo[vehicle][carEngineStatus] = engine_time;
	VehicleInfo[vehicle][carAttach3DtextUse] = 0;
	VehicleInfo[vehicle][carArmour] = armour;
	VehicleInfo[vehicle][carFuel] = fuel;
    VehicleInfo[vehicle][carDriver] = INVALID_PLAYER_ID;
    format(VehicleInfo[vehicle][carOwner], 24, GetNameEx(playerid));

	for(new i; i < 14; i++)
	{
	    VehicleInfo[vehicle][carComponent][i] = component[i];
    	if(i > 9)
			continue;

	   	VehicleInfo[vehicle][carAttachPosX][i] = attachgunX[i];
		VehicleInfo[vehicle][carAttachPosY][i] = attachgunY[i];
		VehicleInfo[vehicle][carAttachPosZ][i] = attachgunZ[i];
		VehicleInfo[vehicle][carAttachRotX][i] = attachgunRX[i];
		VehicleInfo[vehicle][carAttachRotY][i] = attachgunRY[i];
		VehicleInfo[vehicle][carAttachRotZ][i] = attachgunRZ[i];
	}
	LoadComp(vehicle);

 	//?????? ? ???????
 	new str_inv[10];
 	for(new i = 0; i < MAX_VEHICLE_INVENTORY; i++)
	{
	    format(str_inv, sizeof(str_inv), "inv_%i", i+1);
	    VehicleInfo[vehicle][carInv][i] = cache_get_field_content_int(id, str_inv);
	    format(str_inv, sizeof(str_inv), "amount_%i", i+1);
	    VehicleInfo[vehicle][carInvAmount][i] = cache_get_field_content_int(id, str_inv);
	}

    if(VehicleInfo[vehicle][carInsurance] > 1)
		UpdateVehicleDamageStatus(vehicle, 0, 0, 0, 0);
	else
    	UpdateVehicleDamageStatus(vehicle, panels, doorss, lightss, tires);

	if(VehicleInfo[vehicle][carInsurance] != 0)
		SetVehicleHealth(vehicle, MAX_HEALTH_VEHICLE + VehicleInfo[vehicle][carArmour]);
	else
	{
	    if(hp < 390.0)
	    	SetVehicleHealth(vehicle, 389.0);
	    else if(hp > 750.0)
			SetVehicleHealth(vehicle, 750.0);
		else
			SetVehicleHealth(vehicle, hp);
	}

 	ToggleVehicleLock(vehicle, true);

	LoadVehicleTickets(vehicle);
	SCM(playerid, COLOR_GREEN, "??? ????????? ????????? ?? ????? ????????? ????????:");

	if(insurances)
		SendClientMessageEx(playerid, COLOR_WHITE, "%s, ????????????[%i], ?????[%i], ????????????[%i], GPS[%i], ?????????[%i], ???????????[%i / 5]", VehicleNames[model-400],alarmbuyed, lock, immob, gps, insurances, destroyed);
	else
		SendClientMessageEx(playerid, COLOR_WHITE, "%s, ????????????[%i], ?????[%i], ????????????[%i], GPS[%i], ?????????[%i]", VehicleNames[model-400],alarmbuyed, lock, immob, gps, insurances);
	SCM(playerid, COLOR_MAGENTA, "[INFO]: ???????? ? ???????? ??????? ?? ??????, ????? ??????? ?????????.");

	Waypoint_Set(playerid, VehicleInfo[vehicle][carParkX],VehicleInfo[vehicle][carParkY],VehicleInfo[vehicle][carParkZ]);

	for(new i = 0; i < MAX_VEHICLE_INVENTORY; i++)
	{
		if(ValidWeaponForInventory(VehicleInfo[vehicle][carInv][i]) == 0)
			continue;

		VehicleInfo[vehicle][carAttach][i] =
			CreateDynamicObject(inventory_items[VehicleInfo[vehicle][carInv][i]][itemModel], VehicleInfo[vehicle][carAttachPosX][i],VehicleInfo[vehicle][carAttachPosY][i],VehicleInfo[vehicle][carAttachPosZ][i],VehicleInfo[vehicle][carAttachRotX][i],VehicleInfo[vehicle][carAttachRotY][i],VehicleInfo[vehicle][carAttachRotZ][i]);

		AttachDynamicObjectToVehicle(VehicleInfo[vehicle][carAttach][i], vehicle, VehicleInfo[vehicle][carAttachPosX][i],VehicleInfo[vehicle][carAttachPosY][i],VehicleInfo[vehicle][carAttachPosZ][i],VehicleInfo[vehicle][carAttachRotX][i],VehicleInfo[vehicle][carAttachRotY][i],VehicleInfo[vehicle][carAttachRotZ][i]);
	}
	status_update[vehicle] = CreateDynamic3DTextLabel("(( ---------- ))",0x33AA3300, 0.0, 0.0, 0.0, 20.0, INVALID_PLAYER_ID, vehicle, 0, -1, 0);
	return 1;
}

stock LoadComp(vehicle)
{
	if(VehicleInfo[vehicle][carPaintJob] != 3)
		ChangeVehiclePaintjob(vehicle, VehicleInfo[vehicle][carPaintJob]);

	for(new i = 0; i < 14; i++)
	{
		if(VehicleInfo[vehicle][carComponent][i] == 0)
		    continue;

		AddVehicleComponent(vehicle, VehicleInfo[vehicle][carComponent][i]);
	}
	return 1;
}

forward ShowFriskPlayer(playerid, targetid);
public ShowFriskPlayer(playerid, targetid)
{
	SendClientMessageEx(playerid, -1, "???: %s", GetNameWithMask(targetid));
	SendClientMessageEx(playerid, -1, "??????: $%i",PlayerInfo[targetid][pCash]);
    SCM(playerid, 0x8c8cfeff, "????????:");
	for(new i; i != MAX_INVENTORY; i++)
	{
	    if(PlayerInfo[targetid][pInv][i] == 0)
	        continue;

	    SendClientMessageEx(playerid, -1, inventory_items[PlayerInfo[targetid][pInv][i]][itemName]);
	}
	SendClientMessageEx(playerid, COLOR_GREEN, "??????:", GetNameEx(targetid));

	if(PlayerInfo[targetid][pWeap][0])
		SendClientMessageEx(playerid, -1, "- %s.", inventory_items[PlayerInfo[targetid][pWeap][0]][itemName]);

	if(PlayerInfo[targetid][pWeap][3])
		SendClientMessageEx(playerid, -1, "- %s.", inventory_items[PlayerInfo[targetid][pWeap][3]][itemName]);

	if(PlayerInfo[targetid][pWeap][1])
		SendClientMessageEx(playerid, -1, "- %s (%i)", inventory_items[PlayerInfo[targetid][pWeap][1]][itemName], PlayerInfo[targetid][pAmmo][1]);

	if(PlayerInfo[targetid][pWeap][2])
		SendClientMessageEx(playerid, -1, "- %s (%i)", inventory_items[PlayerInfo[targetid][pWeap][2]][itemName], PlayerInfo[targetid][pAmmo][2]);
	new mes[37];
	format(mes,sizeof(mes),"?????????? %s.", GetNameWithMask(targetid));
	cmd::me(playerid, mes);
	return 1;
}

public OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ)
{
	if (CheckAdmin(playerid, 1) && GetInterior(playerid) == 0)
	{
    	SetPlayerPosEx(playerid, fX, fY, fZ);
		SendErrorMessage(playerid, "?? ????????????????? ?? ?????.");
	}
	return 1;
}

stock DestroyAllBort(playerid)
{
	for(new i; i < MAX_BORTES; i++)
	{
	    if(BortInfo[playerid][i][bortOn] == 0) continue;

        BortInfo[playerid][i][bortOn] = 0;
		BortInfo[playerid][i][bortName] = EOS;

	    if (IsValidDynamicObject(BortInfo[playerid][i][bortObject]))
       		DestroyDynamicObject(BortInfo[playerid][i][bortObject]);

       	BortInfo[playerid][i][bortObject] = INVALID_OBJECT_ID;
	}
	return 1;
}

stock SetPlayerZond(playerid, step)
{
	if(step == 0)
	{
	    if(pTemp[playerid][pZond] != 1) return 1;

	    TogglePlayerSpectating(playerid, 0);
		DestroyPlayerObject(playerid, pTemp[playerid][pZondObj]);
		if(IsValidDynamic3DTextLabel(pTemp[playerid][pZondLabel]))
		{
		    DestroyDynamic3DTextLabel(pTemp[playerid][pZondLabel]);
		    pTemp[playerid][pZondLabel] = Text3D:INVALID_3DTEXT_ID;
		}
		DestroyDynamicActor(pTemp[playerid][pZondActor]);
		pTemp[playerid][pZondActor] = INVALID_ACTOR_ID;

		for(new i; i<11;i++) TextDrawHideForPlayer(playerid, zond_cam[i]);
	    return 1;
	}

	new id = -1,
		Float: x,
		Float: y,
		Float: z,
		vw, interior;

	if((id = GetNearBizOutside(playerid)) != -1 && (BizInfo[id][bizType] != BIZ_GAS_STATION && BizInfo[id][bizType] != BIZ_AUTOSALON && BizInfo[id][bizType] != BIZ_ADVERT && BizInfo[id][bizType] != BIZ_TUNING && BizInfo[id][bizType] != BIZ_LICENSE && BizInfo[id][bizType] != BIZ_BOATSALON && BizInfo[id][bizType] != BIZ_FLYSALON))
	{
	    x = BizInfo[id][bizExitX];
	    y = BizInfo[id][bizExitY];
	    z = BizInfo[id][bizExitZ];
	    vw = BizInfo[id][bizExitVW];
	    interior = BizInfo[id][bizExitInt];
	}

	if(id == -1 && (id = GetNearHouseOutside(playerid)) != -1)
	{
	    x = HouseInfo[id][hExitX];
	    y = HouseInfo[id][hExitY];
	    z = HouseInfo[id][hExitZ];
	    vw = HouseInfo[id][hExitVW];
	    interior = HouseInfo[id][hExitInt];
	}

	if(id == -1 && (id = GetNearApartmentOutside(playerid)) != -1)
	{
	    x = ApartInfo[id][aExitX];
	    y = ApartInfo[id][aExitY];
	    z = ApartInfo[id][aExitZ];
	    vw = ApartInfo[id][aExitVW];
	    interior = ApartInfo[id][aExitInt];
	}

	if(id == -1)
	    return 1;

	SavePlayerPos(playerid);
    GameTextForPlayer(playerid, "_", 1, 4);

    if(IsValidDynamic3DTextLabel(pTemp[playerid][pZondLabel]))
	{
	    DestroyDynamic3DTextLabel(pTemp[playerid][pZondLabel]);
	    pTemp[playerid][pZondLabel] = Text3D:INVALID_3DTEXT_ID;
 	}
 	new mes[128];
	format(mes, sizeof(mes),"(( %s ?????????? ????. ))", GetNameWithMask(playerid));
	pTemp[playerid][pZondLabel] = CreateDynamic3DTextLabel(mes, COLOR_PURPLE, PlayerInfo[playerid][pPosX], PlayerInfo[playerid][pPosY], PlayerInfo[playerid][pPosZ], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, GetWorld(playerid), GetInterior(playerid));

	pTemp[playerid][pZondActor] = CreateDynamicActor(GetPlayerSkin(playerid), PlayerInfo[playerid][pPosX], PlayerInfo[playerid][pPosY], PlayerInfo[playerid][pPosZ], PlayerInfo[playerid][pPosA], GetWorld(playerid), GetInterior(playerid));
	ApplyDynamicActorAnimation(pTemp[playerid][pZondActor], "BOMBER", "NULL", 0.0, 0, 0, 0, 0, 0);
	ApplyDynamicActorAnimation(pTemp[playerid][pZondActor], "BOMBER", "BOM_Plant_Loop", 4.1, 0, 0, 0, 1, 0);

	TogglePlayerSpectating(playerid, 1);
    pTemp[playerid][pZondObj] = CreatePlayerObject(playerid, 19300, x, y, z, 0.0, 0.0, 0.0);
	AttachCameraToPlayerObject(playerid, pTemp[playerid][pZondObj]);
	SetInterior(playerid, interior);
	SetWorld(playerid, vw);

	for(new i; i<11;i++) TextDrawShowForPlayer(playerid, zond_cam[i]);

	pTemp[playerid][pZond] = 1;

	SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_LSPDNEW, "* %s %s ????? ???????????? /zond.", GetRankName(playerid), GetNameEx(playerid));
	return 1;
}

forward ShowCarsForPlayer(playerid, targetid);
public ShowCarsForPlayer(playerid, targetid)
{
	if(cache_num_rows() == 0)
	    return SCM(playerid, -1, "?? ?? ???????? ???????????.");

	new hour,
		minute,
		second,
		model,
		_alarm,
		lock,
		immob,
		insurance,
		destroyed,
		vehicle = PlayerInfo[targetid][pCarKey];
	gettime(hour, minute, second);

	SendClientMessageEx(playerid, COLOR_GREEN, "____________________[?????? ?????????? %s, %02d:%02d:%02d]____________________", GetNameEx(targetid), hour, minute, second);

	for(new i; i < cache_num_rows(); i++)
	{
	    model = cache_get_field_content_int(i, "model");
	    _alarm = cache_get_field_content_int(i, "alarm");
	    lock = cache_get_field_content_int(i, "locks");
	    immob = cache_get_field_content_int(i, "immob");
	    insurance = cache_get_field_content_int(i, "insurances");
	    destroyed = cache_get_field_content_int(i, "destroys");

	    if(VehicleInfo[vehicle][carID] == cache_get_field_content_int(i, "id"))
	    {
			if(VehicleInfo[vehicle][carInsurance])
	        	SendClientMessageEx(playerid, COLOR_GREEN, "???? %i: %s[ID: %i], ????????????[%i], ?????[%i], ????????????[%i], ?????????[%i], ???????????[%i / 5]", i+1, VehicleNames[model-400], vehicle, VehicleInfo[vehicle][carAlarm], VehicleInfo[vehicle][carLock], VehicleInfo[vehicle][carImmob], VehicleInfo[vehicle][carInsurance], VehicleInfo[vehicle][carDestroyed]);
			else
			    SendClientMessageEx(playerid, COLOR_GREEN, "???? %i: %s[ID: %i], ????????????[%i], ?????[%i], ????????????[%i], ?????????[%i]", i+1, VehicleNames[model-400], vehicle, VehicleInfo[vehicle][carAlarm], VehicleInfo[vehicle][carLock], VehicleInfo[vehicle][carImmob], VehicleInfo[vehicle][carInsurance]);
		}
		else
		{
		    if(insurance)
	        	SendClientMessageEx(playerid, COLOR_WHITE, "???? %i: %s, ????????????[%i], ?????[%i], ????????????[%i], ?????????[%i], ???????????[%i / 5]", i+1, VehicleNames[model-400], _alarm, lock, immob, insurance, destroyed);
			else
				SendClientMessageEx(playerid, COLOR_WHITE, "???? %i: %s, ????????????[%i], ?????[%i], ????????????[%i], ?????????[%i]", i+1, VehicleNames[model-400], _alarm, lock, immob, insurance);
		}
	}
	SendClientMessageEx(playerid, COLOR_GREEN, "____________________[?????? ?????????? %s, %02d:%02d:%02d]____________________", GetNameEx(targetid), hour, minute, second);
	return 1;
}

public OnQueryError(errorid, error[], callback[], query[], connectionHandle)
{
	if(errorid == CR_SERVER_LOST)
	{
	    dbHandle = mysql_connect(SQL_HOST, SQL_USER, SQL_DB, SQL_PASS);
		mysql_log();
		if(mysql_errno() != 0) printf("?? ??????? ???????????????? ? %s", SQL_HOST);
		else
		{
			printf("????????????? ? %s ? ?????? ???????????? %s", SQL_HOST, SQL_USER);

			mysql_set_charset("cp1251");
		    mysql_query(dbHandle, "SET NAMES cp1251;", false);
			mysql_query(dbHandle, "SET SESSION character_set_server='utf8';", false);

		    new name[32];
			mysql_get_charset(name, dbHandle, 32);
			printf("?????????: %s", name);
		}
	}
	printf("<|| error: %s | callback: %s | query: %s ||>", error, callback, query);

	if(mysqllog == true)
	{
	    foreach(Player, i)
		{
		    if(0 == IsPlayerLogged(i) || !CheckAdmin(i, 7))
		        continue;

			SendClientMessageEx(i, COLOR_YELLOWG, "[LOG]: error: %s | callback: %s | query: %s",error, callback, query);
		}
	}
	return 1;
}

forward BuyVehicleForPlayer(playerid);
public BuyVehicleForPlayer(playerid)
{
    new Float:x, Float:y, Float:z, Float:fa, model = GetPVarInt(playerid, "BuyingVehicleModel"), plate[24];

    new dealer = -1;
	if(IsABoatModel(model) && (dealer = DealerShip_Nearest(playerid, BIZ_BOATSALON)) == -1)
        return SendErrorMessage(playerid, "?? ?????? ?????????? ????? ?????? ?? ??????? ?????.");

    if(IsAPlaneModel(model) && (dealer = DealerShip_Nearest(playerid, BIZ_FLYSALON)) == -1)
        return SendErrorMessage(playerid, "?? ?????? ?????????? ????? ?????? ?? ??????? ??????????? ?????????.");

	if(!IsABoatModel(model) && !IsAPlaneModel(model) && (dealer = DealerShip_Nearest(playerid, BIZ_AUTOSALON)) == -1)
	    return SendErrorMessage(playerid, "?? ?????? ?????????? ????? ??????????.");

	if(cache_num_rows() >= GetMaxPlayerCars(playerid))
	    return SendErrorMessage(playerid, "?? ?????? ???????????? ?????????? ??????????.");

    new registerveh = price_reg[GetPVarInt(playerid, "BuyingVehicleRegister")],
		alarmveh = price_alarm[GetPVarInt(playerid, "BuyingVehicleAlarm")],
		lockveh = price_lock[GetPVarInt(playerid, "BuyingVehicleLock")],
		immobveh = price_immob[GetPVarInt(playerid, "BuyingVehicleImmob")],
		insuranceveh = GetInsurancePrice(GetPVarInt(playerid, "BuyingVehicleModel")) * GetPVarInt(playerid, "BuyingVehicleInsurance"),
		xmradioveh = price_radio[GetPVarInt(playerid, "BuyingVehicleRadio")],
		gpsveh = price_gps[GetPVarInt(playerid, "BuyingVehicleGps")],
		color = random(128);

 	//if(IsValidVehicle(PlayerInfo[playerid][pCarKey])) return SCM(playerid, COLOR_LIGHTRED, "? ??? ???? ???? ?? ??????????? ???????????? ????????.");

	if (0 == PlayerInfo[playerid][pPremium] && IsDonateVehicle(model))
		return SCM(playerid, COLOR_INFO, "?????? ????? ? ??????? ????????? ????? ?????????? ???? ?????????.");

	if(PlayerInfo[playerid][pPremium] < 1 && IsBronzeVehicle(model))
		return SCM(playerid, COLOR_INFO, "????? ?????????? ?????? ????????? ??? ??????? ?????? ????? ????????? ??????? ? ????.");

	if(PlayerInfo[playerid][pPremium] < 2 && IsSilverVehicle(model))
		return SCM(playerid, COLOR_INFO, "????? ?????????? ?????? ????????? ??? ??????? ?????? ????? ??????????? ??????? ? ????.");

	if(PlayerInfo[playerid][pPremium] < 3 && IsGoldVehicle(model))
		return SCM(playerid, COLOR_INFO, "????? ?????????? ?????? ????????? ??? ??????? ?????? ????? ??????? ???????.");

	if(BizInfo[dealer][bizOwnerID] != 0 && !BizInfo[dealer][bizProduct])
	    return SendErrorMessage(playerid, "? ?????? ??? ?????????? ??? ???????.");

	new price = GetVehiclePrice(model)+registerveh+alarmveh+lockveh+immobveh+insuranceveh+xmradioveh+gpsveh;

	if(GetCash(playerid) < price)
		return SendNotCash(playerid);

	SendClientMessageEx(playerid, COLOR_GREEN, "?? ????????? \"%s\" ?? $%i.", VehicleNames[model-400], price);
	SCM(playerid, COLOR_GREY, "??????????? ??????? \"/vehicle\" ??? ?????????? ????? ???????????? ?????????.");

	new money = PlayerInfo[playerid][pCash];
	GiveCash(playerid, -price);

	if(BizInfo[dealer][bizOwnerID] != 0)
	{
	    BizInfo[dealer][bizProduct]--;
		GiveBizCash(dealer, price);
	}

    new query[256];
	format(query, sizeof(query), "%s [MYSQL: %i | IP: %s | ??????(????): %i | ??????(?????): %i] ????? ?????????? %s(Model: %i) ?? -- $%i",
	GetName(playerid), PlayerInfo[playerid][pID], GetPlayerIP(playerid), money, GetCash(playerid), VehicleNames[model-400], model, price);
    insert_log(query, VEHICLE_LOG, 1, playerid);

	if(IsABoatModel(model))
	{
		x = 114.9191;
		y = -1902.8209;
		z = -0.6980;
		fa = 0.0;
	}
	else if(IsAPlaneModel(model))
	{
		x = 1943.5498;
		y = -2397.6553;
		z = 14.70;
		fa = 0.0;
	}
	else
	{
		x = 531.1557;
		y = -1285.5590;
		z = 16.9693;
		fa = 305.9785;
	}

	if(!GetPVarInt(playerid, "BuyingVehicleRegister"))
		format(plate, 24, "_");
	else
		format(plate, 24, "%s", GetVehicleNumber());

	mysql_format(dbHandle, query, sizeof(query), "INSERT INTO `cars` (date,model,color1,color2,x,y,z,fa,plate,owner,registered,alarm,locks,immob,insurances,radio,gps,health) VALUES ('%s',%i,%i,%i,%f,%f,%f,%f,'%s',%i,%i,%i,%i,%i,%i,%i,%i,'750.0')",
		GetFullDate(),
		model,
		color,
		color,
		x,
		y,
		z,
		fa,
		plate,
		PlayerInfo[playerid][pID],
		GetPVarInt(playerid, "BuyingVehicleRegister"),
	    GetPVarInt(playerid, "BuyingVehicleAlarm"),
		GetPVarInt(playerid, "BuyingVehicleLock"),
		GetPVarInt(playerid, "BuyingVehicleImmob"),
		GetPVarInt(playerid, "BuyingVehicleInsurance"),
		GetPVarInt(playerid, "BuyingVehicleRadio"),
		GetPVarInt(playerid, "BuyingVehicleGps")
	);
	mysql_tquery(dbHandle, query);
	return 1;
}

forward BuyVehicleAtPlayer(playerid);
public BuyVehicleAtPlayer(playerid)
{
	if(pTemp[playerid][pCarPlayer] == INVALID_PLAYER_ID)
		return 1;

	new userid = pTemp[playerid][pCarPlayer],
	    price = pTemp[playerid][pCarPrice],
		vehicle = PlayerInfo[userid][pCarKey];

    pTemp[playerid][pCarPlayer] = INVALID_PLAYER_ID;
    pTemp[playerid][pCarPrice] = 0;

    if(cache_num_rows() >= GetMaxPlayerCars(playerid))
	    return SendErrorMessage(playerid, "?? ?????? ???????????? ?????????? ??????????.");

    if(!IsPlayerLogged(userid))
		return SendNotConnected(playerid);

	if(!IsValidVehicle(vehicle))
		return SCM(playerid, COLOR_LIGHTRED, "???????????? ???????? ???????? ?? ??????????.");

	if(!IsPlayerInVehicle(userid, vehicle))
		return SendNotInVehicle(userid);

	if(IsADonateModel(GetVehicleModel(vehicle)))
		return SCM(userid, COLOR_LIGHTRED, "?? ?? ?????? ??????? ????? ????????? ??????.");

    if(PlayerInfo[userid][pPremium] < 2 && VehicleInfo[vehicle][carComponent][5] != 0)
   		return SendErrorMessage(playerid, "? ??????? ?????? ??? ??????? ? ?????.");

	if(userid == playerid)
		return SCM(playerid, COLOR_LIGHTRED, "?? ?? ?????? ??????? ???????????? ???????? ?????? ????.");

	if(!IsABicycle(vehicle) && !VehicleInfo[vehicle][carRegistered])
		return SCM(playerid, COLOR_LIGHTRED, "???? ????????? ?? ???????????????.");

	if(!PlayerNearPlayer(3.0, playerid, userid))
		return SendNotNearPlayer(playerid);

	if(IsValidVehicle(PlayerInfo[playerid][pCarKey]))
		return SCM(playerid, COLOR_LIGHTRED, "?? ??? ?????????? ???? ?????????.");

    if(GetCash(playerid) < price)
    {
        SCM(playerid, COLOR_LIGHTRED, "? ??? ?? ??????? ????? ?? ??????? ????? ??????????.");
		SCM(userid, COLOR_LIGHTRED, "?? ?? ?????? ??????? ???? ????????? ????? ??????, ??? ??? ? ???? ?? ?????????? ?????.");
		return 1;
    }

	new money1 = PlayerInfo[userid][pCash],
		money2 = PlayerInfo[playerid][pCash];

	SendClientMessageEx(playerid, COLOR_PURPLE, "%s ????? ? %s \"%s\" ?? $%i.", GetNameWithMask(playerid), GetNameWithMask(userid), VehicleNames[GetVehicleModel(vehicle)-400], price);
	SendClientMessageEx(userid, COLOR_GREEN,"?? ??????? \"%s\" %s ?? $%i.", VehicleNames[GetVehicleModel(vehicle)-400], GetNameWithMask(playerid), price);

	GiveCash(userid, price);
	GiveCash(playerid, -price);

	VehicleInfo[vehicle][carOwnerID] = PlayerInfo[playerid][pID];
	VehicleInfo[vehicle][carOwnerPlayer] = playerid;
	PlayerInfo[playerid][pCarKey] = vehicle;
	PlayerInfo[userid][pCarKey] = 0;

	format(VehicleInfo[vehicle][carOwner], 24, GetNameEx(playerid));

	new query[256];
	format(query, sizeof(query), "%s [MYSQL: %i | IP: %s | ??????(????): %i | ??????(?????): %i] ????? %s(Model: %i) ? ?????? %s [MYSQL: %i | IP: %s | ??????(????): %i | ??????(?????): %i] ?? -- $%i",
	GetName(playerid), PlayerInfo[playerid][pID], GetPlayerIP(playerid), money1, GetCash(playerid), VehicleNames[GetVehicleModel(vehicle)-400], GetVehicleModel(vehicle),
    GetName(userid), PlayerInfo[userid][pID], GetPlayerIP(userid), money2, GetCash(userid), price);
    insert_log(query, VEHICLE_LOG, 2, playerid);

	format(query, sizeof(query), "%s [MYSQL: %i | IP: %s | ??????(????): %i | ??????(?????): %i] ?????? %s(Model: %i) ?????? %s [MYSQL: %i | IP: %s | ??????(????): %i | ??????(?????): %i] ?? -- $%i",
	GetName(userid), PlayerInfo[userid][pID], GetPlayerIP(userid), money2, GetCash(userid), VehicleNames[GetVehicleModel(vehicle)-400], GetVehicleModel(vehicle),
    GetName(playerid), PlayerInfo[playerid][pID], GetPlayerIP(playerid), money1, GetCash(playerid), price);
 	insert_log(query, VEHICLE_LOG, 4, playerid);

	mysql_format(dbHandle,query, sizeof(query), "UPDATE `cars` SET `owner` = '%i' WHERE `id` = %i",
	VehicleInfo[vehicle][carOwnerID], VehicleInfo[vehicle][carID]);
	mysql_tquery(dbHandle, query);
	return 1;
}

stock FormatNumber(number)
{
	new
		value[32],
		length;

	format(value, sizeof(value), "%i", (number < 0) ? (-number) : (number));

	if ((length = strlen(value)) > 3)
	{
		for (new i = length, l = 0; --i >= 0; l ++) {
		    if ((l > 0) && (l % 3 == 0)) strins(value, ",", i + 1);
		}
	}

	if (number < 0)
		strins(value, "-", 0);

	return value;
}

stock ShowEditFurniture(playerid)
{
    if(pTemp[playerid][pHouseFurniture] == -1 || (IsPlayerHouseOutside(playerid, pTemp[playerid][pHouseFurniture], 5.0) == 0 && 0 == IsPlayerHouseInside(playerid, pTemp[playerid][pHouseFurniture])))
    	return 1;

	new houseid = pTemp[playerid][pHouseFurniture],
	    slot = GetPVarInt(playerid, "chose_slot");

    if(HouseFurniture[houseid][slot][fOn] == 0 || !IsValidDynamicObject(HouseFurniture[houseid][slot][fObject]))
        return cmd::furniture(playerid, "");

	if(slot < 0 || slot > MAX_FURNITURE-1)
	    return 1;

 	Dialog_Show(playerid, EditFurniture, DIALOG_STYLE_LIST, HouseFurniture[houseid][slot][fName], "??????????\n???????? ???????\n????????????? ????????\n???????\n???????? ????????\n??????? ?????", "???????", "?????");
 	return 1;
}

stock GetNumberOwner(number)
{
	if(number == 0)
		return INVALID_PLAYER_ID;

	foreach (new i : Player)
	{
		if(IsPlayerLogged(i) && PlayerInfo[i][pNumber] == number)
			return i;
	}
	return INVALID_PLAYER_ID;
}

stock ConvertSecond(time)
{
	new mes[9];
	if(time < 60) format(mes, sizeof(mes), "00:%02i", time);
	else if(time == 60) mes = "01:00";
	else if(time > 60 && time < 3600)
	{
		new Float: minutes = time / 60,
			seconds = time % 60;

		format(mes, sizeof(mes), "%02.0f:%02i", minutes, seconds);
	}
	else if(time == 3600) mes = "01:00:00";
	else if(time > 3600)
	{
		new Float: hours = time / 3600,
			minutes_int = time % 3600,
			Float: minutes = minutes_int / 60,
			seconds = minutes_int % 60;

		format(mes, sizeof(mes), "%02.0f:%02.0f:%02i", hours, minutes, seconds);
	}
	return mes;
}

stock Phone_Contact_Info(playerid, contact = -1)
{
	if(contact == -1)
	{
	    PlayerTextDrawHide(playerid, TD_iphone_contact[playerid][0]);
		PlayerTextDrawHide(playerid, TD_iphone_contact[playerid][1]);
		PlayerTextDrawHide(playerid, TD_iphone_contact[playerid][2]);
		PlayerTextDrawHide(playerid, TD_iphone_contact[playerid][3]);
		PlayerTextDrawHide(playerid, TD_iphone_contact[playerid][4]);
		DeletePVar(playerid, #select_contact);
	    return 1;
	}

	if(PlayerContacts[playerid][contact][contactOn] == 0)
	    return 1;

	new mes[128];
	format(mes, sizeof(mes), "%s~n~(%i)", PlayerContacts[playerid][contact][contactName], PlayerContacts[playerid][contact][contactNumber]);
    PlayerTextDrawSetString(playerid, TD_iphone_contact[playerid][0], mes);
    PlayerTextDrawShow(playerid, TD_iphone_contact[playerid][0]);

    PlayerTextDrawSetString(playerid, TD_iphone_contact[playerid][1], "Call");
    PlayerTextDrawBoxColor(playerid, TD_iphone_contact[playerid][1], phone_panel[PlayerInfo[playerid][pPhoneStyle]]);
	PlayerTextDrawShow(playerid, TD_iphone_contact[playerid][1]);

	PlayerTextDrawBoxColor(playerid, TD_iphone_contact[playerid][2], phone_panel[PlayerInfo[playerid][pPhoneStyle]]);
	PlayerTextDrawShow(playerid, TD_iphone_contact[playerid][2]);

	PlayerTextDrawBoxColor(playerid, TD_iphone_contact[playerid][3], phone_panel[PlayerInfo[playerid][pPhoneStyle]]);
	PlayerTextDrawShow(playerid, TD_iphone_contact[playerid][3]);

	PlayerTextDrawBoxColor(playerid, TD_iphone_contact[playerid][4], phone_panel[PlayerInfo[playerid][pPhoneStyle]]);
	PlayerTextDrawShow(playerid, TD_iphone_contact[playerid][4]);

	SetPVarInt(playerid, #select_contact, contact);
	return 1;
}

stock Phone_Contacts(playerid, list = -1)
{
	if(list == -1)
	{
	    for(new i; i != 13;i++) PlayerTextDrawHide(playerid, TD_iphone_list[playerid][i]);
	    PhoneInfo[playerid][phoneContact] = 0;
	    return 1;
	}
    PhoneInfo[playerid][phoneContact] = 1;
	new
	    number,
		count = 0,
		mes[MAX_PLAYER_NAME + 4];

	PlayerTextDrawBoxColor(playerid, TD_iphone_list[playerid][0], phone_panel[PlayerInfo[playerid][pPhoneStyle]]);
	PlayerTextDrawShow(playerid, TD_iphone_list[playerid][0]);

	PlayerTextDrawBoxColor(playerid, TD_iphone_list[playerid][1], phone_panel[PlayerInfo[playerid][pPhoneStyle]]);
	PlayerTextDrawShow(playerid, TD_iphone_list[playerid][1]);

    PlayerTextDrawBoxColor(playerid, TD_iphone_list[playerid][2], phone_panel[PlayerInfo[playerid][pPhoneStyle]]);
	PlayerTextDrawShow(playerid, TD_iphone_list[playerid][2]);

	PlayerTextDrawBoxColor(playerid, TD_iphone_list[playerid][3], phone_panel[PlayerInfo[playerid][pPhoneStyle]]);
	PlayerTextDrawSetString(playerid, TD_iphone_list[playerid][3], "Add contact");
	PlayerTextDrawShow(playerid, TD_iphone_list[playerid][3]);

	for(new i = list * 9; i != MAX_PLAYER_CONTACTS; i++)
	{
	    if(PlayerContacts[playerid][i][contactOn] == 0)
	        continue;

		count++;
		break;
 	}

	if(count == 0)
	    return 1;

	count = 0;

	for(new i; i != 9;i++)
	{
 		PhoneInfo[playerid][phoneListed][i] = -1;
  		PlayerTextDrawHide(playerid, TD_iphone_list[playerid][i + 4]);
 	}

	for(new i = 0; i != MAX_PLAYER_CONTACTS; i++)
	{
	    if(PlayerContacts[playerid][i][contactOn] == 0)
	        continue;

        number++;
		if(i < (list * 9))
		    continue;

		format(mes, sizeof(mes), "%i. %s", number, PlayerContacts[playerid][i][contactName]);
	    PlayerTextDrawSetString(playerid, TD_iphone_list[playerid][count + 4], mes);
	    PlayerTextDrawBoxColor(playerid, TD_iphone_list[playerid][count + 4], phone_panel[PlayerInfo[playerid][pPhoneStyle]]);
        PlayerTextDrawShow(playerid, TD_iphone_list[playerid][count + 4]);

        PhoneInfo[playerid][phoneListed][count] = i;

		if(count++ >= 8)
			break;
	}

	SetPVarInt(playerid, #contacts_list, list);
	return 1;
}

stock Phone_GPS(playerid, list = -1)
{
    if(list == -1)
	{
	    for(new i; i != 13;i++) PlayerTextDrawHide(playerid, TD_iphone_list[playerid][i]);
	    PhoneInfo[playerid][phoneGPS] = 0;
	    return 1;
	}
    PhoneInfo[playerid][phoneGPS] = 1;

	new count,
		mes[MAX_PLAYER_NAME + 4];

	PlayerTextDrawBoxColor(playerid, TD_iphone_list[playerid][0], phone_panel[PlayerInfo[playerid][pPhoneStyle]]);
	PlayerTextDrawShow(playerid, TD_iphone_list[playerid][0]);

	PlayerTextDrawBoxColor(playerid, TD_iphone_list[playerid][1], phone_panel[PlayerInfo[playerid][pPhoneStyle]]);
	PlayerTextDrawShow(playerid, TD_iphone_list[playerid][1]);

    PlayerTextDrawBoxColor(playerid, TD_iphone_list[playerid][2], phone_panel[PlayerInfo[playerid][pPhoneStyle]]);
	PlayerTextDrawShow(playerid, TD_iphone_list[playerid][2]);

	PlayerTextDrawBoxColor(playerid, TD_iphone_list[playerid][3], phone_panel[PlayerInfo[playerid][pPhoneStyle]]);
	PlayerTextDrawSetString(playerid, TD_iphone_list[playerid][3], "-GPS-");
	PlayerTextDrawShow(playerid, TD_iphone_list[playerid][3]);

	for(new i; i != 9;i++)
	{
 		PhoneInfo[playerid][phoneListed][i] = -1;
  		PlayerTextDrawHide(playerid, TD_iphone_list[playerid][i + 4]);
 	}

	for(new i = list * 9; i != sizeof(gps_location); i++)
	{
		format(mes, sizeof(mes), "%i. %s", i+1, gps_location[i][gpsName]);
	    PlayerTextDrawSetString(playerid, TD_iphone_list[playerid][count + 4], mes);
	    PlayerTextDrawBoxColor(playerid, TD_iphone_list[playerid][count + 4], phone_panel[PlayerInfo[playerid][pPhoneStyle]]);
        PlayerTextDrawShow(playerid, TD_iphone_list[playerid][count + 4]);

        PhoneInfo[playerid][phoneListed][count] = i;

		if(count++ >= 8)
			break;
	}

	SetPVarInt(playerid, #contacts_list, list);
	return 1;
}

stock Phone_History(playerid, list = -1)
{
	if(list == -1)
	{
	    PlayerTextDrawHide(playerid, TD_iphone_list[playerid][0]);
	    PlayerTextDrawHide(playerid, TD_iphone_list[playerid][1]);
	    PlayerTextDrawHide(playerid, TD_iphone_list[playerid][2]);

	    PlayerTextDrawHide(playerid, TD_iphone_list[playerid][13]);
	    PlayerTextDrawHide(playerid, TD_iphone_list[playerid][14]);
	    PlayerTextDrawHide(playerid, TD_iphone_list[playerid][15]);
	    PhoneInfo[playerid][phoneHistory] = 0;
	    return 1;
	}

	new query[128];
	mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `history_calls` WHERE `to_number` = %i OR `from_number` = %i ORDER BY `id` DESC", PlayerInfo[playerid][pNumber], PlayerInfo[playerid][pNumber]);
	mysql_tquery(dbHandle, query, "ShowPhoneHistory", "ii", playerid, list);
	return 1;
}

forward ShowPhoneHistory(playerid, list);
public ShowPhoneHistory(playerid, list)
{
    PhoneInfo[playerid][phoneHistory] = 1;

	new
		count,
		mes[256],
		rows = cache_num_rows(),
		to_name[MAX_PLAYER_NAME],
		from_name[MAX_PLAYER_NAME],
		to_number,
		date_hour[24],
		date_month[24],
		time;


    PlayerTextDrawBoxColor(playerid, TD_iphone_list[playerid][0], phone_panel[PlayerInfo[playerid][pPhoneStyle]]);
	PlayerTextDrawShow(playerid, TD_iphone_list[playerid][0]);

	PlayerTextDrawBoxColor(playerid, TD_iphone_list[playerid][1], phone_panel[PlayerInfo[playerid][pPhoneStyle]]);
	PlayerTextDrawShow(playerid, TD_iphone_list[playerid][1]);

    PlayerTextDrawBoxColor(playerid, TD_iphone_list[playerid][2], phone_panel[PlayerInfo[playerid][pPhoneStyle]]);
	PlayerTextDrawShow(playerid, TD_iphone_list[playerid][2]);

	if(!rows || rows < (list * 3))
	    return 1;

	for(new i; i != 3;i++)
	{
 		PhoneInfo[playerid][phoneListed][i] = -1;
  		PlayerTextDrawHide(playerid, TD_iphone_list[playerid][i + 13]);
 	}

	for(new i = list * 3; i != rows; i++)
	{

	    to_number = cache_get_field_content_int(i, "to_number");
        cache_get_field_content(i, "to_name", to_name);
        cache_get_field_content(i, "from_name", from_name);
        cache_get_field_content(i, "date_hour", date_hour);
        cache_get_field_content(i, "date_month", date_month);
		time = cache_get_field_content_int(i, "time");

		format(mes, sizeof(mes), "Time: %s    %s~n~%s~n~~n~%s~n~", date_hour, date_month, (to_number == PlayerInfo[playerid][pNumber])?("Incoming"):("Outcoming"), (to_number == PlayerInfo[playerid][pNumber])?(to_name):(from_name));
		if(to_number == PlayerInfo[playerid][pNumber] && time == 0)
		{
		    PlayerTextDrawBoxColor(playerid, TD_iphone_list[playerid][count + 13], -1523963137);
		    strcat(mes, "Missed call");
		}
		else
		{
		    format(mes, sizeof(mes), "%sCall time: %s", mes, ConvertSecond(time));
		    PlayerTextDrawBoxColor(playerid, TD_iphone_list[playerid][count + 13], 8388863);
		}
	    PlayerTextDrawSetString(playerid, TD_iphone_list[playerid][count + 13], mes);
        PlayerTextDrawShow(playerid, TD_iphone_list[playerid][count + 13]);

        PhoneInfo[playerid][phoneListed][count] = cache_get_field_content_int(i, "id");

        count++;
		if(count >= 3)
			break;
	}
	SetPVarInt(playerid, #contacts_list, list);
	return 1;
}

forward ShowHistoryInfo(playerid, history);
public ShowHistoryInfo(playerid, history)
{
    if(!cache_num_rows())
    	return 1;

	new
		mes[256],
		to_name[MAX_PLAYER_NAME],
		from_name[MAX_PLAYER_NAME],
		to_number,
		from_number,
		date_hour[24],
		date_month[24],
		time;

    to_number = cache_get_field_content_int(0, "to_number");
   	from_number = cache_get_field_content_int(0, "from_number");
    cache_get_field_content(0, "to_name", to_name);
    cache_get_field_content(0, "from_name", from_name);
    cache_get_field_content(0, "date_hour", date_hour);
 	cache_get_field_content(0, "date_month", date_month);
	time = cache_get_field_content_int(0, "time");

	format(mes, sizeof(mes), "{ffffff}%s\n\n{FFFF00}????:{ffffff}\t%s, %s\n{FFFF00}??????:{ffffff} %s (%i)\n\n{FFFF00}???????????? ??????:{ffffff} %s",
	(to_number == PlayerInfo[playerid][pNumber])?("????????"):("?????????"),
	date_month,
	date_hour,
	(to_number == PlayerInfo[playerid][pNumber])?(to_name):(from_name),
	(to_number == PlayerInfo[playerid][pNumber])?(from_number):(to_number),
	ConvertSecond(time));

	Dialog_Show(playerid, None, DIALOG_STYLE_MSGBOX, "??????", mes, "X", "");
	return 1;
}

stock Phone_SMS(playerid, list = -1)
{
	if(list == -1)
	{
	    for(new i; i != 13;i++) PlayerTextDrawHide(playerid, TD_iphone_list[playerid][i]);
	    PhoneInfo[playerid][phoneSMS] = 0;
	    return 1;
	}

	new query[128];
	mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `sms` WHERE `to_number`='%i' AND `read`!='-1' ORDER BY `id` DESC", PlayerInfo[playerid][pNumber]);
	mysql_tquery(dbHandle, query, "ShowPhoneSMS", "ii", playerid, list);
	return 1;
}

stock Phone_SMS_Info(playerid, sms = -1)
{
	if(sms == -1)
	{
	    PlayerTextDrawHide(playerid, TD_iphone_contact[playerid][0]);
		PlayerTextDrawHide(playerid, TD_iphone_contact[playerid][1]);
		PlayerTextDrawHide(playerid, TD_iphone_contact[playerid][2]);
		PlayerTextDrawHide(playerid, TD_iphone_contact[playerid][3]);
		PlayerTextDrawHide(playerid, TD_iphone_contact[playerid][4]);
		DeletePVar(playerid, #select_sms);
	    return 1;
	}

    new query[128];
	mysql_format(dbHandle, query, sizeof(query), "UPDATE `sms` SET `read`=1 WHERE `id` = %i", sms);
	mysql_tquery(dbHandle, query);

	mysql_format(dbHandle, query, sizeof(query), "SELECT * FROM `sms` WHERE `id` = %i", sms);
	mysql_tquery(dbHandle, query, "ShowPhoneSMSInfo", "ii", playerid, sms);
	return 1;
}

forward ShowSMS(playerid, sms);
public ShowSMS(playerid, sms)
{
	if(!cache_num_rows())
	{
	    cmd::phone(playerid, "");
	    return SendErrorMessage(playerid, "????????? ?? ???????.");
	}

	new from_name[24],
	    from_number,
	    date[24],
	    text[128],
	    mes[256];

    from_number = cache_get_field_content_int(0, "from_number");
	cache_get_field_content(0, "from_name", from_name);
	cache_get_field_content(0, "date", date);
	cache_get_field_content(0, "text", text);

	format(mes, sizeof(mes), "{FFFF00}???????????:\t{ffffff}%s (%i)\n\
	{FFFF00}????:\t{ffffff}%s\n\n\
	%s", from_name, from_number, date, text);
	Dialog_Show(playerid, None, DIALOG_STYLE_MSGBOX, "SMS", mes, "X", "");
	return 1;
}

forward ShowPhoneSMSInfo(playerid, sms);
public ShowPhoneSMSInfo(playerid, sms)
{
	if(!cache_num_rows())
	    return 1;

    new mes[128],
        name[24],
        date[21];

	cache_get_field_content(0, "from_name", name);
	cache_get_field_content(0, "date", date);

	format(mes, sizeof(mes), "%s~n~(%i)~n~%s", name, cache_get_field_content_int(0, "from_number"), date);
    PlayerTextDrawSetString(playerid, TD_iphone_contact[playerid][0], mes);
    PlayerTextDrawShow(playerid, TD_iphone_contact[playerid][0]);

    PlayerTextDrawSetString(playerid, TD_iphone_contact[playerid][1], "Show");
	PlayerTextDrawBoxColor(playerid, TD_iphone_contact[playerid][1], phone_panel[PlayerInfo[playerid][pPhoneStyle]]);
	PlayerTextDrawShow(playerid, TD_iphone_contact[playerid][1]);

	PlayerTextDrawBoxColor(playerid, TD_iphone_contact[playerid][2], phone_panel[PlayerInfo[playerid][pPhoneStyle]]);
	PlayerTextDrawShow(playerid, TD_iphone_contact[playerid][2]);

	PlayerTextDrawBoxColor(playerid, TD_iphone_contact[playerid][3], phone_panel[PlayerInfo[playerid][pPhoneStyle]]);
	PlayerTextDrawShow(playerid, TD_iphone_contact[playerid][3]);

	PlayerTextDrawBoxColor(playerid, TD_iphone_contact[playerid][4], phone_panel[PlayerInfo[playerid][pPhoneStyle]]);
	PlayerTextDrawShow(playerid, TD_iphone_contact[playerid][4]);

	SetPVarInt(playerid, #select_sms, sms);
	SetPVarString(playerid, #sms_number, name);
	return 1;
}

forward ShowPhoneSMS(playerid, list);
public ShowPhoneSMS(playerid, list)
{
    PhoneInfo[playerid][phoneSMS] = 1;

	new
		count,
		mes[MAX_PLAYER_NAME + 4],
		rows = cache_num_rows(),
		name[MAX_PLAYER_NAME];


    PlayerTextDrawBoxColor(playerid, TD_iphone_list[playerid][0], phone_panel[PlayerInfo[playerid][pPhoneStyle]]);
	PlayerTextDrawShow(playerid, TD_iphone_list[playerid][0]);

	PlayerTextDrawBoxColor(playerid, TD_iphone_list[playerid][1], phone_panel[PlayerInfo[playerid][pPhoneStyle]]);
	PlayerTextDrawShow(playerid, TD_iphone_list[playerid][1]);

    PlayerTextDrawBoxColor(playerid, TD_iphone_list[playerid][2], phone_panel[PlayerInfo[playerid][pPhoneStyle]]);
	PlayerTextDrawShow(playerid, TD_iphone_list[playerid][2]);

	PlayerTextDrawSetString(playerid, TD_iphone_list[playerid][3], "Send SMS");
	PlayerTextDrawBoxColor(playerid, TD_iphone_list[playerid][3], phone_panel[PlayerInfo[playerid][pPhoneStyle]]);
	PlayerTextDrawShow(playerid, TD_iphone_list[playerid][3]);

	if(!rows || rows < (list * 9))
	    return 1;

	for(new i; i != 9;i++)
	{
 		PhoneInfo[playerid][phoneListed][i] = -1;
  		PlayerTextDrawHide(playerid, TD_iphone_list[playerid][i + 4]);
 	}

	for(new i = list * 9; i != rows; i++)
	{
        cache_get_field_content(i, "from_name", name);

		format(mes, sizeof(mes), "%i. %s", i+1, name);
	    PlayerTextDrawSetString(playerid, TD_iphone_list[playerid][count + 4], mes);

	    if(cache_get_field_content_int(i, "read") == 1)
		    PlayerTextDrawBoxColor(playerid, TD_iphone_list[playerid][count + 4], phone_panel[PlayerInfo[playerid][pPhoneStyle]]);
		else
		    PlayerTextDrawBoxColor(playerid, TD_iphone_list[playerid][count + 4], 0xFFFF00FF);

		PlayerTextDrawShow(playerid, TD_iphone_list[playerid][count + 4]);

        PhoneInfo[playerid][phoneListed][count] = cache_get_field_content_int(i, "id");

        count++;
		if(count >= 8)
			break;
	}
	SetPVarInt(playerid, #contacts_list, list);
	return 1;
}

stock GetNearBootVehicle(playerid)
{
	foreach(new i:Vehicle)
	{
	    if(0 != IsVehicleStreamedIn(i, playerid) && 0 != IsOnBootVehicle(playerid, i))
	        return i;
	}
	return 0;
}

stock IsOnBootVehicle(playerid, vehicleid)
{
    new Float:angle,
		Float:distance,
		Float: x,
		Float: y,
		Float: z,
		model = GetVehicleModel(vehicleid);

	GetVehicleModelInfo(model, 1, x, distance, z);
    distance = distance/2 + 0.1;
    GetVehiclePos(vehicleid, x, y, z);
    GetVehicleZAngle(vehicleid, angle);
    x += (distance * floatsin(-angle+180, degrees));
    y += (distance * floatcos(-angle+180, degrees));

    if(model == 435 || model == 450 || model == 584 || model == 591)
        return IsPlayerInRangeOfPoint(playerid, 3.0, x, y, z);

    return IsPlayerInRangeOfPoint(playerid, 2.0, x, y, z);
}

stock IsOnHoodVehicle(playerid, vehicleid)
{
    new Float:angle,Float:distance, Float: x, Float: y, Float: z;
    GetVehicleModelInfo(GetVehicleModel(vehicleid), 1, x, distance, z);
    distance = distance/2 + 0.1;
    GetVehiclePos(vehicleid, x, y, z);
    GetVehicleZAngle(vehicleid, angle);
    x -= (distance * floatsin(-angle+180, degrees));
    y -= (distance * floatcos(-angle+180, degrees));
    return IsPlayerInRangeOfPoint(playerid, 2.0, x, y, z);
}

SendPlayerToPlayer(playerid, targetid)
{
	new
	    Float:x,
	    Float:y,
	    Float:z;

	GetPlayerPos(targetid, x, y, z);

    if(GetInterior(targetid) || GetWorld(targetid))
	{
   		PlayerInfo[playerid][pLocationPos][0] = PlayerInfo[targetid][pLocationPos][0];
	    PlayerInfo[playerid][pLocationPos][1] = PlayerInfo[targetid][pLocationPos][0];
		PlayerInfo[playerid][pLocationPos][2] = PlayerInfo[targetid][pLocationPos][0];
	}

	SetPlayerPosEx(playerid, x + 1, y, z);
	SetInterior(playerid, GetInterior(targetid));
	SetWorld(playerid, GetWorld(targetid));

	pTemp[playerid][pHouseEntered] = pTemp[targetid][pHouseEntered];
	pTemp[playerid][pApartEntered] = pTemp[targetid][pApartEntered];
	pTemp[playerid][pBizEntered] = pTemp[targetid][pBizEntered];
	return 1;
}

stock GetPlayerNetwork(playerid)
{
    new
	    Float: fDistance[2] = {99999.0, 0.0},
	    iIndex = -1,
        Float:fX,
	    Float:fY,
		Float:fZ;

	if (GetInterior(playerid) || GetWorld(playerid))
	{
		fX = PlayerInfo[playerid][pLocationPos][0];
		fY = PlayerInfo[playerid][pLocationPos][1];
		fZ = PlayerInfo[playerid][pLocationPos][2];
	}
	else GetPlayerPos(playerid, fX, fY, fZ);

	for (new i = 0; i < MAX_TOWERS; i ++)
	{
	    if(TowerInfo[i][towerOn] == 0)
	        continue;

		fDistance[1] = GetDistanceBetweenPoints(fX, fY, fZ, TowerInfo[i][towerPosX], TowerInfo[i][towerPosY], TowerInfo[i][towerPosZ]);

		if (fDistance[1] < fDistance[0])
		{
		    fDistance[0] = fDistance[1];
		    iIndex = i;
		}
	}

	if(iIndex == -1)
		return 0;

 	switch(floatround(fDistance[0]))
	{
 		case 0..400: return 5;
   		case 401..600: return 4;
     	case 601..800: return 3;
      	case 801..1000: return 2;
		case 1001..1200: return 1;
		default: return 0;
  	}
	return 0;
}

forward Float:GetDistanceBetweenPoints(Float:x1, Float:y1, Float:z1, Float:x2, Float:y2, Float:z2);
public Float:GetDistanceBetweenPoints(Float:x1, Float:y1, Float:z1, Float:x2, Float:y2, Float:z2)
{
    return VectorSize(x1-x2, y1-y2, z1-z2);
}

stock ShowComponentMenu(playerid, vehicle, listitem)
{
	new count,
 		mes[512],
 		str[56];

	for(new i; i != max_vehicle_components[listitem]; i++)
	{
		if(vehicle_component[listitem][i][compID] == 0 || IsVehicleUpgradeCompatible(GetVehicleModel(vehicle), vehicle_component[listitem][i][compID]) != 1)
			continue;

		format(str, sizeof(str), "%s\t$%i\n", GetComponentName(vehicle_component[listitem][i][compID]), vehicle_component[listitem][i][compPrice]);
		strcat(mes, str);
		count++;
   	}

	if(count == 0)
	{
	    ShowModMenu(playerid);
		return SendErrorMessage(playerid, "??? ?????? ?????????? ??? ?????????? ???????.");
	}

	SetPVarInt(playerid, #component_type, listitem);
   	Dialog_Show(playerid, SelectModDialog, DIALOG_STYLE_TABLIST, "{33AA33}?????? ??????????", mes, "???????", "?????");
   	return 1;
}

stock ShowModMenu(playerid)
{
	new vehicle = GetPlayerVehicleID(playerid);
    if(vehicle == 0 || 0 == IsDriver(playerid))
		return SendErrorMessage(playerid, "?? ?????? ?????????? ? ?????????? ??? ????????.");

	if(IsABicycle(vehicle) || IsABiker(vehicle) || IsATaxi(vehicle))
		return SCM(playerid, COLOR_LIGHTRED, "??? ???????????, ?????????? ? ????? ?????? ??????? ??????????.");

	if(!VehicleInfo[vehicle][carRegistered])
		return SCM(playerid, COLOR_LIGHTRED, "???? ????????? ?? ???????????????.");

	if(VehicleInfo[vehicle][carEngineOn])
		return SCM(playerid, COLOR_LIGHTRED, "????????? ?????????, ?????? ??? ?????? ?????????????? ???? ?????????.");

    new cost = GetVehiclePrice(GetVehicleModel(vehicle));
	static const str_size[] = "??????\n\
	???????\n\
	???????????????\n\
	?????\n\
	??????? ????\n\
	????????? ?????\n\
	???????? ???????\n\
	?????? ???????\n\
	?????\n\
	??????????? ??????\n\
	???????? [$700]\n\
	?????????? [$8.000]\n\
	????????? [$400]\n\
	GPS [$1500]\n\
	???????? ????????? [$%i]\n\
	???????? ??????????? [$%i]\n\
	???????? ????? [$300]\n\
	?????????\n\
	??????? ??????";

	new mes[sizeof(str_size) - 4 + 1 + 24];
	format(mes, sizeof(mes), str_size,
		cost / 100 * 10,
		cost / 100 * 5
	);

	Dialog_Show(playerid, ModDialog, DIALOG_STYLE_LIST, "{33AA33}?????? ??????????", mes, "???????", "???????");
	return 1;
}

forward TaxiTimer();
public TaxiTimer()
{
    foreach(Player, i)
	{
		if(!IsPlayerLogged(i) || !TaxiDuty[i] || TaxiPassenger[i] == INVALID_PLAYER_ID)
			continue;

		new targetid = TaxiPassenger[i],
		    vehicle = GetPlayerVehicleID(i);

		if(!IsDriver(i))
		{
		    new mes[32];
   			format(mes, sizeof(mes),"~r~+$%i ALL: $%i", TaxiMoney[i], TaxiMade[i]);
	    	GameTextForPlayer(i, mes, 2000, 1);

        	TaxiPassenger[i] = INVALID_PLAYER_ID;
        	TaxiMoney[i] = 0;
        	continue;
		}

		if(!IsPlayerLogged(targetid) || !IsPlayerInVehicle(targetid, vehicle))
		{
		    new mes[32];
   			format(mes, sizeof(mes),"~r~+$%i ALL: $%i", TaxiMoney[i], TaxiMade[i]);
	    	GameTextForPlayer(i, mes, 2000, 1);

        	TaxiPassenger[i] = INVALID_PLAYER_ID;
        	TaxiMoney[i] = 0;
        	continue;
		}

		if(GetCash(targetid) >= TaxiFare[i])
		{
		    GiveCash(targetid, -TaxiFare[i]);
		    TaxiMade[i] += TaxiFare[i];
			TaxiMoney[i] += TaxiFare[i];
			new mes[32];
   			format(mes, sizeof(mes),"~y~TAXI FARE: $%i", TaxiMoney[i]);
	    	GameTextForPlayer(i, mes, 5050, 1);
	    	GameTextForPlayer(targetid, mes, 5050, 1);
		}
		else
		{
		    new mes[32];
   			format(mes, sizeof(mes),"~r~+$%i ALL: $%i", TaxiMoney[i], TaxiMade[i]);
	    	GameTextForPlayer(i, mes, 2000, 1);
		    SCM(i, COLOR_YELLOWG, "? ????????? ??????????? ??????. ?? ?????? ??? ?????????.");
		    TaxiPassenger[i] = INVALID_PLAYER_ID;
		    TaxiMoney[i] = 0;
		}
	}
	SetTimer("TaxiTimer", 5000, false);
	return 1;
}

stock BuyGunMenu(playerid)
{
    if(PlayerInfo[playerid][pOnDuty])
		return SCM(playerid, COLOR_LIGHTRED, "?????? ???????? ?????? ?? ?????????.");

    if(PlayerInfo[playerid][pWepLic] != 1)
		return SCM(playerid, COLOR_LIGHTRED, "? ??? ??? ???????? ?? ??????.");

    Dialog_Show(playerid, BuyGun, DIALOG_STYLE_TABLIST, "???????", "{6EA3FF}??????:\t\n\
	Desert Eagle\t$3.900\n\
 	9mm\t$2.000\n\
 	Shotgun\t$4.700\n\
 	Country Rifle\t$5.800\n\
 	???\t$200\n\
	??????\t$1.000\n\
	?????????? ??????\t$2.700\n\
	???????\t$5 / 1??.", "??????", "??????");
	return 1;
}

Dialog:BuyGun(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return 1;

	new bizid = -1;

	if((bizid = GetNearBizInside(playerid)) == -1 || BizInfo[bizid][bizType] != BIZ_AMMO)
	    return 1;

	if(PlayerInfo[playerid][pWepLic] != 1)
		return SCM(playerid, COLOR_LIGHTRED, "? ??? ??? ???????? ?? ??????.");

	if(listitem == 0)
	    return BuyGunMenu(playerid);

	if(listitem < 8)
	{
	    if(PlayerInfo[playerid][pWepCount] < 1)
	        return SendErrorMessage(playerid, "?? ?????? ?? ?????? ???????? ?????? ? ?????????.");

		new gun_list[] = {WEAPON_DEAGLE, WEAPON_COLT45, WEAPON_SHOTGUN, WEAPON_RIFLE, WEAPON_KNIFE, WEAPON_KATANA, INV_OPTICS},
			prc_list[] = {3900, 2000, 4700, 5800, 200, 1000, 2700};

		new slot = GetWeapSlot(gun_list[listitem-1]);

		if(listitem != 7 && PlayerInfo[playerid][pWeap][slot] != 0)
		    return SendErrorMessage(playerid, "? ??? ??? ???? ?????? ? ?????? ?????.");

		if(GetCash(playerid) < prc_list[listitem-1])
		    return SendClientMessageEx(playerid,COLOR_LIGHTRED,"??? ????? $%i ??? ???????.", prc_list[listitem-1]);

        if(BizInfo[bizid][bizOwnerID] != 0 && !BizInfo[bizid][bizProduct])
    		return SendErrorMessage(playerid, "? ????????? ???????????? ?????????? ??? ???????.");

        SendClientMessageEx(playerid,COLOR_GREEN,"?? ?????? %s ?? $%i.", inventory_items[gun_list[listitem-1]][itemName], prc_list[listitem-1]);

		if(listitem < 5)
			SCM(playerid, COLOR_GREEN, "????? ???????? ???????, ??????????? /charge, ????????? /discharge.");

		new money = GetCash(playerid);
		GiveCash(playerid, -prc_list[listitem-1]);

		if(BizInfo[bizid][bizOwnerID] != 0)
		{
			BizInfo[bizid][bizProduct]--;
			GiveBizCash(bizid, prc_list[listitem-1] / 100 * 80);
		}

		if(listitem != 7)
			ac_GivePlayerWeapon(playerid, gun_list[listitem-1], (gun_list[listitem-1] == WEAPON_KNIFE || gun_list[listitem-1] == WEAPON_KATANA)?(1):(0));
		else
			GivePlayerItem(playerid, INV_OPTICS, 1);

        PlayerInfo[playerid][pWepCount]--;
        new query[128];
		format(query, sizeof(query), "%s [MYSQL: %i | IP: %s | ??????(????): %i | ??????(?????): %i] ????? (%s) ?? -- $%i",
		GetName(playerid), PlayerInfo[playerid][pID], GetPlayerIP(playerid), money, GetCash(playerid), inventory_items[gun_list[listitem-1]][itemName], prc_list[listitem-1]);
 		insert_log(query, WEAPON_LOG, 1, playerid);
		return 1;
	}

	Dialog_Show(playerid, BuyAmmo, DIALOG_STYLE_INPUT, "??????? - $5 ?? 1 ??.", "{FFFFFF}??????? ?????????? ??????, ??????? ?? ?????? ??????????:", "??????", "?????");
	return 1;
}

Dialog:BuyAmmo(playerid, response, listitem, inputtext[])
{
	if(!response)
 		return 1;

    new bizid = -1;

	if((bizid = GetNearBizInside(playerid)) == -1 || BizInfo[bizid][bizType] != BIZ_AMMO)
	    return 1;

	if(PlayerInfo[playerid][pWepLic] != 1)
		return SCM(playerid, COLOR_LIGHTRED, "? ??? ??? ???????? ?? ??????.");

	new ammo = strval(inputtext);
	if(ammo < 30 || ammo > 1000)
	{
	    Dialog_Show(playerid, BuyAmmo, DIALOG_STYLE_INPUT, "??????? - $5 ?? 1 ??.", "{FFFFFF}??????? ?????????? ??????, ??????? ?? ?????? ??????????:", "??????", "?????");
	    return SendErrorMessage(playerid, "?? ????????? ???????? ?????????? ?????? 30-1000.");
	}

    if(BizInfo[bizid][bizOwnerID] != 0 && !BizInfo[bizid][bizProduct])
		return SendErrorMessage(playerid, "? ????????? ???????????? ?????????? ??? ???????.");

	if(GivePlayerItem(playerid, INV_AMMO, ammo) == -1)
	    return SendErrorMessage(playerid, "? ????????? ??? ?????.");

	if(GetCash(playerid) < 5 * ammo)
	    return SendClientMessageEx(playerid,COLOR_LIGHTRED,"??? ????? $%i ??? ???????.", 5 * ammo);

	SendClientMessageEx(playerid,COLOR_GREEN,"?? ?????? %i ??????(-?/-??) ?? $%i.", ammo, 5 * ammo);

	new money = GetCash(playerid);
	GiveCash(playerid, -5 * ammo);

	if(BizInfo[bizid][bizOwnerID] != 0)
	{
		BizInfo[bizid][bizProduct]--;
		GiveBizCash(bizid, ammo * 2);
	}

	new query[128];
	format(query, sizeof(query), "%s [MYSQL: %i | IP: %s | ??????(????): %i | ??????(?????): %i] ????? (???????:%i) ?? -- $%i",
	GetName(playerid), PlayerInfo[playerid][pID], GetPlayerIP(playerid), money, GetCash(playerid), ammo, 5 * ammo);
	insert_log(query, WEAPON_LOG, 2, playerid);

	BuyGunMenu(playerid);
	return 1;
}

stock GetMaxCargoVehicle(vehicle)
{
	switch(GetVehicleModel(vehicle))
	{
	    case 600, 543, 605, 443: return 2;
	    case 422: return 3;
	    case 478: return 4;
		case 554: return 6;
		case 413, 459, 482: return 10;
	    case 440, 498: return 12;
	    case 499: return 14;
	    case 414, 455, 428: return 16;
	    case 578: return 18;
		case 456: return 24;
		case 450: return 30;
		case 435, 591: return 36;
		case 584: return 40;
	}
	return 0;
}

stock IsValidProductVehicle(vehicle, prod)
{
	switch(GetVehicleModel(vehicle))
	{
	    case 600, 543, 605, 422, 478, 413, 459, 482, 440, 498:
		{
			switch(prod)
			{
			    case 1, 2, 3, 5, 6, 7, 12, 15, 18, 19, 20, 23, 24: return 1;
			}
		}

		case 554, 499, 414, 456, 435, 591:
		{
			switch(prod)
			{
			    case 1, 2, 3, 5, 6, 7, 12, 15, 18, 19, 20, 23, 24, TRUCKER_BRICKS: return 1;
			}
		}

        case 584:
		{
			switch(prod)
			{
			    case 0, 8, 11, 19: return 1;
			}
		}

		case 450, 455:
        {
			switch(prod)
			{
			    case 9, 10, 13, 16, TRUCKER_SCRAP: return 1;
			}
		}

		case 578:
		{
			switch(prod)
			{
			    case TRUCKER_WOODS, TRUCKER_BRICKS: return 1;
			}
		}
		case 443:
		{
			switch(prod)
			{
			    case 4: return 1;
			}
		}
		case 428:
		{
			switch(prod)
			{
			    case 14, 21: return 1;
			}
		}
	}
	return 0;
}

stock IsTruckCar(vehicle)
{
	switch(GetVehicleModel(vehicle))
	{
	    case 403, 514, 515: return 1;
	}
	return 0;
}

stock ShowBizMenuPDA(playerid, list = 0)
{
	if(list < 0 || list > 10)
	    list = 0;

    new count,
        id,
        mes[1024] = "{9ACD32}?????\t{9ACD32}????????? / ???????\t{9ACD32}??????\n{9ACD32}[??????????]";

    for(new i; i != 10; i++)
		pTemp[playerid][pCargoListed][i] = -1;

    for(new i; i != MAX_BIZ; i++)
    {
		if(BizInfo[i][bizID] == 0 || BizInfo[i][bizBuyPrice] == 0)
		    continue;

        if(count < list * 10)
			continue;

        id = biz_prod_types[BizInfo[i][bizType]];
		format(mes, sizeof(mes), "%s\n%s\t$%i\t%s", mes, truckcargo_product[id], BizInfo[i][bizBuyPrice], BizInfo[i][bizName]);
        pTemp[playerid][pCargoListed][count - (list * 10)] = i;

		if(count++ == (list * 10) + 9)
			break;
	}

	if(count == 0)
	    return 1;

	if(count == (list * 10) + 9)
	    strcat(mes, "{9ACD32}[?????????]");

 	Dialog_Show(playerid, PDABiz, DIALOG_STYLE_TABLIST_HEADERS, "PDA - ???????", mes, "GPS", "?????");
 	SetPVarInt(playerid, #pda_list, list);
	return 1;
}

stock Waypoint_Set(playerid, Float: x, Float: y, Float: z, Float: radius = 3.0)
{
	if(IsValidDynamicCP(pTemp[playerid][pWaypoint]))
	{
		DestroyDynamicCP(pTemp[playerid][pWaypoint]);
        pTemp[playerid][pWaypoint] = 0;
	}

    pTemp[playerid][pWaypoint] = CreateDynamicCP(x, y, z, radius, 0, 0, playerid, 15000.0);
    TogglePlayerDynamicCP(playerid, pTemp[playerid][pWaypoint], true);
    Streamer_Update(playerid, STREAMER_TYPE_CP);
	return 1;
}

stock DisableWaypoint(playerid)
{
    if(IsValidDynamicCP(pTemp[playerid][pWaypoint]))
		DestroyDynamicCP(pTemp[playerid][pWaypoint]);

    pTemp[playerid][pWaypoint] = 0;
	return 1;
}

stock TruckRank1(mv)
{
	return (mv == 600 || mv == 605 || mv == 543 || mv == 422 || mv == 478 || mv == 554) ? (1):(0);
}

stock TruckRank2(mv)
{
	return (TruckRank1(mv) == 1 || mv == 413 || mv == 459 || mv == 482) ? (1):(0);
}

stock TruckRank3(mv)
{
	return (TruckRank1(mv) == 1 || TruckRank2(mv) == 1 || mv == 440 || mv == 498) ? (1):(0);
}

stock TruckRank4(mv)
{
	return (TruckRank1(mv) == 1 || TruckRank2(mv) == 1 || TruckRank3(mv) == 1 || mv == 499 || mv == 414 || mv == 578 || mv == 443 || mv == 428) ? (1):(0);
}

stock TruckRank5(mv)
{
	return (TruckRank1(mv) == 1 || TruckRank2(mv) == 1 || TruckRank3(mv) == 1 || TruckRank4(mv) == 1 || mv == 456 || mv == 455) ? (1):(0);
}

stock TruckRank6(mv)
{
	return (TruckRank1(mv) == 1 || TruckRank2(mv) == 1 || TruckRank3(mv) == 1 || TruckRank4(mv) == 1 || TruckRank5(mv) == 1 || mv == 584 || mv == 591 || mv == 435 || mv == 450) ? (1):(0);
}

stock IsTruckerJob(vehicle)
{
    new mv = GetVehicleModel(vehicle);
	return (TruckRank6(mv) == 0)?(0):(1);
}

stock ValidTruckForPlayer(playerid, vehicle)
{
	new mv = GetVehicleModel(vehicle);
	switch(PlayerInfo[playerid][pCareer])
	{
	    case 0..11: if(TruckRank1(mv) == 0) return 0;
		case 12..23: if(TruckRank2(mv) == 0) return 0;
	    case 24..31: if(TruckRank3(mv) == 0) return 0;
	    case 32..47: if(TruckRank4(mv) == 0) return 0;
	    case 48..58: if(TruckRank5(mv) == 0) return 0;
	    default: if(TruckRank6(mv) == 0) return 0;
	}
	return 1;
}

forward OnCheckNumber(playerid);
public OnCheckNumber(playerid)
{
	if (!cache_num_rows())
	{
	    Dialog_Show(playerid, MDCVehicle, DIALOG_STYLE_INPUT, "{8D8DFF}Police Database - ????? ??????????", "{B4B5B7}????? ?????????? ?? ??????????\n\n??????? ???????? ????:\n\n(( ????? ?? ))", "????", "?????");
	    return SCM(playerid, -1, "?????????? ? ????? ???????? ?????? ?? ??????.");
	}

	new
	    ownername[MAX_PLAYER_NAME],
	    model,
	    plate[24],
	    date[24];

	cache_get_field_content(0, "ownername", ownername);
	strreplace(ownername, '_', ' ');
    cache_get_field_content(0, "plate", plate);
    model = cache_get_field_content_int(0, "model");
    cache_get_field_content(0, "date", date);

	static const str_size[] = "{B4B5B7}?????????? ?????? ?? ?????? ??\n\n???????? ????: %s\n????? ??????????: %s\n???????? ??????????: %s\n???? ???????: %s";
	new mes[sizeof(str_size) - 4 + 24 + 32 + MAX_PLAYER_NAME + 24 + (10 * 24)];
 	format(mes, sizeof(mes), str_size,
		plate,
		VehicleNames[model-400],
		ownername,
		date
	);

	new vehicle,
	    count;

	if((vehicle = FindVehicleByPlate(plate)) != 0)
	{
	    for(new i; i != MAX_CAR_TICKETS; i++)
		{
		    if(vTickets[vehicle][i][tID] == 0)
		        continue;

            if(count == 0)
			    strcat(mes, "\n\n??????");

            format(mes, sizeof(mes), "%s\n#i: $%i - %.11s...",
				mes,
				count+1,
				FormatNumber(vTickets[vehicle][i][tAmount]),
				vTickets[vehicle][i][tReason]
			);
			count++;
		}

		if(count == 0)
		    strcat(mes, "\n\n??? ???????????? ???????.");
	}
	else strcat(mes, "\n\n{FF6347}????????? ?? ?? ???????.");
	Dialog_Show(playerid, None, DIALOG_STYLE_MSGBOX, "{8D8DFF}Police Database - ????? ?? ??????", mes, "-", "");
	return 1;
}

stock IsPlayerInCube(playerid, Float:min_x, Float:min_y, Float:max_x, Float:max_y)
{
    new Float: x,
        Float: y,
        Float: z;

    GetPlayerPos(playerid, x, y, z);
    return ((x <= max_x && x >= min_x) && (y <= max_y && y >= min_y))?(1):(0);
}

stock IsValidPlayerName(const str[])
{
	if (!str[0] || str[0] == '\1')
		return 0;

	for (new i = 0, l = strlen(str); i != l; i ++)
	{
	    if ((str[i] >= '0' && str[i] <= '9') || (str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z'))
	        continue;

		if (str[i] == '_' || str[i] == '$' || str[i] == '@' || str[i] == '[' || str[i] == ']')
		    continue;

		else
		    return 0;
	}
	return 1;
}

forward OnPlayerOfflineJail(playerid, name[32], time, reason[32]);
public OnPlayerOfflineJail(playerid, name[32], time, reason[32])
{
    new
	    rows,
	    fields;

	cache_get_data(rows, fields, dbHandle);

	if(cache_affected_rows(dbHandle))
	{
		new prefix[16] = "????????";
		if(PlayerInfo[playerid][pAdmin] > 0) prefix = "???????????????";

		new mes[128];
		format(mes, sizeof(mes), "AdmCmd: %s ????????? ? ?????-?????? %s %s ?? %i ?????(?), ???????: %s", name, prefix, GetAccName(playerid), time, reason);
		SendClientMessageByAdmin(COLOR_LIGHTRED, mes);

		format(mes, sizeof(mes), "[/offjail] %s ????????? ? ?????-?????? %s %s ?? %i ?????(?), ???????: %s", name, prefix, GetAccName(playerid), time, reason);
		insert_log(mes, ADMIN_LOG, 5);
	}
	else
		SendErrorMessage(playerid, "??? ?? ??????? ???????? ?????? %s ? ????? ??????.", name);

	return 1;
}

forward OnPlayerUseItem(playerid, slotid);
public OnPlayerUseItem(playerid, slotid)
{
    if(IsPlayerInjured(playerid) != 0 || pTemp[playerid][pTaserTime] || pTemp[playerid][pCuffed])
		return SCM(playerid, COLOR_GREY, "?? ?? ?????? ???????????? ????????? ????? ??????.");

	if(slotid < 0 || slotid > MAX_INVENTORY-1)
	    return 1;

	new itemid = PlayerInfo[playerid][pInv][slotid];

    if(itemid == INV_SIGN)
    	cmd::carsign(playerid, "");

	else if(itemid == INV_HEAL)
	{
	    if(0 != IsPlayerInjured(playerid))
	        return SendErrorMessage(playerid, "?????????? ? ?????? ???????/??????.");

		if(GetPVarInt(playerid, #heal_time) > gettime())
		    return SendErrorMessage(playerid, "????? ???????????? ??? ? ??????.");

	    new Float: health;
	    GetPlayerHealth(playerid, health);

	    if(health >= 100.0)
	        return SendErrorMessage(playerid, "? ??? ?????? ????????.");

	    if(health + 15.0 > 100.0)
	        SetPlayerHealth(playerid, 100.0);
	    else
	    	SetPlayerHealth(playerid, health + 100.0);

		SetPVarInt(playerid, #heal_time, gettime() + 60);
	    PlayerInfo[playerid][pInvAmount][slotid]--;
        if(PlayerInfo[playerid][pInvAmount][slotid] == 0)
            PlayerInfo[playerid][pInv][slotid] = 0;
	}
	else if(itemid == INV_GANJA || itemid == INV_MED_GANJA || itemid == INV_LSD || itemid == INV_MET || itemid == INV_HEROIN || itemid == INV_COCAINE)
	    UseDrug(playerid, itemid);

	else if(itemid == INV_AMMO)
	    SCM(playerid, COLOR_GREEN, "????? ???????? ???????, ??????????? /charge, ????????? /discharge.");

	else if(itemid == INV_BOOMBOX)
	    PlaceBoombox(playerid);

   	else if(itemid == INV_RADIO)
   		cmd::radiohelp(playerid, "");

	else if(itemid == INV_MASK)
 		cmd::mask(playerid, "");

    else if(itemid == INV_LIGHTER)
    	SendErrorMessage(playerid, "??????????? ???????? ? ?????????, ????? ????????.");

	else if(itemid == INV_CIGAR)
	{

	    if(-1 == IsPlayerHasItem(playerid, INV_LIGHTER))
	        return SendErrorMessage(playerid, "? ??? ??? ?????????.");

        PlayerInfo[playerid][pInvAmount][slotid]--;
        if(PlayerInfo[playerid][pInvAmount][slotid] == 0)
            PlayerInfo[playerid][pInv][slotid] = 0;

	    cmd::ame(playerid, "??????? ?????? ?? ?????????? ? ??????????? ?? ? ??????? ?????????.");
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SMOKE_CIGGY);
		SCM(playerid, COLOR_WHITE, "?? ???????? ????????. (( ??????? F, ????? ????????? ????????. ))");
	}

	else if(itemid == INV_DICE)
 		return SendNearbyMessage(Range_Normal, playerid, COLOR_WHITE, "* %s ??????? ????? ? ???????? %i.", GetNameWithMask(playerid), random(6)+1);

	else if(itemid == INV_PEN)
	    cmd::note(playerid, "");

    else if(itemid == INV_PEN)
	    cmd::givecard(playerid, "");

	else if(itemid == INV_SILENCER)
	{
		SendSyntaxMessage(playerid, "/silencer");
	    return 1;
	}

	else if(itemid == INV_OPTICS)
	{
	    SendSyntaxMessage(playerid, "/optics");
	    return 1;
	}

	else if(itemid == INV_GASCAN)
	{
	    if(IsPlayerInAnyVehicle(playerid))
	        return SendErrorMessage(playerid, "?? ?????? ???? ??? ??????????.");

	    new vehicle;
		if((vehicle = GetNearVehicle(playerid, 2.5)) == 0)
		    return SendErrorMessage(playerid, "????? ? ???? ??? ???????????? ???????.");

		if(VehicleInfo[vehicle][carFuel] + 20 > 100)
			return SCM(playerid, COLOR_LIGHTRED, "??? ????????????? ???????? ??????.");

	    VehicleInfo[vehicle][carFuel] += 20;

		SendServerMessage(playerid, "???? ???????????? ???????? ?????????? ? ??????? ????????.");
		cmd::me(playerid, "?????????? ????????? ? ??????? ????????.");

		PlayerInfo[playerid][pInvAmount][slotid]--;
        if(PlayerInfo[playerid][pInvAmount][slotid] == 0)
            PlayerInfo[playerid][pInv][slotid] = 0;
	}

	else if(itemid == INV_BURGER)
	{
	    if(IsPlayerAttachedObjectSlotUsed(playerid, ATTACH_HANDS))
        	return SendErrorMessage(playerid, "???? ???? ??? ??????.");

        InfoMSG(playerid, "\
			PRESS \" ~g~LKM ~w~\" KEY TO EAT.~n~\
			PRESS \" ~r~ENTER ~w~\" KEY TO DESTROY OBJECT.", 5);
		new Float: health;
		GetPlayerHealth(playerid, health);

	    if(health + 10.0 > 100.0)
	  		SetPlayerHealth(playerid, 100.0);
		else
 			SetPlayerHealth(playerid, health + 10.0);

		SetPVarInt(playerid, #use_food, 5);
		SetPVarInt(playerid, #time_food, gettime());
		SetPlayerAttachedObject(playerid, ATTACH_HANDS, 2703, 6, 0.055999, 0.028000, 0.008000, 2.599998, 0.000000, 16.599998, 0.844000, 0.871000, 0.870000);
        RemovePlayerItem(playerid, INV_BURGER, 1);

		cmd::ame(playerid, "??? ??????.");
        return 1;
	}
	else if(itemid == INV_PIZZA)
	{
	    if(IsPlayerAttachedObjectSlotUsed(playerid, ATTACH_HANDS))
        	return SendErrorMessage(playerid, "???? ???? ??? ??????.");

        InfoMSG(playerid, "\
			PRESS \" ~g~LKM ~w~\" KEY TO EAT.~n~\
			PRESS \" ~r~ENTER ~w~\" KEY TO DESTROY OBJECT.", 5);
		new Float: health;
		GetPlayerHealth(playerid, health);

	    if(health + 15.0 > 100.0)
	  		SetPlayerHealth(playerid, 100.0);
		else
 			SetPlayerHealth(playerid, health + 15.0);

		SetPVarInt(playerid, #use_food, 5);
		SetPVarInt(playerid, #time_food, gettime());
		SetPlayerAttachedObject(playerid, ATTACH_HANDS, 2703, 6, 0.055999, 0.028000, 0.008000, 2.599998, 0.000000, 16.599998, 0.844000, 0.871000, 0.870000);
        RemovePlayerItem(playerid, INV_PIZZA, 1);

        cmd::ame(playerid, "??? ?????.");
        return 1;
	}
	else if(itemid == INV_CHICKEN)
	{
	    if(IsPlayerAttachedObjectSlotUsed(playerid, ATTACH_HANDS))
        	return SendErrorMessage(playerid, "???? ???? ??? ??????.");

        InfoMSG(playerid, "\
			PRESS \" ~g~LKM ~w~\" KEY TO EAT.~n~\
			PRESS \" ~r~ENTER ~w~\" KEY TO DESTROY OBJECT.", 5);
		new Float: health;
		GetPlayerHealth(playerid, health);

	    if(health + 7.0 > 100.0)
	  		SetPlayerHealth(playerid, 100.0);
		else
 			SetPlayerHealth(playerid, health + 7.0);

		SetPVarInt(playerid, #use_food, 5);
		SetPVarInt(playerid, #time_food, gettime());
		SetPlayerAttachedObject(playerid, ATTACH_HANDS, 2703, 6, 0.055999, 0.028000, 0.008000, 2.599998, 0.000000, 16.599998, 0.844000, 0.871000, 0.870000);
        RemovePlayerItem(playerid, INV_CHICKEN, 1);

        cmd::ame(playerid, "??? ??????.");
        return 1;
	}
	else if(itemid == INV_HOTDOG)
	{
	    if(IsPlayerAttachedObjectSlotUsed(playerid, ATTACH_HANDS))
        	return SendErrorMessage(playerid, "???? ???? ??? ??????.");

        InfoMSG(playerid, "\
			PRESS \" ~g~LKM ~w~\" KEY TO EAT.~n~\
			PRESS \" ~r~ENTER ~w~\" KEY TO DESTROY OBJECT.", 5);
		new Float: health;
		GetPlayerHealth(playerid, health);

     	if(health + 5.0 > 100.0)
     		SetPlayerHealth(playerid, 100.0);
		else
 			SetPlayerHealth(playerid, health + 5.0);

		SetPVarInt(playerid, #use_food, 5);
		SetPVarInt(playerid, #time_food, gettime());
		SetPlayerAttachedObject(playerid, ATTACH_HANDS, 2703, 6, 0.055999, 0.028000, 0.008000, 2.599998, 0.000000, 16.599998, 0.844000, 0.871000, 0.870000);
        RemovePlayerItem(playerid, INV_HOTDOG, 1);

        cmd::ame(playerid, "??? ???-???.");
        return 1;
	}

	else if(itemid == INV_WATER || itemid == INV_SODA || itemid == INV_COLA)
	{
	    if(IsPlayerAttachedObjectSlotUsed(playerid, ATTACH_HANDS))
        	return SendErrorMessage(playerid, "???? ???? ??? ??????.");

 		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);

 		if(itemid == INV_WATER)
 		    cmd::ame(playerid, "???? ????.");
		else if(itemid == INV_SODA)
		    cmd::ame(playerid, "???? ????.");
		else
		    cmd::ame(playerid, "???? ????.");

        RemovePlayerItem(playerid, itemid, 1);
        InfoMSG(playerid, "\
			PRESS \" ~g~LKM ~w~\" KEY TO DRINK.~n~\
			PRESS \" ~r~ENTER ~w~\" KEY TO DESTROY OBJECT.", 5);
		return 1;
	}

	else if(itemid == INV_BEER)
	{
	    if(IsPlayerAttachedObjectSlotUsed(playerid, ATTACH_HANDS))
        	return SendErrorMessage(playerid, "???? ???? ??? ??????.");

 		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_BEER);
 	   	cmd::ame(playerid, "???? ????.");

 	   	RemovePlayerItem(playerid, itemid, 1);
 	   	InfoMSG(playerid, "\
			PRESS \" ~g~LKM ~w~\" KEY TO DRINK.~n~\
			PRESS \" ~r~ENTER ~w~\" KEY TO DESTROY OBJECT.", 5);
		return 1;
	}

	else if(itemid == INV_VODKA || itemid == INV_WHISKEY || itemid == INV_BRANDY || itemid == INV_WINE)
	{
	    if(IsPlayerAttachedObjectSlotUsed(playerid, ATTACH_HANDS))
        	return SendErrorMessage(playerid, "???? ???? ??? ??????.");

 		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);

 	   	if(itemid == INV_VODKA)
 		    cmd::ame(playerid, "???? ?????.");
		else if(itemid == INV_WHISKEY)
		    cmd::ame(playerid, "???? ?????.");
		else if(itemid == INV_BRANDY)
		    cmd::ame(playerid, "???? ??????.");
		else
		    cmd::ame(playerid, "???? ????.");

        RemovePlayerItem(playerid, itemid, 1);
        InfoMSG(playerid, "\
			PRESS \" ~g~LKM ~w~\" KEY TO DRINK.~n~\
			PRESS \" ~r~ENTER ~w~\" KEY TO DESTROY OBJECT.", 5);
		return 1;
	}
	else if(itemid == INV_TOOLS)
	{
	    new vehicle = GetPlayerVehicleID(playerid);
	    if(vehicle != 0)
	    {
	        if(VehicleInfo[vehicle][carOwnerID] == 0)
		    	return SendErrorMessage(playerid, "????? ?????????? ?????? ?????? ?????????.");

			if(JackingEngine[playerid] != 0)
				return SCM(playerid, COLOR_INFO, "?? ??? ?????? ???????????, ??????????? '/stop' ????? ????????????.");

			if(VehicleInfo[vehicle][carEngineOn])
				return SendErrorMessage(playerid, "????????? ??? ???????.");

			static const str_size[] = "{"COL_GREY"}?? ?????? ?????? ????? ????????? %s? ??????? ???????????: %i ??????.";
			new mes[sizeof(str_size) - 4 + 1 + 31 + 7];
			format(mes, sizeof(mes), str_size, VehicleNames[GetVehicleModel(vehicle)-400], (VehicleInfo[vehicle][carImmob]+1) * 20);
			Dialog_Show(playerid, StartJackingEngine, DIALOG_STYLE_MSGBOX, "{"COL_TITLE"}[????? ?????????]", mes, "??????", "??????");
	        return 1;
	    }

		if((vehicle = GetNearVehicle(playerid, 4.0)) != 0)
		{
   			if(VehicleInfo[vehicle][carOwnerID] == 0)
			    return SendErrorMessage(playerid, "????? ?????????? ?????? ?????? ?????????.");

			if(VehicleInfo[vehicle][carLocked] == 0)
			    return SendErrorMessage(playerid, "????? ?????????? ???????.");

			if(JackingLock[playerid] != 0)
				return SCM(playerid, COLOR_INFO, "??????????? '/stop' ????? ????????????.");

			JackingVehicle[playerid] = vehicle;
            static const str_size[] = "{"COL_GREY"}?? ?????? ?????? ????? ?????? %s? ??????? ???????????: %i ??????.";
			new mes[sizeof(str_size) - 4 + 1 + 31 + 7];
			format(mes, sizeof(mes), str_size, VehicleNames[GetVehicleModel(vehicle)-400], (VehicleInfo[vehicle][carLock]+1) * 60);
			Dialog_Show(playerid, StartJackingLock, DIALOG_STYLE_MSGBOX, "{"COL_TITLE"}[????? ??????]", mes, "??????", "??????");
			return 1;
		}
	    return 1;
	}
	return 1;
}

stock IsPlayerHasItem(playerid, itemid, amount = 0)
{
	if(0 == IsPlayerLogged(playerid) || itemid == 0)
	    return -1;

	for(new i; i != MAX_INVENTORY; i++)
	{
	    if(amount > 0 && PlayerInfo[playerid][pInv][i] == itemid && PlayerInfo[playerid][pInvAmount][i] >= amount)
	        return i;

	    else if(amount < 1 && PlayerInfo[playerid][pInv][i] == itemid)
	        return i;
	}
	return -1;
}

stock RemovePlayerItem(playerid, itemid, amount = -1)
{
    for(new i; i != MAX_INVENTORY; i++)
	{
	    if(PlayerInfo[playerid][pInv][i] != itemid)
	        continue;

	    if(amount == -1)
	    {
	        PlayerInfo[playerid][pInv][i] = 0;
	        PlayerInfo[playerid][pInvAmount][i] = 0;
			return 1;
		}

	    PlayerInfo[playerid][pInvAmount][i] -= amount;
		if(PlayerInfo[playerid][pInvAmount][i] < 1)
		{
		    PlayerInfo[playerid][pInv][i] = 0;
	        PlayerInfo[playerid][pInvAmount][i] = 0;
  		}
		return 1;
	}
	return 0;
}

stock GivePlayerItem(playerid, itemid, amount)
{
    if(0 == IsPlayerLogged(playerid))
	    return -1;

	for(new i; i != MAX_INVENTORY; i++)
	{
	    if(PlayerInfo[playerid][pInvAmount][i] + amount <= 1000 && PlayerInfo[playerid][pInv][i] == itemid && inventory_items[itemid][itemSplit] == 1)
		{
		    PlayerInfo[playerid][pInvAmount][i] += amount;
			return i;
		}

	    if(PlayerInfo[playerid][pInv][i] != 0)
	        continue;

        PlayerInfo[playerid][pInv][i] = itemid;
        PlayerInfo[playerid][pInvAmount][i] = amount;
		return i;
	}
	return -1;
}

stock IsPlayerAtSecondUniform(playerid, vehstat = 0)
{
	switch(PlayerInfo[playerid][pFaction])
	{
	    case LSPD: if(IsPlayerInRangeOfPoint(playerid, 2.0, 1474.8829,-1799.0380,2342.1599)) return 1;
	}

	new vehicle;
	if(vehstat == 1 || (vehicle = GetPlayerVehicleID(playerid)) == 0)
	    return 0;

	switch(PlayerInfo[playerid][pFaction])
	{
	    case LSPD, SASD: if(GetVehicleModel(vehicle) == 427) return 1;
	    case LSFD: if(VehicleInfo[vehicle][carFaction] == LSFD) return 1;
	}
	return 0;
}

stock IsPlayerAtUniform(playerid)
{
	new faction = PlayerInfo[playerid][pFaction];
	return (faction == 0 || !PlayerToPoint(2.0, playerid, Factions[faction][fUniformX], Factions[faction][fUniformY], Factions[faction][fUniformZ]) || GetWorld(playerid) != Factions[faction][fUniformVW] || GetInterior(playerid) != Factions[faction][fUniformInt]) ? (0):(1);
}

stock RestaurantMenuHide(playerid)
{
    CancelSelectTextDraw(playerid);
	for(new i; i != 8; i++)
	{
 		if(i < 4)
		 	TextDrawHideForPlayer(playerid, TD_restaurant[i]);

		PlayerTextDrawHide(playerid, TD_restaurant_prod[playerid][i]);
	}
	DeletePVar(playerid, #restaurant);
	return 1;
}

stock IsWindowsClose(vehicle)
{
    new wi_state[4];
	GetVehicleParamsCarWindows(vehicle, wi_state[0], wi_state[1], wi_state[2], wi_state[3]);
	return (wi_state[0] != 0 && wi_state[1] != 0 && wi_state[2] != 0 && wi_state[3] != 0) ? (1):(0);
}

stock RemoveAlpha(color) {
    return (color & ~0xFF);
}

stock GetPatrolID(playerid)
	return (PlayerInfo[playerid][pFaction] == SASD)?(1):(0);

stock ChangeUrlBoombox(playerid, url[])
{
    if(BoomboxInfo[playerid][bUsed] != 0 && Boombox_Nearest(playerid) != 0)
	{
		format(BoomboxInfo[playerid][bUrl], 156, url);

		foreach (new i : Player)
		{
	    	if(0 == IsPlayerLogged(i) || pTemp[i][pBoombox] != playerid)
	        	continue;

        	StopAudioStreamForPlayer(i);
			PlayAudioStreamForPlayer(i, BoomboxInfo[playerid][bUrl], BoomboxInfo[playerid][bPosX], BoomboxInfo[playerid][bPosY], BoomboxInfo[playerid][bPosZ], 50.0, 1);
		}
		return 1;
	}

	new vehicle = GetPlayerVehicleID(playerid),
        id;

    if(IsDriver(playerid))
	{
		if(VehicleInfo[vehicle][carRadio] == 0)
			return SCM(playerid, COLOR_LIGHTRED, "? ???? ?????????? ??? ?????.");

		VehicleInfo[vehicle][carRadioOn] = 1;
	    format(VehicleInfo[vehicle][carRadioURL], 156, url);
		cmd::ame(playerid, "??????(?) ????????????.");
	    foreach(Player, i)
		{
			if(0 == IsPlayerLogged(i) || GetPlayerVehicleID(i) != vehicle)
			    continue;

			StopAudioStreamForPlayer(i);
			PlayAudioStreamForPlayer(i, url);
		}
		return 1;
	}

	if ((id = GetNearHouseInside(playerid)) != -1 && HouseInfo[id][hOwnerID] == PlayerInfo[playerid][pID])
	{
	    if(HouseInfo[id][hRadio] == 0)
			return SCM(playerid, COLOR_LIGHTRED, "? ????? ???? ??? ?????.");

		HouseInfo[id][hRadioOn] = 1;
		format(HouseInfo[id][hRadioURL], 156, url);
        cmd::ame(playerid, "??????(?) ????????????.");
	 	foreach(Player, i)
		{
			if(0 == IsPlayerLogged(i) || 0 == IsPlayerHouseInside(i, id))
			    continue;

            StopAudioStreamForPlayer(i);
			PlayAudioStreamForPlayer(i, url);
			pTemp[i][pBoombox_house] = id;
		}
	    return 1;
	}
	else if ((id = GetNearBizInside(playerid)) != -1 && BizInfo[id][bizOwnerID] == PlayerInfo[playerid][pID])
	{
	    if(BizInfo[id][bizRadio] == 0)
			return SCM(playerid, COLOR_LIGHTRED, "? ????? ??????? ??? ?????.");

		BizInfo[id][bizRadioOn] = 1;
		format(BizInfo[id][bizRadioURL], 156, url);
        cmd::ame(playerid, "??????(?) ????????????.");
	 	foreach(Player, i)
		{
			if(0 == IsPlayerLogged(i) || 0 == IsPlayerBizInside(i, id))
			    continue;

            StopAudioStreamForPlayer(i);
			PlayAudioStreamForPlayer(i, url);
			pTemp[i][pBoombox_biz] = id;
		}
	    return 1;
	}
	return 1;
}

stock ShowMusicList(playerid)
{
	new string[641];
    for(new i; i != MAX_PLAYER_MUSIC; i++)
   	{
    	if(PlayerMusic[playerid][i][mID] == 0)
			format(string, sizeof(string), "%s\n{C3C3C3}???????? ??????...", string);
		else
			format(string, sizeof(string), "%s\n%s", string, PlayerMusic[playerid][i][mName]);
    }
	Dialog_Show(playerid, MusicList, DIALOG_STYLE_LIST, "???????????", string, "???????", "?????");
	return 1;
}

stock ShowBuyingVehicleDetails(playerid)
{
	if(GetPVarInt(playerid, "BuyingVehicleModel") < 400 || GetPVarInt(playerid, "BuyingVehicleModel") > 611)
	    return 1;

	new registerveh = price_reg[GetPVarInt(playerid, "BuyingVehicleRegister")],
		alarmveh = price_alarm[GetPVarInt(playerid, "BuyingVehicleAlarm")],
		lockveh = price_lock[GetPVarInt(playerid, "BuyingVehicleLock")],
		immobveh = price_immob[GetPVarInt(playerid, "BuyingVehicleImmob")],
		insuranceveh = GetInsurancePrice(GetPVarInt(playerid, "BuyingVehicleModel")) * GetPVarInt(playerid, "BuyingVehicleInsurance"),
		xmradioveh = price_radio[GetPVarInt(playerid, "BuyingVehicleRadio")],
		gpsveh = price_gps[GetPVarInt(playerid, "BuyingVehicleGps")];

    new mes[56];
	format(mes, sizeof(mes), "{bab9ba}%s - {35B835}$%i", VehicleNames[GetPVarInt(playerid, "BuyingVehicleModel")-400], GetVehiclePrice(GetPVarInt(playerid, "BuyingVehicleModel"))+registerveh+alarmveh+lockveh+immobveh+insuranceveh+xmradioveh+gpsveh);
	Dialog_Show(playerid, BuyingVehicleDetails, DIALOG_STYLE_LIST, mes, "???????????\n????????????\n?????\n????????????\n?????????\n?????????\nGPS", "???????", "<<");
	return 1;
}

stock IsAnIP(str[])
{
	if (!str[0] || str[0] == '\1')
		return 0;

	for (new i = 0, l = strlen(str); i != l; i ++)
	{
	    if ((str[i] < '0' || str[i] > '9') && str[i] != '.')
	        return 0;

	    if (0 < ((i == 0) ? (strval(str)) : (strval(str[i + 1]))) > 255)
	        return 0;
	}
	return 1;
}

forward Float:GetPlayerDistanceFromPlayer(playerid, targetid);
public Float:GetPlayerDistanceFromPlayer(playerid, targetid)
{
	new
	    Float:x,
	    Float:y,
	    Float:z;

	GetPlayerPos(targetid, x, y, z);
	return GetPlayerDistanceFromPoint(playerid, x, y, z);
}

stock RemovePlayerFaction(userid)
{
    if(pTemp[userid][pPatrol])
	{
	    new id = pTemp[userid][pPatrol]-1;
	    pTemp[userid][pPatrol] = 0;

        if(PatrolInfo[GetPatrolID(userid)][id][patrulOfficer][0] == userid) PatrolInfo[GetPatrolID(userid)][id][patrulOfficer][0] = INVALID_PLAYER_ID;
        if(PatrolInfo[GetPatrolID(userid)][id][patrulOfficer][1] == userid) PatrolInfo[GetPatrolID(userid)][id][patrulOfficer][1] = INVALID_PLAYER_ID;

		if(PatrolInfo[GetPatrolID(userid)][id][patrulOfficer][0] == INVALID_PLAYER_ID && PatrolInfo[GetPatrolID(userid)][id][patrulOfficer][0] == INVALID_PLAYER_ID)
		    PatrolInfo[GetPatrolID(userid)][id][patrulExists] = 0;
	}

	if(PlayerInfo[userid][pOnDuty])
	{
	    for(new i; i < MAX_WEAP; i++)
		{
		    PlayerInfo[userid][pWeap][i] = PlayerInfo[userid][pCopWeap][i];
		    PlayerInfo[userid][pAmmo][i] = PlayerInfo[userid][pCopAmmo][i];
		    PlayerInfo[userid][pCopWeap][i] = 0;
		    PlayerInfo[userid][pCopAmmo][i] = 0;

		    if(i < MAX_WEAP-1 && IsPlayerAttachedObjectSlotUsed(userid, i + 5))
	           	RemovePlayerAttachedObject(userid, i + 5);
		}
		SetPlayerWeapons(userid);
        SetPlayerArmour(userid, 0.0);
	}

    SetRadioChannel(userid, 0);
	SetRadioSlot(userid, 0);

	PlayerInfo[userid][pFaction] = 0;
	PlayerInfo[userid][pRank] = 0;
	PlayerInfo[userid][pBadgeNumber] = 0;
	PlayerInfo[userid][pSpawnType] = 0;
	PlayerInfo[userid][pOnDuty] = false;
	PlayerInfo[userid][pSwatDuty] = false;
	PlayerInfo[userid][pAuthwep] = 0;
	PlayerInfo[userid][pSwat] = 0;
	PlayerInfo[userid][pSideJob] = 0;
	PlayerInfo[userid][pChar] = 0;

	SetPlayerSkin(userid, PlayerInfo[userid][pSkin]);

/* 	if(IsTesterDuty(userid) == 1)
		SetPlayerColor(userid, Helper_DUTY);*/
  	if(IsAdminDuty(userid))
		SetPlayerColor(userid,TEAM_ADMIN_COLOR);
	else
	    SetPlayerColor(userid, TEAM_HIT_COLOR);
	return 1;
}

stock GetPlayerHasRightDrive(playerid, vehicleid)
{
    if(VehicleInfo[vehicleid][carFaction] != 0 && VehicleInfo[vehicleid][carFaction] != PlayerInfo[playerid][pFaction])
	{
		SCM(playerid, COLOR_LIGHTRED, "? ??? ??? ??????? ? ??????? ????????????? ????????.");
        RemovePlayerFromVehicle(playerid);
		return 0;
	}

	if(IsPizzaCar(vehicleid) && PlayerInfo[playerid][pSideJob] != JOB_PIZZA)
	{
	    SCM(playerid, COLOR_LIGHTRED, "? ??? ??? ??????? ? ??????? ????????????? ????????.");
        RemovePlayerFromVehicle(playerid);
		return 0;
	}

	if((IsAPlane(vehicleid) || IsAHelicopter(vehicleid)) && !IsADMVHeli(vehicleid) && PlayerInfo[playerid][pFlyLic] == 0)
	{
		SCM(playerid, COLOR_LIGHTRED, "? ??? ??? ???????? ?? ?????????? ???? ????????.");
        RemovePlayerFromVehicle(playerid);
		return 0;
	}

  	if(IsADMVCar(vehicleid) && PlayerInfo[playerid][pCarLic])
	{
		SCM(playerid, COLOR_WHITE, "? ??? ??? ??????? ???????? ?? ?????????? ???????????.");
		RemovePlayerFromVehicle(playerid);
		return 0;
	}
	else if(IsADMVHeli(vehicleid) && PlayerInfo[playerid][pFlyLic])
	{
		SCM(playerid, COLOR_WHITE, "? ??? ??? ??????? ???????? ?? ?????????? ????????? ???????????.");
		RemovePlayerFromVehicle(playerid);
		return 0;
	}
	else if(IsADMVTaxi(vehicleid) && PlayerInfo[playerid][pTaxiLic])
	{
		SCM(playerid, COLOR_WHITE, "? ??? ??? ??????? ???????? ?? ????????? ?????.");
		RemovePlayerFromVehicle(playerid);
		return 0;
	}
	else if(IsADMVTaxi(vehicleid) && PlayerInfo[playerid][pCarLic] == 0)
	{
		SendErrorMessage(playerid, "??? ????????? ???????? ???????? ? ??? ?????? ???? ???????????? ?????????????.");
		RemovePlayerFromVehicle(playerid);
		return 0;
	}
	return 1;
}

stock CheckIndustries()
{
    static const str_storage[] = "[{FFFF00}%s{FFFFFF}]\n?????: %i / %i\n????: $%i / ??.";
	new mes[sizeof(str_storage) - 8 + 32 + 12 + 12];

	new
		industires_prods[MAX_TRUCK_PACK char];

	for(new i; i != MAX_TRUCK_CARGO; i++)
	{
	    if(TruckCargo[i][tOn] == 0)
	        continue;

		if(TruckCargo[i][tType] == 0)
		{
		    TruckCargo[i][tStorage] += TruckCargo[i][tProductAmount];

		    if(TruckCargo[i][tStorage] > TruckCargo[i][tStorageSize])
		        TruckCargo[i][tStorage] = TruckCargo[i][tStorageSize];

		    else if(TruckCargo[i][tStorage] < 0)
		        TruckCargo[i][tStorage] = 0;

		    format(mes, sizeof(mes), str_storage, truckcargo_product[TruckCargo[i][tProductID]], TruckCargo[i][tStorage], TruckCargo[i][tStorageSize], TruckCargo[i][tPrice]);
        	UpdateDynamic3DTextLabelText(TruckCargo[i][tLabel], 0xFFFFFFFF, mes);
		}
		else if(TruckCargo[i][tType] == 3)
		{
			if(TruckCargo[i][tStorage] >= (-TruckCargo[i][tProductAmount]))
			{
		    	TruckCargo[i][tStorage] -= (-TruckCargo[i][tProductAmount]);
				industires_prods{TruckCargo[i][tPack]} += (-TruckCargo[i][tProductAmount]);
			}
			format(mes, sizeof(mes), str_storage, truckcargo_product[TruckCargo[i][tProductID]], TruckCargo[i][tStorage], TruckCargo[i][tStorageSize], TruckCargo[i][tPrice]);
        	UpdateDynamic3DTextLabelText(TruckCargo[i][tLabel], 0xFFFFFFFF, mes);
		}
	}

	for(new i; i != MAX_TRUCK_CARGO; i++)
	{
	    if(TruckCargo[i][tOn] == 0 || TruckCargo[i][tType] != 1 || TruckCargo[i][tPack] == 0 || TruckCargo[i][tStorage] >= TruckCargo[i][tStorageSize])
	        continue;

		if(industires_prods{TruckCargo[i][tPack]} >= TruckCargo[i][tProductAmount])
			TruckCargo[i][tStorage] += TruckCargo[i][tProductAmount];

        if(TruckCargo[i][tStorage] > TruckCargo[i][tStorageSize])
        	TruckCargo[i][tStorage] = TruckCargo[i][tStorageSize];

        format(mes, sizeof(mes), str_storage, truckcargo_product[TruckCargo[i][tProductID]], TruckCargo[i][tStorage], TruckCargo[i][tStorageSize], TruckCargo[i][tPrice]);
       	UpdateDynamic3DTextLabelText(TruckCargo[i][tLabel], 0xFFFFFFFF, mes);
	}
	return 1;
}

stock IsPlayerAFK(playerid)
{
	return (pTemp[playerid][pDarkAFK] > 5)?(1):(0);
}

public OnUnoccupiedVehicleUpdate(vehicleid, playerid, passenger_seat, Float:new_x, Float:new_y, Float:new_z, Float:vel_x, Float:vel_y, Float:vel_z)
{
    new Float:ac_X, Float:ac_Y, Float:ac_Z, Float:ac_D, Float: ac_Angle;
	GetVehiclePos(vehicleid, ac_X, ac_Y, ac_Z);
    ac_D = GetVehicleDistanceFromPoint(vehicleid, new_x, new_y, new_z);

    if(ac_D > 15.0 && ac_Z > -70.0 && ac_D > ac_veh_pos_dif[vehicleid] + ((ac_D / 3) * 1.5))
	{
		GetVehicleZAngle(vehicleid, ac_Angle);
		SetVehicleZAngle(vehicleid, ac_Angle);
		SetVehiclePos(vehicleid, ac_X, ac_Y, ac_Z);
		return 0;
	}

    ac_veh_pos_dif[vehicleid] = ac_D;
    return 1;
}

stock ShowWeaponLicense(playerid, list)
{
    new query[128];
	mysql_format(dbHandle, query, sizeof(query), "SELECT `id`,`name` FROM `users` WHERE `weplic`='1' LIMIT %i,%i", (30 * list), (30 * (list + 1)));
	mysql_tquery(dbHandle, query, "ShowWeaponLicenseDialog", "ii", playerid, list);
	return 1;
}

forward ShowWeaponLicenseDialog(playerid, list);
public ShowWeaponLicenseDialog(playerid, list)
{
	if(!cache_num_rows())
	{
	    SCM(playerid, -1, "?????? ????? ?????? ?????????.");
	    return cmd::mdc(playerid, "");
	}
	new mes[(MAX_PLAYER_NAME + 1) * 30 + 7] = "<<\n>>",
	    name[MAX_PLAYER_NAME + 1];
	for(new i; i != cache_num_rows(); i++)
	{
	    pTemp[playerid][pWeaponListed][i] = cache_get_field_content_int(i, "id");
	    cache_get_field_content(i, "name", name);
	    strreplace(name, '_', ' ');

		format(mes, sizeof(mes), "%s\n%s", mes, name);
	}
	SetPVarInt(playerid, #weapon_list, list);
	Dialog_Show(playerid, MDCWeapon, DIALOG_STYLE_LIST, "??????? ??????", mes, "???????", "?????");
	return 1;
}

forward ShowWeaponLicensePlayer(playerid);
public ShowWeaponLicensePlayer(playerid)
{
	if(!cache_num_rows())
	{
	    SCM(playerid, -1, "?????? ????? ?????? ?????????.");
	    return cmd::mdc(playerid, "");
	}

	new name[MAX_PLAYER_NAME+1],
	    officer[MAX_PLAYER_NAME+1],
	    data[24],
		price,
		warns;

	cache_get_field_content(0, "name", name);
 	strreplace(name, '_', ' ');
    cache_get_field_content(0, "wep_officer", officer);
    cache_get_field_content(0, "wep_data", data);
    price = cache_get_field_content_int(0, "wep_price");
    warns = cache_get_field_content_int(0, "wepwarns");

	static const str_size[] = "{C3C3C3}- ???, ???????: %s\n{C3C3C3}- ??????????????: %i\n{C3C3C3}- ??????: %s\n{C3C3C3}- ???? ??????: %s\n{C3C3C3}- ?????: $%i\n- ???????????? ????????\n- ???????? ??????????????";
	new mes[sizeof(str_size) - 10 + MAX_PLAYER_NAME + MAX_PLAYER_NAME + 24 + 12];
	format(mes, sizeof(mes), str_size, name, warns, officer, data, price);
	Dialog_Show(playerid, MDCWeaponPlayer, DIALOG_STYLE_LIST, "??????????", mes, "???????", "?????");

	pTemp[playerid][pMDCWepPlayer] = cache_get_field_content_int(0, "id");
	format(pTemp[playerid][pMDCWepName], MAX_PLAYER_NAME+1, name);
	return 1;
}

Dialog:MDCWeaponPlayer(playerid, response, listitem, inputtext[])
{
	if(!response)
	    return ShowWeaponLicense(playerid, GetPVarInt(playerid, #weapon_list));

	if(listitem == 5)
	{
	    if(PlayerInfo[playerid][pFaction] != LSPD)
		    return SendErrorMessage(playerid, "?????????????? ?????????? ?????? LSPD, ??????? ??????.");

		if(PlayerInfo[playerid][pAuthwep] != 1)
		    return SendErrorMessage(playerid, "? ??? ??? ?????????? ???????????? ???????? ?? ??????.");

		new userid;
	    if((userid = GetIDByID(pTemp[playerid][pMDCWepPlayer])) != INVALID_PLAYER_ID)
		{
		    SendClientMessageEx(userid, COLOR_GREEN, "?????? ??? %s %s ??????????? ???? ???????? ?? ??????.", GetRankName(playerid), GetNameEx(playerid));
			PlayerInfo[userid][pWepLic] = 0;
			PlayerInfo[userid][pWepWarns] = 0;
			PlayerInfo[userid][pWepCount] = 0;
		}
	    new query[156];
		mysql_format(dbHandle, query, sizeof(query), "UPDATE `users` SET `weplic`='0',`wepwarns`='0',`wep_officer`='-',`wep_data`='-',`wep_price`='0',`wep_count`='0' WHERE `id` = '%i'", pTemp[playerid][pMDCWepPlayer]);
		mysql_tquery(dbHandle, query);

		SendClientMessageEx(playerid, COLOR_GREEN, "?? ???????????? ???????? ? ?????? %s.", pTemp[playerid][pMDCWepName]);
	    return 1;
	}
	else if(listitem == 6)
	{
		new userid;
	    if((userid = GetIDByID(pTemp[playerid][pMDCWepPlayer])) != INVALID_PLAYER_ID)
	    {
	        SendClientMessageEx(userid, COLOR_GREEN, "?????? ??? %s %s ??????? ?????????????? ??? ?? ???????? ?? ??????.", GetRankName(playerid), GetNameEx(playerid));
			PlayerInfo[userid][pWepWarns]++;
		}

	    new query[128];
		mysql_format(dbHandle, query, sizeof(query), "UPDATE `users` SET `wepwarns`= `wepwarns` + 1 WHERE `id` = '%i'", pTemp[playerid][pMDCWepPlayer]);
		mysql_tquery(dbHandle, query);

		SendClientMessageEx(playerid, COLOR_GREEN, "?? ???????? ?????????????? ?? ???????? ?? ?????? ?????? %s.", pTemp[playerid][pMDCWepName]);
	    return 1;
	}
	ShowWeaponLicense(playerid, GetPVarInt(playerid, #weapon_list));
	return 1;
}

stock UseDrug(playerid, item)
{
    PlayerTextDrawHide(playerid, drug_effect[playerid]);
	SetPlayerCurrentTimeAndWeather(playerid);
    pTemp[playerid][pDrugUse] = item;
    RemovePlayerItem(playerid, item, 1);
    if(pTemp[playerid][pDrugUse] == 0)
    {
    	new Float: health;
    	GetPlayerHealth(playerid, health);
		switch(item)
		{
		    case INV_GANJA, INV_MED_GANJA: health += 5.0;
		    case INV_LSD: health += 30.0;
		    case INV_MET: health += 15.0;
		    case INV_HEROIN, INV_COCAINE: health += 35.0;
		}
		SetPlayerHealth(playerid, health);
	}

	if(item == INV_GANJA || item == INV_MED_GANJA)
	{
	    InfoMSG(playerid, "\
			PRESS \" ~g~LKM ~w~\" KEY TO SMOKE.~n~\
			PRESS \" ~r~ENTER ~w~\" KEY TO DESTROY OBJECT.", 8);

	    SetPVarInt(playerid, #use_ganja, 5);
		SetPVarInt(playerid, #time_ganja, gettime());
		SetPlayerAttachedObject(playerid, ATTACH_HANDS, 3027, 6, 0.109999, 0.011000, 0.003999, 69.000007, 46.699989, 0.000000, 1.000000, 1.000000, 1.000000);

	    pTemp[playerid][pDrugTime] = gettime() + 3600;
	    PlayerInfo[playerid][pDemolition] = 3600 + 600 + random(1200);
	    SetPlayerDrunkLevel(playerid, 5000);
        SendClientMessageEx(playerid, COLOR_GREEN, "?? ?????????? \"%s\". (+5HP)", inventory_items[item][itemName]);
	}
	else if(item == INV_LSD)
	{
	    pTemp[playerid][pDrugTime] = gettime() + 5400;
	    PlayerInfo[playerid][pDemolition] = 5400 + 600 + random(1200);
	    pTemp[playerid][pDrugChgWeather] = gettime() + 4;
	    SetPlayerDrunkLevel(playerid, 10000);
	    new zav = 8 + random(4);
	    PlayerInfo[playerid][pDependence] += zav;
        SendClientMessageEx(playerid, COLOR_GREEN, "?? ?????????? \"%s\". (+30HP, +%i ???????????)", inventory_items[item][itemName], zav);
	}
	else if(item == INV_MET)
	{
	    pTemp[playerid][pDrugTime] = gettime() + 3600;
	    PlayerInfo[playerid][pDemolition] = 3600 + 600 + random(1200);
	    SetPlayerDrunkLevel(playerid, 10000);
	    new zav = 3 + random(4);
	    PlayerInfo[playerid][pDependence] += zav;
        SendClientMessageEx(playerid, COLOR_GREEN, "?? ?????????? \"%s\". (+15HP, +%i ???????????)", inventory_items[item][itemName], zav);
	}
	else if(item == INV_HEROIN)
	{
	    pTemp[playerid][pDrugTime] = gettime() + 5400;
        PlayerInfo[playerid][pDemolition] = 5400 + 600 + random(1200);
	    SetPlayerDrunkLevel(playerid, 5000);
	    PlayerTextDrawBoxColor(playerid, drug_effect[playerid], 0xFFFFFF50);
	    PlayerTextDrawShow(playerid, drug_effect[playerid]);
	    new zav = 15 + random(10);
	    PlayerInfo[playerid][pDependence] += zav;
        SendClientMessageEx(playerid, COLOR_GREEN, "?? ?????????? \"%s\". (+35HP, +%i ???????????)", inventory_items[item][itemName], zav);
	}
	else if(item == INV_COCAINE)
	{
	    pTemp[playerid][pDrugTime] = gettime() + 5400;
	    SetPlayerDrunkLevel(playerid, 10000);
	    new zav = 10 + random(5);
	    PlayerInfo[playerid][pDependence] += zav;
        SendClientMessageEx(playerid, COLOR_GREEN, "?? ?????????? \"%s\". (+35HP, +%i ???????????)", inventory_items[item][itemName], zav);
	}

	if(PlayerInfo[playerid][pDependence] > 100)
	    PlayerInfo[playerid][pDependence] = 100;

    pTemp[playerid][pDemolitionTime] = 0;

	static const str_size[] = "????????? ???????? \"%s\".";
	new mes[sizeof(str_size) - 2 + 32 + 1];
	format(mes, sizeof(mes), str_size, inventory_items[item][itemName]);
	cmd::ame(playerid, mes);
	return 1;
}

stock ShowFurnitureList(playerid, list = 0)
{
	#if !defined MAX_FURNITURE_LIST
	    #define MAX_FURNITURE_LIST 35
	#endif

    if(pTemp[playerid][pHouseFurniture] == -1 || (IsPlayerHouseOutside(playerid, pTemp[playerid][pHouseFurniture], 5.0) == 0 && 0 == IsPlayerHouseInside(playerid, pTemp[playerid][pHouseFurniture])))
    	return 1;

	new houseid = pTemp[playerid][pHouseFurniture],
		furnitures = GetHouseFurnitures(houseid);

	if(furnitures == 0)
 		return SendErrorMessage(playerid, "? ???? ??? ????????? ??????.");

	if(list < 0)
	    return 1;

	if((furnitures-1) / MAX_FURNITURE_LIST < list)
	    return 1;

	SetPVarInt(playerid, #furniture_list, list);

	new start_itter =
		MAX_FURNITURE_LIST * list;

	new count = 0,
		str[7 + (72 * MAX_FURNITURE_LIST)];

	if(list != 0)
	    strcat(str, "<<\n");

	for(new i; i < MAX_FURNITURE; i++)
	{
	    if(HouseFurniture[houseid][i][fOn] == 0 || !IsValidDynamicObject(HouseFurniture[houseid][i][fObject]))
			continue;

        if(count >= start_itter + MAX_FURNITURE_LIST)
        {
            strcat(str, ">>");
		    break;
		}

		if(count >= start_itter)
			format(str, sizeof(str), "%s%s%i: %s\n", str, (HouseFurniture[houseid][i][fInterior] != HouseInfo[houseid][hExitInt])?("{C3C3C3}"):(""), i+1, HouseFurniture[houseid][i][fName]);

		count++;
	}

	new title[32];
    format(title, sizeof(title), "?????: %i / %i. ???????: %i", furnitures, GetMaxPlayerFurniture(playerid), GetHouseOutsideFurnitures(houseid));
	Dialog_Show(playerid, FurnitureList, DIALOG_STYLE_LIST, title, str, "???????", "???????");
	return 1;
}

stock ShowHouseInventory(playerid, houseid)
{
    new mes[MAX_HOUSE_INVENTORY * 32] = "{ffffff}???????\t{ffffff}??????????";
	for(new i = 0; i < MAX_HOUSE_INVENTORY; i++)
	{
		if(HouseInfo[houseid][hInv][i] == 0)
			format(mes, sizeof(mes), "%s\n{C3C3C3}?????? ????\t", mes);
		else
			format(mes, sizeof(mes), "%s\n%s\t%i", mes, inventory_items[HouseInfo[houseid][hInv][i]][itemName], HouseInfo[houseid][hInvAmount][i]);
	}
	Dialog_Show(playerid, InventoryOther, DIALOG_STYLE_TABLIST_HEADERS, "{33AA33}???????? ??????", mes, "?????", "???????");
	return 1;
}

stock GetArrestID(playerid)
{
	if(0 != PlayerToPoint(5.0, playerid, 1452.8669,-1786.1542,2340.5710))
	    return JEFF_JAIL;//54th

	if(0 != PlayerToPoint(5.0, playerid, -133.6486,1336.4399,845.0739))
	    return SASD_JAIL;//sasd

	if(0 != PlayerToPoint(5.0, playerid, 2757.4048,-1115.1128,1028.5006))
	    return LSPD_JAIL;//LSPD HQ

	return 0;
}

stock IsPlayerAtCarfix(playerid)
{
    if(PlayerInfo[playerid][pFaction] == 0)
        return 0;

	for(new i; i != sizeof(carfix_faction); i++)
	{
	    if(carfix_faction[i][fixFaction] != PlayerInfo[playerid][pFaction] || GetWorld(playerid) != carfix_faction[i][fixVW] || GetInterior(playerid) != carfix_faction[i][fixInt])
	        continue;

 		if(0 != PlayerToPoint(20.0, playerid, carfix_faction[i][fixX], carfix_faction[i][fixY], carfix_faction[i][fixZ]))
			return 1;
	}
	return 0;
}

stock SetPlayerBuyInterior(playerid, step, houseid = 0)
{
	if(step == 0)
	{
	    if(pTemp[playerid][pInteriorBiz] == 0)
			return 1;

	    TogglePlayerSpectating(playerid, 0);
		DestroyPlayerObject(playerid, pTemp[playerid][pInteriorObj]);
  		HideMenuForPlayer(buy_interior, playerid);
		return 1;
	}

    new bizid = -1;
	if((bizid = GetNearBizInside(playerid)) == -1 || BizInfo[bizid][bizType] != BIZ_BUILD)
	    return SendErrorMessage(playerid, "?? ?????? ?????????? ? ???????????? ????????.");

	new start = -1;
    for(new i = 0; i < MAX_INTERIORS; i++)
	{
		if(0 == AdminTeles[i][telesOn] || HouseInfo[houseid][hClass] != AdminTeles[i][telesType])
			continue;

		start = i;
		break;
	}

	if(start == -1)
	    return SendErrorMessage(playerid, "??? ?????? ???? ?? ??????? ?????????.");

	SavePlayerPos(playerid);
    GameTextForPlayer(playerid, "_", 1, 4);
	TogglePlayerSpectating(playerid, 1);

    pTemp[playerid][pInteriorBiz] = bizid+1;
    pTemp[playerid][pInteriorHouse] = houseid+1;
    pTemp[playerid][pInteriorID] = start;

    pTemp[playerid][pInteriorObj] =
		CreatePlayerObject(playerid, 19300, AdminTeles[start][telesPosX], AdminTeles[start][telesPosY], AdminTeles[start][telesPosZ], 0.0, 0.0, 0.0);
	AttachCameraToPlayerObject(playerid, pTemp[playerid][pInteriorObj]);

	SetInterior(playerid, AdminTeles[start][telesInt]);
	SetWorld(playerid, 5000 + playerid);

	ShowMenuForPlayer(buy_interior, playerid);
	return 1;
}

stock GivePlayerTicket(officerid, playerid, amount, reason[])
{
    new id = -1;
	for(new i; i != MAX_PLAYER_TICKETS; i++)
	{
		if(pTickets[playerid][i][tID] != 0)
		    continue;

		id = i;
		break;
	}

	if(id == -1)
	    return 0;

    new query[96 + 11 + MAX_PLAYER_NAME + 1 + 64 + 24 + 1];
    mysql_format(dbHandle, query, sizeof(query), "INSERT INTO `tickets` (userid, officer, faction, amount, reason, date) VALUES (%i, '%e', %i, %i, '%e', '%s')", PlayerInfo[playerid][pID], GetNameEx(officerid), PlayerInfo[officerid][pFaction], amount, reason, GetFullDate());
	mysql_tquery(dbHandle, query, "OnTicketInsert", "ii", playerid, id);

	format(pTickets[playerid][id][tOfficer], MAX_PLAYER_NAME, "%s", GetNameEx(officerid));
    format(pTickets[playerid][id][tReason], MAX_PLAYER_NAME, "%s", reason);
    format(pTickets[playerid][id][tDate], 24, "%s", GetFullDate());
    pTickets[playerid][id][tFaction] = PlayerInfo[officerid][pFaction];
    pTickets[playerid][id][tAmount] = amount;
	return 1;
}

stock GiveVehicleTicket(officerid, vehicle, amount, reason[])
{
    new id = -1;
	for(new i; i != MAX_CAR_TICKETS; i++)
	{
		if(vTickets[vehicle][i][tID] != 0)
		    continue;

		id = i;
		break;
	}

	if(id == -1)
	    return 0;

    new query[97 + 11 + MAX_PLAYER_NAME + 1 + 64 + 24 + 1];
    mysql_format(dbHandle, query, sizeof(query), "INSERT INTO `tickets` (vehicle, officer, faction, amount, reason, date) VALUES (%i, '%e', %i, %i, '%e', '%s')", VehicleInfo[vehicle][carID], GetNameEx(officerid), PlayerInfo[officerid][pFaction], amount, reason, GetFullDate());
	mysql_tquery(dbHandle, query, "OnTicketVehicleInsert", "ii", vehicle, id);

	format(vTickets[vehicle][id][tOfficer], MAX_PLAYER_NAME, "%s", GetNameEx(officerid));
    format(vTickets[vehicle][id][tReason], MAX_PLAYER_NAME, "%s", reason);
    format(vTickets[vehicle][id][tDate], 24, "%s", GetFullDate());
    vTickets[vehicle][id][tFaction] = PlayerInfo[officerid][pFaction];
    vTickets[vehicle][id][tAmount] = amount;
	return 1;
}

stock DeleteVehicleTickets(vehicle)
{
    for(new i = 0; i < MAX_CAR_TICKETS; i++)
    {
		vTickets[vehicle][i][tID] = 0;
		vTickets[vehicle][i][tOfficer] = EOS;
		vTickets[vehicle][i][tReason] = EOS;
		vTickets[vehicle][i][tDate] = EOS;
	    vTickets[vehicle][i][tFaction] = 0;
	    vTickets[vehicle][i][tAmount] = 0;
	}

	new query[128];
  	mysql_format(dbHandle, query, sizeof(query), "DELETE FROM `tickets` WHERE `vehicle`='%i'", VehicleInfo[vehicle][carID]);
	mysql_tquery(dbHandle, query);
	return 1;
}

stock isNumeric(const string[])
{
  new length = strlen(string);

  if (length == 0)
  	return 0;

  for (new i = 0; i < length; i++)
  {
      if (
            (string[i] > '9' || string[i] < '0' && string[i]!='-' && string[i]!='+') // Not a number,'+' or '-'
             || (string[i]=='-' && i!=0)                                             // A '-' but not at first.
             || (string[i]=='+' && i!=0)                                             // A '+' but not at first.
         ) return false;
    }
  if (length==1 && (string[0]=='-' || string[0]=='+')) return false;
  return true;
}

stock GetPlayerAcceptAction(playerid)
{
	if(GetPVarInt(playerid, #accept_time) < gettime())
	    return 1;

	if(pTemp[playerid][pGreetPlayer] != INVALID_PLAYER_ID)
	{
	    new userid = pTemp[playerid][pGreetPlayer],
	    type = pTemp[playerid][pGreetType];

	    pTemp[playerid][pGreetPlayer] = INVALID_PLAYER_ID;
		pTemp[playerid][pGreetType] = 0;

		if(0 == IsPlayerLogged(userid))
		    return SendErrorMessage(playerid, "????? ???????????? ??? ??????????? ?? ? ????.");

		if(!PlayerNearPlayer(1.0, playerid, userid))
			return SendNotNearPlayer(playerid);

		StopPlayerAnims(playerid);
		StopPlayerAnims(userid);

		SetPlayerFacePlayer(playerid, userid);
		SetPlayerFacePlayer(userid, playerid);
		if(type == 1)
		{
			ApplyAnimation(playerid, "KISSING", "Playa_Kiss_02", 2.0, 0, 0, 1, 0, 0, 1);
			ApplyAnimation(userid, "KISSING", "Playa_Kiss_02", 2.0, 0, 0, 1, 0, 0, 1);
		}
		else if(type == 2)
		{
			ApplyAnimation(playerid,"GANGS","hndshkfa_swt", 2.0, 0, 0, 0, 0, 0, 1);
			ApplyAnimation(userid,"GANGS","hndshkfa_swt", 2.0, 0, 0, 0, 0, 0, 1);
		}
		else if(type == 3)
		{
			ApplyAnimation(playerid,"GANGS","hndshkba", 2.0, 0, 0, 0, 0, 0, 1);
			ApplyAnimation(userid,"GANGS","hndshkba", 2.0, 0, 0, 0, 0, 0, 1);
		}
		else if(type == 4)
		{
			ApplyAnimation(playerid,"GANGS","hndshkca", 2.0, 0, 0, 0, 0, 0, 1);
			ApplyAnimation(userid,"GANGS","hndshkca", 2.0, 0, 0, 0, 0, 0, 1);
		}
		else if(type == 5)
		{
			ApplyAnimation(playerid,"GANGS","hndshkcb", 2.0, 0, 0, 0, 0, 0, 1);
			ApplyAnimation(userid,"GANGS","hndshkcb", 2.0, 0, 0, 0, 0, 0, 1);
		}
		else if(type == 6)
		{
			ApplyAnimation(playerid,"GANGS","hndshkda", 2.0, 0, 0, 0, 0, 0, 1);
			ApplyAnimation(userid,"GANGS","hndshkda", 2.0, 0, 0, 0, 0, 0, 1);
		}
		else if(type == 7)
		{
			ApplyAnimation(playerid,"GANGS","hndshkea", 2.0, 0, 0, 0, 0, 0, 1);
			ApplyAnimation(userid,"GANGS","hndshkea", 2.0, 0, 0, 0, 0, 0, 1);
		}
		else if(type == 8)
		{
			ApplyAnimation(playerid,"GANGS","hndshkaa", 2.0, 0, 0, 0, 0, 0, 1);
			ApplyAnimation(userid,"GANGS","hndshkaa", 2.0, 0, 0, 0, 0, 0, 1);
		}
		else if(type == 9)
		{
			ApplyAnimation(playerid,"GANGS","prtial_hndshk_biz_01", 2.0, 0, 0, 0, 0, 0, 1);
			ApplyAnimation(userid,"GANGS","prtial_hndshk_biz_01", 2.0, 0, 0, 0, 0, 0, 1);
		}
		return 1;
	}
    else if(pTemp[playerid][pCarPlayer] != INVALID_PLAYER_ID)
	{
  		new query[128];
    	mysql_format(dbHandle, query, sizeof(query), "SELECT `id` FROM `cars` WHERE `owner` = '%i'", PlayerInfo[playerid][pID]);
		mysql_tquery(dbHandle, query, "BuyVehicleAtPlayer", "i", playerid);
   		return 1;
	}
    else if(pTemp[playerid][pHealPlayer] != INVALID_PLAYER_ID)
	{
	    new userid = pTemp[playerid][pHealPlayer];
	    pTemp[playerid][pHealPlayer] = INVALID_PLAYER_ID;

	    if(0 == IsPlayerLogged(userid))
		    return SendErrorMessage(playerid, "????? ???????????? ??? ??????? ?? ? ????.");

        if(0 != IsPlayerInjured(playerid))
		    return SendErrorMessage(playerid, "?? ?????????? ? ?????? ???????/??????.");

		SendClientMessageEx(playerid, COLOR_TOMATO, "?? ???? ???????? %s.", GetNameWithMask(userid));
		SendClientMessageEx(userid, COLOR_TOMATO, "?? ???????? %s.", GetNameWithMask(playerid));

		SetPlayerHealth(playerid, 100.0);
		return 1;
	}
	else if(pTemp[playerid][pWepPlayer] != INVALID_PLAYER_ID)
	{
		new userid = pTemp[playerid][pWepPlayer],
		    price = pTemp[playerid][pWepPrice];

        pTemp[playerid][pWepPlayer] = INVALID_PLAYER_ID;
		if(0 == IsPlayerLogged(userid))
		    return SendErrorMessage(playerid, "????? ???????????? ??? ???????? ?? ?????? ?? ? ????.");

		if(GetCash(playerid) < price)
		    return SendNotCash(playerid);

		GiveCash(playerid, -price);
		PlayerInfo[playerid][pWepLic] = 1;
		PlayerInfo[playerid][pWepWarns] = 0;
        PlayerInfo[playerid][pWepCount] = 3;

        new query[168];
		mysql_format(dbHandle, query, sizeof(query), "UPDATE `users` SET `wep_count`='3',`weplic`='1',`wepwarns`='0',`wep_officer`='%s',`wep_data`='%s',`wep_price`='%i' WHERE `id` = '%i'", GetNameEx(userid), GetFullDate(), price, PlayerInfo[playerid][pID]);
		mysql_tquery(dbHandle, query);

		SendClientMessageEx(userid, -1, "%s ????? ? ??? ???????? ?? ?????? ?? $%i.", GetNameEx(playerid), price);
        SendClientMessageEx(playerid, -1, "?? ????????? ???????? ?? ?????? ? %s ?? $%i.", GetNameEx(userid), price);
		return 1;
	}
	else if(pTemp[playerid][pHirePlayer] != INVALID_PLAYER_ID)
	{
        new userid = pTemp[playerid][pHirePlayer];
        pTemp[playerid][pHirePlayer] = INVALID_PLAYER_ID;

        if(0 == IsPlayerLogged(userid))
		    return SendErrorMessage(playerid, "????? ???????????? ??? ?????? ? ??????? ?? ? ????.");

        if(!PlayerNearPlayer(3.0, playerid, userid))
			return SendNotNearPlayer(playerid);

        new bizid;
		if ((bizid = GetNearBizOutside(playerid)) == -1)
		    return SendErrorMessage(playerid, "????? ? ???? ??? ???????.");

		if(BizInfo[bizid][bizOwnerID] != PlayerInfo[userid][pID])
		    return SendErrorMessage(playerid, "?? ?????? ?????????? ????? ? ?????? ????????????.");

		PlayerInfo[playerid][pWorkOn] = BizInfo[bizid][bizID];
		SCM(playerid, -1, "?? ??????? ??????????? ? ??????.");
		SendClientMessageEx(userid, COLOR_WHITE, "%s ??????(-?) ???? ??????????? ? ??????.",GetNameEx(playerid));
		return 1;
	}
	else if(pTemp[playerid][pFactionPlayer] != INVALID_PLAYER_ID)
	{
		new targetid = pTemp[playerid][pFactionPlayer];
		pTemp[playerid][pFactionPlayer] = INVALID_PLAYER_ID;

        if(0 == IsPlayerLogged(targetid))
		    return SendErrorMessage(playerid, "????? ???????????? ??? ???????? ?? ??????? ?? ? ????.");

        if(!isLeader(targetid))
			return 1;

	    if(Factions[PlayerInfo[targetid][pFaction]][fJoinRank] == 0)
			return SCM(playerid, COLOR_GREY, "?????????? ?????????! ????? ? ???????? ? ????????? ?? ?????????.");

		PlayerInfo[playerid][pFaction] = PlayerInfo[targetid][pFaction];
		PlayerInfo[playerid][pRank] = Factions[PlayerInfo[targetid][pFaction]][fJoinRank];
		PlayerInfo[playerid][pBadgeNumber] = randomEx(23465, 99999);

		SendClientMessageEx(playerid, COLOR_WHITE, "???????????! ?? ?????????????? ? %s.", Factions[PlayerInfo[targetid][pFaction]][fName]);
		SendFactionMessageF(PlayerInfo[targetid][pFaction], COLOR_LIGHTBLUE, "[Faction] %s ?????? ??????????? %s ? ????????????? ? ???????.", GetNameEx(playerid), GetNameEx(targetid));
		return 1;
	}
	else if(RefillOffer[playerid] != INVALID_PLAYER_ID)
	{
		new userid = RefillOffer[playerid],
		    price = RefillPrice[playerid],
			vehicle = GetPlayerVehicleID(playerid);

        if(0 == IsPlayerLogged(userid))
		    return SendErrorMessage(playerid, "????? ???????????? ??? ???????? ?? ? ????.");

        RefillPrice[playerid] = 0;
		RefillOffer[playerid] = INVALID_PLAYER_ID;

		if(!IsDriver(playerid))
			return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ?????????? ? ?????????? ? ???????? ????????.");

		if(!PlayerNearPlayer(6.0, playerid, userid))
			return SendNotNearPlayer(playerid);

		if(GetCash(playerid) < price)
			return SendNotCash(playerid);

		GiveCash(playerid, -price);
		GiveCash(userid, price);

		new mes[128];
		format(mes, sizeof(mes), "????????? ????? ?? ???????? ?????????? ?? %s ?? $%i.", GetNameWithMask(userid), price);
		cmd::me(playerid, mes);

		VehicleInfo[vehicle][carFuel] = 100;
		return 1;
	}
	else if(pTemp[playerid][pServePlayer] != INVALID_PLAYER_ID && pTemp[playerid][pServeType] == 5)
	{
		new mechanicid = pTemp[playerid][pServePlayer],
		    vehicle = GetPVarInt(playerid, #tow_car);

		pTemp[playerid][pServePlayer] = INVALID_PLAYER_ID;
        pTemp[playerid][pServeType] = 0;

        if(0 == IsPlayerLogged(mechanicid))
		    return SendErrorMessage(playerid, "????? ???????????? ??? ?????????? ?? ? ????.");

        if(PlayerInfo[mechanicid][pJob] != JOB_MECHANIC)
			return SCM(playerid, COLOR_LIGHTRED, "?????? ????? ??? ?? ???????.");

		if(!IsDriver(mechanicid) || !IsATowTruck(GetPlayerVehicleID(mechanicid)))
			return SCM(playerid, COLOR_LIGHTRED, "??????? ?????? ???? ? ?????????? ? ???????? ????????.");

		if(!PlayerNearPlayer(7.0, playerid, mechanicid))
			return SendNotNearPlayer(playerid);

		if(IsPlayerInAnyVehicle(playerid))
			return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ?????????? ??? ??????????.");

        if(GetNearVehicle(mechanicid, 7.0, vehicle) == 0)
            return SendErrorMessage(playerid, "???? ?????????? ?????? ?????????? ????? ??? ???????.");

        if(IsABoat(vehicle) || IsAPlane(vehicle) || IsAHelicopter(vehicle) || IsABiker(vehicle))
			return SCM(playerid, COLOR_GREY,"?????? ????????? ?????? ????????.");

		new mes[128];
		format(mes, sizeof(mes), "??????(-?) ???????? ?? ??????? %s ? ????????(-?) ???????? %s.", GetNameWithMask(mechanicid), VehicleNames[GetVehicleModel(vehicle)-400]);
		cmd::me(playerid, mes);

		AttachTrailerToVehicle(vehicle, GetPlayerVehicleID(mechanicid));
		return 1;
	}
	else if(pTemp[playerid][pServePlayer] != INVALID_PLAYER_ID && (pTemp[playerid][pServeType] > 0 && pTemp[playerid][pServeType] < 5))
	{
		new vehicle = GetPlayerVehicleID(playerid),
			mechanicid = pTemp[playerid][pServePlayer],
			type = pTemp[playerid][pServeType],
			vehid = GetPlayerVehicleID(mechanicid);

        pTemp[playerid][pServePlayer] = INVALID_PLAYER_ID;
        pTemp[playerid][pServeType] = 0;

        if(0 == IsPlayerLogged(mechanicid))
		    return SendErrorMessage(playerid, "????? ???????????? ??? ?????? ???????? ?? ? ????.");

        if(PlayerInfo[mechanicid][pJob] != JOB_MECHANIC)
			return SCM(playerid, COLOR_LIGHTRED, "?????? ????? ??? ?? ???????.");

		if(!IsDriver(mechanicid) || !IsATowTruck(vehid))
			return SCM(playerid, COLOR_LIGHTRED, "??????? ?????? ???? ? ?????????? ? ???????? ????????.");

		if(!IsDriver(playerid))
			return SCM(playerid, COLOR_LIGHTRED, "?? ?????? ???? ?? ????? ????????.");

		if(!PlayerNearPlayer(6.0, playerid, mechanicid))
			return SendNotNearPlayer(playerid);

        if(VehicleInfo[vehicle][carFaction] != 0 && type != 1 && type != 2)
			return SCM(playerid, COLOR_LIGHTRED, "?????? ????????? ??????????? ??????????????? ??????????.");

		new mes[128];
		switch(type)
		{
		    case 1: format(mes, sizeof(mes), "????????? ????? ??? ?????????? ????? ??? ?????????? %s.", VehicleNames[GetVehicleModel(vehicle)-400]);
		    case 2: format(mes, sizeof(mes), "????????? ????? ??? ?????????? ???????? ????? ??? ??????????? %s.", VehicleNames[GetVehicleModel(vehicle)-400]);
		    case 3: format(mes, sizeof(mes), "????????? ????? ??? ??????? ??????????? ??? ??????????? %s.", VehicleNames[GetVehicleModel(vehicle)-400]);
		    case 4: format(mes, sizeof(mes), "????????? ????? ??? ?????????? ??????????? ????? %s.", VehicleNames[GetVehicleModel(vehicle)-400]);
		}
		cmd::me(playerid, mes);

		RepairOffer[mechanicid] = playerid;
		RepairToVehicle[mechanicid] = vehicle;
		RepairService[mechanicid] = type;
		RepairTowTruck[mechanicid] = vehid;

		ShowJobMessage(mechanicid, "~h~~p~PULL OUT YOUR SPRAYCAN.");
		return 1;
	}
	else if(pTemp[playerid][pHousePlayer] != INVALID_PLAYER_ID)
	{
	    new userid = pTemp[playerid][pHousePlayer],
	        price = pTemp[playerid][pHousePrice],
	        houseid = pTemp[playerid][pHouseHouse];

        pTemp[playerid][pHouseHouse] = -1;
		pTemp[playerid][pHousePrice] = 0;
		pTemp[playerid][pHousePlayer] = INVALID_PLAYER_ID;

        if(0 == IsPlayerLogged(userid))
		    return SendErrorMessage(playerid, "????? ???????????? ??? ?????? ??? ?? ? ????.");

		if(houseid == -1)
		    return SendErrorMessage(playerid, "??? ????? ?? ????????? ?????? ???.");

        if(price < 0 || price > 100000000)
	    	return SendErrorMessage(playerid, "???????????? ????? ???????.");

		if(!PlayerNearPlayer(3.0, playerid, userid))
			return SendNotNearPlayer(playerid);

	    if(IsPlayerHouseOutside(playerid, houseid) == 0)
	        return SendErrorMessage(playerid, "?? ?????? ?????????? ????? ????, ??????? ?????? ??????????.");

		if(HouseInfo[houseid][hOwnerID] != PlayerInfo[userid][pID])
	    	return SendErrorMessage(playerid, "?????? ??? ?? ??????????? %s.", GetNameEx(userid));

		if(GetCash(playerid) < price)
		    return SendNotCash(playerid);

        if(GetPlayerHouses(playerid) >= GetMaxPlayerHouse(playerid))
	    	return SendErrorMessage(playerid, "?? ?? ?????? ?????????? ?????? ?????.");

		HouseInfo[houseid][hOwnerID] = PlayerInfo[playerid][pID];
        format(HouseInfo[houseid][hOwner], MAX_PLAYER_NAME, GetNameEx(playerid));

		GiveCash(playerid, -price);
		GiveCash(userid, price);

        for(new i = 0; i != MAX_GARAGES; i++)
		{
		    if(0 == GarageInfo[i][garageID] || GarageInfo[i][garageHouse] != HouseInfo[houseid][hID])
		        continue;

			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "?????? ? ????? ??? ???????? ????? ID: %i.", i);
	        GarageInfo[i][garageOwner] = PlayerInfo[playerid][pID];

	        new query[128];
			mysql_format(dbHandle, query, sizeof(query), "UPDATE `garage` SET `owner`='%i' WHERE `id`='%i'", GarageInfo[i][garageOwner], GarageInfo[i][garageID]);
			mysql_tquery(dbHandle, query);
		}

		Save_House(houseid);

		SendClientMessageEx(playerid, COLOR_INFO, "?? ????????? ??? ? ?????? %s ?? $%i.", GetNameEx(userid), price);
    	SendClientMessageEx(userid, COLOR_INFO, "%s ???????? ? ??? ??? ?? $%i.", GetNameEx(playerid), price);
    	return 1;
	}
	else if(pTemp[playerid][pRentPlayer] != INVALID_PLAYER_ID)
	{
	    new userid = pTemp[playerid][pRentPlayer],
	        price = pTemp[playerid][pRentPrice];

        pTemp[playerid][pRentPlayer] = INVALID_PLAYER_ID;
		pTemp[playerid][pRentPrice] = 0;

		if(0 == IsPlayerLogged(userid))
		    return SendErrorMessage(playerid, "????? ???????????? ??? ?????????? ??? ?? ? ????.");

        if(!PlayerNearPlayer(3.0, playerid, userid))
			return SendNotNearPlayer(playerid);

		new houseid;

		if ((houseid = GetNearHouseInside(userid)) == -1)
	    	return SendErrorMessage(userid, "?? ?????? ?????????? ?????? ?????? ????.");

		if(HouseInfo[houseid][hOwnerID] != PlayerInfo[userid][pID])
	    	return SendErrorMessage(userid, "?????? ??? ?? ??????????? ???.");

        if(GetCash(playerid) < price)
	    	return SendClientMessageEx(playerid,COLOR_LIGHTRED,"? ??? ??? $%i ??? ??????????????? ??????.", price);

		PlayerInfo[playerid][pRentKey] = HouseInfo[houseid][hID];
		PlayerInfo[playerid][pRentPrice] = price;
		SendClientMessageEx(playerid, COLOR_WHITE, "?? ?????????? ??? ? %s. ?????? ???????? ?? ?????? ??????? $%i.", GetNameWithMask(userid), price);
		SendClientMessage(playerid, COLOR_WHITE, "?? ?????? ? ????? ?????? ?????????? ?? ???? ? ??????? ???????: /unrent.");
		SendClientMessageEx(userid, COLOR_WHITE, "%s ????????? ??? ???. ?????? ???????? ?? ????? ??????? $%i.", GetNameWithMask(playerid), price);

		new query[128];
        format(query, sizeof(query), "UPDATE `users` SET `rent_key`='%i',`rent_price`='%i' WHERE `id`='%i'", PlayerInfo[playerid][pRentKey], PlayerInfo[playerid][pRentPrice], PlayerInfo[playerid][pID]);
		mysql_tquery(dbHandle, query);
		return 1;
	}
	else if(pTemp[playerid][pInterviewPlayer] != INVALID_PLAYER_ID)
	{
		if(PlayerInfo[playerid][pSettings] & togNews)
			return SCM(playerid, COLOR_LIGHTRED, "??????? ???????? ????? ????????? ?? SAN (/tognews).");

		new userid = pTemp[playerid][pInterviewPlayer];
    	pTemp[playerid][pInterviewPlayer] = INVALID_PLAYER_ID;

        if(0 == IsPlayerLogged(userid))
		    return SendErrorMessage(playerid, "????? ???????????? ??? ???????? ?? ? ????.");

		if(!PlayerNearPlayer(3.0, playerid, userid))
			return SendNotNearPlayer(playerid);

    	if(PlayerInfo[userid][pFaction] != SAN)
			return SCM(playerid, COLOR_LIGHTRED, "????? ?????? ???? ????????? ???????????.");

		pTemp[playerid][pInterview] = userid;
		SendClientMessageEx(playerid, 0x33CCFFAA, "?? ??????? ??????????? %s ?? ?????????? ????????.", GetNameWithMask(userid));
    	SCM(playerid,COLOR_WHITE,"??????????? ????????? ??? ??? ??????? ? ????. /exitinterview - ????????? ????????.");

		SendClientMessageEx(userid, 0x33CCFFAA, "%s ??????(-?) ???? ??????????? ?? ?????????? ????????.", GetNameWithMask(playerid));
		return 1;
	}
	return 0;
}

stock PlaceBoombox(playerid)
{
	if(BoomboxInfo[playerid][bUsed] != 0)
		return SendErrorMessage(playerid, "?????? ??????? ????? ?????? ????????.");

	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
		return SCM(playerid, COLOR_LIGHTRED, "?????? ?????????? ??????? ?????.");

	foreach(Player, i)
	{
		if(0 == IsPlayerLogged(i) || BoomboxInfo[i][bUsed] == 0)
		    continue;

		if(IsValidDynamicArea(BoomboxInfo[i][bArea]))
 			return SCM(playerid, COLOR_LIGHTRED, "????? ??? ???-?? ????????? ???? ???????.");
	}

	new id = -1;
	if ((id = GetNearHouseInside(playerid)) != -1 && HouseInfo[id][hRadioOn] != 0)
	    return SCM(playerid, COLOR_LIGHTRED, "? ???? ??? ?????? ?????.");

	else if ((id = GetNearBizInside(playerid)) != -1 && BizInfo[id][bizRadioOn] != 0)
 		return SCM(playerid, COLOR_LIGHTRED, "? ??????? ??? ?????? ?????.");

	if(0 == RemovePlayerItem(playerid, INV_BOOMBOX, 1))
 		return SCM(playerid, COLOR_LIGHTRED, "? ??? ??? ????????.");

	SCM(playerid, COLOR_LIGHTBLUE, "?? ?????????? ???????, ??????????? ??????? N ??? ??????????.");

	GetXYInFrontOfPlayer(playerid, BoomboxInfo[playerid][bPosX], BoomboxInfo[playerid][bPosY], BoomboxInfo[playerid][bPosZ], 1.0);
 	BoomboxInfo[playerid][bInt] = GetInterior(playerid);
  	BoomboxInfo[playerid][bVW] = GetWorld(playerid);
   	BoomboxInfo[playerid][bUsed] = 1;
   	BoomboxInfo[playerid][bUrl] = EOS;

	BoomboxInfo[playerid][bObject] =
		CreateDynamicObject(2226, BoomboxInfo[playerid][bPosX], BoomboxInfo[playerid][bPosY], BoomboxInfo[playerid][bPosZ]-1.0, 0.0, 0.0, 0.0, BoomboxInfo[playerid][bVW], BoomboxInfo[playerid][bInt], -1, 300.0);

	BoomboxInfo[playerid][bArea] =
		CreateDynamicSphere(BoomboxInfo[playerid][bPosX], BoomboxInfo[playerid][bPosY], BoomboxInfo[playerid][bPosZ], 50.0, BoomboxInfo[playerid][bVW], BoomboxInfo[playerid][bInt]);

	pTemp[playerid][pBoombox] = playerid;
	StopAudioStreamForPlayer(playerid);
	return 1;
}

stock ShowBoomboxMenu(playerid)
{
	if(BoomboxInfo[playerid][bUsed] == 0 || Boombox_Nearest(playerid) == 0)
		return 1;

	Dialog_Show(playerid, BoomBox, DIALOG_STYLE_LIST, "???????", "??????? ????????????\n??? ???????????\n????????? ???????\n??????? ???????", "???????", "??????");
	return 1;
}

